// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');

    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }
  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
      return func;
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  buffer = new ArrayBuffer(TOTAL_MEMORY);
}
updateGlobalBufferViews();


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
if (HEAPU8[0] !== 255 || HEAPU8[3] !== 0) throw 'Typed arrays 2 must be run on a little-endian system';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;

// === Body ===

var ASM_CONSTS = [function($0, $1) { { Module.print(Pointer_stringify($0, $1)); } },
 function($0, $1) { { throw 'error: ' + Pointer_stringify($0, $1); } }];

function _emscripten_asm_const_iii(code, a0, a1) {
 return ASM_CONSTS[code](a0, a1);
}



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 7680;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([0,0,3,0,100,105,115,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,4,0,116,114,117,101,0,0,5,0,101,114,114,111,114,0,0,0,0,0,0,0,0,0,15,1,0,0,0,0,5,0,0,0,0,0,0,0,0,0,5,0,112,114,105,110,116,0,0,0,0,0,0,0,0,0,15,1,0,0,0,0,6,0,0,0,0,0,0,0,0,0,6,0,105,109,112,111,114,116,0,0,0,0,0,0,0,0,1,1,0,0,0,0,7,0,0,0,0,0,0,0,0,0,1,0,33,0,0,0,0,0,1,1,0,0,0,0,8,0,0,0,0,0,0,0,0,0,2,0,61,61,0,0,0,0,2,1,0,0,0,0,9,0,0,0,0,0,0,0,0,0,2,0,33,61,0,0,0,0,2,1,0,0,0,0,10,0,0,0,0,0,0,0,0,0,1,0,60,0,0,0,0,0,2,1,0,0,0,0,11,0,0,0,0,0,0,0,0,0,2,0,60,61,0,0,0,0,2,1,0,0,0,0,14,0,0,0,0,0,0,0,0,0,1,0,62,0,0,0,0,0,2,1,0,0,0,0,15,0,0,0,0,0,0,0,0,0,2,0,62,61,0,0,0,0,2,1,0,0,0,0,16,0,0,0,0,0,0,0,0,0,2,0,105,115,0,0,0,0,2,1,0,0,0,0,17,0,0,0,0,0,0,0,0,0,5,0,112,97,114,115,101,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,18,0,0,0,0,0,0,0,0,0,4,0,114,101,112,114,0,0,2,1,0,0,0,0,19,0,0,0,0,0,0,0,0,0,3,0,111,114,100,0,0,0,1,1,0,0,0,0,20,0,0,0,0,0,0,0,0,0,3,0,99,104,114,0,0,0,1,1,0,0,0,0,21,0,0,0,0,0,0,0,0,0,3,0,98,105,110,0,0,0,1,1,0,0,0,0,22,0,0,0,0,0,0,0,0,0,3,0,111,99,116,0,0,0,1,1,0,0,0,0,23,0,0,0,0,0,0,0,0,0,3,0,104,101,120,0,0,0,1,1,0,0,0,0,24,0,0,0,0,0,0,0,0,0,3,0,108,101,110,0,0,0,1,1,0,0,0,0,25,0,0,0,0,0,0,0,0,0,4,0,116,97,105,108,0,0,1,1,0,0,0,0,26,0,0,0,0,0,0,0,0,0,5,0,99,111,110,115,116,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,27,0,0,0,0,0,0,0,0,0,2,0,43,43,0,0,0,0,3,1,0,0,0,0,28,0,0,0,0,0,0,0,0,0,3,0,115,117,98,0,0,0,3,1,0,0,0,0,29,0,0,0,0,0,0,0,0,0,4,0,112,117,115,104,0,0,3,1,0,0,0,0,30,0,0,0,0,0,0,0,0,0,3,0,112,111,112,0,0,0,2,1,0,0,0,0,31,0,0,0,0,0,0,0,0,0,1,0,38,0,0,0,0,0,2,1,0,0,0,0,32,0,0,0,0,0,0,0,0,0,1,0,124,0,0,0,0,0,2,1,0,0,0,0,33,0,0,0,0,0,0,0,0,0,1,0,126,0,0,0,0,0,2,1,0,0,0,0,34,0,0,0,0,0,0,0,0,0,2,0,38,126,0,0,0,0,2,1,0,0,0,0,35,0,0,0,0,0,0,0,0,0,4,0,105,116,101,114,0,0,1,1,0,0,0,0,36,0,0,0,0,0,0,0,0,0,5,0,112,97,105,114,115,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,40,0,0,0,0,0,0,0,0,0,3,1,0,0,0,0,41,0,0,0,0,0,0,0,0,0,5,0,114,97,110,103,101,0,0,0,0,0,0,0,0,0,15,1,0,0,0,0,42,0,0,0,0,0,0,0,0,0,3,0,109,97,112,0,0,0,2,1,0,0,0,0,43,0,0,0,0,0,0,0,0,0,6,0,102,105,108,116,101,114,0,0,0,0,0,0,0,0,2,1,0,0,0,0,44,0,0,0,0,0,0,0,0,0,6,0,114,101,100,117,99,101,0,0,0,0,0,0,0,0,15,1,0,0,0,0,45,0,0,0,0,0,0,0,0,0,3,0,97,110,121,0,0,0,2,1,0,0,0,0,46,0,0,0,0,0,0,0,0,0,3,0,97,108,108,0,0,0,2,1,0,0,0,0,47,0,0,0,0,0,0,0,0,0,6,0,114,101,112,101,97,116,0,0,0,0,0,0,0,0,2,1,0,0,0,0,48,0,0,0,0,0,0,0,0,0,3,0,122,105,112,0,0,0,5,0,99,104,97,105,110,0,0,0,0,0,0,0,0,0,15,1,0,0,0,0,49,0,0,0,0,0,0,0,0,0,4,0,116,97,107,101,0,0,2,1,0,0,0,0,50,0,0,0,0,0,0,0,0,0,4,0,100,114,111,112,0,0,2,1,0,0,0,0,51,0,0,0,0,0,0,0,0,0,3,0,109,105,110,0,0,0,15,1,0,0,0,0,52,0,0,0,0,0,0,0,0,0,3,0,109,97,120,0,0,0,15,1,0,0,0,0,53,0,0,0,0,0,0,0,0,0,7,0,114,101,118,101,114,115,101,0,0,0,0,0,0,0,1,1,0,0,0,0,54,0,0,0,0,0,0,0,0,0,4,0,115,111,114,116,0,0,1,1,0,0,0,0,55,0,0,0,0,0,0,0,0,0,1,0,32,0,0,0,0,0,3,0,115,116,114,0,0,0,1,1,0,0,0,0,220,0,0,0,0,0,0,0,0,0,4,0,102,105,110,100,0,0,2,1,0,0,0,0,221,0,0,0,0,0,0,0,0,0,7,0,114,101,112,108,97,99,101,0,0,0,0,0,0,0,3,1,0,0,0,0,222,0,0,0,0,0,0,0,0,0,5,0,115,112,108,105,116,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,223,0,0,0,0,0,0,0,0,0,4,0,106,111,105,110,0,0,2,1,0,0,0,0,224,0,0,0,0,0,0,0,0,0,3,0,112,97,100,0,0,0,3,1,0,0,0,0,225,0,0,0,0,0,0,0,0,0,5,0,115,116,114,105,112,0,0,0,0,0,0,0,0,0,3,1,0,0,0,0,226,0,0,0,0,0,0,0,0,0,15,1,0,0,0,0,227,0,0,0,0,0,0,0,0,0,3,0,102,110,95,0,0,0,1,1,0,0,0,0,228,0,0,0,0,0,0,0,0,0,4,0,98,105,110,100,0,0,15,1,0,0,0,0,229,0,0,0,0,0,0,0,0,0,1,0,64,0,0,0,0,0,2,1,0,0,0,0,230,0,0,0,0,0,0,0,0,0,3,0,116,98,108,0,0,0,2,1,0,0,0,0,231,0,0,0,0,0,0,0,0,0,3,0,108,101,116,0,0,0,4,0,101,108,115,101,0,0,3,0,97,110,100,0,0,0,2,0,111,114,0,0,0,0,8,0,99,111,110,116,105,110,117,101,0,0,0,0,0,0,5,0,98,114,101,97,107,0,0,0,0,0,0,0,0,0,6,0,114,101,116,117,114,110,0,0,0,0,0,0,0,0,2,0,102,110,0,0,0,0,4,0,116,121,112,101,0,0,2,0,105,102,0,0,0,0,5,0,119,104,105,108,101,0,0,0,0,0,0,0,0,0,3,0,102,111,114,0,0,0,3,0,110,105,108,0,0,0,1,0,95,0,0,0,0,0,1,0,61,0,0,0,0,0,1,0,58,0,0,0,0,0,1,0,46,0,0,0,0,0,2,0,45,62,0,0,0,0,2,0,46,46,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,99,100,97,116,97,0,0,0,0,0,0,0,0,0,3,0,105,110,102,0,0,0,1,0,69,0,0,0,0,0,2,0,80,73,0,0,0,0,3,0,110,117,109,0,0,0,1,1,0,0,0,0,14,1,0,0,0,0,0,0,0,0,1,0,43,0,0,0,0,0,2,1,0,0,0,0,15,1,0,0,0,0,0,0,0,0,1,0,45,0,0,0,0,0,2,1,0,0,0,0,16,1,0,0,0,0,0,0,0,0,1,0,42,0,0,0,0,0,2,1,0,0,0,0,17,1,0,0,0,0,0,0,0,0,1,0,47,0,0,0,0,0,2,1,0,0,0,0,18,1,0,0,0,0,0,0,0,0,3,0,97,98,115,0,0,0,1,1,0,0,0,0,19,1,0,0,0,0,0,0,0,0,5,0,102,108,111,111,114,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,20,1,0,0,0,0,0,0,0,0,4,0,99,101,105,108,0,0,1,1,0,0,0,0,21,1,0,0,0,0,0,0,0,0,2,0,47,47,0,0,0,0,2,1,0,0,0,0,22,1,0,0,0,0,0,0,0,0,1,0,37,0,0,0,0,0,2,1,0,0,0,0,23,1,0,0,0,0,0,0,0,0,1,0,94,0,0,0,0,0,2,1,0,0,0,0,24,1,0,0,0,0,0,0,0,0,3,0,108,111,103,0,0,0,2,1,0,0,0,0,25,1,0,0,0,0,0,0,0,0,3,0,99,111,115,0,0,0,1,1,0,0,0,0,26,1,0,0,0,0,0,0,0,0,4,0,97,99,111,115,0,0,1,1,0,0,0,0,27,1,0,0,0,0,0,0,0,0,3,0,115,105,110,0,0,0,1,1,0,0,0,0,28,1,0,0,0,0,0,0,0,0,4,0,97,115,105,110,0,0,1,1,0,0,0,0,29,1,0,0,0,0,0,0,0,0,3,0,116,97,110,0,0,0,1,1,0,0,0,0,30,1,0,0,0,0,0,0,0,0,4,0,97,116,97,110,0,0,2,1,0,0,0,0,31,1,0,0,0,0,0,0,0,0,2,0,60,60,0,0,0,0,2,1,0,0,0,0,32,1,0,0,0,0,0,0,0,0,2,0,62,62,0,0,0,0,2,1,0,0,0,0,33,1,0,0,0,0,0,0,0,0,6,0,114,97,110,100,111,109,0,0,0,0,0,0,0,0,1,1,0,0,0,0,34,1,0,0,0,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,4,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,38,0,0,0,38,0,0,0,0,0,0,0,39,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,129,0,0,0,130,0,0,0,131,0,0,0,132,0,0,0,133,0,0,0,134,0,0,0,135,0,0,0,136,0,0,0,137,0,0,0,138,0,0,0,139,0,0,0,140,0,0,0,141,0,0,0,142,0,0,0,143,0,0,0,144,0,0,0,145,0,0,0,146,0,0,0,147,0,0,0,148,0,0,0,149,0,0,0,150,0,0,0,151,0,0,0,152,0,0,0,153,0,0,0,154,0,0,0,155,0,0,0,156,0,0,0,157,0,0,0,158,0,0,0,159,0,0,0,160,0,0,0,161,0,0,0,162,0,0,0,163,0,0,0,164,0,0,0,165,0,0,0,166,0,0,0,167,0,0,0,168,0,0,0,169,0,0,0,170,0,0,0,171,0,0,0,172,0,0,0,173,0,0,0,174,0,0,0,175,0,0,0,176,0,0,0,177,0,0,0,178,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,182,0,0,0,183,0,0,0,184,0,0,0,185,0,0,0,186,0,0,0,187,0,0,0,188,0,0,0,189,0,0,0,190,0,0,0,191,0,0,0,192,0,0,0,193,0,0,0,194,0,0,0,195,0,0,0,196,0,0,0,197,0,0,0,198,0,0,0,199,0,0,0,200,0,0,0,201,0,0,0,202,0,0,0,203,0,0,0,204,0,0,0,205,0,0,0,206,0,0,0,207,0,0,0,208,0,0,0,209,0,0,0,210,0,0,0,211,0,0,0,212,0,0,0,213,0,0,0,214,0,0,0,215,0,0,0,216,0,0,0,217,0,0,0,218,0,0,0,219,0,0,0,232,0,0,0,233,0,0,0,234,0,0,0,235,0,0,0,236,0,0,0,237,0,0,0,238,0,0,0,239,0,0,0,240,0,0,0,241,0,0,0,242,0,0,0,243,0,0,0,244,0,0,0,245,0,0,0,246,0,0,0,247,0,0,0,248,0,0,0,249,0,0,0,250,0,0,0,251,0,0,0,252,0,0,0,253,0,0,0,254,0,0,0,255,0,0,0,0,1,0,0,1,1,0,0,2,1,0,0,1,1,0,0,3,1,0,0,4,1,0,0,5,1,0,0,6,1,0,0,7,1,0,0,8,1,0,0,9,1,0,0,10,1,0,0,11,1,0,0,12,1,0,0,0,1,0,0,64,0,0,0,13,1,0,0,66,0,0,0,68,0,0,0,68,0,0,0,13,1,0,0,246,0,0,0,238,17,0,0,242,17,0,0,248,17,0,0,253,17,0,0,2,18,0,0,6,18,0,0,11,18,0,0,15,18,0,0,18,18,0,0,22,18,0,0,29,18,0,0,36,18,0,0,43,18,0,0,50,18,0,0,57,18,0,0,63,18,0,0,5,0,0,0,0,0,0,0,0,0,0,0,35,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,1,0,0,37,1,0,0,0,26,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,12,0,0,0,0,0,0,0,0,0,3,123,32,77,111,100,117,108,101,46,112,114,105,110,116,40,80,111,105,110,116,101,114,95,115,116,114,105,110,103,105,102,121,40,36,48,44,32,36,49,41,41,59,32,125,0,123,32,116,104,114,111,119,32,39,101,114,114,111,114,58,32,39,32,43,32,80,111,105,110,116,101,114,95,115,116,114,105,110,103,105,102,121,40,36,48,44,32,36,49,41,59,32,125,0,101,120,112,101,99,116,101,100,32,109,117,32,102,117,110,99,116,105,111,110,0,111,117,116,32,111,102,32,109,101,109,111,114,121,0,37,109,0,105,110,118,97,108,105,100,32,111,112,101,114,97,116,105,111,110,32,37,109,37,114,0,105,110,118,97,108,105,100,32,111,112,101,114,97,116,105,111,110,32,37,114,32,37,109,32,37,114,0,105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,32,105,110,32,37,109,40,0,46,46,0,37,110,114,37,99,32,0,97,116,116,101,109,112,116,101,100,32,116,111,32,109,111,100,105,102,121,32,114,101,97,100,45,111,110,108,121,32,37,115,0,101,120,99,101,101,100,101,100,32,109,97,120,105,109,117,109,32,108,101,110,103,116,104,32,105,110,32,37,115,0,110,111,32,97,114,103,117,109,101,110,116,115,32,112,97,115,115,101,100,32,116,111,32,122,105,112,0,110,111,32,97,114,103,117,109,101,110,116,115,32,112,97,115,115,101,100,32,116,111,32,99,104,97,105,110,0,110,111,32,101,108,101,109,101,110,116,115,32,112,97,115,115,101,100,32,116,111,32,109,105,110,0,117,110,97,98,108,101,32,116,111,32,99,111,109,112,97,114,101,32,37,114,0,117,110,97,98,108,101,32,116,111,32,99,111,109,112,97,114,101,32,37,114,32,97,110,100,32,37,114,0,110,111,32,101,108,101,109,101,110,116,115,32,112,97,115,115,101,100,32,116,111,32,109,97,120,0,115,116,114,105,110,103,0,92,92,0,92,39,0,92,102,0,92,110,0,92,114,0,92,116,0,92,118,0,92,48,0,92,120,37,98,120,0,105,110,118,97,108,105,100,32,118,97,108,117,101,32,37,114,32,112,97,115,115,101,100,32,116,111,32,106,111,105,110,0,116,97,98,108,101,0,60,116,98,108,32,48,120,37,119,120,62,0,37,110,114,0,37,110,114,58,32,0,44,32,0,37,114,44,32,0,98,117,102,102,101,114,0,105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,97,114,103,117,109,101,110,116,0,60,37,109,32,48,120,37,119,120,62,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,6,3,4,4,4,6,12,13,4,4,2,4,4,4,7,7,7,7,7,7,7,7,7,7,4,1,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,10,4,11,4,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,4,9,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,110,101,120,112,101,99,116,101,100,32,37,99,0,32,111,110,32,108,105,110,101,32,37,119,117,0,117,110,116,101,114,109,105,110,97,116,101,100,32,115,116,114,105,110,103,32,108,105,116,101,114,97,108,0,105,110,118,97,108,105,100,32,110,117,109,98,101,114,32,108,105,116,101,114,97,108,0,117,110,101,120,112,101,99,116,101,100,32,37,114,0,39,125,39,0,101,110,100,0,39,123,39,0,39,93,39,0,39,91,39,0,39,41,39,0,39,40,39,0,39,44,39,0,116,101,114,109,105,110,97,116,111,114,0,117,110,101,120,112,101,99,116,101,100,32,37,115,0,117,110,100,101,102,105,110,101,100,32,37,114,0,105,110,118,97,108,105,100,32,97,115,115,105,103,110,109,101,110,116,0,98,114,101,97,107,32,111,117,116,115,105,100,101,32,111,102,32,108,111,111,112,0,99,111,110,116,105,110,117,101,32,111,117,116,115,105,100,101,32,111,102,32,108,111,111,112,0,255,0,0,0,101,120,99,101,101,100,101,100,32,98,121,116,101,99,111,100,101,32,108,105,109,105,116,115,0,45,45,32,100,105,115,32,48,120,37,119,120,32,45,45,0,114,101,103,115,58,32,37,113,117,44,32,108,111,99,97,108,115,58,32,37,113,117,44,32,97,114,103,115,58,32,48,120,37,98,120,0,105,109,109,115,58,0,37,119,120,32,40,37,114,41,0,98,99,111,100,101,58,0,114,101,116,0,116,99,97,108,108,0,99,97,108,108,0,109,111,118,101,0,100,117,112,0,100,114,111,112,0,105,109,109,0,102,110,0,116,98,108,0,108,111,111,107,100,110,0,108,111,111,107,117,112,0,105,110,115,101,114,116,0,97,115,115,105,103,110,0,106,102,97,108,115,101,0,106,116,114,117,101,0,106,117,109,112,0,37,98,120,37,98,120,32,32,32,32,32,32,37,115,32,114,37,100,0,37,98,120,37,98,120,32,32,32,32,32,32,37,115,32,114,37,100,44,32,48,120,37,98,120,0,37,98,120,37,98,120,32,32,32,32,32,32,37,115,32,114,37,100,44,32,114,37,100,91,114,37,100,93,0,37,98,120,37,98,120,37,98,120,37,98,120,32,32,37,115,32,114,37,100,44,32,37,117,32,40,37,114,41,0,37,98,120,37,98,120,32,32,32,32,32,32,37,115,32,114,37,100,44,32,37,117,32,40,37,114,41,0,37,98,120,37,98,120,37,98,120,37,98,120,32,32,37,115,32,114,37,100,44,32,37,117,0,37,98,120,37,98,120,32,32,32,32,32,32,37,115,32,114,37,100,44,32,37,117,0,37,98,120,37,98,120,37,98,120,37,98,120,32,32,37,115,32,114,37,100,44,32,37,100,0,37,98,120,37,98,120,32,32,32,32,32,32,37,115,32,114,37,100,44,32,37,100,0,117,110,97,98,108,101,32,116,111,32,108,111,111,107,117,112,32,37,114,32,105,110,32,37,114,0,117,110,97,98,108,101,32,116,111,32,105,110,115,101,114,116,32,37,114,32,116,111,32,37,114,32,105,110,32,37,114,0,117,110,97,98,108,101,32,116,111,32,97,115,115,105,103,110,32,37,114,32,116,111,32,37,114,32,105,110,32,37,114,0,117,110,97,98,108,101,32,116,111,32,99,97,108,108,32,37,114,0,111,112,101,114,97,116,105,111,110,32,114,101,115,117,108,116,101,100,32,105,110,32,110,97,110,0,105,110,102,0,48,37,99,48,0,48,0,43,105,110,102,0,45,105,110,102,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  var _llvm_ctlz_i32=true;

   
  Module["_memset"] = _memset;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _abort() {
      Module['abort']();
    }

  function ___lock() {}

  function ___unlock() {}

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      Runtime.stackRestore(ret);
    }

  var _llvm_fabs_f64=Math_abs;

   
  Module["_i64Add"] = _i64Add;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(Runtime.stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  
  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy; 
  Module["_memmove"] = _memmove;


  var _emscripten_asm_const_int=true;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  var _llvm_pow_f64=Math_pow;

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffer) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
/* flush anything remaining in the buffer during shutdown */ __ATEXIT__.push(function() { var fflush = Module["_fflush"]; if (fflush) fflush(0); var printChar = ___syscall146.printChar; if (!printChar) return; var buffers = ___syscall146.buffers; if (buffers[1].length) printChar(1, 10); if (buffers[2].length) printChar(2, 10); });;
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "invoke_iiii": invoke_iiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_pthread_self": _pthread_self, "_llvm_pow_f64": _llvm_pow_f64, "_abort": _abort, "___lock": ___lock, "___syscall6": ___syscall6, "___setErrNo": ___setErrNo, "_llvm_stacksave": _llvm_stacksave, "_sbrk": _sbrk, "_time": _time, "_llvm_fabs_f64": _llvm_fabs_f64, "___syscall146": ___syscall146, "_pthread_cleanup_push": _pthread_cleanup_push, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___syscall54": ___syscall54, "___unlock": ___unlock, "___syscall140": ___syscall140, "_llvm_stackrestore": _llvm_stackrestore, "_sysconf": _sysconf, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _pthread_self=env._pthread_self;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _abort=env._abort;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var ___setErrNo=env.___setErrNo;
  var _llvm_stacksave=env._llvm_stacksave;
  var _sbrk=env._sbrk;
  var _time=env._time;
  var _llvm_fabs_f64=env._llvm_fabs_f64;
  var ___syscall146=env.___syscall146;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var ___syscall140=env.___syscall140;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var _sysconf=env._sysconf;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _mu_sys_print($message,$len) {
 $message = $message|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $message;
 $1 = $len;
 $2 = $0;
 $3 = $1;
 $4 = _emscripten_asm_const_iii(0, ($2|0), ($3|0))|0;
 STACKTOP = sp;return;
}
function _mu_sys_error($message,$len) {
 $message = $message|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $message;
 $1 = $len;
 $2 = $0;
 $3 = $1;
 $4 = _emscripten_asm_const_iii(1, ($2|0), ($3|0))|0;
 // unreachable;
}
function _mu_sys_key_dis() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1284]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(8)|0);
  HEAP32[1284] = $2;
 }
 $3 = HEAP32[1284]|0;
 return ($3|0);
}
function _mu_sys_bfn_dis() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((16) + 7)|0))|0);
}
function _mu_bfn_dis($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $code = 0, $count$i = 0, $count$i$i = 0, $count$i2 = 0, $ref$i = 0, $ref$i$i = 0, $ref$i1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 32|0;
 $vararg_buffer = sp + 24|0;
 $10 = $frame;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $9 = $12;
 $13 = $9;
 $8 = $13;
 $14 = $8;
 $15 = $14;
 $16 = 7 & $15;
 $17 = ($16|0)==(7);
 if (!($17)) {
  _mu_errorf(3514,$vararg_buffer);
  // unreachable;
 }
 $18 = $10;
 $19 = HEAP32[$18>>2]|0;
 $5 = $19;
 $20 = $5;
 $21 = $20;
 $22 = (($21) - 7)|0;
 $23 = $22;
 $24 = ((($23)) + 3|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = $26 & 1;
 $28 = ($27|0)!=(0);
 if ($28) {
  $4 = 0;
 } else {
  $29 = $5;
  $30 = $29;
  $31 = (($30) - 7)|0;
  $32 = $31;
  $33 = ((($32)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $3 = $34;
  $35 = $3;
  $2 = $35;
  $36 = $2;
  $37 = $36;
  $38 = 6 & $37;
  $39 = ($38|0)!=(0);
  if ($39) {
   $40 = $3;
   $41 = $40;
   $42 = -8 & $41;
   $43 = $42;
   $ref$i$i = $43;
   $44 = $ref$i$i;
   $45 = HEAP16[$44>>1]|0;
   $count$i$i = $45;
   $46 = $count$i$i;
   $47 = $46&65535;
   $48 = ($47|0)!=(0);
   if ($48) {
    $49 = $count$i$i;
    $50 = (($49) + 1)<<16>>16;
    $count$i$i = $50;
    $51 = $count$i$i;
    $52 = $ref$i$i;
    HEAP16[$52>>1] = $51;
   }
  }
  $53 = $3;
  $4 = $53;
 }
 $54 = $4;
 $code = $54;
 $55 = $code;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  _mu_errorf(3514,$vararg_buffer1);
  // unreachable;
 }
 $57 = $code;
 _mu_dis($57);
 $58 = $code;
 $1 = $58;
 $59 = $1;
 $0 = $59;
 $60 = $0;
 $61 = $60;
 $62 = 6 & $61;
 $63 = ($62|0)!=(0);
 if ($63) {
  $64 = $1;
  $65 = $64;
  $66 = -8 & $65;
  $67 = $66;
  $ref$i1 = $67;
  $68 = $ref$i1;
  $69 = HEAP16[$68>>1]|0;
  $count$i2 = $69;
  $70 = $count$i2;
  $71 = $70&65535;
  $72 = ($71|0)!=(0);
  if ($72) {
   $73 = $count$i2;
   $74 = (($73) + -1)<<16>>16;
   $count$i2 = $74;
   $75 = $count$i2;
   $76 = $ref$i1;
   HEAP16[$76>>1] = $75;
   $77 = $count$i2;
   $78 = $77&65535;
   $79 = ($78|0)==(0);
   if ($79) {
    $80 = $1;
    _mu_destroy($80);
   }
  }
 }
 $81 = $10;
 $82 = HEAP32[$81>>2]|0;
 $7 = $82;
 $83 = $7;
 $6 = $83;
 $84 = $6;
 $85 = $84;
 $86 = 6 & $85;
 $87 = ($86|0)!=(0);
 if (!($87)) {
  STACKTOP = sp;return 0;
 }
 $88 = $7;
 $89 = $88;
 $90 = -8 & $89;
 $91 = $90;
 $ref$i = $91;
 $92 = $ref$i;
 $93 = HEAP16[$92>>1]|0;
 $count$i = $93;
 $94 = $count$i;
 $95 = $94&65535;
 $96 = ($95|0)!=(0);
 if (!($96)) {
  STACKTOP = sp;return 0;
 }
 $97 = $count$i;
 $98 = (($97) + -1)<<16>>16;
 $count$i = $98;
 $99 = $count$i;
 $100 = $ref$i;
 HEAP16[$100>>1] = $99;
 $101 = $count$i;
 $102 = $101&65535;
 $103 = ($102|0)==(0);
 if (!($103)) {
  STACKTOP = sp;return 0;
 }
 $104 = $7;
 _mu_destroy($104);
 STACKTOP = sp;return 0;
}
function _mu_sys_tbl_dis() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1285]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_tbl_initpairs(5064,0,2312,1)|0);
  HEAP32[1285] = $2;
 }
 $3 = HEAP32[1285]|0;
 return ($3|0);
}
function _mu_sys_imports() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1286]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_tbl_initpairs(5080,0,2320,1)|0);
  HEAP32[1286] = $2;
 }
 $3 = HEAP32[1286]|0;
 return ($3|0);
}
function _mu_sys_import($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $module = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (_mu_sys_imports()|0);
 $2 = $0;
 $3 = (_mu_tbl_lookup($1,$2)|0);
 $module = $3;
 $4 = $module;
 STACKTOP = sp;return ($4|0);
}
function _mu_repl($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $count$i = 0, $ref$i = 0, $repr = 0, $res = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $6 = sp + 36|0;
 $7 = $s;
 $8 = HEAP32[1287]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $10 = (_mu_tbl_create(0)|0);
  HEAP32[1287] = $10;
  $11 = HEAP32[1287]|0;
  $12 = (_mu_builtins_def()|0);
  _mu_tbl_settail($11,$12);
 }
 $13 = $7;
 $14 = $7;
 $15 = (_strlen($14)|0);
 $16 = HEAP32[1287]|0;
 $17 = (_mu_eval($13,$15,$16,15,$vararg_buffer)|0);
 $res = $17;
 $18 = (_mu_repr_def()|0);
 $19 = $res;
 $5 = 2;
 $20 = $5;
 $21 = (+($20>>>0));
 HEAPF32[$6>>2] = $21;
 $22 = HEAP32[$6>>2]|0;
 $23 = -8 & $22;
 $24 = (1 + ($23))|0;
 $25 = $24;
 HEAP32[$vararg_buffer1>>2] = $19;
 $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr3>>2] = $25;
 $26 = (_mu_fn_call($18,33,$vararg_buffer1)|0);
 $repr = $26;
 $27 = $repr;
 $2 = $27;
 $28 = $2;
 $29 = $28;
 $30 = (($29) - 3)|0;
 $31 = $30;
 $32 = ((($31)) + 4|0);
 $33 = ((($32)) + 1|0);
 $34 = $repr;
 $0 = $34;
 $35 = $0;
 $36 = $35;
 $37 = (($36) - 3)|0;
 $38 = $37;
 $39 = ((($38)) + 2|0);
 $40 = HEAP16[$39>>1]|0;
 $41 = $40&65535;
 $42 = (($41) - 2)|0;
 _memcpy((6136|0),($33|0),($42|0))|0;
 $43 = $repr;
 $1 = $43;
 $44 = $1;
 $45 = $44;
 $46 = (($45) - 3)|0;
 $47 = $46;
 $48 = ((($47)) + 2|0);
 $49 = HEAP16[$48>>1]|0;
 $50 = $49&65535;
 $51 = (($50) - 2)|0;
 $52 = (6136 + ($51)|0);
 HEAP8[$52>>0] = 0;
 $53 = $repr;
 $4 = $53;
 $54 = $4;
 $3 = $54;
 $55 = $3;
 $56 = $55;
 $57 = 6 & $56;
 $58 = ($57|0)!=(0);
 if (!($58)) {
  STACKTOP = sp;return (6136|0);
 }
 $59 = $4;
 $60 = $59;
 $61 = -8 & $60;
 $62 = $61;
 $ref$i = $62;
 $63 = $ref$i;
 $64 = HEAP16[$63>>1]|0;
 $count$i = $64;
 $65 = $count$i;
 $66 = $65&65535;
 $67 = ($66|0)!=(0);
 if (!($67)) {
  STACKTOP = sp;return (6136|0);
 }
 $68 = $count$i;
 $69 = (($68) + -1)<<16>>16;
 $count$i = $69;
 $70 = $count$i;
 $71 = $ref$i;
 HEAP16[$71>>1] = $70;
 $72 = $count$i;
 $73 = $72&65535;
 $74 = ($73|0)==(0);
 if (!($74)) {
  STACKTOP = sp;return (6136|0);
 }
 $75 = $4;
 _mu_destroy($75);
 STACKTOP = sp;return (6136|0);
}
function _mu_true_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1288]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(32)|0);
  HEAP32[1288] = $2;
 }
 $3 = HEAP32[1288]|0;
 return ($3|0);
}
function _mu_true_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAPF32[$0>>2] = 1.0;
 $1 = HEAP32[$0>>2]|0;
 $2 = -8 & $1;
 $3 = (1 + ($2))|0;
 $4 = $3;
 STACKTOP = sp;return ($4|0);
}
function _mu_alloc($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $message = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $size;
 $2 = $1;
 $3 = ($2|0)==(0);
 if ($3) {
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 $4 = $1;
 $5 = (_malloc($4)|0);
 $m = $5;
 $6 = $m;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $message = 3535;
  $8 = $message;
  $9 = $message;
  $10 = (_strlen($9)|0);
  _mu_error($8,$10);
  // unreachable;
 }
 $11 = $m;
 $0 = $11;
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _mu_error($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $n;
 $2 = $0;
 $3 = $1;
 _mu_sys_error($2,$3);
 // unreachable;
}
function _mu_dealloc($m,$size) {
 $m = $m|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $0;
 _free($2);
 STACKTOP = sp;return;
}
function _mu_verrorf($f,$args) {
 $f = $f|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 4|0;
 $n = sp;
 $1 = $f;
 $2 = $args;
 $3 = (_mu_buf_create(0)|0);
 HEAP32[$b>>2] = $3;
 HEAP32[$n>>2] = 0;
 $4 = $1;
 $5 = $2;
 _mu_buf_vpushf($b,$n,$4,$5);
 $6 = HEAP32[$b>>2]|0;
 $0 = $6;
 $7 = $0;
 $8 = $7;
 $9 = -8 & $8;
 $10 = $9;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$n>>2]|0;
 _mu_error($11,$12);
 // unreachable;
}
function _mu_errorf($f,$varargs) {
 $f = $f|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = $f;
 HEAP32[$args>>2] = $varargs;
 $1 = $0;
 _mu_verrorf($1,$args);
 // unreachable;
}
function _mu_error_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1289]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(40)|0);
  HEAP32[1289] = $2;
 }
 $3 = HEAP32[1289]|0;
 return ($3|0);
}
function _mu_error_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((56) + 7)|0))|0);
}
function _mu_error_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $i = 0, $n = 0, $v = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $b = sp + 16|0;
 $n = sp + 12|0;
 $v = sp + 8|0;
 $i = sp + 4|0;
 $1 = $frame;
 $2 = (_mu_buf_create(0)|0);
 HEAP32[$b>>2] = $2;
 HEAP32[$n>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $3 = $1;
  $4 = HEAP32[$3>>2]|0;
  $5 = (_mu_tbl_next($4,$i,0,$v)|0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$v>>2]|0;
  HEAP32[$vararg_buffer>>2] = $6;
  _mu_buf_pushf($b,$n,3549,$vararg_buffer);
 }
 $7 = HEAP32[$b>>2]|0;
 $0 = $7;
 $8 = $0;
 $9 = $8;
 $10 = -8 & $9;
 $11 = $10;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$n>>2]|0;
 _mu_error($12,$13);
 // unreachable;
 return (0)|0;
}
function _mu_print($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $n;
 $2 = $0;
 $3 = $1;
 _mu_sys_print($2,$3);
 STACKTOP = sp;return;
}
function _mu_vprintf($f,$args) {
 $f = $f|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $count$i = 0;
 var $n = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 8|0;
 $n = sp + 4|0;
 $3 = $f;
 $4 = $args;
 $5 = (_mu_buf_create(0)|0);
 HEAP32[$b>>2] = $5;
 HEAP32[$n>>2] = 0;
 $6 = $3;
 $7 = $4;
 _mu_buf_vpushf($b,$n,$6,$7);
 $8 = HEAP32[$b>>2]|0;
 $2 = $8;
 $9 = $2;
 $10 = $9;
 $11 = -8 & $10;
 $12 = $11;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$n>>2]|0;
 _mu_print($13,$14);
 $15 = HEAP32[$b>>2]|0;
 $1 = $15;
 $16 = $1;
 $0 = $16;
 $17 = $0;
 $18 = $17;
 $19 = 6 & $18;
 $20 = ($19|0)!=(0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = $1;
 $22 = $21;
 $23 = -8 & $22;
 $24 = $23;
 $ref$i = $24;
 $25 = $ref$i;
 $26 = HEAP16[$25>>1]|0;
 $count$i = $26;
 $27 = $count$i;
 $28 = $27&65535;
 $29 = ($28|0)!=(0);
 if (!($29)) {
  STACKTOP = sp;return;
 }
 $30 = $count$i;
 $31 = (($30) + -1)<<16>>16;
 $count$i = $31;
 $32 = $count$i;
 $33 = $ref$i;
 HEAP16[$33>>1] = $32;
 $34 = $count$i;
 $35 = $34&65535;
 $36 = ($35|0)==(0);
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = $1;
 _mu_destroy($37);
 STACKTOP = sp;return;
}
function _mu_printf($f,$varargs) {
 $f = $f|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = $f;
 HEAP32[$args>>2] = $varargs;
 $1 = $0;
 _mu_vprintf($1,$args);
 STACKTOP = sp;return;
}
function _mu_print_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1290]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(72)|0);
  HEAP32[1290] = $2;
 }
 $3 = HEAP32[1290]|0;
 return ($3|0);
}
function _mu_print_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((88) + 7)|0))|0);
}
function _mu_print_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $count$i = 0, $count$i2 = 0, $i = 0, $n = 0, $ref$i = 0, $ref$i1 = 0, $v = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 16|0;
 $b = sp + 32|0;
 $n = sp + 28|0;
 $v = sp + 24|0;
 $i = sp + 20|0;
 $5 = $frame;
 $6 = (_mu_buf_create(0)|0);
 HEAP32[$b>>2] = $6;
 HEAP32[$n>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $7 = $5;
  $8 = HEAP32[$7>>2]|0;
  $9 = (_mu_tbl_next($8,$i,0,$v)|0);
  if (!($9)) {
   break;
  }
  $10 = HEAP32[$v>>2]|0;
  HEAP32[$vararg_buffer>>2] = $10;
  _mu_buf_pushf($b,$n,3549,$vararg_buffer);
 }
 $11 = HEAP32[$b>>2]|0;
 $4 = $11;
 $12 = $4;
 $13 = $12;
 $14 = -8 & $13;
 $15 = $14;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$n>>2]|0;
 _mu_print($16,$17);
 $18 = HEAP32[$b>>2]|0;
 $1 = $18;
 $19 = $1;
 $0 = $19;
 $20 = $0;
 $21 = $20;
 $22 = 6 & $21;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $1;
  $25 = $24;
  $26 = -8 & $25;
  $27 = $26;
  $ref$i1 = $27;
  $28 = $ref$i1;
  $29 = HEAP16[$28>>1]|0;
  $count$i2 = $29;
  $30 = $count$i2;
  $31 = $30&65535;
  $32 = ($31|0)!=(0);
  if ($32) {
   $33 = $count$i2;
   $34 = (($33) + -1)<<16>>16;
   $count$i2 = $34;
   $35 = $count$i2;
   $36 = $ref$i1;
   HEAP16[$36>>1] = $35;
   $37 = $count$i2;
   $38 = $37&65535;
   $39 = ($38|0)==(0);
   if ($39) {
    $40 = $1;
    _mu_destroy($40);
   }
  }
 }
 $41 = $5;
 $42 = HEAP32[$41>>2]|0;
 $3 = $42;
 $43 = $3;
 $2 = $43;
 $44 = $2;
 $45 = $44;
 $46 = 6 & $45;
 $47 = ($46|0)!=(0);
 if (!($47)) {
  STACKTOP = sp;return 0;
 }
 $48 = $3;
 $49 = $48;
 $50 = -8 & $49;
 $51 = $50;
 $ref$i = $51;
 $52 = $ref$i;
 $53 = HEAP16[$52>>1]|0;
 $count$i = $53;
 $54 = $count$i;
 $55 = $54&65535;
 $56 = ($55|0)!=(0);
 if (!($56)) {
  STACKTOP = sp;return 0;
 }
 $57 = $count$i;
 $58 = (($57) + -1)<<16>>16;
 $count$i = $58;
 $59 = $count$i;
 $60 = $ref$i;
 HEAP16[$60>>1] = $59;
 $61 = $count$i;
 $62 = $61&65535;
 $63 = ($62|0)==(0);
 if (!($63)) {
  STACKTOP = sp;return 0;
 }
 $64 = $3;
 _mu_destroy($64);
 STACKTOP = sp;return 0;
}
function _mu_import_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1291]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(104)|0);
  HEAP32[1291] = $2;
 }
 $3 = HEAP32[1291]|0;
 return ($3|0);
}
function _mu_import_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((120) + 7)|0))|0);
}
function _mu_import_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$i = 0;
 var $count$i2 = 0, $count$i5 = 0, $count$i7 = 0, $module = 0, $name = 0, $ref$i = 0, $ref$i1 = 0, $ref$i4 = 0, $ref$i6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = $frame;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $name = $13;
 $14 = $name;
 $9 = $14;
 $15 = $9;
 $8 = $15;
 $16 = $8;
 $17 = $16;
 $18 = 7 & $17;
 $19 = ($18|0)==(3);
 if (!($19)) {
  $20 = (_mu_import_key_def()|0);
  $21 = $11;
  _mu_errorargs($20,1,$21);
  // unreachable;
 }
 $22 = HEAP32[1292]|0;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  $24 = (_mu_tbl_create(0)|0);
  HEAP32[1292] = $24;
 }
 $25 = HEAP32[1292]|0;
 $26 = $name;
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = $28;
 $30 = 6 & $29;
 $31 = ($30|0)!=(0);
 if ($31) {
  $32 = $1;
  $33 = $32;
  $34 = -8 & $33;
  $35 = $34;
  $ref$i6 = $35;
  $36 = $ref$i6;
  $37 = HEAP16[$36>>1]|0;
  $count$i7 = $37;
  $38 = $count$i7;
  $39 = $38&65535;
  $40 = ($39|0)!=(0);
  if ($40) {
   $41 = $count$i7;
   $42 = (($41) + 1)<<16>>16;
   $count$i7 = $42;
   $43 = $count$i7;
   $44 = $ref$i6;
   HEAP16[$44>>1] = $43;
  }
 }
 $45 = $1;
 $46 = (_mu_tbl_lookup($25,$45)|0);
 $module = $46;
 $47 = $module;
 $48 = ($47|0)!=(0|0);
 $49 = $name;
 if ($48) {
  $3 = $49;
  $50 = $3;
  $2 = $50;
  $51 = $2;
  $52 = $51;
  $53 = 6 & $52;
  $54 = ($53|0)!=(0);
  if ($54) {
   $55 = $3;
   $56 = $55;
   $57 = -8 & $56;
   $58 = $57;
   $ref$i4 = $58;
   $59 = $ref$i4;
   $60 = HEAP16[$59>>1]|0;
   $count$i5 = $60;
   $61 = $count$i5;
   $62 = $61&65535;
   $63 = ($62|0)!=(0);
   if ($63) {
    $64 = $count$i5;
    $65 = (($64) + -1)<<16>>16;
    $count$i5 = $65;
    $66 = $count$i5;
    $67 = $ref$i4;
    HEAP16[$67>>1] = $66;
    $68 = $count$i5;
    $69 = $68&65535;
    $70 = ($69|0)==(0);
    if ($70) {
     $71 = $3;
     _mu_destroy($71);
    }
   }
  }
  $72 = $module;
  $73 = $11;
  HEAP32[$73>>2] = $72;
  $10 = 1;
  $118 = $10;
  STACKTOP = sp;return ($118|0);
 }
 $5 = $49;
 $74 = $5;
 $4 = $74;
 $75 = $4;
 $76 = $75;
 $77 = 6 & $76;
 $78 = ($77|0)!=(0);
 if ($78) {
  $79 = $5;
  $80 = $79;
  $81 = -8 & $80;
  $82 = $81;
  $ref$i1 = $82;
  $83 = $ref$i1;
  $84 = HEAP16[$83>>1]|0;
  $count$i2 = $84;
  $85 = $count$i2;
  $86 = $85&65535;
  $87 = ($86|0)!=(0);
  if ($87) {
   $88 = $count$i2;
   $89 = (($88) + 1)<<16>>16;
   $count$i2 = $89;
   $90 = $count$i2;
   $91 = $ref$i1;
   HEAP16[$91>>1] = $90;
  }
 }
 $92 = $5;
 $93 = (_mu_sys_import($92)|0);
 $module = $93;
 $94 = HEAP32[1292]|0;
 $95 = $name;
 $96 = $module;
 $7 = $96;
 $97 = $7;
 $6 = $97;
 $98 = $6;
 $99 = $98;
 $100 = 6 & $99;
 $101 = ($100|0)!=(0);
 if ($101) {
  $102 = $7;
  $103 = $102;
  $104 = -8 & $103;
  $105 = $104;
  $ref$i = $105;
  $106 = $ref$i;
  $107 = HEAP16[$106>>1]|0;
  $count$i = $107;
  $108 = $count$i;
  $109 = $108&65535;
  $110 = ($109|0)!=(0);
  if ($110) {
   $111 = $count$i;
   $112 = (($111) + 1)<<16>>16;
   $count$i = $112;
   $113 = $count$i;
   $114 = $ref$i;
   HEAP16[$114>>1] = $113;
  }
 }
 $115 = $7;
 _mu_tbl_insert($94,$95,$115);
 $116 = $module;
 $117 = $11;
 HEAP32[$117>>2] = $116;
 $10 = 1;
 $118 = $10;
 STACKTOP = sp;return ($118|0);
}
function _mu_errorargs($name,$fc,$frame) {
 $name = $name|0;
 $fc = $fc|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $c = 0, $i = 0, $isop = 0, $message = 0, $n = 0, $vararg_buffer = 0;
 var $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer2 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $message = sp + 60|0;
 $n = sp + 56|0;
 $2 = $name;
 $3 = $fc;
 $4 = $frame;
 $5 = $2;
 $1 = $5;
 $6 = $1;
 $7 = $6;
 $8 = (($7) - 3)|0;
 $9 = $8;
 $10 = ((($9)) + 4|0);
 $11 = HEAP8[$10>>0]|0;
 $c = $11;
 $12 = $c;
 $13 = $12 << 24 >> 24;
 $14 = ($13|0)>=(97);
 if ($14) {
  $15 = $c;
  $16 = $15 << 24 >> 24;
  $17 = ($16|0)<=(122);
  if ($17) {
   $25 = 1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $18 = $c;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)>=(65);
  if ($20) {
   $21 = $c;
   $22 = $21 << 24 >> 24;
   $23 = ($22|0)<=(90);
   $25 = $23;
  } else {
   $25 = 0;
  }
 }
 $24 = $25 ^ 1;
 $26 = $24&1;
 $isop = $26;
 $27 = $isop;
 $28 = $27&1;
 if ($28) {
  $29 = $3;
  $30 = $29&255;
  $31 = ($30|0)==(1);
  if ($31) {
   $32 = $2;
   $33 = $4;
   $34 = HEAP32[$33>>2]|0;
   HEAP32[$vararg_buffer>>2] = $32;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $34;
   _mu_errorf(3552,$vararg_buffer);
   // unreachable;
  }
 }
 $35 = $isop;
 $36 = $35&1;
 if ($36) {
  $37 = $3;
  $38 = $37&255;
  $39 = ($38|0)==(2);
  if ($39) {
   $40 = $4;
   $41 = HEAP32[$40>>2]|0;
   $42 = $2;
   $43 = $4;
   $44 = ((($43)) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   HEAP32[$vararg_buffer2>>2] = $41;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $42;
   $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
   HEAP32[$vararg_ptr6>>2] = $45;
   _mu_errorf(3575,$vararg_buffer2);
   // unreachable;
  }
 }
 $46 = (_mu_buf_create(0)|0);
 HEAP32[$message>>2] = $46;
 HEAP32[$n>>2] = 0;
 $47 = $2;
 HEAP32[$vararg_buffer7>>2] = $47;
 _mu_buf_pushf($message,$n,3602,$vararg_buffer7);
 $48 = $3;
 $49 = $48&255;
 $50 = ($49|0)==(15);
 if ($50) {
  _mu_buf_pushf($message,$n,3626,$vararg_buffer10);
  $3 = 1;
 }
 $i = 0;
 while(1) {
  $51 = $i;
  $52 = $3;
  $53 = $52&255;
  $54 = ($51>>>0)<($53>>>0);
  if (!($54)) {
   break;
  }
  $55 = $i;
  $56 = $4;
  $57 = (($56) + ($55<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $i;
  $60 = $3;
  $61 = $60&255;
  $62 = (($61) - 1)|0;
  $63 = ($59|0)!=($62|0);
  $64 = $63 ? 44 : 41;
  HEAP32[$vararg_buffer12>>2] = $58;
  $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
  HEAP32[$vararg_ptr15>>2] = 0;
  $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
  HEAP32[$vararg_ptr16>>2] = $64;
  _mu_buf_pushf($message,$n,3629,$vararg_buffer12);
  $65 = $i;
  $66 = (($65) + 1)|0;
  $i = $66;
 }
 $67 = HEAP32[$message>>2]|0;
 $0 = $67;
 $68 = $0;
 $69 = $68;
 $70 = -8 & $69;
 $71 = $70;
 $72 = ((($71)) + 4|0);
 $73 = HEAP32[$n>>2]|0;
 _mu_error($72,$73);
 // unreachable;
}
function _mu_feval($s,$n,$scope,$fc,$frame) {
 $s = $s|0;
 $n = $n|0;
 $scope = $scope|0;
 $fc = $fc|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $count$i = 0;
 var $count$i2 = 0, $ref$i = 0, $ref$i1 = 0, $rets = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $s;
 $5 = $n;
 $6 = $scope;
 $7 = $fc;
 $8 = $frame;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 $3 = $11;
 $12 = $3;
 $2 = $12;
 $13 = $2;
 $14 = $13;
 $15 = 6 & $14;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $3;
  $18 = $17;
  $19 = -8 & $18;
  $20 = $19;
  $ref$i = $20;
  $21 = $ref$i;
  $22 = HEAP16[$21>>1]|0;
  $count$i = $22;
  $23 = $count$i;
  $24 = $23&65535;
  $25 = ($24|0)!=(0);
  if ($25) {
   $26 = $count$i;
   $27 = (($26) + 1)<<16>>16;
   $count$i = $27;
   $28 = $count$i;
   $29 = $ref$i;
   HEAP16[$29>>1] = $28;
  }
 }
 $30 = $3;
 $31 = (_mu_compile($9,$10,$30)|0);
 $c = $31;
 $32 = $c;
 $33 = $6;
 $1 = $33;
 $34 = $1;
 $0 = $34;
 $35 = $0;
 $36 = $35;
 $37 = 6 & $36;
 $38 = ($37|0)!=(0);
 if ($38) {
  $39 = $1;
  $40 = $39;
  $41 = -8 & $40;
  $42 = $41;
  $ref$i1 = $42;
  $43 = $ref$i1;
  $44 = HEAP16[$43>>1]|0;
  $count$i2 = $44;
  $45 = $count$i2;
  $46 = $45&65535;
  $47 = ($46|0)!=(0);
  if ($47) {
   $48 = $count$i2;
   $49 = (($48) + 1)<<16>>16;
   $count$i2 = $49;
   $50 = $count$i2;
   $51 = $ref$i1;
   HEAP16[$51>>1] = $50;
  }
 }
 $52 = $1;
 $53 = $8;
 $54 = (_mu_exec($32,$52,$53)|0);
 $rets = $54;
 $55 = $rets;
 $56 = $7;
 $57 = $8;
 _mu_frameconvert($55,$56,$57);
 STACKTOP = sp;return;
}
function _mu_veval($s,$n,$scope,$fc,$args) {
 $s = $s|0;
 $n = $n|0;
 $scope = $scope|0;
 $fc = $fc|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0;
 var $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $frame = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $frame = sp + 8|0;
 $1 = $s;
 $2 = $n;
 $3 = $scope;
 $4 = $fc;
 $5 = $args;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 _mu_feval($6,$7,$8,$9,$frame);
 $i = 1;
 while(1) {
  $10 = $i;
  $11 = $4;
  $0 = $11;
  $12 = $0;
  $13 = $12&255;
  $14 = ($13|0)>(4);
  $15 = $0;
  $16 = $15&255;
  $17 = $14 ? 1 : $16;
  $18 = $17&65535;
  $19 = $18&65535;
  $20 = ($10>>>0)<($19>>>0);
  if (!($20)) {
   break;
  }
  $21 = $i;
  $22 = (($frame) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $5;
  $arglist_current = HEAP32[$24>>2]|0;
  $25 = $arglist_current;
  $26 = ((0) + 4|0);
  $expanded1 = $26;
  $expanded = (($expanded1) - 1)|0;
  $27 = (($25) + ($expanded))|0;
  $28 = ((0) + 4|0);
  $expanded5 = $28;
  $expanded4 = (($expanded5) - 1)|0;
  $expanded3 = $expanded4 ^ -1;
  $29 = $27 & $expanded3;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $arglist_next = ((($30)) + 4|0);
  HEAP32[$24>>2] = $arglist_next;
  HEAP32[$31>>2] = $23;
  $32 = $i;
  $33 = (($32) + 1)|0;
  $i = $33;
 }
 $34 = $4;
 $35 = $34&255;
 $36 = ($35|0)!=(0);
 $37 = HEAP32[$frame>>2]|0;
 $38 = $36 ? $37 : 0;
 STACKTOP = sp;return ($38|0);
}
function _mu_eval($s,$n,$scope,$fc,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $scope = $scope|0;
 $fc = $fc|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 8|0;
 $0 = $s;
 $1 = $n;
 $2 = $scope;
 $3 = $fc;
 HEAP32[$args>>2] = $varargs;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (_mu_veval($4,$5,$6,$7,$args)|0);
 $ret = $8;
 $9 = $ret;
 STACKTOP = sp;return ($9|0);
}
function _mu_errorro($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $name;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 _mu_errorf(3636,$vararg_buffer);
 // unreachable;
}
function _mu_errorlen($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $name;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 _mu_errorf(3669,$vararg_buffer);
 // unreachable;
}
function _mu_not_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1293]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(136)|0);
  HEAP32[1293] = $2;
 }
 $3 = HEAP32[1293]|0;
 return ($3|0);
}
function _mu_not_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((144) + 7)|0))|0);
}
function _mu_not_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $frame;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $1 = $4;
 $5 = $1;
 $0 = $5;
 $6 = $0;
 $7 = $6;
 $8 = 6 & $7;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $1;
  $11 = $10;
  $12 = -8 & $11;
  $13 = $12;
  $ref$i = $13;
  $14 = $ref$i;
  $15 = HEAP16[$14>>1]|0;
  $count$i = $15;
  $16 = $count$i;
  $17 = $16&65535;
  $18 = ($17|0)!=(0);
  if ($18) {
   $19 = $count$i;
   $20 = (($19) + -1)<<16>>16;
   $count$i = $20;
   $21 = $count$i;
   $22 = $ref$i;
   HEAP16[$22>>1] = $21;
   $23 = $count$i;
   $24 = $23&65535;
   $25 = ($24|0)==(0);
   if ($25) {
    $26 = $1;
    _mu_destroy($26);
   }
  }
 }
 $27 = $2;
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0|0);
 if ($29) {
  $32 = 0;
  $31 = $2;
  HEAP32[$31>>2] = $32;
  STACKTOP = sp;return 1;
 }
 $30 = (_mu_true_def()|0);
 $32 = $30;
 $31 = $2;
 HEAP32[$31>>2] = $32;
 STACKTOP = sp;return 1;
}
function _mu_eq_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1294]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(160)|0);
  HEAP32[1294] = $2;
 }
 $3 = HEAP32[1294]|0;
 return ($3|0);
}
function _mu_eq_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((168) + 7)|0))|0);
}
function _mu_eq_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $count$i2 = 0, $ref$i = 0, $ref$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $frame;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $3 = $6;
 $7 = $3;
 $2 = $7;
 $8 = $2;
 $9 = $8;
 $10 = 6 & $9;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $3;
  $13 = $12;
  $14 = -8 & $13;
  $15 = $14;
  $ref$i = $15;
  $16 = $ref$i;
  $17 = HEAP16[$16>>1]|0;
  $count$i = $17;
  $18 = $count$i;
  $19 = $18&65535;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $count$i;
   $22 = (($21) + -1)<<16>>16;
   $count$i = $22;
   $23 = $count$i;
   $24 = $ref$i;
   HEAP16[$24>>1] = $23;
   $25 = $count$i;
   $26 = $25&65535;
   $27 = ($26|0)==(0);
   if ($27) {
    $28 = $3;
    _mu_destroy($28);
   }
  }
 }
 $29 = $4;
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $1 = $31;
 $32 = $1;
 $0 = $32;
 $33 = $0;
 $34 = $33;
 $35 = 6 & $34;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $1;
  $38 = $37;
  $39 = -8 & $38;
  $40 = $39;
  $ref$i1 = $40;
  $41 = $ref$i1;
  $42 = HEAP16[$41>>1]|0;
  $count$i2 = $42;
  $43 = $count$i2;
  $44 = $43&65535;
  $45 = ($44|0)!=(0);
  if ($45) {
   $46 = $count$i2;
   $47 = (($46) + -1)<<16>>16;
   $count$i2 = $47;
   $48 = $count$i2;
   $49 = $ref$i1;
   HEAP16[$49>>1] = $48;
   $50 = $count$i2;
   $51 = $50&65535;
   $52 = ($51|0)==(0);
   if ($52) {
    $53 = $1;
    _mu_destroy($53);
   }
  }
 }
 $54 = $4;
 $55 = HEAP32[$54>>2]|0;
 $56 = $4;
 $57 = ((($56)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($55|0)==($58|0);
 if (!($59)) {
  $62 = 0;
  $61 = $4;
  HEAP32[$61>>2] = $62;
  STACKTOP = sp;return 1;
 }
 $60 = (_mu_true_def()|0);
 $62 = $60;
 $61 = $4;
 HEAP32[$61>>2] = $62;
 STACKTOP = sp;return 1;
}
function _mu_neq_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1295]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(184)|0);
  HEAP32[1295] = $2;
 }
 $3 = HEAP32[1295]|0;
 return ($3|0);
}
function _mu_neq_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((192) + 7)|0))|0);
}
function _mu_neq_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $count$i2 = 0, $ref$i = 0, $ref$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $frame;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $3 = $6;
 $7 = $3;
 $2 = $7;
 $8 = $2;
 $9 = $8;
 $10 = 6 & $9;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $3;
  $13 = $12;
  $14 = -8 & $13;
  $15 = $14;
  $ref$i = $15;
  $16 = $ref$i;
  $17 = HEAP16[$16>>1]|0;
  $count$i = $17;
  $18 = $count$i;
  $19 = $18&65535;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $count$i;
   $22 = (($21) + -1)<<16>>16;
   $count$i = $22;
   $23 = $count$i;
   $24 = $ref$i;
   HEAP16[$24>>1] = $23;
   $25 = $count$i;
   $26 = $25&65535;
   $27 = ($26|0)==(0);
   if ($27) {
    $28 = $3;
    _mu_destroy($28);
   }
  }
 }
 $29 = $4;
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $1 = $31;
 $32 = $1;
 $0 = $32;
 $33 = $0;
 $34 = $33;
 $35 = 6 & $34;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $1;
  $38 = $37;
  $39 = -8 & $38;
  $40 = $39;
  $ref$i1 = $40;
  $41 = $ref$i1;
  $42 = HEAP16[$41>>1]|0;
  $count$i2 = $42;
  $43 = $count$i2;
  $44 = $43&65535;
  $45 = ($44|0)!=(0);
  if ($45) {
   $46 = $count$i2;
   $47 = (($46) + -1)<<16>>16;
   $count$i2 = $47;
   $48 = $count$i2;
   $49 = $ref$i1;
   HEAP16[$49>>1] = $48;
   $50 = $count$i2;
   $51 = $50&65535;
   $52 = ($51|0)==(0);
   if ($52) {
    $53 = $1;
    _mu_destroy($53);
   }
  }
 }
 $54 = $4;
 $55 = HEAP32[$54>>2]|0;
 $56 = $4;
 $57 = ((($56)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($55|0)!=($58|0);
 if (!($59)) {
  $62 = 0;
  $61 = $4;
  HEAP32[$61>>2] = $62;
  STACKTOP = sp;return 1;
 }
 $60 = (_mu_true_def()|0);
 $62 = $60;
 $61 = $4;
 HEAP32[$61>>2] = $62;
 STACKTOP = sp;return 1;
}
function _mu_lt_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1296]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(208)|0);
  HEAP32[1296] = $2;
 }
 $3 = HEAP32[1296]|0;
 return ($3|0);
}
function _mu_lt_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((216) + 7)|0))|0);
}
function _mu_lt_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $count$i = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $frame;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $a = $8;
 $9 = $6;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $b = $11;
 $12 = $a;
 $5 = $12;
 $13 = $5;
 $14 = $13;
 $15 = 7 & $14;
 $16 = $b;
 $2 = $16;
 $17 = $2;
 $18 = $17;
 $19 = 7 & $18;
 $20 = ($15|0)==($19|0);
 if (!($20)) {
  $28 = (_mu_lt_key_def()|0);
  $29 = $6;
  _mu_errorargs($28,2,$29);
  // unreachable;
 }
 $21 = $a;
 $1 = $21;
 $22 = $1;
 $23 = $22;
 $24 = 7 & $23;
 $25 = (2328 + ($24<<2)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  $28 = (_mu_lt_key_def()|0);
  $29 = $6;
  _mu_errorargs($28,2,$29);
  // unreachable;
 }
 $30 = $a;
 $0 = $30;
 $31 = $0;
 $32 = $31;
 $33 = 7 & $32;
 $34 = (2328 + ($33<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $a;
 $37 = $b;
 $38 = (FUNCTION_TABLE_iii[$35 & 511]($36,$37)|0);
 $39 = ($38|0)<(0);
 if ($39) {
  $40 = (_mu_true_def()|0);
  $42 = $40;
 } else {
  $42 = 0;
 }
 $41 = $6;
 HEAP32[$41>>2] = $42;
 $43 = $a;
 $4 = $43;
 $44 = $4;
 $3 = $44;
 $45 = $3;
 $46 = $45;
 $47 = 6 & $46;
 $48 = ($47|0)!=(0);
 if (!($48)) {
  STACKTOP = sp;return 1;
 }
 $49 = $4;
 $50 = $49;
 $51 = -8 & $50;
 $52 = $51;
 $ref$i = $52;
 $53 = $ref$i;
 $54 = HEAP16[$53>>1]|0;
 $count$i = $54;
 $55 = $count$i;
 $56 = $55&65535;
 $57 = ($56|0)!=(0);
 if (!($57)) {
  STACKTOP = sp;return 1;
 }
 $58 = $count$i;
 $59 = (($58) + -1)<<16>>16;
 $count$i = $59;
 $60 = $count$i;
 $61 = $ref$i;
 HEAP16[$61>>1] = $60;
 $62 = $count$i;
 $63 = $62&65535;
 $64 = ($63|0)==(0);
 if (!($64)) {
  STACKTOP = sp;return 1;
 }
 $65 = $4;
 _mu_destroy($65);
 STACKTOP = sp;return 1;
}
function _mu_lte_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1297]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(232)|0);
  HEAP32[1297] = $2;
 }
 $3 = HEAP32[1297]|0;
 return ($3|0);
}
function _mu_lte_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((240) + 7)|0))|0);
}
function _mu_lte_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $count$i = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $frame;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $a = $8;
 $9 = $6;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $b = $11;
 $12 = $a;
 $5 = $12;
 $13 = $5;
 $14 = $13;
 $15 = 7 & $14;
 $16 = $b;
 $2 = $16;
 $17 = $2;
 $18 = $17;
 $19 = 7 & $18;
 $20 = ($15|0)==($19|0);
 if (!($20)) {
  $28 = (_mu_lte_key_def()|0);
  $29 = $6;
  _mu_errorargs($28,2,$29);
  // unreachable;
 }
 $21 = $a;
 $1 = $21;
 $22 = $1;
 $23 = $22;
 $24 = 7 & $23;
 $25 = (2328 + ($24<<2)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  $28 = (_mu_lte_key_def()|0);
  $29 = $6;
  _mu_errorargs($28,2,$29);
  // unreachable;
 }
 $30 = $a;
 $0 = $30;
 $31 = $0;
 $32 = $31;
 $33 = 7 & $32;
 $34 = (2328 + ($33<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $a;
 $37 = $b;
 $38 = (FUNCTION_TABLE_iii[$35 & 511]($36,$37)|0);
 $39 = ($38|0)<=(0);
 if ($39) {
  $40 = (_mu_true_def()|0);
  $42 = $40;
 } else {
  $42 = 0;
 }
 $41 = $6;
 HEAP32[$41>>2] = $42;
 $43 = $a;
 $4 = $43;
 $44 = $4;
 $3 = $44;
 $45 = $3;
 $46 = $45;
 $47 = 6 & $46;
 $48 = ($47|0)!=(0);
 if (!($48)) {
  STACKTOP = sp;return 1;
 }
 $49 = $4;
 $50 = $49;
 $51 = -8 & $50;
 $52 = $51;
 $ref$i = $52;
 $53 = $ref$i;
 $54 = HEAP16[$53>>1]|0;
 $count$i = $54;
 $55 = $count$i;
 $56 = $55&65535;
 $57 = ($56|0)!=(0);
 if (!($57)) {
  STACKTOP = sp;return 1;
 }
 $58 = $count$i;
 $59 = (($58) + -1)<<16>>16;
 $count$i = $59;
 $60 = $count$i;
 $61 = $ref$i;
 HEAP16[$61>>1] = $60;
 $62 = $count$i;
 $63 = $62&65535;
 $64 = ($63|0)==(0);
 if (!($64)) {
  STACKTOP = sp;return 1;
 }
 $65 = $4;
 _mu_destroy($65);
 STACKTOP = sp;return 1;
}
function _mu_gt_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1298]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(256)|0);
  HEAP32[1298] = $2;
 }
 $3 = HEAP32[1298]|0;
 return ($3|0);
}
function _mu_gt_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((264) + 7)|0))|0);
}
function _mu_gt_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $count$i = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $frame;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $a = $8;
 $9 = $6;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $b = $11;
 $12 = $a;
 $5 = $12;
 $13 = $5;
 $14 = $13;
 $15 = 7 & $14;
 $16 = $b;
 $2 = $16;
 $17 = $2;
 $18 = $17;
 $19 = 7 & $18;
 $20 = ($15|0)==($19|0);
 if (!($20)) {
  $28 = (_mu_gt_key_def()|0);
  $29 = $6;
  _mu_errorargs($28,2,$29);
  // unreachable;
 }
 $21 = $a;
 $1 = $21;
 $22 = $1;
 $23 = $22;
 $24 = 7 & $23;
 $25 = (2328 + ($24<<2)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  $28 = (_mu_gt_key_def()|0);
  $29 = $6;
  _mu_errorargs($28,2,$29);
  // unreachable;
 }
 $30 = $a;
 $0 = $30;
 $31 = $0;
 $32 = $31;
 $33 = 7 & $32;
 $34 = (2328 + ($33<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $a;
 $37 = $b;
 $38 = (FUNCTION_TABLE_iii[$35 & 511]($36,$37)|0);
 $39 = ($38|0)>(0);
 if ($39) {
  $40 = (_mu_true_def()|0);
  $42 = $40;
 } else {
  $42 = 0;
 }
 $41 = $6;
 HEAP32[$41>>2] = $42;
 $43 = $a;
 $4 = $43;
 $44 = $4;
 $3 = $44;
 $45 = $3;
 $46 = $45;
 $47 = 6 & $46;
 $48 = ($47|0)!=(0);
 if (!($48)) {
  STACKTOP = sp;return 1;
 }
 $49 = $4;
 $50 = $49;
 $51 = -8 & $50;
 $52 = $51;
 $ref$i = $52;
 $53 = $ref$i;
 $54 = HEAP16[$53>>1]|0;
 $count$i = $54;
 $55 = $count$i;
 $56 = $55&65535;
 $57 = ($56|0)!=(0);
 if (!($57)) {
  STACKTOP = sp;return 1;
 }
 $58 = $count$i;
 $59 = (($58) + -1)<<16>>16;
 $count$i = $59;
 $60 = $count$i;
 $61 = $ref$i;
 HEAP16[$61>>1] = $60;
 $62 = $count$i;
 $63 = $62&65535;
 $64 = ($63|0)==(0);
 if (!($64)) {
  STACKTOP = sp;return 1;
 }
 $65 = $4;
 _mu_destroy($65);
 STACKTOP = sp;return 1;
}
function _mu_gte_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1299]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(280)|0);
  HEAP32[1299] = $2;
 }
 $3 = HEAP32[1299]|0;
 return ($3|0);
}
function _mu_gte_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((288) + 7)|0))|0);
}
function _mu_gte_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $count$i = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $frame;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $a = $8;
 $9 = $6;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $b = $11;
 $12 = $a;
 $5 = $12;
 $13 = $5;
 $14 = $13;
 $15 = 7 & $14;
 $16 = $b;
 $2 = $16;
 $17 = $2;
 $18 = $17;
 $19 = 7 & $18;
 $20 = ($15|0)==($19|0);
 if (!($20)) {
  $28 = (_mu_gte_key_def()|0);
  $29 = $6;
  _mu_errorargs($28,2,$29);
  // unreachable;
 }
 $21 = $a;
 $1 = $21;
 $22 = $1;
 $23 = $22;
 $24 = 7 & $23;
 $25 = (2328 + ($24<<2)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  $28 = (_mu_gte_key_def()|0);
  $29 = $6;
  _mu_errorargs($28,2,$29);
  // unreachable;
 }
 $30 = $a;
 $0 = $30;
 $31 = $0;
 $32 = $31;
 $33 = 7 & $32;
 $34 = (2328 + ($33<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $a;
 $37 = $b;
 $38 = (FUNCTION_TABLE_iii[$35 & 511]($36,$37)|0);
 $39 = ($38|0)>=(0);
 if ($39) {
  $40 = (_mu_true_def()|0);
  $42 = $40;
 } else {
  $42 = 0;
 }
 $41 = $6;
 HEAP32[$41>>2] = $42;
 $43 = $a;
 $4 = $43;
 $44 = $4;
 $3 = $44;
 $45 = $3;
 $46 = $45;
 $47 = 6 & $46;
 $48 = ($47|0)!=(0);
 if (!($48)) {
  STACKTOP = sp;return 1;
 }
 $49 = $4;
 $50 = $49;
 $51 = -8 & $50;
 $52 = $51;
 $ref$i = $52;
 $53 = $ref$i;
 $54 = HEAP16[$53>>1]|0;
 $count$i = $54;
 $55 = $count$i;
 $56 = $55&65535;
 $57 = ($56|0)!=(0);
 if (!($57)) {
  STACKTOP = sp;return 1;
 }
 $58 = $count$i;
 $59 = (($58) + -1)<<16>>16;
 $count$i = $59;
 $60 = $count$i;
 $61 = $ref$i;
 HEAP16[$61>>1] = $60;
 $62 = $count$i;
 $63 = $62&65535;
 $64 = ($63|0)==(0);
 if (!($64)) {
  STACKTOP = sp;return 1;
 }
 $65 = $4;
 _mu_destroy($65);
 STACKTOP = sp;return 1;
}
function _mu_is_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1300]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(304)|0);
  HEAP32[1300] = $2;
 }
 $3 = HEAP32[1300]|0;
 return ($3|0);
}
function _mu_is_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((312) + 7)|0))|0);
}
function _mu_is_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf$i = 0, $count$i = 0, $count$i$i = 0, $count$i$i11 = 0;
 var $count$i2 = 0, $count$i5 = 0, $count$i8 = 0, $m = 0, $ref$i = 0, $ref$i$i = 0, $ref$i$i10 = 0, $ref$i1 = 0, $ref$i4 = 0, $ref$i7 = 0, $tail = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $20 = $frame;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $m = $22;
 $23 = $20;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $type = $25;
 $26 = (_mu_true_def()|0);
 $27 = $20;
 HEAP32[$27>>2] = $26;
 $28 = $type;
 $18 = $28;
 $29 = $18;
 $17 = $29;
 $30 = $17;
 $31 = $30;
 $32 = 6 & $31;
 $33 = ($32|0)!=(0);
 if ($33) {
  $34 = $18;
  $35 = $34;
  $36 = -8 & $35;
  $37 = $36;
  $ref$i = $37;
  $38 = $ref$i;
  $39 = HEAP16[$38>>1]|0;
  $count$i = $39;
  $40 = $count$i;
  $41 = $40&65535;
  $42 = ($41|0)!=(0);
  if ($42) {
   $43 = $count$i;
   $44 = (($43) + -1)<<16>>16;
   $count$i = $44;
   $45 = $count$i;
   $46 = $ref$i;
   HEAP16[$46>>1] = $45;
   $47 = $count$i;
   $48 = $47&65535;
   $49 = ($48|0)==(0);
   if ($49) {
    $50 = $18;
    _mu_destroy($50);
   }
  }
 }
 $51 = $type;
 $16 = $51;
 $52 = $16;
 $53 = $52;
 $54 = 6 & $53;
 $55 = ($54|0)==(4);
 if (!($55)) {
  $183 = $m;
  $14 = $183;
  $184 = $14;
  $13 = $184;
  $185 = $13;
  $186 = $185;
  $187 = 6 & $186;
  $188 = ($187|0)!=(0);
  if ($188) {
   $189 = $14;
   $190 = $189;
   $191 = -8 & $190;
   $192 = $191;
   $ref$i1 = $192;
   $193 = $ref$i1;
   $194 = HEAP16[$193>>1]|0;
   $count$i2 = $194;
   $195 = $count$i2;
   $196 = $195&65535;
   $197 = ($196|0)!=(0);
   if ($197) {
    $198 = $count$i2;
    $199 = (($198) + -1)<<16>>16;
    $count$i2 = $199;
    $200 = $count$i2;
    $201 = $ref$i1;
    HEAP16[$201>>1] = $200;
    $202 = $count$i2;
    $203 = $202&65535;
    $204 = ($203|0)==(0);
    if ($204) {
     $205 = $14;
     _mu_destroy($205);
    }
   }
  }
  $206 = $m;
  $15 = $206;
  $207 = $15;
  $208 = $207;
  $209 = 7 & $208;
  switch ($209|0) {
  case 0:  {
   $210 = $type;
   $211 = ($210|0)!=(0|0);
   $212 = $211 ^ 1;
   $213 = $212&1;
   $214 = $213&255;
   $19 = $214;
   $235 = $19;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 1:  {
   $215 = $type;
   $216 = (_mu_num_def()|0);
   $217 = ($215|0)==($216|0);
   $218 = $217&1;
   $219 = $218&255;
   $19 = $219;
   $235 = $19;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 3:  {
   $220 = $type;
   $221 = (_mu_str_def()|0);
   $222 = ($220|0)==($221|0);
   $223 = $222&1;
   $224 = $223&255;
   $19 = $224;
   $235 = $19;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 5: case 4:  {
   $225 = $type;
   $226 = (_mu_tbl_def()|0);
   $227 = ($225|0)==($226|0);
   $228 = $227&1;
   $229 = $228&255;
   $19 = $229;
   $235 = $19;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 7:  {
   $230 = $type;
   $231 = (_mu_fn_def()|0);
   $232 = ($230|0)==($231|0);
   $233 = $232&1;
   $234 = $233&255;
   $19 = $234;
   $235 = $19;
   STACKTOP = sp;return ($235|0);
   break;
  }
  default: {
   $19 = 0;
   $235 = $19;
   STACKTOP = sp;return ($235|0);
  }
  }
 }
 while(1) {
  $56 = $m;
  $57 = ($56|0)!=(0|0);
  if (!($57)) {
   label = 32;
   break;
  }
  $58 = $m;
  $12 = $58;
  $59 = $12;
  $60 = $59;
  $61 = 6 & $60;
  $62 = ($61|0)==(4);
  $63 = $m;
  do {
   if ($62) {
    $9 = $63;
    $64 = $9;
    $65 = $64;
    $66 = $65 & -8;
    $67 = $66;
    $68 = ((($67)) + 8|0);
    $69 = HEAP32[$68>>2]|0;
    $8 = $69;
    $70 = $8;
    $7 = $70;
    $71 = $7;
    $72 = $71;
    $73 = 6 & $72;
    $74 = ($73|0)!=(0);
    if ($74) {
     $75 = $8;
     $76 = $75;
     $77 = -8 & $76;
     $78 = $77;
     $ref$i$i = $78;
     $79 = $ref$i$i;
     $80 = HEAP16[$79>>1]|0;
     $count$i$i = $80;
     $81 = $count$i$i;
     $82 = $81&65535;
     $83 = ($82|0)!=(0);
     if ($83) {
      $84 = $count$i$i;
      $85 = (($84) + 1)<<16>>16;
      $count$i$i = $85;
      $86 = $count$i$i;
      $87 = $ref$i$i;
      HEAP16[$87>>1] = $86;
     }
    }
    $88 = $8;
    $tail = $88;
   } else {
    $4 = $63;
    $89 = $4;
    $90 = $89;
    $91 = 3 & $90;
    $92 = ($91|0)==(2);
    if (!($92)) {
     $tail = 0;
     break;
    }
    $93 = $m;
    $3 = $93;
    $94 = $3;
    $95 = $94;
    $96 = 4 & $95;
    $97 = ($96|0)!=(0);
    if ($97) {
     $98 = $3;
     $99 = $98;
     $100 = (($99) - 6)|0;
     $101 = $100;
     $buf$i = $101;
     $102 = $buf$i;
     $103 = ((($102)) + 4|0);
     $104 = $buf$i;
     $105 = ((($104)) + 2|0);
     $106 = HEAP16[$105>>1]|0;
     $107 = $106&65535;
     $108 = (($107) + 4)|0;
     $109 = (($108) - 1)|0;
     $110 = $109 & -4;
     $111 = (($103) + ($110)|0);
     $112 = ((($111)) + 4|0);
     $113 = HEAP32[$112>>2]|0;
     $1 = $113;
     $114 = $1;
     $0 = $114;
     $115 = $0;
     $116 = $115;
     $117 = 6 & $116;
     $118 = ($117|0)!=(0);
     if ($118) {
      $119 = $1;
      $120 = $119;
      $121 = -8 & $120;
      $122 = $121;
      $ref$i$i10 = $122;
      $123 = $ref$i$i10;
      $124 = HEAP16[$123>>1]|0;
      $count$i$i11 = $124;
      $125 = $count$i$i11;
      $126 = $125&65535;
      $127 = ($126|0)!=(0);
      if ($127) {
       $128 = $count$i$i11;
       $129 = (($128) + 1)<<16>>16;
       $count$i$i11 = $129;
       $130 = $count$i$i11;
       $131 = $ref$i$i10;
       HEAP16[$131>>1] = $130;
      }
     }
     $132 = $1;
     $2 = $132;
    } else {
     $2 = 0;
    }
    $133 = $2;
    $tail = $133;
   }
  } while(0);
  $134 = $m;
  $6 = $134;
  $135 = $6;
  $5 = $135;
  $136 = $5;
  $137 = $136;
  $138 = 6 & $137;
  $139 = ($138|0)!=(0);
  if ($139) {
   $140 = $6;
   $141 = $140;
   $142 = -8 & $141;
   $143 = $142;
   $ref$i7 = $143;
   $144 = $ref$i7;
   $145 = HEAP16[$144>>1]|0;
   $count$i8 = $145;
   $146 = $count$i8;
   $147 = $146&65535;
   $148 = ($147|0)!=(0);
   if ($148) {
    $149 = $count$i8;
    $150 = (($149) + -1)<<16>>16;
    $count$i8 = $150;
    $151 = $count$i8;
    $152 = $ref$i7;
    HEAP16[$152>>1] = $151;
    $153 = $count$i8;
    $154 = $153&65535;
    $155 = ($154|0)==(0);
    if ($155) {
     $156 = $6;
     _mu_destroy($156);
    }
   }
  }
  $157 = $tail;
  $158 = $type;
  $159 = ($157|0)==($158|0);
  $160 = $tail;
  if ($159) {
   break;
  }
  $m = $160;
 }
 if ((label|0) == 32) {
  $19 = 0;
  $235 = $19;
  STACKTOP = sp;return ($235|0);
 }
 $11 = $160;
 $161 = $11;
 $10 = $161;
 $162 = $10;
 $163 = $162;
 $164 = 6 & $163;
 $165 = ($164|0)!=(0);
 if ($165) {
  $166 = $11;
  $167 = $166;
  $168 = -8 & $167;
  $169 = $168;
  $ref$i4 = $169;
  $170 = $ref$i4;
  $171 = HEAP16[$170>>1]|0;
  $count$i5 = $171;
  $172 = $count$i5;
  $173 = $172&65535;
  $174 = ($173|0)!=(0);
  if ($174) {
   $175 = $count$i5;
   $176 = (($175) + -1)<<16>>16;
   $count$i5 = $176;
   $177 = $count$i5;
   $178 = $ref$i4;
   HEAP16[$178>>1] = $177;
   $179 = $count$i5;
   $180 = $179&65535;
   $181 = ($180|0)==(0);
   if ($181) {
    $182 = $11;
    _mu_destroy($182);
   }
  }
 }
 $19 = 1;
 $235 = $19;
 STACKTOP = sp;return ($235|0);
}
function _mu_parse_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1301]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(328)|0);
  HEAP32[1301] = $2;
 }
 $3 = HEAP32[1301]|0;
 return ($3|0);
}
function _mu_parse_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((344) + 7)|0))|0);
}
function _mu_parse_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $ref$i = 0, $s = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $frame;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $s = $8;
 $9 = $s;
 $5 = $9;
 $10 = $5;
 $4 = $10;
 $11 = $4;
 $12 = $11;
 $13 = 7 & $12;
 $14 = ($13|0)==(3);
 if (!($14)) {
  $15 = (_mu_parse_key_def()|0);
  $16 = $6;
  _mu_errorargs($15,1,$16);
  // unreachable;
 }
 $17 = $s;
 $1 = $17;
 $18 = $1;
 $19 = $18;
 $20 = (($19) - 3)|0;
 $21 = $20;
 $22 = ((($21)) + 4|0);
 $23 = $s;
 $0 = $23;
 $24 = $0;
 $25 = $24;
 $26 = (($25) - 3)|0;
 $27 = $26;
 $28 = ((($27)) + 2|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29&65535;
 $31 = (_mu_parse($22,$30)|0);
 $32 = $6;
 HEAP32[$32>>2] = $31;
 $33 = $s;
 $3 = $33;
 $34 = $3;
 $2 = $34;
 $35 = $2;
 $36 = $35;
 $37 = 6 & $36;
 $38 = ($37|0)!=(0);
 if (!($38)) {
  STACKTOP = sp;return 1;
 }
 $39 = $3;
 $40 = $39;
 $41 = -8 & $40;
 $42 = $41;
 $ref$i = $42;
 $43 = $ref$i;
 $44 = HEAP16[$43>>1]|0;
 $count$i = $44;
 $45 = $count$i;
 $46 = $45&65535;
 $47 = ($46|0)!=(0);
 if (!($47)) {
  STACKTOP = sp;return 1;
 }
 $48 = $count$i;
 $49 = (($48) + -1)<<16>>16;
 $count$i = $49;
 $50 = $count$i;
 $51 = $ref$i;
 HEAP16[$51>>1] = $50;
 $52 = $count$i;
 $53 = $52&65535;
 $54 = ($53|0)==(0);
 if (!($54)) {
  STACKTOP = sp;return 1;
 }
 $55 = $3;
 _mu_destroy($55);
 STACKTOP = sp;return 1;
}
function _mu_repr_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1302]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(360)|0);
  HEAP32[1302] = $2;
 }
 $3 = HEAP32[1302]|0;
 return ($3|0);
}
function _mu_repr_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((368) + 7)|0))|0);
}
function _mu_repr_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $depth = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $frame;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $m = $4;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $depth = $7;
 $8 = $depth;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $depth;
  $1 = $10;
  $11 = $1;
  $0 = $11;
  $12 = $0;
  $13 = $12;
  $14 = 7 & $13;
  $15 = ($14|0)==(1);
  if (!($15)) {
   $16 = (_mu_repr_key_def()|0);
   $17 = $2;
   _mu_errorargs($16,2,$17);
   // unreachable;
  }
 }
 $18 = $m;
 $19 = $depth;
 $20 = (_mu_repr($18,$19)|0);
 $21 = $2;
 HEAP32[$21>>2] = $20;
 STACKTOP = sp;return 1;
}
function _mu_ord_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1303]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(384)|0);
  HEAP32[1303] = $2;
 }
 $3 = HEAP32[1303]|0;
 return ($3|0);
}
function _mu_ord_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((392) + 7)|0))|0);
}
function _mu_ord_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $m = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 36|0;
 $8 = $frame;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $m = $10;
 $11 = $m;
 $7 = $11;
 $12 = $7;
 $6 = $12;
 $13 = $6;
 $14 = $13;
 $15 = 7 & $14;
 $16 = ($15|0)==(3);
 if (!($16)) {
  $26 = (_mu_ord_key_def()|0);
  $27 = $8;
  _mu_errorargs($26,1,$27);
  // unreachable;
 }
 $17 = $m;
 $3 = $17;
 $18 = $3;
 $19 = $18;
 $20 = (($19) - 3)|0;
 $21 = $20;
 $22 = ((($21)) + 2|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23&65535;
 $25 = ($24|0)==(1);
 if (!($25)) {
  $26 = (_mu_ord_key_def()|0);
  $27 = $8;
  _mu_errorargs($26,1,$27);
  // unreachable;
 }
 $28 = $m;
 $0 = $28;
 $29 = $0;
 $30 = $29;
 $31 = (($30) - 3)|0;
 $32 = $31;
 $33 = ((($32)) + 4|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $1 = $35;
 $36 = $1;
 $37 = (+($36>>>0));
 HEAPF32[$2>>2] = $37;
 $38 = HEAP32[$2>>2]|0;
 $39 = -8 & $38;
 $40 = (1 + ($39))|0;
 $41 = $40;
 $42 = $8;
 HEAP32[$42>>2] = $41;
 $43 = $m;
 $5 = $43;
 $44 = $5;
 $4 = $44;
 $45 = $4;
 $46 = $45;
 $47 = 6 & $46;
 $48 = ($47|0)!=(0);
 if (!($48)) {
  STACKTOP = sp;return 1;
 }
 $49 = $5;
 $50 = $49;
 $51 = -8 & $50;
 $52 = $51;
 $ref$i = $52;
 $53 = $ref$i;
 $54 = HEAP16[$53>>1]|0;
 $count$i = $54;
 $55 = $count$i;
 $56 = $55&65535;
 $57 = ($56|0)!=(0);
 if (!($57)) {
  STACKTOP = sp;return 1;
 }
 $58 = $count$i;
 $59 = (($58) + -1)<<16>>16;
 $count$i = $59;
 $60 = $count$i;
 $61 = $ref$i;
 HEAP16[$61>>1] = $60;
 $62 = $count$i;
 $63 = $62&65535;
 $64 = ($63|0)==(0);
 if (!($64)) {
  STACKTOP = sp;return 1;
 }
 $65 = $5;
 _mu_destroy($65);
 STACKTOP = sp;return 1;
}
function _mu_chr_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1304]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(408)|0);
  HEAP32[1304] = $2;
 }
 $3 = HEAP32[1304]|0;
 return ($3|0);
}
function _mu_chr_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((416) + 7)|0))|0);
}
function _mu_chr_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 32|0;
 $3 = sp + 24|0;
 $6 = sp + 12|0;
 $9 = sp + 40|0;
 $8 = $frame;
 $10 = $8;
 $11 = HEAP32[$10>>2]|0;
 $m = $11;
 $12 = $m;
 $13 = $m;
 $7 = $13;
 $14 = $7;
 $5 = $14;
 $15 = $5;
 $16 = $15;
 $17 = (($16) - 1)|0;
 HEAP32[$6>>2] = $17;
 $18 = +HEAPF32[$6>>2];
 $19 = (~~(($18))>>>0);
 $20 = $19&255;
 $21 = $20&255;
 $0 = $21;
 $22 = $0;
 $23 = (+($22>>>0));
 HEAPF32[$1>>2] = $23;
 $24 = HEAP32[$1>>2]|0;
 $25 = -8 & $24;
 $26 = (1 + ($25))|0;
 $27 = $26;
 $28 = ($12|0)==($27|0);
 if ($28) {
  $31 = $m;
  $4 = $31;
  $32 = $4;
  $2 = $32;
  $33 = $2;
  $34 = $33;
  $35 = (($34) - 1)|0;
  HEAP32[$3>>2] = $35;
  $36 = +HEAPF32[$3>>2];
  $37 = (~~(($36))>>>0);
  $38 = $37&255;
  HEAP8[$9>>0] = $38;
  $39 = (_mu_str_fromdata($9,1)|0);
  $40 = $8;
  HEAP32[$40>>2] = $39;
  STACKTOP = sp;return 1;
 } else {
  $29 = (_mu_chr_key_def()|0);
  $30 = $8;
  _mu_errorargs($29,1,$30);
  // unreachable;
 }
 return (0)|0;
}
function _mu_bin_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1305]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(432)|0);
  HEAP32[1305] = $2;
 }
 $3 = HEAP32[1305]|0;
 return ($3|0);
}
function _mu_bin_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((440) + 7)|0))|0);
}
function _mu_bin_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $frame;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $m = $4;
 $5 = $m;
 $1 = $5;
 $6 = $1;
 $0 = $6;
 $7 = $0;
 $8 = $7;
 $9 = 7 & $8;
 $10 = ($9|0)==(1);
 if ($10) {
  $13 = $m;
  $14 = (_mu_num_bin($13)|0);
  $15 = $2;
  HEAP32[$15>>2] = $14;
  STACKTOP = sp;return 1;
 } else {
  $11 = (_mu_bin_key_def()|0);
  $12 = $2;
  _mu_errorargs($11,1,$12);
  // unreachable;
 }
 return (0)|0;
}
function _mu_oct_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1306]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(456)|0);
  HEAP32[1306] = $2;
 }
 $3 = HEAP32[1306]|0;
 return ($3|0);
}
function _mu_oct_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((464) + 7)|0))|0);
}
function _mu_oct_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $frame;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $m = $4;
 $5 = $m;
 $1 = $5;
 $6 = $1;
 $0 = $6;
 $7 = $0;
 $8 = $7;
 $9 = 7 & $8;
 $10 = ($9|0)==(1);
 if ($10) {
  $13 = $m;
  $14 = (_mu_num_oct($13)|0);
  $15 = $2;
  HEAP32[$15>>2] = $14;
  STACKTOP = sp;return 1;
 } else {
  $11 = (_mu_oct_key_def()|0);
  $12 = $2;
  _mu_errorargs($11,1,$12);
  // unreachable;
 }
 return (0)|0;
}
function _mu_hex_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1307]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(480)|0);
  HEAP32[1307] = $2;
 }
 $3 = HEAP32[1307]|0;
 return ($3|0);
}
function _mu_hex_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((488) + 7)|0))|0);
}
function _mu_hex_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $frame;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $m = $4;
 $5 = $m;
 $1 = $5;
 $6 = $1;
 $0 = $6;
 $7 = $0;
 $8 = $7;
 $9 = 7 & $8;
 $10 = ($9|0)==(1);
 if ($10) {
  $13 = $m;
  $14 = (_mu_num_hex($13)|0);
  $15 = $2;
  HEAP32[$15>>2] = $14;
  STACKTOP = sp;return 1;
 } else {
  $11 = (_mu_hex_key_def()|0);
  $12 = $2;
  _mu_errorargs($11,1,$12);
  // unreachable;
 }
 return (0)|0;
}
function _mu_len_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1308]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(504)|0);
  HEAP32[1308] = $2;
 }
 $3 = HEAP32[1308]|0;
 return ($3|0);
}
function _mu_len_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((512) + 7)|0))|0);
}
function _mu_len_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $count$i = 0, $count$i2 = 0, $ref$i = 0;
 var $ref$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 80|0;
 $10 = sp + 44|0;
 $17 = $frame;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $a = $19;
 $20 = $a;
 $15 = $20;
 $21 = $15;
 $14 = $21;
 $22 = $14;
 $23 = $22;
 $24 = 7 & $23;
 $25 = ($24|0)==(3);
 if (!($25)) {
  $26 = $a;
  $11 = $26;
  $27 = $11;
  $28 = $27;
  $29 = 6 & $28;
  $30 = ($29|0)==(4);
  if (!($30)) {
   $31 = (_mu_len_key_def()|0);
   $32 = $17;
   _mu_errorargs($31,1,$32);
   // unreachable;
  }
 }
 $33 = $a;
 $4 = $33;
 $34 = $4;
 $3 = $34;
 $35 = $3;
 $36 = $35;
 $37 = 7 & $36;
 $38 = ($37|0)==(3);
 $39 = $a;
 if ($38) {
  $0 = $39;
  $40 = $0;
  $41 = $40;
  $42 = (($41) - 3)|0;
  $43 = $42;
  $44 = ((($43)) + 2|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45&65535;
  $1 = $46;
  $47 = $1;
  $48 = (+($47>>>0));
  HEAPF32[$2>>2] = $48;
  $49 = HEAP32[$2>>2]|0;
  $50 = -8 & $49;
  $51 = (1 + ($50))|0;
  $52 = $51;
  $53 = $17;
  HEAP32[$53>>2] = $52;
  $54 = $a;
  $6 = $54;
  $55 = $6;
  $5 = $55;
  $56 = $5;
  $57 = $56;
  $58 = 6 & $57;
  $59 = ($58|0)!=(0);
  if ($59) {
   $60 = $6;
   $61 = $60;
   $62 = -8 & $61;
   $63 = $62;
   $ref$i1 = $63;
   $64 = $ref$i1;
   $65 = HEAP16[$64>>1]|0;
   $count$i2 = $65;
   $66 = $count$i2;
   $67 = $66&65535;
   $68 = ($67|0)!=(0);
   if ($68) {
    $69 = $count$i2;
    $70 = (($69) + -1)<<16>>16;
    $count$i2 = $70;
    $71 = $count$i2;
    $72 = $ref$i1;
    HEAP16[$72>>1] = $71;
    $73 = $count$i2;
    $74 = $73&65535;
    $75 = ($74|0)==(0);
    if ($75) {
     $76 = $6;
     _mu_destroy($76);
    }
   }
  }
  $16 = 1;
  $115 = $16;
  STACKTOP = sp;return ($115|0);
 } else {
  $7 = $39;
  $77 = $a;
  $8 = $77;
  $78 = $8;
  $79 = $78;
  $80 = $79 & -8;
  $81 = $80;
  $82 = ((($81)) + 2|0);
  $83 = HEAP16[$82>>1]|0;
  $84 = $83&65535;
  $9 = $84;
  $85 = $9;
  $86 = (+($85>>>0));
  HEAPF32[$10>>2] = $86;
  $87 = HEAP32[$10>>2]|0;
  $88 = -8 & $87;
  $89 = (1 + ($88))|0;
  $90 = $89;
  $91 = $17;
  HEAP32[$91>>2] = $90;
  $92 = $a;
  $13 = $92;
  $93 = $13;
  $12 = $93;
  $94 = $12;
  $95 = $94;
  $96 = 6 & $95;
  $97 = ($96|0)!=(0);
  if ($97) {
   $98 = $13;
   $99 = $98;
   $100 = -8 & $99;
   $101 = $100;
   $ref$i = $101;
   $102 = $ref$i;
   $103 = HEAP16[$102>>1]|0;
   $count$i = $103;
   $104 = $count$i;
   $105 = $104&65535;
   $106 = ($105|0)!=(0);
   if ($106) {
    $107 = $count$i;
    $108 = (($107) + -1)<<16>>16;
    $count$i = $108;
    $109 = $count$i;
    $110 = $ref$i;
    HEAP16[$110>>1] = $109;
    $111 = $count$i;
    $112 = $111&65535;
    $113 = ($112|0)==(0);
    if ($113) {
     $114 = $13;
     _mu_destroy($114);
    }
   }
  }
  $16 = 1;
  $115 = $16;
  STACKTOP = sp;return ($115|0);
 }
 return (0)|0;
}
function _mu_tail_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1309]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(528)|0);
  HEAP32[1309] = $2;
 }
 $3 = HEAP32[1309]|0;
 return ($3|0);
}
function _mu_tail_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((536) + 7)|0))|0);
}
function _mu_tail_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf$i = 0, $count$i = 0, $count$i$i = 0, $count$i$i5 = 0, $count$i2 = 0, $ref$i = 0;
 var $ref$i$i = 0, $ref$i$i4 = 0, $ref$i1 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = $frame;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $t = $18;
 $19 = $16;
 $20 = HEAP32[$19>>2]|0;
 $14 = $20;
 $21 = $14;
 $22 = $21;
 $23 = 6 & $22;
 $24 = ($23|0)==(4);
 if (!($24)) {
  $25 = $16;
  $26 = HEAP32[$25>>2]|0;
  $11 = $26;
  $27 = $11;
  $28 = $27;
  $29 = 3 & $28;
  $30 = ($29|0)==(2);
  if (!($30)) {
   $31 = (_mu_tail_key_def()|0);
   $32 = $16;
   _mu_errorargs($31,1,$32);
   // unreachable;
  }
 }
 $33 = $t;
 $3 = $33;
 $34 = $3;
 $35 = $34;
 $36 = 6 & $35;
 $37 = ($36|0)==(4);
 $38 = $t;
 if ($37) {
  $2 = $38;
  $39 = $2;
  $40 = $39;
  $41 = $40 & -8;
  $42 = $41;
  $43 = ((($42)) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $1 = $44;
  $45 = $1;
  $0 = $45;
  $46 = $0;
  $47 = $46;
  $48 = 6 & $47;
  $49 = ($48|0)!=(0);
  if ($49) {
   $50 = $1;
   $51 = $50;
   $52 = -8 & $51;
   $53 = $52;
   $ref$i$i4 = $53;
   $54 = $ref$i$i4;
   $55 = HEAP16[$54>>1]|0;
   $count$i$i5 = $55;
   $56 = $count$i$i5;
   $57 = $56&65535;
   $58 = ($57|0)!=(0);
   if ($58) {
    $59 = $count$i$i5;
    $60 = (($59) + 1)<<16>>16;
    $count$i$i5 = $60;
    $61 = $count$i$i5;
    $62 = $ref$i$i4;
    HEAP16[$62>>1] = $61;
   }
  }
  $63 = $1;
  $64 = $16;
  HEAP32[$64>>2] = $63;
  $65 = $t;
  $5 = $65;
  $66 = $5;
  $4 = $66;
  $67 = $4;
  $68 = $67;
  $69 = 6 & $68;
  $70 = ($69|0)!=(0);
  if ($70) {
   $71 = $5;
   $72 = $71;
   $73 = -8 & $72;
   $74 = $73;
   $ref$i1 = $74;
   $75 = $ref$i1;
   $76 = HEAP16[$75>>1]|0;
   $count$i2 = $76;
   $77 = $count$i2;
   $78 = $77&65535;
   $79 = ($78|0)!=(0);
   if ($79) {
    $80 = $count$i2;
    $81 = (($80) + -1)<<16>>16;
    $count$i2 = $81;
    $82 = $count$i2;
    $83 = $ref$i1;
    HEAP16[$83>>1] = $82;
    $84 = $count$i2;
    $85 = $84&65535;
    $86 = ($85|0)==(0);
    if ($86) {
     $87 = $5;
     _mu_destroy($87);
    }
   }
  }
  $15 = 1;
  $153 = $15;
  STACKTOP = sp;return ($153|0);
 }
 $6 = $38;
 $88 = $t;
 $10 = $88;
 $89 = $10;
 $90 = $89;
 $91 = 4 & $90;
 $92 = ($91|0)!=(0);
 if ($92) {
  $93 = $10;
  $94 = $93;
  $95 = (($94) - 6)|0;
  $96 = $95;
  $buf$i = $96;
  $97 = $buf$i;
  $98 = ((($97)) + 4|0);
  $99 = $buf$i;
  $100 = ((($99)) + 2|0);
  $101 = HEAP16[$100>>1]|0;
  $102 = $101&65535;
  $103 = (($102) + 4)|0;
  $104 = (($103) - 1)|0;
  $105 = $104 & -4;
  $106 = (($98) + ($105)|0);
  $107 = ((($106)) + 4|0);
  $108 = HEAP32[$107>>2]|0;
  $8 = $108;
  $109 = $8;
  $7 = $109;
  $110 = $7;
  $111 = $110;
  $112 = 6 & $111;
  $113 = ($112|0)!=(0);
  if ($113) {
   $114 = $8;
   $115 = $114;
   $116 = -8 & $115;
   $117 = $116;
   $ref$i$i = $117;
   $118 = $ref$i$i;
   $119 = HEAP16[$118>>1]|0;
   $count$i$i = $119;
   $120 = $count$i$i;
   $121 = $120&65535;
   $122 = ($121|0)!=(0);
   if ($122) {
    $123 = $count$i$i;
    $124 = (($123) + 1)<<16>>16;
    $count$i$i = $124;
    $125 = $count$i$i;
    $126 = $ref$i$i;
    HEAP16[$126>>1] = $125;
   }
  }
  $127 = $8;
  $9 = $127;
 } else {
  $9 = 0;
 }
 $128 = $9;
 $129 = $16;
 HEAP32[$129>>2] = $128;
 $130 = $t;
 $13 = $130;
 $131 = $13;
 $12 = $131;
 $132 = $12;
 $133 = $132;
 $134 = 6 & $133;
 $135 = ($134|0)!=(0);
 if ($135) {
  $136 = $13;
  $137 = $136;
  $138 = -8 & $137;
  $139 = $138;
  $ref$i = $139;
  $140 = $ref$i;
  $141 = HEAP16[$140>>1]|0;
  $count$i = $141;
  $142 = $count$i;
  $143 = $142&65535;
  $144 = ($143|0)!=(0);
  if ($144) {
   $145 = $count$i;
   $146 = (($145) + -1)<<16>>16;
   $count$i = $146;
   $147 = $count$i;
   $148 = $ref$i;
   HEAP16[$148>>1] = $147;
   $149 = $count$i;
   $150 = $149&65535;
   $151 = ($150|0)==(0);
   if ($151) {
    $152 = $13;
    _mu_destroy($152);
   }
  }
 }
 $15 = 1;
 $153 = $15;
 STACKTOP = sp;return ($153|0);
}
function _mu_const_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1310]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(552)|0);
  HEAP32[1310] = $2;
 }
 $3 = HEAP32[1310]|0;
 return ($3|0);
}
function _mu_const_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((568) + 7)|0))|0);
}
function _mu_const_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $count$i = 0, $count$i$i = 0, $ref$i = 0, $ref$i$i = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $frame;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $t = $8;
 $9 = $t;
 $5 = $9;
 $10 = $5;
 $11 = $10;
 $12 = 6 & $11;
 $13 = ($12|0)==(4);
 if (!($13)) {
  STACKTOP = sp;return 1;
 }
 $14 = $t;
 $2 = $14;
 $15 = $2;
 $16 = $15;
 $17 = 1 | $16;
 $18 = $17;
 $1 = $18;
 $19 = $1;
 $0 = $19;
 $20 = $0;
 $21 = $20;
 $22 = 6 & $21;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $1;
  $25 = $24;
  $26 = -8 & $25;
  $27 = $26;
  $ref$i$i = $27;
  $28 = $ref$i$i;
  $29 = HEAP16[$28>>1]|0;
  $count$i$i = $29;
  $30 = $count$i$i;
  $31 = $30&65535;
  $32 = ($31|0)!=(0);
  if ($32) {
   $33 = $count$i$i;
   $34 = (($33) + 1)<<16>>16;
   $count$i$i = $34;
   $35 = $count$i$i;
   $36 = $ref$i$i;
   HEAP16[$36>>1] = $35;
  }
 }
 $37 = $1;
 $38 = $6;
 HEAP32[$38>>2] = $37;
 $39 = $t;
 $4 = $39;
 $40 = $4;
 $3 = $40;
 $41 = $3;
 $42 = $41;
 $43 = 6 & $42;
 $44 = ($43|0)!=(0);
 if (!($44)) {
  STACKTOP = sp;return 1;
 }
 $45 = $4;
 $46 = $45;
 $47 = -8 & $46;
 $48 = $47;
 $ref$i = $48;
 $49 = $ref$i;
 $50 = HEAP16[$49>>1]|0;
 $count$i = $50;
 $51 = $count$i;
 $52 = $51&65535;
 $53 = ($52|0)!=(0);
 if (!($53)) {
  STACKTOP = sp;return 1;
 }
 $54 = $count$i;
 $55 = (($54) + -1)<<16>>16;
 $count$i = $55;
 $56 = $count$i;
 $57 = $ref$i;
 HEAP16[$57>>1] = $56;
 $58 = $count$i;
 $59 = $58&65535;
 $60 = ($59|0)==(0);
 if (!($60)) {
  STACKTOP = sp;return 1;
 }
 $61 = $4;
 _mu_destroy($61);
 STACKTOP = sp;return 1;
}
function _mu_concat_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1311]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(584)|0);
  HEAP32[1311] = $2;
 }
 $3 = HEAP32[1311]|0;
 return ($3|0);
}
function _mu_concat_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((592) + 7)|0))|0);
}
function _mu_concat_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $b = 0, $count$i = 0, $count$i2 = 0, $offset = 0, $ref$i = 0, $ref$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $frame;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $a = $21;
 $22 = $19;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $b = $24;
 $25 = $19;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $offset = $27;
 $28 = $a;
 $17 = $28;
 $29 = $17;
 $16 = $29;
 $30 = $16;
 $31 = $30;
 $32 = 7 & $31;
 $33 = ($32|0)==(3);
 if ($33) {
  $34 = $b;
  $13 = $34;
  $35 = $13;
  $12 = $35;
  $36 = $12;
  $37 = $36;
  $38 = 7 & $37;
  $39 = ($38|0)==(3);
  if (!($39)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $40 = $a;
  $7 = $40;
  $41 = $7;
  $42 = $41;
  $43 = 6 & $42;
  $44 = ($43|0)==(4);
  if (!($44)) {
   $58 = (_mu_concat_key_def()|0);
   $59 = $19;
   _mu_errorargs($58,3,$59);
   // unreachable;
  }
  $45 = $b;
  $2 = $45;
  $46 = $2;
  $47 = $46;
  $48 = 6 & $47;
  $49 = ($48|0)==(4);
  if (!($49)) {
   $58 = (_mu_concat_key_def()|0);
   $59 = $19;
   _mu_errorargs($58,3,$59);
   // unreachable;
  }
 }
 $50 = $offset;
 $51 = ($50|0)!=(0|0);
 if ($51) {
  $52 = $offset;
  $1 = $52;
  $53 = $1;
  $0 = $53;
  $54 = $0;
  $55 = $54;
  $56 = 7 & $55;
  $57 = ($56|0)==(1);
  if (!($57)) {
   $58 = (_mu_concat_key_def()|0);
   $59 = $19;
   _mu_errorargs($58,3,$59);
   // unreachable;
  }
 }
 $60 = $a;
 $4 = $60;
 $61 = $4;
 $3 = $61;
 $62 = $3;
 $63 = $62;
 $64 = 7 & $63;
 $65 = ($64|0)==(3);
 if ($65) {
  $66 = $b;
  $6 = $66;
  $67 = $6;
  $5 = $67;
  $68 = $5;
  $69 = $68;
  $70 = 7 & $69;
  $71 = ($70|0)==(3);
  if ($71) {
   $72 = $a;
   $73 = $b;
   $74 = (_mu_str_concat($72,$73)|0);
   $75 = $19;
   HEAP32[$75>>2] = $74;
   $76 = $a;
   $9 = $76;
   $77 = $9;
   $8 = $77;
   $78 = $8;
   $79 = $78;
   $80 = 6 & $79;
   $81 = ($80|0)!=(0);
   if ($81) {
    $82 = $9;
    $83 = $82;
    $84 = -8 & $83;
    $85 = $84;
    $ref$i1 = $85;
    $86 = $ref$i1;
    $87 = HEAP16[$86>>1]|0;
    $count$i2 = $87;
    $88 = $count$i2;
    $89 = $88&65535;
    $90 = ($89|0)!=(0);
    if ($90) {
     $91 = $count$i2;
     $92 = (($91) + -1)<<16>>16;
     $count$i2 = $92;
     $93 = $count$i2;
     $94 = $ref$i1;
     HEAP16[$94>>1] = $93;
     $95 = $count$i2;
     $96 = $95&65535;
     $97 = ($96|0)==(0);
     if ($97) {
      $98 = $9;
      _mu_destroy($98);
     }
    }
   }
   $18 = 1;
   $129 = $18;
   STACKTOP = sp;return ($129|0);
  }
 }
 $99 = $a;
 $10 = $99;
 $100 = $b;
 $11 = $100;
 $101 = $a;
 $102 = $b;
 $103 = $offset;
 $104 = (_mu_tbl_concat($101,$102,$103)|0);
 $105 = $19;
 HEAP32[$105>>2] = $104;
 $106 = $a;
 $15 = $106;
 $107 = $15;
 $14 = $107;
 $108 = $14;
 $109 = $108;
 $110 = 6 & $109;
 $111 = ($110|0)!=(0);
 if ($111) {
  $112 = $15;
  $113 = $112;
  $114 = -8 & $113;
  $115 = $114;
  $ref$i = $115;
  $116 = $ref$i;
  $117 = HEAP16[$116>>1]|0;
  $count$i = $117;
  $118 = $count$i;
  $119 = $118&65535;
  $120 = ($119|0)!=(0);
  if ($120) {
   $121 = $count$i;
   $122 = (($121) + -1)<<16>>16;
   $count$i = $122;
   $123 = $count$i;
   $124 = $ref$i;
   HEAP16[$124>>1] = $123;
   $125 = $count$i;
   $126 = $125&65535;
   $127 = ($126|0)==(0);
   if ($127) {
    $128 = $15;
    _mu_destroy($128);
   }
  }
 }
 $18 = 1;
 $129 = $18;
 STACKTOP = sp;return ($129|0);
}
function _mu_subset_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1312]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(608)|0);
  HEAP32[1312] = $2;
 }
 $3 = HEAP32[1312]|0;
 return ($3|0);
}
function _mu_subset_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((616) + 7)|0))|0);
}
function _mu_subset_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a = 0, $count$i = 0, $count$i2 = 0, $lower = 0, $loweri = 0, $ref$i = 0, $ref$i1 = 0, $upper = 0, $upperi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = $frame;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $a = $17;
 $18 = $15;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $lower = $20;
 $21 = $15;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $upper = $23;
 $24 = $a;
 $13 = $24;
 $25 = $13;
 $12 = $25;
 $26 = $12;
 $27 = $26;
 $28 = 7 & $27;
 $29 = ($28|0)==(3);
 if (!($29)) {
  $30 = $a;
  $9 = $30;
  $31 = $9;
  $32 = $31;
  $33 = 6 & $32;
  $34 = ($33|0)==(4);
  if (!($34)) {
   $49 = (_mu_subset_key_def()|0);
   $50 = $15;
   _mu_errorargs($49,3,$50);
   // unreachable;
  }
 }
 $35 = $lower;
 $5 = $35;
 $36 = $5;
 $4 = $36;
 $37 = $4;
 $38 = $37;
 $39 = 7 & $38;
 $40 = ($39|0)==(1);
 if (!($40)) {
  $49 = (_mu_subset_key_def()|0);
  $50 = $15;
  _mu_errorargs($49,3,$50);
  // unreachable;
 }
 $41 = $upper;
 $42 = ($41|0)!=(0|0);
 if ($42) {
  $43 = $upper;
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = $45;
  $47 = 7 & $46;
  $48 = ($47|0)==(1);
  if (!($48)) {
   $49 = (_mu_subset_key_def()|0);
   $50 = $15;
   _mu_errorargs($49,3,$50);
   // unreachable;
  }
 }
 $51 = $lower;
 $52 = (_mu_num_clampint($51,-65535,65535)|0);
 $loweri = $52;
 $53 = $upper;
 $54 = ($53|0)!=(0|0);
 if ($54) {
  $57 = $upper;
  $58 = (_mu_num_clampint($57,-65535,65535)|0);
  $upperi = $58;
 } else {
  $55 = $loweri;
  $56 = (($55) + 1)|0;
  $upperi = $56;
 }
 $59 = $a;
 $3 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = $61;
 $63 = 7 & $62;
 $64 = ($63|0)==(3);
 $65 = $a;
 if ($64) {
  $66 = $loweri;
  $67 = $upperi;
  $68 = (_mu_str_subset($65,$66,$67)|0);
  $69 = $15;
  HEAP32[$69>>2] = $68;
  $70 = $a;
  $7 = $70;
  $71 = $7;
  $6 = $71;
  $72 = $6;
  $73 = $72;
  $74 = 6 & $73;
  $75 = ($74|0)!=(0);
  if ($75) {
   $76 = $7;
   $77 = $76;
   $78 = -8 & $77;
   $79 = $78;
   $ref$i1 = $79;
   $80 = $ref$i1;
   $81 = HEAP16[$80>>1]|0;
   $count$i2 = $81;
   $82 = $count$i2;
   $83 = $82&65535;
   $84 = ($83|0)!=(0);
   if ($84) {
    $85 = $count$i2;
    $86 = (($85) + -1)<<16>>16;
    $count$i2 = $86;
    $87 = $count$i2;
    $88 = $ref$i1;
    HEAP16[$88>>1] = $87;
    $89 = $count$i2;
    $90 = $89&65535;
    $91 = ($90|0)==(0);
    if ($91) {
     $92 = $7;
     _mu_destroy($92);
    }
   }
  }
  $14 = 1;
  $121 = $14;
  STACKTOP = sp;return ($121|0);
 } else {
  $8 = $65;
  $93 = $a;
  $94 = $loweri;
  $95 = $upperi;
  $96 = (_mu_tbl_subset($93,$94,$95)|0);
  $97 = $15;
  HEAP32[$97>>2] = $96;
  $98 = $a;
  $11 = $98;
  $99 = $11;
  $10 = $99;
  $100 = $10;
  $101 = $100;
  $102 = 6 & $101;
  $103 = ($102|0)!=(0);
  if ($103) {
   $104 = $11;
   $105 = $104;
   $106 = -8 & $105;
   $107 = $106;
   $ref$i = $107;
   $108 = $ref$i;
   $109 = HEAP16[$108>>1]|0;
   $count$i = $109;
   $110 = $count$i;
   $111 = $110&65535;
   $112 = ($111|0)!=(0);
   if ($112) {
    $113 = $count$i;
    $114 = (($113) + -1)<<16>>16;
    $count$i = $114;
    $115 = $count$i;
    $116 = $ref$i;
    HEAP16[$116>>1] = $115;
    $117 = $count$i;
    $118 = $117&65535;
    $119 = ($118|0)==(0);
    if ($119) {
     $120 = $11;
     _mu_destroy($120);
    }
   }
  }
  $14 = 1;
  $121 = $14;
  STACKTOP = sp;return ($121|0);
 }
 return (0)|0;
}
function _mu_push_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1313]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(632)|0);
  HEAP32[1313] = $2;
 }
 $3 = HEAP32[1313]|0;
 return ($3|0);
}
function _mu_push_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((640) + 7)|0))|0);
}
function _mu_push_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $i = 0, $ii = 0, $ref$i = 0, $t = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $frame;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $t = $8;
 $9 = $6;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $v = $11;
 $12 = $6;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $i = $14;
 $15 = $t;
 $5 = $15;
 $16 = $5;
 $17 = $16;
 $18 = 6 & $17;
 $19 = ($18|0)==(4);
 if (!($19)) {
  $28 = (_mu_push_key_def()|0);
  $29 = $6;
  _mu_errorargs($28,3,$29);
  // unreachable;
 }
 $20 = $i;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = $i;
  $2 = $22;
  $23 = $2;
  $1 = $23;
  $24 = $1;
  $25 = $24;
  $26 = 7 & $25;
  $27 = ($26|0)==(1);
  if (!($27)) {
   $28 = (_mu_push_key_def()|0);
   $29 = $6;
   _mu_errorargs($28,3,$29);
   // unreachable;
  }
 }
 $30 = $i;
 $31 = ($30|0)!=(0|0);
 if ($31) {
  $40 = $i;
  $41 = (_mu_num_clampint($40,-65535,65535)|0);
  $ii = $41;
 } else {
  $32 = $t;
  $0 = $32;
  $33 = $0;
  $34 = $33;
  $35 = $34 & -8;
  $36 = $35;
  $37 = ((($36)) + 2|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38&65535;
  $ii = $39;
 }
 $42 = $t;
 $43 = $v;
 $44 = $ii;
 _mu_tbl_push($42,$43,$44);
 $45 = $t;
 $4 = $45;
 $46 = $4;
 $3 = $46;
 $47 = $3;
 $48 = $47;
 $49 = 6 & $48;
 $50 = ($49|0)!=(0);
 if (!($50)) {
  STACKTOP = sp;return 0;
 }
 $51 = $4;
 $52 = $51;
 $53 = -8 & $52;
 $54 = $53;
 $ref$i = $54;
 $55 = $ref$i;
 $56 = HEAP16[$55>>1]|0;
 $count$i = $56;
 $57 = $count$i;
 $58 = $57&65535;
 $59 = ($58|0)!=(0);
 if (!($59)) {
  STACKTOP = sp;return 0;
 }
 $60 = $count$i;
 $61 = (($60) + -1)<<16>>16;
 $count$i = $61;
 $62 = $count$i;
 $63 = $ref$i;
 HEAP16[$63>>1] = $62;
 $64 = $count$i;
 $65 = $64&65535;
 $66 = ($65|0)==(0);
 if (!($66)) {
  STACKTOP = sp;return 0;
 }
 $67 = $4;
 _mu_destroy($67);
 STACKTOP = sp;return 0;
}
function _mu_pop_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1314]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(656)|0);
  HEAP32[1314] = $2;
 }
 $3 = HEAP32[1314]|0;
 return ($3|0);
}
function _mu_pop_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((664) + 7)|0))|0);
}
function _mu_pop_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $i = 0, $ii = 0, $ref$i = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $frame;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $t = $8;
 $9 = $6;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $i = $11;
 $12 = $t;
 $5 = $12;
 $13 = $5;
 $14 = $13;
 $15 = 6 & $14;
 $16 = ($15|0)==(4);
 if (!($16)) {
  $25 = (_mu_pop_key_def()|0);
  $26 = $6;
  _mu_errorargs($25,2,$26);
  // unreachable;
 }
 $17 = $i;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = $i;
  $2 = $19;
  $20 = $2;
  $1 = $20;
  $21 = $1;
  $22 = $21;
  $23 = 7 & $22;
  $24 = ($23|0)==(1);
  if (!($24)) {
   $25 = (_mu_pop_key_def()|0);
   $26 = $6;
   _mu_errorargs($25,2,$26);
   // unreachable;
  }
 }
 $27 = $i;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $38 = $i;
  $39 = (_mu_num_clampint($38,-65535,65535)|0);
  $ii = $39;
 } else {
  $29 = $t;
  $0 = $29;
  $30 = $0;
  $31 = $30;
  $32 = $31 & -8;
  $33 = $32;
  $34 = ((($33)) + 2|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35&65535;
  $37 = (($36) - 1)|0;
  $ii = $37;
 }
 $40 = $t;
 $41 = $ii;
 $42 = (_mu_tbl_pop($40,$41)|0);
 $43 = $6;
 HEAP32[$43>>2] = $42;
 $44 = $t;
 $4 = $44;
 $45 = $4;
 $3 = $45;
 $46 = $3;
 $47 = $46;
 $48 = 6 & $47;
 $49 = ($48|0)!=(0);
 if (!($49)) {
  STACKTOP = sp;return 1;
 }
 $50 = $4;
 $51 = $50;
 $52 = -8 & $51;
 $53 = $52;
 $ref$i = $53;
 $54 = $ref$i;
 $55 = HEAP16[$54>>1]|0;
 $count$i = $55;
 $56 = $count$i;
 $57 = $56&65535;
 $58 = ($57|0)!=(0);
 if (!($58)) {
  STACKTOP = sp;return 1;
 }
 $59 = $count$i;
 $60 = (($59) + -1)<<16>>16;
 $count$i = $60;
 $61 = $count$i;
 $62 = $ref$i;
 HEAP16[$62>>1] = $61;
 $63 = $count$i;
 $64 = $63&65535;
 $65 = ($64|0)==(0);
 if (!($65)) {
  STACKTOP = sp;return 1;
 }
 $66 = $4;
 _mu_destroy($66);
 STACKTOP = sp;return 1;
}
function _mu_and_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1315]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(680)|0);
  HEAP32[1315] = $2;
 }
 $3 = HEAP32[1315]|0;
 return ($3|0);
}
function _mu_and_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((688) + 7)|0))|0);
}
function _mu_and_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $a = 0, $b = 0, $count$i = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = $frame;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $a = $17;
 $18 = $15;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $b = $20;
 $21 = $a;
 $13 = $21;
 $22 = $13;
 $12 = $22;
 $23 = $12;
 $24 = $23;
 $25 = 7 & $24;
 $26 = ($25|0)==(1);
 if ($26) {
  $27 = $b;
  $9 = $27;
  $28 = $9;
  $8 = $28;
  $29 = $8;
  $30 = $29;
  $31 = 7 & $30;
  $32 = ($31|0)==(1);
  if (!($32)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $33 = $a;
  $1 = $33;
  $34 = $1;
  $35 = $34;
  $36 = 6 & $35;
  $37 = ($36|0)==(4);
  if (!($37)) {
   $43 = (_mu_and_key_def()|0);
   $44 = $15;
   _mu_errorargs($43,2,$44);
   // unreachable;
  }
  $38 = $b;
  $0 = $38;
  $39 = $0;
  $40 = $39;
  $41 = 6 & $40;
  $42 = ($41|0)==(4);
  if (!($42)) {
   $43 = (_mu_and_key_def()|0);
   $44 = $15;
   _mu_errorargs($43,2,$44);
   // unreachable;
  }
 }
 $45 = $a;
 $3 = $45;
 $46 = $3;
 $2 = $46;
 $47 = $2;
 $48 = $47;
 $49 = 7 & $48;
 $50 = ($49|0)==(1);
 if ($50) {
  $51 = $b;
  $5 = $51;
  $52 = $5;
  $4 = $52;
  $53 = $4;
  $54 = $53;
  $55 = 7 & $54;
  $56 = ($55|0)==(1);
  if ($56) {
   $57 = $a;
   $58 = $b;
   $59 = (_mu_num_and($57,$58)|0);
   $60 = $15;
   HEAP32[$60>>2] = $59;
   $14 = 1;
   $90 = $14;
   STACKTOP = sp;return ($90|0);
  }
 }
 $61 = $a;
 $6 = $61;
 $62 = $b;
 $7 = $62;
 $63 = $a;
 $64 = $b;
 $65 = (_mu_tbl_and($63,$64)|0);
 $66 = $15;
 HEAP32[$66>>2] = $65;
 $67 = $a;
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = $69;
 $71 = 6 & $70;
 $72 = ($71|0)!=(0);
 if ($72) {
  $73 = $11;
  $74 = $73;
  $75 = -8 & $74;
  $76 = $75;
  $ref$i = $76;
  $77 = $ref$i;
  $78 = HEAP16[$77>>1]|0;
  $count$i = $78;
  $79 = $count$i;
  $80 = $79&65535;
  $81 = ($80|0)!=(0);
  if ($81) {
   $82 = $count$i;
   $83 = (($82) + -1)<<16>>16;
   $count$i = $83;
   $84 = $count$i;
   $85 = $ref$i;
   HEAP16[$85>>1] = $84;
   $86 = $count$i;
   $87 = $86&65535;
   $88 = ($87|0)==(0);
   if ($88) {
    $89 = $11;
    _mu_destroy($89);
   }
  }
 }
 $14 = 1;
 $90 = $14;
 STACKTOP = sp;return ($90|0);
}
function _mu_or_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1316]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(704)|0);
  HEAP32[1316] = $2;
 }
 $3 = HEAP32[1316]|0;
 return ($3|0);
}
function _mu_or_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((712) + 7)|0))|0);
}
function _mu_or_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $a = 0, $b = 0, $count$i = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = $frame;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $a = $17;
 $18 = $15;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $b = $20;
 $21 = $a;
 $13 = $21;
 $22 = $13;
 $12 = $22;
 $23 = $12;
 $24 = $23;
 $25 = 7 & $24;
 $26 = ($25|0)==(1);
 if ($26) {
  $27 = $b;
  $9 = $27;
  $28 = $9;
  $8 = $28;
  $29 = $8;
  $30 = $29;
  $31 = 7 & $30;
  $32 = ($31|0)==(1);
  if (!($32)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $33 = $a;
  $1 = $33;
  $34 = $1;
  $35 = $34;
  $36 = 6 & $35;
  $37 = ($36|0)==(4);
  if (!($37)) {
   $43 = (_mu_or_key_def()|0);
   $44 = $15;
   _mu_errorargs($43,2,$44);
   // unreachable;
  }
  $38 = $b;
  $0 = $38;
  $39 = $0;
  $40 = $39;
  $41 = 6 & $40;
  $42 = ($41|0)==(4);
  if (!($42)) {
   $43 = (_mu_or_key_def()|0);
   $44 = $15;
   _mu_errorargs($43,2,$44);
   // unreachable;
  }
 }
 $45 = $a;
 $3 = $45;
 $46 = $3;
 $2 = $46;
 $47 = $2;
 $48 = $47;
 $49 = 7 & $48;
 $50 = ($49|0)==(1);
 if ($50) {
  $51 = $b;
  $5 = $51;
  $52 = $5;
  $4 = $52;
  $53 = $4;
  $54 = $53;
  $55 = 7 & $54;
  $56 = ($55|0)==(1);
  if ($56) {
   $57 = $a;
   $58 = $b;
   $59 = (_mu_num_or($57,$58)|0);
   $60 = $15;
   HEAP32[$60>>2] = $59;
   $14 = 1;
   $90 = $14;
   STACKTOP = sp;return ($90|0);
  }
 }
 $61 = $a;
 $6 = $61;
 $62 = $b;
 $7 = $62;
 $63 = $a;
 $64 = $b;
 $65 = (_mu_tbl_or($63,$64)|0);
 $66 = $15;
 HEAP32[$66>>2] = $65;
 $67 = $a;
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = $69;
 $71 = 6 & $70;
 $72 = ($71|0)!=(0);
 if ($72) {
  $73 = $11;
  $74 = $73;
  $75 = -8 & $74;
  $76 = $75;
  $ref$i = $76;
  $77 = $ref$i;
  $78 = HEAP16[$77>>1]|0;
  $count$i = $78;
  $79 = $count$i;
  $80 = $79&65535;
  $81 = ($80|0)!=(0);
  if ($81) {
   $82 = $count$i;
   $83 = (($82) + -1)<<16>>16;
   $count$i = $83;
   $84 = $count$i;
   $85 = $ref$i;
   HEAP16[$85>>1] = $84;
   $86 = $count$i;
   $87 = $86&65535;
   $88 = ($87|0)==(0);
   if ($88) {
    $89 = $11;
    _mu_destroy($89);
   }
  }
 }
 $14 = 1;
 $90 = $14;
 STACKTOP = sp;return ($90|0);
}
function _mu_xor_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1317]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(728)|0);
  HEAP32[1317] = $2;
 }
 $3 = HEAP32[1317]|0;
 return ($3|0);
}
function _mu_xor_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((736) + 7)|0))|0);
}
function _mu_xor_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $a = 0, $b = 0, $count$i = 0, $or$cond = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = $frame;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $a = $19;
 $20 = $17;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $b = $22;
 $23 = $a;
 $15 = $23;
 $24 = $15;
 $14 = $24;
 $25 = $14;
 $26 = $25;
 $27 = 7 & $26;
 $28 = ($27|0)==(1);
 if ($28) {
  $29 = $b;
  $11 = $29;
  $30 = $11;
  $10 = $30;
  $31 = $10;
  $32 = $31;
  $33 = 7 & $32;
  $34 = ($33|0)==(1);
  if (!($34)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $35 = $a;
  $1 = $35;
  $36 = $1;
  $37 = $36;
  $38 = 6 & $37;
  $39 = ($38|0)==(4);
  if (!($39)) {
   $45 = (_mu_xor_key_def()|0);
   $46 = $17;
   _mu_errorargs($45,2,$46);
   // unreachable;
  }
  $40 = $b;
  $0 = $40;
  $41 = $0;
  $42 = $41;
  $43 = 6 & $42;
  $44 = ($43|0)==(4);
  if (!($44)) {
   $45 = (_mu_xor_key_def()|0);
   $46 = $17;
   _mu_errorargs($45,2,$46);
   // unreachable;
  }
 }
 $47 = $a;
 $3 = $47;
 $48 = $3;
 $2 = $48;
 $49 = $2;
 $50 = $49;
 $51 = 7 & $50;
 $52 = ($51|0)!=(1);
 $53 = $b;
 $54 = ($53|0)!=(0|0);
 $or$cond = $52 | $54;
 $55 = $a;
 if (!($or$cond)) {
  $56 = (_mu_num_not($55)|0);
  $57 = $17;
  HEAP32[$57>>2] = $56;
  $16 = 1;
  $102 = $16;
  STACKTOP = sp;return ($102|0);
 }
 $5 = $55;
 $58 = $5;
 $4 = $58;
 $59 = $4;
 $60 = $59;
 $61 = 7 & $60;
 $62 = ($61|0)==(1);
 if ($62) {
  $63 = $b;
  $7 = $63;
  $64 = $7;
  $6 = $64;
  $65 = $6;
  $66 = $65;
  $67 = 7 & $66;
  $68 = ($67|0)==(1);
  if ($68) {
   $69 = $a;
   $70 = $b;
   $71 = (_mu_num_xor($69,$70)|0);
   $72 = $17;
   HEAP32[$72>>2] = $71;
   $16 = 1;
   $102 = $16;
   STACKTOP = sp;return ($102|0);
  }
 }
 $73 = $a;
 $8 = $73;
 $74 = $b;
 $9 = $74;
 $75 = $a;
 $76 = $b;
 $77 = (_mu_tbl_xor($75,$76)|0);
 $78 = $17;
 HEAP32[$78>>2] = $77;
 $79 = $a;
 $13 = $79;
 $80 = $13;
 $12 = $80;
 $81 = $12;
 $82 = $81;
 $83 = 6 & $82;
 $84 = ($83|0)!=(0);
 if ($84) {
  $85 = $13;
  $86 = $85;
  $87 = -8 & $86;
  $88 = $87;
  $ref$i = $88;
  $89 = $ref$i;
  $90 = HEAP16[$89>>1]|0;
  $count$i = $90;
  $91 = $count$i;
  $92 = $91&65535;
  $93 = ($92|0)!=(0);
  if ($93) {
   $94 = $count$i;
   $95 = (($94) + -1)<<16>>16;
   $count$i = $95;
   $96 = $count$i;
   $97 = $ref$i;
   HEAP16[$97>>1] = $96;
   $98 = $count$i;
   $99 = $98&65535;
   $100 = ($99|0)==(0);
   if ($100) {
    $101 = $13;
    _mu_destroy($101);
   }
  }
 }
 $16 = 1;
 $102 = $16;
 STACKTOP = sp;return ($102|0);
}
function _mu_diff_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1318]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(752)|0);
  HEAP32[1318] = $2;
 }
 $3 = HEAP32[1318]|0;
 return ($3|0);
}
function _mu_diff_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((760) + 7)|0))|0);
}
function _mu_diff_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $a = 0, $b = 0, $count$i = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = $frame;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $a = $17;
 $18 = $15;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $b = $20;
 $21 = $a;
 $13 = $21;
 $22 = $13;
 $12 = $22;
 $23 = $12;
 $24 = $23;
 $25 = 7 & $24;
 $26 = ($25|0)==(1);
 if ($26) {
  $27 = $b;
  $9 = $27;
  $28 = $9;
  $8 = $28;
  $29 = $8;
  $30 = $29;
  $31 = 7 & $30;
  $32 = ($31|0)==(1);
  if (!($32)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $33 = $a;
  $1 = $33;
  $34 = $1;
  $35 = $34;
  $36 = 6 & $35;
  $37 = ($36|0)==(4);
  if (!($37)) {
   $43 = (_mu_diff_key_def()|0);
   $44 = $15;
   _mu_errorargs($43,2,$44);
   // unreachable;
  }
  $38 = $b;
  $0 = $38;
  $39 = $0;
  $40 = $39;
  $41 = 6 & $40;
  $42 = ($41|0)==(4);
  if (!($42)) {
   $43 = (_mu_diff_key_def()|0);
   $44 = $15;
   _mu_errorargs($43,2,$44);
   // unreachable;
  }
 }
 $45 = $a;
 $3 = $45;
 $46 = $3;
 $2 = $46;
 $47 = $2;
 $48 = $47;
 $49 = 7 & $48;
 $50 = ($49|0)==(1);
 if ($50) {
  $51 = $b;
  $5 = $51;
  $52 = $5;
  $4 = $52;
  $53 = $4;
  $54 = $53;
  $55 = 7 & $54;
  $56 = ($55|0)==(1);
  if ($56) {
   $57 = $a;
   $58 = $b;
   $59 = (_mu_num_not($58)|0);
   $60 = (_mu_num_xor($57,$59)|0);
   $61 = $15;
   HEAP32[$61>>2] = $60;
   $14 = 1;
   $91 = $14;
   STACKTOP = sp;return ($91|0);
  }
 }
 $62 = $a;
 $6 = $62;
 $63 = $b;
 $7 = $63;
 $64 = $a;
 $65 = $b;
 $66 = (_mu_tbl_diff($64,$65)|0);
 $67 = $15;
 HEAP32[$67>>2] = $66;
 $68 = $a;
 $11 = $68;
 $69 = $11;
 $10 = $69;
 $70 = $10;
 $71 = $70;
 $72 = 6 & $71;
 $73 = ($72|0)!=(0);
 if ($73) {
  $74 = $11;
  $75 = $74;
  $76 = -8 & $75;
  $77 = $76;
  $ref$i = $77;
  $78 = $ref$i;
  $79 = HEAP16[$78>>1]|0;
  $count$i = $79;
  $80 = $count$i;
  $81 = $80&65535;
  $82 = ($81|0)!=(0);
  if ($82) {
   $83 = $count$i;
   $84 = (($83) + -1)<<16>>16;
   $count$i = $84;
   $85 = $count$i;
   $86 = $ref$i;
   HEAP16[$86>>1] = $85;
   $87 = $count$i;
   $88 = $87&65535;
   $89 = ($88|0)==(0);
   if ($89) {
    $90 = $11;
    _mu_destroy($90);
   }
  }
 }
 $14 = 1;
 $91 = $14;
 STACKTOP = sp;return ($91|0);
}
function _mu_iter_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1319]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(776)|0);
  HEAP32[1319] = $2;
 }
 $3 = HEAP32[1319]|0;
 return ($3|0);
}
function _mu_iter_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((784) + 7)|0))|0);
}
function _mu_iter_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $m = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $frame;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $m = $6;
 $7 = $m;
 $3 = $7;
 $8 = $3;
 $9 = $8;
 $10 = 7 & $9;
 $11 = (2360 + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $14 = (_mu_iter_key_def()|0);
  $15 = $4;
  _mu_errorargs($14,1,$15);
  // unreachable;
 }
 $16 = $m;
 $0 = $16;
 $17 = $0;
 $18 = $17;
 $19 = 7 & $18;
 $20 = (2360 + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $m;
 $23 = (FUNCTION_TABLE_ii[$21 & 511]($22)|0);
 $24 = $4;
 HEAP32[$24>>2] = $23;
 $25 = $m;
 $2 = $25;
 $26 = $2;
 $1 = $26;
 $27 = $1;
 $28 = $27;
 $29 = 6 & $28;
 $30 = ($29|0)!=(0);
 if (!($30)) {
  STACKTOP = sp;return 1;
 }
 $31 = $2;
 $32 = $31;
 $33 = -8 & $32;
 $34 = $33;
 $ref$i = $34;
 $35 = $ref$i;
 $36 = HEAP16[$35>>1]|0;
 $count$i = $36;
 $37 = $count$i;
 $38 = $37&65535;
 $39 = ($38|0)!=(0);
 if (!($39)) {
  STACKTOP = sp;return 1;
 }
 $40 = $count$i;
 $41 = (($40) + -1)<<16>>16;
 $count$i = $41;
 $42 = $count$i;
 $43 = $ref$i;
 HEAP16[$43>>1] = $42;
 $44 = $count$i;
 $45 = $44&65535;
 $46 = ($45|0)==(0);
 if (!($46)) {
  STACKTOP = sp;return 1;
 }
 $47 = $2;
 _mu_destroy($47);
 STACKTOP = sp;return 1;
}
function _mu_fn_iter($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $m;
 $3 = $2;
 $1 = $3;
 $4 = $1;
 $0 = $4;
 $5 = $0;
 $6 = $5;
 $7 = 6 & $6;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 }
 $9 = $1;
 $10 = $9;
 $11 = -8 & $10;
 $12 = $11;
 $ref$i = $12;
 $13 = $ref$i;
 $14 = HEAP16[$13>>1]|0;
 $count$i = $14;
 $15 = $count$i;
 $16 = $15&65535;
 $17 = ($16|0)!=(0);
 if (!($17)) {
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 }
 $18 = $count$i;
 $19 = (($18) + 1)<<16>>16;
 $count$i = $19;
 $20 = $count$i;
 $21 = $ref$i;
 HEAP16[$21>>1] = $20;
 $22 = $1;
 STACKTOP = sp;return ($22|0);
}
function _mu_pairs_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1320]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(800)|0);
  HEAP32[1320] = $2;
 }
 $3 = HEAP32[1320]|0;
 return ($3|0);
}
function _mu_pairs_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((816) + 7)|0))|0);
}
function _mu_pairs_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $count$i = 0, $count$i2 = 0, $m = 0;
 var $ref$i = 0, $ref$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = $frame;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $m = $12;
 $13 = $m;
 $8 = $13;
 $14 = $8;
 $15 = $14;
 $16 = 6 & $15;
 $17 = ($16|0)==(4);
 if (!($17)) {
  $18 = $m;
  $7 = $18;
  $19 = $7;
  $20 = $19;
  $21 = 7 & $20;
  $22 = (2360 + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)!=(0|0);
  if (!($24)) {
   $25 = (_mu_pairs_key_def()|0);
   $26 = $10;
   _mu_errorargs($25,1,$26);
   // unreachable;
  }
 }
 $27 = $m;
 $4 = $27;
 $28 = $4;
 $29 = $28;
 $30 = 6 & $29;
 $31 = ($30|0)==(4);
 $32 = $m;
 if ($31) {
  $33 = (_mu_tbl_pairs($32)|0);
  $34 = $10;
  HEAP32[$34>>2] = $33;
  $35 = $m;
  $3 = $35;
  $36 = $3;
  $2 = $36;
  $37 = $2;
  $38 = $37;
  $39 = 6 & $38;
  $40 = ($39|0)!=(0);
  if ($40) {
   $41 = $3;
   $42 = $41;
   $43 = -8 & $42;
   $44 = $43;
   $ref$i1 = $44;
   $45 = $ref$i1;
   $46 = HEAP16[$45>>1]|0;
   $count$i2 = $46;
   $47 = $count$i2;
   $48 = $47&65535;
   $49 = ($48|0)!=(0);
   if ($49) {
    $50 = $count$i2;
    $51 = (($50) + -1)<<16>>16;
    $count$i2 = $51;
    $52 = $count$i2;
    $53 = $ref$i1;
    HEAP16[$53>>1] = $52;
    $54 = $count$i2;
    $55 = $54&65535;
    $56 = ($55|0)==(0);
    if ($56) {
     $57 = $3;
     _mu_destroy($57);
    }
   }
  }
  $9 = 1;
  $96 = $9;
  STACKTOP = sp;return ($96|0);
 } else {
  $1 = $32;
  $58 = (_mu_range_def()|0);
  $59 = $10;
  _mu_fn_fcall($58,1,$59);
  $60 = $m;
  $0 = $60;
  $61 = $0;
  $62 = $61;
  $63 = 7 & $62;
  $64 = (2360 + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $m;
  $67 = (FUNCTION_TABLE_ii[$65 & 511]($66)|0);
  $68 = $10;
  $69 = ((($68)) + 4|0);
  HEAP32[$69>>2] = $67;
  $70 = $m;
  $6 = $70;
  $71 = $6;
  $5 = $71;
  $72 = $5;
  $73 = $72;
  $74 = 6 & $73;
  $75 = ($74|0)!=(0);
  if ($75) {
   $76 = $6;
   $77 = $76;
   $78 = -8 & $77;
   $79 = $78;
   $ref$i = $79;
   $80 = $ref$i;
   $81 = HEAP16[$80>>1]|0;
   $count$i = $81;
   $82 = $count$i;
   $83 = $82&65535;
   $84 = ($83|0)!=(0);
   if ($84) {
    $85 = $count$i;
    $86 = (($85) + -1)<<16>>16;
    $count$i = $86;
    $87 = $count$i;
    $88 = $ref$i;
    HEAP16[$88>>1] = $87;
    $89 = $count$i;
    $90 = $89&65535;
    $91 = ($90|0)==(0);
    if ($91) {
     $92 = $6;
     _mu_destroy($92);
    }
   }
  }
  $93 = (_mu_zip_def()|0);
  $94 = $10;
  $95 = (_mu_fn_tcall($93,2,$94)|0);
  $9 = $95;
  $96 = $9;
  STACKTOP = sp;return ($96|0);
 }
 return (0)|0;
}
function _mu_range_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((832) + 7)|0))|0);
}
function _mu_range_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $b$i = 0;
 var $start = 0, $step = 0, $stop = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 56|0;
 $11 = sp + 28|0;
 $13 = sp;
 $12 = $frame;
 $14 = $12;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  $18 = $12;
  $19 = HEAP32[$18>>2]|0;
  $20 = $12;
  $21 = ((($20)) + 4|0);
  HEAP32[$21>>2] = $19;
  $22 = $12;
  HEAP32[$22>>2] = 0;
 }
 $23 = $12;
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  $26 = $12;
  $27 = HEAP32[$26>>2]|0;
  $34 = $27;
 } else {
  $10 = 0;
  $28 = $10;
  $29 = (+($28>>>0));
  HEAPF32[$11>>2] = $29;
  $30 = HEAP32[$11>>2]|0;
  $31 = -8 & $30;
  $32 = (1 + ($31))|0;
  $33 = $32;
  $34 = $33;
 }
 $start = $34;
 $35 = $12;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)!=(0|0);
 if ($38) {
  $39 = $12;
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $43 = $41;
 } else {
  $42 = (_mu_inf_def()|0);
  $43 = $42;
 }
 $stop = $43;
 $44 = $12;
 $45 = ((($44)) + 8|0);
 $46 = HEAP32[$45>>2]|0;
 $step = $46;
 $47 = $start;
 $7 = $47;
 $48 = $7;
 $6 = $48;
 $49 = $6;
 $50 = $49;
 $51 = 7 & $50;
 $52 = ($51|0)==(1);
 if (!($52)) {
  $67 = (_mu_range_key_def()|0);
  $68 = $12;
  _mu_errorargs($67,3,$68);
  // unreachable;
 }
 $53 = $stop;
 $3 = $53;
 $54 = $3;
 $2 = $54;
 $55 = $2;
 $56 = $55;
 $57 = 7 & $56;
 $58 = ($57|0)==(1);
 if (!($58)) {
  $67 = (_mu_range_key_def()|0);
  $68 = $12;
  _mu_errorargs($67,3,$68);
  // unreachable;
 }
 $59 = $step;
 $60 = ($59|0)!=(0|0);
 if ($60) {
  $61 = $step;
  $1 = $61;
  $62 = $1;
  $0 = $62;
  $63 = $0;
  $64 = $63;
  $65 = 7 & $64;
  $66 = ($65|0)==(1);
  if (!($66)) {
   $67 = (_mu_range_key_def()|0);
   $68 = $12;
   _mu_errorargs($67,3,$68);
   // unreachable;
  }
 }
 $69 = $step;
 $70 = ($69|0)!=(0|0);
 if (!($70)) {
  $71 = $start;
  $72 = $stop;
  $73 = (_mu_num_cmp($71,$72)|0);
  $74 = ($73|0)<(0);
  $75 = $74 ? 1 : -1;
  $4 = $75;
  $76 = $4;
  $77 = (+($76|0));
  HEAPF32[$5>>2] = $77;
  $78 = HEAP32[$5>>2]|0;
  $79 = -8 & $78;
  $80 = (1 + ($79))|0;
  $81 = $80;
  $step = $81;
 }
 $82 = $start;
 HEAP32[$13>>2] = $82;
 $83 = ((($13)) + 4|0);
 $84 = $stop;
 HEAP32[$83>>2] = $84;
 $85 = ((($83)) + 4|0);
 $86 = $step;
 HEAP32[$85>>2] = $86;
 $8 = $13;
 $9 = 12;
 $87 = $9;
 $88 = (_mu_buf_create($87)|0);
 $b$i = $88;
 $89 = $b$i;
 $90 = $89;
 $91 = -8 & $90;
 $92 = $91;
 $93 = ((($92)) + 4|0);
 $94 = $8;
 $95 = $9;
 _memcpy(($93|0),($94|0),($95|0))|0;
 $96 = $b$i;
 $97 = (_mu_fn_fromsbfn(0,294,$96)|0);
 $98 = $12;
 HEAP32[$98>>2] = $97;
 STACKTOP = sp;return 1;
}
function _mu_range_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1321]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(848)|0);
  HEAP32[1321] = $2;
 }
 $3 = HEAP32[1321]|0;
 return ($3|0);
}
function _mu_range_step_bfn($scope,$frame) {
 $scope = $scope|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 24|0;
 $3 = sp + 16|0;
 $6 = $scope;
 $7 = $frame;
 $8 = $6;
 $4 = $8;
 $9 = $4;
 $10 = $9;
 $11 = -8 & $10;
 $12 = $11;
 $13 = ((($12)) + 4|0);
 $a = $13;
 $14 = $a;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $0 = 0;
 $17 = $0;
 $18 = (+($17>>>0));
 HEAPF32[$1>>2] = $18;
 $19 = HEAP32[$1>>2]|0;
 $20 = -8 & $19;
 $21 = (1 + ($20))|0;
 $22 = $21;
 $23 = (_mu_num_cmp($16,$22)|0);
 $24 = ($23|0)>(0);
 if ($24) {
  $25 = $a;
  $26 = HEAP32[$25>>2]|0;
  $27 = $a;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_mu_num_cmp($26,$29)|0);
  $31 = ($30|0)>=(0);
  if (!($31)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $32 = $a;
   $33 = ((($32)) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $2 = 0;
   $35 = $2;
   $36 = (+($35>>>0));
   HEAPF32[$3>>2] = $36;
   $37 = HEAP32[$3>>2]|0;
   $38 = -8 & $37;
   $39 = (1 + ($38))|0;
   $40 = $39;
   $41 = (_mu_num_cmp($34,$40)|0);
   $42 = ($41|0)<(0);
   if ($42) {
    $43 = $a;
    $44 = HEAP32[$43>>2]|0;
    $45 = $a;
    $46 = ((($45)) + 4|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (_mu_num_cmp($44,$47)|0);
    $49 = ($48|0)<=(0);
    if ($49) {
     break;
    }
   }
   $50 = $a;
   $51 = HEAP32[$50>>2]|0;
   $52 = $7;
   HEAP32[$52>>2] = $51;
   $53 = $a;
   $54 = HEAP32[$53>>2]|0;
   $55 = $a;
   $56 = ((($55)) + 8|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (_mu_num_add($54,$57)|0);
   $59 = $a;
   HEAP32[$59>>2] = $58;
   $5 = 1;
   $60 = $5;
   STACKTOP = sp;return ($60|0);
  }
 } while(0);
 $5 = 0;
 $60 = $5;
 STACKTOP = sp;return ($60|0);
}
function _mu_zip_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((864) + 7)|0))|0);
}
function _mu_zip_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $iter = 0, $ref$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $1 = sp + 52|0;
 $7 = sp + 20|0;
 $6 = $frame;
 $8 = $6;
 $9 = HEAP32[$8>>2]|0;
 $5 = $9;
 $10 = $5;
 $11 = $10;
 $12 = $11 & -8;
 $13 = $12;
 $14 = ((($13)) + 2|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = ($16|0)==(0);
 if ($17) {
  _mu_errorf(3699,$vararg_buffer);
  // unreachable;
 }
 $18 = $6;
 $19 = HEAP32[$18>>2]|0;
 $4 = $19;
 $20 = $4;
 $21 = $20;
 $22 = $21 & -8;
 $23 = $22;
 $24 = ((($23)) + 2|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25&65535;
 $27 = ($26|0)==(1);
 $28 = $6;
 $29 = HEAP32[$28>>2]|0;
 if ($27) {
  $0 = 0;
  $30 = $0;
  $31 = (+($30>>>0));
  HEAPF32[$1>>2] = $31;
  $32 = HEAP32[$1>>2]|0;
  $33 = -8 & $32;
  $34 = (1 + ($33))|0;
  $35 = $34;
  $36 = (_mu_tbl_lookup($29,$35)|0);
  $iter = $36;
  $37 = $6;
  $38 = HEAP32[$37>>2]|0;
  $3 = $38;
  $39 = $3;
  $2 = $39;
  $40 = $2;
  $41 = $40;
  $42 = 6 & $41;
  $43 = ($42|0)!=(0);
  if ($43) {
   $44 = $3;
   $45 = $44;
   $46 = -8 & $45;
   $47 = $46;
   $ref$i = $47;
   $48 = $ref$i;
   $49 = HEAP16[$48>>1]|0;
   $count$i = $49;
   $50 = $count$i;
   $51 = $50&65535;
   $52 = ($51|0)!=(0);
   if ($52) {
    $53 = $count$i;
    $54 = (($53) + -1)<<16>>16;
    $count$i = $54;
    $55 = $count$i;
    $56 = $ref$i;
    HEAP16[$56>>1] = $55;
    $57 = $count$i;
    $58 = $57&65535;
    $59 = ($58|0)==(0);
    if ($59) {
     $60 = $3;
     _mu_destroy($60);
    }
   }
  }
 } else {
  $iter = $29;
 }
 $61 = (_mu_iter_def()|0);
 $62 = $iter;
 HEAP32[$vararg_buffer1>>2] = $62;
 $63 = (_mu_fn_call($61,17,$vararg_buffer1)|0);
 HEAP32[$7>>2] = $63;
 $64 = (_mu_tbl_fromlist($7,1)|0);
 $65 = (_mu_fn_fromsbfn(0,295,$64)|0);
 $66 = $6;
 HEAP32[$66>>2] = $65;
 STACKTOP = sp;return 1;
}
function _mu_zip_step_bfn($scope,$frame) {
 $scope = $scope|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, $acc = 0, $count$i = 0, $count$i11 = 0, $count$i14 = 0, $count$i17 = 0, $count$i19 = 0, $count$i2 = 0, $count$i5 = 0;
 var $count$i8 = 0, $i = 0, $iter = 0, $iteriter = 0, $iters = 0, $m = 0, $ref$i = 0, $ref$i1 = 0, $ref$i10 = 0, $ref$i13 = 0, $ref$i16 = 0, $ref$i18 = 0, $ref$i4 = 0, $ref$i7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 64|0;
 $4 = sp + 220|0;
 $10 = sp + 188|0;
 $16 = sp + 156|0;
 $23 = sp + 120|0;
 $27 = sp + 100|0;
 $iter = sp + 76|0;
 $i = sp + 72|0;
 $29 = $scope;
 $30 = $frame;
 $31 = $29;
 $26 = 1;
 $32 = $26;
 $33 = (+($32>>>0));
 HEAPF32[$27>>2] = $33;
 $34 = HEAP32[$27>>2]|0;
 $35 = -8 & $34;
 $36 = (1 + ($35))|0;
 $37 = $36;
 $38 = (_mu_tbl_lookup($31,$37)|0);
 $iters = $38;
 $39 = $iters;
 $40 = ($39|0)!=(0|0);
 if (!($40)) {
  $41 = $29;
  $22 = 0;
  $42 = $22;
  $43 = (+($42>>>0));
  HEAPF32[$23>>2] = $43;
  $44 = HEAP32[$23>>2]|0;
  $45 = -8 & $44;
  $46 = (1 + ($45))|0;
  $47 = $46;
  $48 = (_mu_tbl_lookup($41,$47)|0);
  $iteriter = $48;
  $49 = (_mu_tbl_create(0)|0);
  $iters = $49;
  while(1) {
   $50 = $iteriter;
   $51 = $30;
   $52 = (_mu_fn_next($50,1,$51)|0);
   if (!($52)) {
    break;
   }
   $53 = $iters;
   $54 = $iters;
   $19 = $54;
   $55 = $19;
   $56 = $55;
   $57 = $56 & -8;
   $58 = $57;
   $59 = ((($58)) + 2|0);
   $60 = HEAP16[$59>>1]|0;
   $61 = $60&65535;
   $15 = $61;
   $62 = $15;
   $63 = (+($62>>>0));
   HEAPF32[$16>>2] = $63;
   $64 = HEAP32[$16>>2]|0;
   $65 = -8 & $64;
   $66 = (1 + ($65))|0;
   $67 = $66;
   $68 = (_mu_iter_def()|0);
   $69 = $30;
   $70 = HEAP32[$69>>2]|0;
   HEAP32[$vararg_buffer>>2] = $70;
   $71 = (_mu_fn_call($68,17,$vararg_buffer)|0);
   _mu_tbl_insert($53,$67,$71);
  }
  $72 = $iteriter;
  $12 = $72;
  $73 = $12;
  $11 = $73;
  $74 = $11;
  $75 = $74;
  $76 = 6 & $75;
  $77 = ($76|0)!=(0);
  if ($77) {
   $78 = $12;
   $79 = $78;
   $80 = -8 & $79;
   $81 = $80;
   $ref$i10 = $81;
   $82 = $ref$i10;
   $83 = HEAP16[$82>>1]|0;
   $count$i11 = $83;
   $84 = $count$i11;
   $85 = $84&65535;
   $86 = ($85|0)!=(0);
   if ($86) {
    $87 = $count$i11;
    $88 = (($87) + -1)<<16>>16;
    $count$i11 = $88;
    $89 = $count$i11;
    $90 = $ref$i10;
    HEAP16[$90>>1] = $89;
    $91 = $count$i11;
    $92 = $91&65535;
    $93 = ($92|0)==(0);
    if ($93) {
     $94 = $12;
     _mu_destroy($94);
    }
   }
  }
  $95 = $29;
  $9 = 1;
  $96 = $9;
  $97 = (+($96>>>0));
  HEAPF32[$10>>2] = $97;
  $98 = HEAP32[$10>>2]|0;
  $99 = -8 & $98;
  $100 = (1 + ($99))|0;
  $101 = $100;
  $102 = $iters;
  $6 = $102;
  $103 = $6;
  $5 = $103;
  $104 = $5;
  $105 = $104;
  $106 = 6 & $105;
  $107 = ($106|0)!=(0);
  if ($107) {
   $108 = $6;
   $109 = $108;
   $110 = -8 & $109;
   $111 = $110;
   $ref$i16 = $111;
   $112 = $ref$i16;
   $113 = HEAP16[$112>>1]|0;
   $count$i17 = $113;
   $114 = $count$i17;
   $115 = $114&65535;
   $116 = ($115|0)!=(0);
   if ($116) {
    $117 = $count$i17;
    $118 = (($117) + 1)<<16>>16;
    $count$i17 = $118;
    $119 = $count$i17;
    $120 = $ref$i16;
    HEAP16[$120>>1] = $119;
   }
  }
  $121 = $6;
  _mu_tbl_insert($95,$101,$121);
 }
 $122 = $iters;
 $0 = $122;
 $123 = $0;
 $124 = $123;
 $125 = $124 & -8;
 $126 = $125;
 $127 = ((($126)) + 2|0);
 $128 = HEAP16[$127>>1]|0;
 $129 = $128&65535;
 $130 = (_mu_tbl_create($129)|0);
 $acc = $130;
 HEAP32[$i>>2] = 0;
 while(1) {
  $131 = $iters;
  $132 = (_mu_tbl_next($131,$i,0,$iter)|0);
  if (!($132)) {
   label = 38;
   break;
  }
  $133 = HEAP32[$iter>>2]|0;
  $134 = $30;
  _mu_fn_fcall($133,15,$134);
  $135 = HEAP32[$iter>>2]|0;
  $2 = $135;
  $136 = $2;
  $1 = $136;
  $137 = $1;
  $138 = $137;
  $139 = 6 & $138;
  $140 = ($139|0)!=(0);
  if ($140) {
   $141 = $2;
   $142 = $141;
   $143 = -8 & $142;
   $144 = $143;
   $ref$i18 = $144;
   $145 = $ref$i18;
   $146 = HEAP16[$145>>1]|0;
   $count$i19 = $146;
   $147 = $count$i19;
   $148 = $147&65535;
   $149 = ($148|0)!=(0);
   if ($149) {
    $150 = $count$i19;
    $151 = (($150) + -1)<<16>>16;
    $count$i19 = $151;
    $152 = $count$i19;
    $153 = $ref$i18;
    HEAP16[$153>>1] = $152;
    $154 = $count$i19;
    $155 = $154&65535;
    $156 = ($155|0)==(0);
    if ($156) {
     $157 = $2;
     _mu_destroy($157);
    }
   }
  }
  $158 = $30;
  $159 = HEAP32[$158>>2]|0;
  $3 = 0;
  $160 = $3;
  $161 = (+($160>>>0));
  HEAPF32[$4>>2] = $161;
  $162 = HEAP32[$4>>2]|0;
  $163 = -8 & $162;
  $164 = (1 + ($163))|0;
  $165 = $164;
  $166 = (_mu_tbl_lookup($159,$165)|0);
  $m = $166;
  $167 = $m;
  $168 = ($167|0)!=(0|0);
  if (!($168)) {
   break;
  }
  $239 = $m;
  $21 = $239;
  $240 = $21;
  $20 = $240;
  $241 = $20;
  $242 = $241;
  $243 = 6 & $242;
  $244 = ($243|0)!=(0);
  if ($244) {
   $245 = $21;
   $246 = $245;
   $247 = -8 & $246;
   $248 = $247;
   $ref$i1 = $248;
   $249 = $ref$i1;
   $250 = HEAP16[$249>>1]|0;
   $count$i2 = $250;
   $251 = $count$i2;
   $252 = $251&65535;
   $253 = ($252|0)!=(0);
   if ($253) {
    $254 = $count$i2;
    $255 = (($254) + -1)<<16>>16;
    $count$i2 = $255;
    $256 = $count$i2;
    $257 = $ref$i1;
    HEAP16[$257>>1] = $256;
    $258 = $count$i2;
    $259 = $258&65535;
    $260 = ($259|0)==(0);
    if ($260) {
     $261 = $21;
     _mu_destroy($261);
    }
   }
  }
  $262 = $acc;
  $263 = $30;
  $264 = HEAP32[$263>>2]|0;
  $265 = (_mu_tbl_concat($262,$264,0)|0);
  $acc = $265;
 }
 if ((label|0) == 38) {
  $266 = $iters;
  $25 = $266;
  $267 = $25;
  $24 = $267;
  $268 = $24;
  $269 = $268;
  $270 = 6 & $269;
  $271 = ($270|0)!=(0);
  if ($271) {
   $272 = $25;
   $273 = $272;
   $274 = -8 & $273;
   $275 = $274;
   $ref$i = $275;
   $276 = $ref$i;
   $277 = HEAP16[$276>>1]|0;
   $count$i = $277;
   $278 = $count$i;
   $279 = $278&65535;
   $280 = ($279|0)!=(0);
   if ($280) {
    $281 = $count$i;
    $282 = (($281) + -1)<<16>>16;
    $count$i = $282;
    $283 = $count$i;
    $284 = $ref$i;
    HEAP16[$284>>1] = $283;
    $285 = $count$i;
    $286 = $285&65535;
    $287 = ($286|0)==(0);
    if ($287) {
     $288 = $25;
     _mu_destroy($288);
    }
   }
  }
  $289 = $acc;
  $290 = $30;
  HEAP32[$290>>2] = $289;
  $28 = 15;
  $291 = $28;
  STACKTOP = sp;return ($291|0);
 }
 $169 = $acc;
 $8 = $169;
 $170 = $8;
 $7 = $170;
 $171 = $7;
 $172 = $171;
 $173 = 6 & $172;
 $174 = ($173|0)!=(0);
 if ($174) {
  $175 = $8;
  $176 = $175;
  $177 = -8 & $176;
  $178 = $177;
  $ref$i13 = $178;
  $179 = $ref$i13;
  $180 = HEAP16[$179>>1]|0;
  $count$i14 = $180;
  $181 = $count$i14;
  $182 = $181&65535;
  $183 = ($182|0)!=(0);
  if ($183) {
   $184 = $count$i14;
   $185 = (($184) + -1)<<16>>16;
   $count$i14 = $185;
   $186 = $count$i14;
   $187 = $ref$i13;
   HEAP16[$187>>1] = $186;
   $188 = $count$i14;
   $189 = $188&65535;
   $190 = ($189|0)==(0);
   if ($190) {
    $191 = $8;
    _mu_destroy($191);
   }
  }
 }
 $192 = $30;
 $193 = HEAP32[$192>>2]|0;
 $14 = $193;
 $194 = $14;
 $13 = $194;
 $195 = $13;
 $196 = $195;
 $197 = 6 & $196;
 $198 = ($197|0)!=(0);
 if ($198) {
  $199 = $14;
  $200 = $199;
  $201 = -8 & $200;
  $202 = $201;
  $ref$i7 = $202;
  $203 = $ref$i7;
  $204 = HEAP16[$203>>1]|0;
  $count$i8 = $204;
  $205 = $count$i8;
  $206 = $205&65535;
  $207 = ($206|0)!=(0);
  if ($207) {
   $208 = $count$i8;
   $209 = (($208) + -1)<<16>>16;
   $count$i8 = $209;
   $210 = $count$i8;
   $211 = $ref$i7;
   HEAP16[$211>>1] = $210;
   $212 = $count$i8;
   $213 = $212&65535;
   $214 = ($213|0)==(0);
   if ($214) {
    $215 = $14;
    _mu_destroy($215);
   }
  }
 }
 $216 = $iters;
 $18 = $216;
 $217 = $18;
 $17 = $217;
 $218 = $17;
 $219 = $218;
 $220 = 6 & $219;
 $221 = ($220|0)!=(0);
 if ($221) {
  $222 = $18;
  $223 = $222;
  $224 = -8 & $223;
  $225 = $224;
  $ref$i4 = $225;
  $226 = $ref$i4;
  $227 = HEAP16[$226>>1]|0;
  $count$i5 = $227;
  $228 = $count$i5;
  $229 = $228&65535;
  $230 = ($229|0)!=(0);
  if ($230) {
   $231 = $count$i5;
   $232 = (($231) + -1)<<16>>16;
   $count$i5 = $232;
   $233 = $count$i5;
   $234 = $ref$i4;
   HEAP16[$234>>1] = $233;
   $235 = $count$i5;
   $236 = $235&65535;
   $237 = ($236|0)==(0);
   if ($237) {
    $238 = $18;
    _mu_destroy($238);
   }
  }
 }
 $28 = 0;
 $291 = $28;
 STACKTOP = sp;return ($291|0);
}
function _mu_map_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1322]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(880)|0);
  HEAP32[1322] = $2;
 }
 $3 = HEAP32[1322]|0;
 return ($3|0);
}
function _mu_map_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((888) + 7)|0))|0);
}
function _mu_map_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, $iter = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $2 = $frame;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $f = $5;
 $6 = $2;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $iter = $8;
 $9 = $f;
 $1 = $9;
 $10 = $1;
 $0 = $10;
 $11 = $0;
 $12 = $11;
 $13 = 7 & $12;
 $14 = ($13|0)==(7);
 if ($14) {
  $17 = $iter;
  $18 = $2;
  HEAP32[$18>>2] = $17;
  $19 = (_mu_iter_def()|0);
  $20 = $2;
  _mu_fn_fcall($19,17,$20);
  $21 = $2;
  $22 = HEAP32[$21>>2]|0;
  $iter = $22;
  $23 = $f;
  HEAP32[$3>>2] = $23;
  $24 = ((($3)) + 4|0);
  $25 = $iter;
  HEAP32[$24>>2] = $25;
  $26 = (_mu_tbl_fromlist($3,2)|0);
  $27 = (_mu_fn_fromsbfn(0,296,$26)|0);
  $28 = $2;
  HEAP32[$28>>2] = $27;
  STACKTOP = sp;return 1;
 } else {
  $15 = (_mu_map_key_def()|0);
  $16 = $2;
  _mu_errorargs($15,2,$16);
  // unreachable;
 }
 return (0)|0;
}
function _mu_map_step_bfn($scope,$frame) {
 $scope = $scope|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$i = 0, $count$i11 = 0, $count$i14 = 0, $count$i2 = 0, $count$i5 = 0, $count$i8 = 0, $f = 0, $i = 0;
 var $m = 0, $ref$i = 0, $ref$i1 = 0, $ref$i10 = 0, $ref$i13 = 0, $ref$i4 = 0, $ref$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = sp + 104|0;
 $13 = sp + 84|0;
 $17 = sp + 64|0;
 $19 = $scope;
 $20 = $frame;
 $21 = $19;
 $16 = 0;
 $22 = $16;
 $23 = (+($22>>>0));
 HEAPF32[$17>>2] = $23;
 $24 = HEAP32[$17>>2]|0;
 $25 = -8 & $24;
 $26 = (1 + ($25))|0;
 $27 = $26;
 $28 = (_mu_tbl_lookup($21,$27)|0);
 $f = $28;
 $29 = $19;
 $12 = 1;
 $30 = $12;
 $31 = (+($30>>>0));
 HEAPF32[$13>>2] = $31;
 $32 = HEAP32[$13>>2]|0;
 $33 = -8 & $32;
 $34 = (1 + ($33))|0;
 $35 = $34;
 $36 = (_mu_tbl_lookup($29,$35)|0);
 $i = $36;
 while(1) {
  $37 = $i;
  $38 = $20;
  $39 = (_mu_fn_next($37,15,$38)|0);
  $40 = $f;
  if (!($39)) {
   label = 21;
   break;
  }
  $41 = $20;
  _mu_fn_fcall($40,-1,$41);
  $42 = $20;
  $43 = HEAP32[$42>>2]|0;
  $8 = 0;
  $44 = $8;
  $45 = (+($44>>>0));
  HEAPF32[$9>>2] = $45;
  $46 = HEAP32[$9>>2]|0;
  $47 = -8 & $46;
  $48 = (1 + ($47))|0;
  $49 = $48;
  $50 = (_mu_tbl_lookup($43,$49)|0);
  $m = $50;
  $51 = $m;
  $52 = ($51|0)!=(0|0);
  if ($52) {
   break;
  }
  $122 = $20;
  $123 = HEAP32[$122>>2]|0;
  $7 = $123;
  $124 = $7;
  $6 = $124;
  $125 = $6;
  $126 = $125;
  $127 = 6 & $126;
  $128 = ($127|0)!=(0);
  if (!($128)) {
   continue;
  }
  $129 = $7;
  $130 = $129;
  $131 = -8 & $130;
  $132 = $131;
  $ref$i4 = $132;
  $133 = $ref$i4;
  $134 = HEAP16[$133>>1]|0;
  $count$i5 = $134;
  $135 = $count$i5;
  $136 = $135&65535;
  $137 = ($136|0)!=(0);
  if (!($137)) {
   continue;
  }
  $138 = $count$i5;
  $139 = (($138) + -1)<<16>>16;
  $count$i5 = $139;
  $140 = $count$i5;
  $141 = $ref$i4;
  HEAP16[$141>>1] = $140;
  $142 = $count$i5;
  $143 = $142&65535;
  $144 = ($143|0)==(0);
  if (!($144)) {
   continue;
  }
  $145 = $7;
  _mu_destroy($145);
 }
 if ((label|0) == 21) {
  $11 = $40;
  $146 = $11;
  $10 = $146;
  $147 = $10;
  $148 = $147;
  $149 = 6 & $148;
  $150 = ($149|0)!=(0);
  if ($150) {
   $151 = $11;
   $152 = $151;
   $153 = -8 & $152;
   $154 = $153;
   $ref$i1 = $154;
   $155 = $ref$i1;
   $156 = HEAP16[$155>>1]|0;
   $count$i2 = $156;
   $157 = $count$i2;
   $158 = $157&65535;
   $159 = ($158|0)!=(0);
   if ($159) {
    $160 = $count$i2;
    $161 = (($160) + -1)<<16>>16;
    $count$i2 = $161;
    $162 = $count$i2;
    $163 = $ref$i1;
    HEAP16[$163>>1] = $162;
    $164 = $count$i2;
    $165 = $164&65535;
    $166 = ($165|0)==(0);
    if ($166) {
     $167 = $11;
     _mu_destroy($167);
    }
   }
  }
  $168 = $i;
  $15 = $168;
  $169 = $15;
  $14 = $169;
  $170 = $14;
  $171 = $170;
  $172 = 6 & $171;
  $173 = ($172|0)!=(0);
  if ($173) {
   $174 = $15;
   $175 = $174;
   $176 = -8 & $175;
   $177 = $176;
   $ref$i = $177;
   $178 = $ref$i;
   $179 = HEAP16[$178>>1]|0;
   $count$i = $179;
   $180 = $count$i;
   $181 = $180&65535;
   $182 = ($181|0)!=(0);
   if ($182) {
    $183 = $count$i;
    $184 = (($183) + -1)<<16>>16;
    $count$i = $184;
    $185 = $count$i;
    $186 = $ref$i;
    HEAP16[$186>>1] = $185;
    $187 = $count$i;
    $188 = $187&65535;
    $189 = ($188|0)==(0);
    if ($189) {
     $190 = $15;
     _mu_destroy($190);
    }
   }
  }
  $18 = 0;
  $191 = $18;
  STACKTOP = sp;return ($191|0);
 }
 $53 = $m;
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = $55;
 $57 = 6 & $56;
 $58 = ($57|0)!=(0);
 if ($58) {
  $59 = $5;
  $60 = $59;
  $61 = -8 & $60;
  $62 = $61;
  $ref$i7 = $62;
  $63 = $ref$i7;
  $64 = HEAP16[$63>>1]|0;
  $count$i8 = $64;
  $65 = $count$i8;
  $66 = $65&65535;
  $67 = ($66|0)!=(0);
  if ($67) {
   $68 = $count$i8;
   $69 = (($68) + -1)<<16>>16;
   $count$i8 = $69;
   $70 = $count$i8;
   $71 = $ref$i7;
   HEAP16[$71>>1] = $70;
   $72 = $count$i8;
   $73 = $72&65535;
   $74 = ($73|0)==(0);
   if ($74) {
    $75 = $5;
    _mu_destroy($75);
   }
  }
 }
 $76 = $f;
 $3 = $76;
 $77 = $3;
 $2 = $77;
 $78 = $2;
 $79 = $78;
 $80 = 6 & $79;
 $81 = ($80|0)!=(0);
 if ($81) {
  $82 = $3;
  $83 = $82;
  $84 = -8 & $83;
  $85 = $84;
  $ref$i10 = $85;
  $86 = $ref$i10;
  $87 = HEAP16[$86>>1]|0;
  $count$i11 = $87;
  $88 = $count$i11;
  $89 = $88&65535;
  $90 = ($89|0)!=(0);
  if ($90) {
   $91 = $count$i11;
   $92 = (($91) + -1)<<16>>16;
   $count$i11 = $92;
   $93 = $count$i11;
   $94 = $ref$i10;
   HEAP16[$94>>1] = $93;
   $95 = $count$i11;
   $96 = $95&65535;
   $97 = ($96|0)==(0);
   if ($97) {
    $98 = $3;
    _mu_destroy($98);
   }
  }
 }
 $99 = $i;
 $1 = $99;
 $100 = $1;
 $0 = $100;
 $101 = $0;
 $102 = $101;
 $103 = 6 & $102;
 $104 = ($103|0)!=(0);
 if ($104) {
  $105 = $1;
  $106 = $105;
  $107 = -8 & $106;
  $108 = $107;
  $ref$i13 = $108;
  $109 = $ref$i13;
  $110 = HEAP16[$109>>1]|0;
  $count$i14 = $110;
  $111 = $count$i14;
  $112 = $111&65535;
  $113 = ($112|0)!=(0);
  if ($113) {
   $114 = $count$i14;
   $115 = (($114) + -1)<<16>>16;
   $count$i14 = $115;
   $116 = $count$i14;
   $117 = $ref$i13;
   HEAP16[$117>>1] = $116;
   $118 = $count$i14;
   $119 = $118&65535;
   $120 = ($119|0)==(0);
   if ($120) {
    $121 = $1;
    _mu_destroy($121);
   }
  }
 }
 $18 = 15;
 $191 = $18;
 STACKTOP = sp;return ($191|0);
}
function _mu_filter_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1323]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(904)|0);
  HEAP32[1323] = $2;
 }
 $3 = HEAP32[1323]|0;
 return ($3|0);
}
function _mu_filter_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((920) + 7)|0))|0);
}
function _mu_filter_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, $iter = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $2 = $frame;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $f = $5;
 $6 = $2;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $iter = $8;
 $9 = $f;
 $1 = $9;
 $10 = $1;
 $0 = $10;
 $11 = $0;
 $12 = $11;
 $13 = 7 & $12;
 $14 = ($13|0)==(7);
 if ($14) {
  $17 = $iter;
  $18 = $2;
  HEAP32[$18>>2] = $17;
  $19 = (_mu_iter_def()|0);
  $20 = $2;
  _mu_fn_fcall($19,17,$20);
  $21 = $2;
  $22 = HEAP32[$21>>2]|0;
  $iter = $22;
  $23 = $f;
  HEAP32[$3>>2] = $23;
  $24 = ((($3)) + 4|0);
  $25 = $iter;
  HEAP32[$24>>2] = $25;
  $26 = (_mu_tbl_fromlist($3,2)|0);
  $27 = (_mu_fn_fromsbfn(0,297,$26)|0);
  $28 = $2;
  HEAP32[$28>>2] = $27;
  STACKTOP = sp;return 1;
 } else {
  $15 = (_mu_filter_key_def()|0);
  $16 = $2;
  _mu_errorargs($15,2,$16);
  // unreachable;
 }
 return (0)|0;
}
function _mu_filter_step_bfn($scope,$frame) {
 $scope = $scope|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$i = 0, $count$i10 = 0, $count$i13 = 0, $count$i16 = 0, $count$i2 = 0, $count$i5 = 0, $count$i7 = 0, $f = 0, $i = 0, $m = 0, $ref$i = 0, $ref$i1 = 0;
 var $ref$i12 = 0, $ref$i15 = 0, $ref$i4 = 0, $ref$i6 = 0, $ref$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = sp + 92|0;
 $17 = sp + 72|0;
 $19 = $scope;
 $20 = $frame;
 $21 = $19;
 $16 = 0;
 $22 = $16;
 $23 = (+($22>>>0));
 HEAPF32[$17>>2] = $23;
 $24 = HEAP32[$17>>2]|0;
 $25 = -8 & $24;
 $26 = (1 + ($25))|0;
 $27 = $26;
 $28 = (_mu_tbl_lookup($21,$27)|0);
 $f = $28;
 $29 = $19;
 $12 = 1;
 $30 = $12;
 $31 = (+($30>>>0));
 HEAPF32[$13>>2] = $31;
 $32 = HEAP32[$13>>2]|0;
 $33 = -8 & $32;
 $34 = (1 + ($33))|0;
 $35 = $34;
 $36 = (_mu_tbl_lookup($29,$35)|0);
 $i = $36;
 while(1) {
  $37 = $i;
  $38 = $20;
  $39 = (_mu_fn_next($37,15,$38)|0);
  if (!($39)) {
   label = 24;
   break;
  }
  $40 = $20;
  $41 = HEAP32[$40>>2]|0;
  $9 = $41;
  $42 = $9;
  $8 = $42;
  $43 = $8;
  $44 = $43;
  $45 = 6 & $44;
  $46 = ($45|0)!=(0);
  if ($46) {
   $47 = $9;
   $48 = $47;
   $49 = -8 & $48;
   $50 = $49;
   $ref$i4 = $50;
   $51 = $ref$i4;
   $52 = HEAP16[$51>>1]|0;
   $count$i5 = $52;
   $53 = $count$i5;
   $54 = $53&65535;
   $55 = ($54|0)!=(0);
   if ($55) {
    $56 = $count$i5;
    $57 = (($56) + 1)<<16>>16;
    $count$i5 = $57;
    $58 = $count$i5;
    $59 = $ref$i4;
    HEAP16[$59>>1] = $58;
   }
  }
  $60 = $9;
  $m = $60;
  $61 = $f;
  $62 = $20;
  _mu_fn_fcall($61,-15,$62);
  $63 = $20;
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)!=(0|0);
  if ($65) {
   break;
  }
  $138 = $m;
  $7 = $138;
  $139 = $7;
  $6 = $139;
  $140 = $6;
  $141 = $140;
  $142 = 6 & $141;
  $143 = ($142|0)!=(0);
  if (!($143)) {
   continue;
  }
  $144 = $7;
  $145 = $144;
  $146 = -8 & $145;
  $147 = $146;
  $ref$i6 = $147;
  $148 = $ref$i6;
  $149 = HEAP16[$148>>1]|0;
  $count$i7 = $149;
  $150 = $count$i7;
  $151 = $150&65535;
  $152 = ($151|0)!=(0);
  if (!($152)) {
   continue;
  }
  $153 = $count$i7;
  $154 = (($153) + -1)<<16>>16;
  $count$i7 = $154;
  $155 = $count$i7;
  $156 = $ref$i6;
  HEAP16[$156>>1] = $155;
  $157 = $count$i7;
  $158 = $157&65535;
  $159 = ($158|0)==(0);
  if (!($159)) {
   continue;
  }
  $160 = $7;
  _mu_destroy($160);
 }
 if ((label|0) == 24) {
  $161 = $f;
  $11 = $161;
  $162 = $11;
  $10 = $162;
  $163 = $10;
  $164 = $163;
  $165 = 6 & $164;
  $166 = ($165|0)!=(0);
  if ($166) {
   $167 = $11;
   $168 = $167;
   $169 = -8 & $168;
   $170 = $169;
   $ref$i1 = $170;
   $171 = $ref$i1;
   $172 = HEAP16[$171>>1]|0;
   $count$i2 = $172;
   $173 = $count$i2;
   $174 = $173&65535;
   $175 = ($174|0)!=(0);
   if ($175) {
    $176 = $count$i2;
    $177 = (($176) + -1)<<16>>16;
    $count$i2 = $177;
    $178 = $count$i2;
    $179 = $ref$i1;
    HEAP16[$179>>1] = $178;
    $180 = $count$i2;
    $181 = $180&65535;
    $182 = ($181|0)==(0);
    if ($182) {
     $183 = $11;
     _mu_destroy($183);
    }
   }
  }
  $184 = $i;
  $15 = $184;
  $185 = $15;
  $14 = $185;
  $186 = $14;
  $187 = $186;
  $188 = 6 & $187;
  $189 = ($188|0)!=(0);
  if ($189) {
   $190 = $15;
   $191 = $190;
   $192 = -8 & $191;
   $193 = $192;
   $ref$i = $193;
   $194 = $ref$i;
   $195 = HEAP16[$194>>1]|0;
   $count$i = $195;
   $196 = $count$i;
   $197 = $196&65535;
   $198 = ($197|0)!=(0);
   if ($198) {
    $199 = $count$i;
    $200 = (($199) + -1)<<16>>16;
    $count$i = $200;
    $201 = $count$i;
    $202 = $ref$i;
    HEAP16[$202>>1] = $201;
    $203 = $count$i;
    $204 = $203&65535;
    $205 = ($204|0)==(0);
    if ($205) {
     $206 = $15;
     _mu_destroy($206);
    }
   }
  }
  $18 = 0;
  $207 = $18;
  STACKTOP = sp;return ($207|0);
 }
 $66 = $20;
 $67 = HEAP32[$66>>2]|0;
 $5 = $67;
 $68 = $5;
 $4 = $68;
 $69 = $4;
 $70 = $69;
 $71 = 6 & $70;
 $72 = ($71|0)!=(0);
 if ($72) {
  $73 = $5;
  $74 = $73;
  $75 = -8 & $74;
  $76 = $75;
  $ref$i9 = $76;
  $77 = $ref$i9;
  $78 = HEAP16[$77>>1]|0;
  $count$i10 = $78;
  $79 = $count$i10;
  $80 = $79&65535;
  $81 = ($80|0)!=(0);
  if ($81) {
   $82 = $count$i10;
   $83 = (($82) + -1)<<16>>16;
   $count$i10 = $83;
   $84 = $count$i10;
   $85 = $ref$i9;
   HEAP16[$85>>1] = $84;
   $86 = $count$i10;
   $87 = $86&65535;
   $88 = ($87|0)==(0);
   if ($88) {
    $89 = $5;
    _mu_destroy($89);
   }
  }
 }
 $90 = $m;
 $91 = $20;
 HEAP32[$91>>2] = $90;
 $92 = $f;
 $3 = $92;
 $93 = $3;
 $2 = $93;
 $94 = $2;
 $95 = $94;
 $96 = 6 & $95;
 $97 = ($96|0)!=(0);
 if ($97) {
  $98 = $3;
  $99 = $98;
  $100 = -8 & $99;
  $101 = $100;
  $ref$i12 = $101;
  $102 = $ref$i12;
  $103 = HEAP16[$102>>1]|0;
  $count$i13 = $103;
  $104 = $count$i13;
  $105 = $104&65535;
  $106 = ($105|0)!=(0);
  if ($106) {
   $107 = $count$i13;
   $108 = (($107) + -1)<<16>>16;
   $count$i13 = $108;
   $109 = $count$i13;
   $110 = $ref$i12;
   HEAP16[$110>>1] = $109;
   $111 = $count$i13;
   $112 = $111&65535;
   $113 = ($112|0)==(0);
   if ($113) {
    $114 = $3;
    _mu_destroy($114);
   }
  }
 }
 $115 = $i;
 $1 = $115;
 $116 = $1;
 $0 = $116;
 $117 = $0;
 $118 = $117;
 $119 = 6 & $118;
 $120 = ($119|0)!=(0);
 if ($120) {
  $121 = $1;
  $122 = $121;
  $123 = -8 & $122;
  $124 = $123;
  $ref$i15 = $124;
  $125 = $ref$i15;
  $126 = HEAP16[$125>>1]|0;
  $count$i16 = $126;
  $127 = $count$i16;
  $128 = $127&65535;
  $129 = ($128|0)!=(0);
  if ($129) {
   $130 = $count$i16;
   $131 = (($130) + -1)<<16>>16;
   $count$i16 = $131;
   $132 = $count$i16;
   $133 = $ref$i15;
   HEAP16[$133>>1] = $132;
   $134 = $count$i16;
   $135 = $134&65535;
   $136 = ($135|0)==(0);
   if ($136) {
    $137 = $1;
    _mu_destroy($137);
   }
  }
 }
 $18 = 15;
 $207 = $18;
 STACKTOP = sp;return ($207|0);
}
function _mu_reduce_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1324]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(936)|0);
  HEAP32[1324] = $2;
 }
 $3 = HEAP32[1324]|0;
 return ($3|0);
}
function _mu_reduce_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((952) + 7)|0))|0);
}
function _mu_reduce_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $acc = 0, $count$i = 0, $count$i2 = 0, $count$i5 = 0, $f = 0, $iter = 0, $ref$i = 0;
 var $ref$i1 = 0, $ref$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp + 20|0;
 $9 = $frame;
 $11 = $9;
 $12 = HEAP32[$11>>2]|0;
 $13 = (_mu_tbl_pop($12,0)|0);
 $f = $13;
 $14 = $9;
 $15 = HEAP32[$14>>2]|0;
 $16 = (_mu_tbl_pop($15,0)|0);
 $iter = $16;
 $17 = $9;
 $18 = HEAP32[$17>>2]|0;
 $acc = $18;
 $19 = $f;
 $8 = $19;
 $20 = $8;
 $7 = $20;
 $21 = $7;
 $22 = $21;
 $23 = 7 & $22;
 $24 = ($23|0)==(7);
 if (!($24)) {
  $25 = (_mu_reduce_key_def()|0);
  $26 = $f;
  HEAP32[$10>>2] = $26;
  $27 = ((($10)) + 4|0);
  $28 = $iter;
  HEAP32[$27>>2] = $28;
  $29 = ((($27)) + 4|0);
  $30 = $acc;
  HEAP32[$29>>2] = $30;
  _mu_errorargs($25,3,$10);
  // unreachable;
 }
 $31 = $iter;
 $32 = $9;
 HEAP32[$32>>2] = $31;
 $33 = (_mu_iter_def()|0);
 $34 = $9;
 _mu_fn_fcall($33,17,$34);
 $35 = $9;
 $36 = HEAP32[$35>>2]|0;
 $iter = $36;
 $37 = $acc;
 $4 = $37;
 $38 = $4;
 $39 = $38;
 $40 = $39 & -8;
 $41 = $40;
 $42 = ((($41)) + 2|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = $43&65535;
 $45 = ($44|0)==(0);
 if ($45) {
  $46 = $acc;
  $1 = $46;
  $47 = $1;
  $0 = $47;
  $48 = $0;
  $49 = $48;
  $50 = 6 & $49;
  $51 = ($50|0)!=(0);
  if ($51) {
   $52 = $1;
   $53 = $52;
   $54 = -8 & $53;
   $55 = $54;
   $ref$i4 = $55;
   $56 = $ref$i4;
   $57 = HEAP16[$56>>1]|0;
   $count$i5 = $57;
   $58 = $count$i5;
   $59 = $58&65535;
   $60 = ($59|0)!=(0);
   if ($60) {
    $61 = $count$i5;
    $62 = (($61) + -1)<<16>>16;
    $count$i5 = $62;
    $63 = $count$i5;
    $64 = $ref$i4;
    HEAP16[$64>>1] = $63;
    $65 = $count$i5;
    $66 = $65&65535;
    $67 = ($66|0)==(0);
    if ($67) {
     $68 = $1;
     _mu_destroy($68);
    }
   }
  }
  $69 = $iter;
  $70 = $9;
  _mu_fn_fcall($69,15,$70);
  $71 = $9;
  $72 = HEAP32[$71>>2]|0;
  $acc = $72;
 }
 while(1) {
  $73 = $iter;
  $74 = $9;
  $75 = (_mu_fn_next($73,15,$74)|0);
  if (!($75)) {
   break;
  }
  $76 = $acc;
  $77 = $9;
  $78 = HEAP32[$77>>2]|0;
  $79 = (_mu_tbl_concat($76,$78,0)|0);
  $80 = $9;
  HEAP32[$80>>2] = $79;
  $81 = $f;
  $82 = $9;
  _mu_fn_fcall($81,-1,$82);
  $83 = $9;
  $84 = HEAP32[$83>>2]|0;
  $acc = $84;
 }
 $85 = $f;
 $3 = $85;
 $86 = $3;
 $2 = $86;
 $87 = $2;
 $88 = $87;
 $89 = 6 & $88;
 $90 = ($89|0)!=(0);
 if ($90) {
  $91 = $3;
  $92 = $91;
  $93 = -8 & $92;
  $94 = $93;
  $ref$i1 = $94;
  $95 = $ref$i1;
  $96 = HEAP16[$95>>1]|0;
  $count$i2 = $96;
  $97 = $count$i2;
  $98 = $97&65535;
  $99 = ($98|0)!=(0);
  if ($99) {
   $100 = $count$i2;
   $101 = (($100) + -1)<<16>>16;
   $count$i2 = $101;
   $102 = $count$i2;
   $103 = $ref$i1;
   HEAP16[$103>>1] = $102;
   $104 = $count$i2;
   $105 = $104&65535;
   $106 = ($105|0)==(0);
   if ($106) {
    $107 = $3;
    _mu_destroy($107);
   }
  }
 }
 $108 = $iter;
 $6 = $108;
 $109 = $6;
 $5 = $109;
 $110 = $5;
 $111 = $110;
 $112 = 6 & $111;
 $113 = ($112|0)!=(0);
 if (!($113)) {
  $131 = $acc;
  $132 = $9;
  HEAP32[$132>>2] = $131;
  STACKTOP = sp;return 15;
 }
 $114 = $6;
 $115 = $114;
 $116 = -8 & $115;
 $117 = $116;
 $ref$i = $117;
 $118 = $ref$i;
 $119 = HEAP16[$118>>1]|0;
 $count$i = $119;
 $120 = $count$i;
 $121 = $120&65535;
 $122 = ($121|0)!=(0);
 if (!($122)) {
  $131 = $acc;
  $132 = $9;
  HEAP32[$132>>2] = $131;
  STACKTOP = sp;return 15;
 }
 $123 = $count$i;
 $124 = (($123) + -1)<<16>>16;
 $count$i = $124;
 $125 = $count$i;
 $126 = $ref$i;
 HEAP16[$126>>1] = $125;
 $127 = $count$i;
 $128 = $127&65535;
 $129 = ($128|0)==(0);
 if (!($129)) {
  $131 = $acc;
  $132 = $9;
  HEAP32[$132>>2] = $131;
  STACKTOP = sp;return 15;
 }
 $130 = $6;
 _mu_destroy($130);
 $131 = $acc;
 $132 = $9;
 HEAP32[$132>>2] = $131;
 STACKTOP = sp;return 15;
}
function _mu_any_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1325]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(968)|0);
  HEAP32[1325] = $2;
 }
 $3 = HEAP32[1325]|0;
 return ($3|0);
}
function _mu_any_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((976) + 7)|0))|0);
}
function _mu_any_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$i = 0;
 var $count$i11 = 0, $count$i2 = 0, $count$i5 = 0, $count$i8 = 0, $iter = 0, $pred = 0, $ref$i = 0, $ref$i1 = 0, $ref$i10 = 0, $ref$i4 = 0, $ref$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = $frame;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $pred = $15;
 $16 = $13;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $iter = $18;
 $19 = $pred;
 $11 = $19;
 $20 = $11;
 $10 = $20;
 $21 = $10;
 $22 = $21;
 $23 = 7 & $22;
 $24 = ($23|0)==(7);
 if (!($24)) {
  $25 = (_mu_any_key_def()|0);
  $26 = $13;
  _mu_errorargs($25,2,$26);
  // unreachable;
 }
 $27 = $iter;
 $28 = $13;
 HEAP32[$28>>2] = $27;
 $29 = (_mu_iter_def()|0);
 $30 = $13;
 _mu_fn_fcall($29,17,$30);
 $31 = $13;
 $32 = HEAP32[$31>>2]|0;
 $iter = $32;
 $33 = (_mu_true_def()|0);
 $34 = $13;
 HEAP32[$34>>2] = $33;
 while(1) {
  $35 = $iter;
  $36 = $13;
  $37 = (_mu_fn_next($35,15,$36)|0);
  $38 = $pred;
  if (!($37)) {
   label = 19;
   break;
  }
  $39 = $13;
  _mu_fn_fcall($38,-15,$39);
  $40 = $13;
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)!=(0|0);
  if ($42) {
   break;
  }
 }
 if ((label|0) == 19) {
  $1 = $38;
  $113 = $1;
  $0 = $113;
  $114 = $0;
  $115 = $114;
  $116 = 6 & $115;
  $117 = ($116|0)!=(0);
  if ($117) {
   $118 = $1;
   $119 = $118;
   $120 = -8 & $119;
   $121 = $120;
   $ref$i10 = $121;
   $122 = $ref$i10;
   $123 = HEAP16[$122>>1]|0;
   $count$i11 = $123;
   $124 = $count$i11;
   $125 = $124&65535;
   $126 = ($125|0)!=(0);
   if ($126) {
    $127 = $count$i11;
    $128 = (($127) + -1)<<16>>16;
    $count$i11 = $128;
    $129 = $count$i11;
    $130 = $ref$i10;
    HEAP16[$130>>1] = $129;
    $131 = $count$i11;
    $132 = $131&65535;
    $133 = ($132|0)==(0);
    if ($133) {
     $134 = $1;
     _mu_destroy($134);
    }
   }
  }
  $135 = $iter;
  $9 = $135;
  $136 = $9;
  $8 = $136;
  $137 = $8;
  $138 = $137;
  $139 = 6 & $138;
  $140 = ($139|0)!=(0);
  if ($140) {
   $141 = $9;
   $142 = $141;
   $143 = -8 & $142;
   $144 = $143;
   $ref$i = $144;
   $145 = $ref$i;
   $146 = HEAP16[$145>>1]|0;
   $count$i = $146;
   $147 = $count$i;
   $148 = $147&65535;
   $149 = ($148|0)!=(0);
   if ($149) {
    $150 = $count$i;
    $151 = (($150) + -1)<<16>>16;
    $count$i = $151;
    $152 = $count$i;
    $153 = $ref$i;
    HEAP16[$153>>1] = $152;
    $154 = $count$i;
    $155 = $154&65535;
    $156 = ($155|0)==(0);
    if ($156) {
     $157 = $9;
     _mu_destroy($157);
    }
   }
  }
  $12 = 0;
  $158 = $12;
  STACKTOP = sp;return ($158|0);
 }
 $43 = $13;
 $44 = HEAP32[$43>>2]|0;
 $7 = $44;
 $45 = $7;
 $6 = $45;
 $46 = $6;
 $47 = $46;
 $48 = 6 & $47;
 $49 = ($48|0)!=(0);
 if ($49) {
  $50 = $7;
  $51 = $50;
  $52 = -8 & $51;
  $53 = $52;
  $ref$i1 = $53;
  $54 = $ref$i1;
  $55 = HEAP16[$54>>1]|0;
  $count$i2 = $55;
  $56 = $count$i2;
  $57 = $56&65535;
  $58 = ($57|0)!=(0);
  if ($58) {
   $59 = $count$i2;
   $60 = (($59) + -1)<<16>>16;
   $count$i2 = $60;
   $61 = $count$i2;
   $62 = $ref$i1;
   HEAP16[$62>>1] = $61;
   $63 = $count$i2;
   $64 = $63&65535;
   $65 = ($64|0)==(0);
   if ($65) {
    $66 = $7;
    _mu_destroy($66);
   }
  }
 }
 $67 = $pred;
 $5 = $67;
 $68 = $5;
 $4 = $68;
 $69 = $4;
 $70 = $69;
 $71 = 6 & $70;
 $72 = ($71|0)!=(0);
 if ($72) {
  $73 = $5;
  $74 = $73;
  $75 = -8 & $74;
  $76 = $75;
  $ref$i4 = $76;
  $77 = $ref$i4;
  $78 = HEAP16[$77>>1]|0;
  $count$i5 = $78;
  $79 = $count$i5;
  $80 = $79&65535;
  $81 = ($80|0)!=(0);
  if ($81) {
   $82 = $count$i5;
   $83 = (($82) + -1)<<16>>16;
   $count$i5 = $83;
   $84 = $count$i5;
   $85 = $ref$i4;
   HEAP16[$85>>1] = $84;
   $86 = $count$i5;
   $87 = $86&65535;
   $88 = ($87|0)==(0);
   if ($88) {
    $89 = $5;
    _mu_destroy($89);
   }
  }
 }
 $90 = $iter;
 $3 = $90;
 $91 = $3;
 $2 = $91;
 $92 = $2;
 $93 = $92;
 $94 = 6 & $93;
 $95 = ($94|0)!=(0);
 if ($95) {
  $96 = $3;
  $97 = $96;
  $98 = -8 & $97;
  $99 = $98;
  $ref$i7 = $99;
  $100 = $ref$i7;
  $101 = HEAP16[$100>>1]|0;
  $count$i8 = $101;
  $102 = $count$i8;
  $103 = $102&65535;
  $104 = ($103|0)!=(0);
  if ($104) {
   $105 = $count$i8;
   $106 = (($105) + -1)<<16>>16;
   $count$i8 = $106;
   $107 = $count$i8;
   $108 = $ref$i7;
   HEAP16[$108>>1] = $107;
   $109 = $count$i8;
   $110 = $109&65535;
   $111 = ($110|0)==(0);
   if ($111) {
    $112 = $3;
    _mu_destroy($112);
   }
  }
 }
 $12 = 1;
 $158 = $12;
 STACKTOP = sp;return ($158|0);
}
function _mu_all_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1326]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(992)|0);
  HEAP32[1326] = $2;
 }
 $3 = HEAP32[1326]|0;
 return ($3|0);
}
function _mu_all_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1000) + 7)|0))|0);
}
function _mu_all_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$i = 0;
 var $count$i11 = 0, $count$i2 = 0, $count$i5 = 0, $count$i8 = 0, $iter = 0, $pred = 0, $ref$i = 0, $ref$i1 = 0, $ref$i10 = 0, $ref$i4 = 0, $ref$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = $frame;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $pred = $15;
 $16 = $13;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $iter = $18;
 $19 = $pred;
 $11 = $19;
 $20 = $11;
 $10 = $20;
 $21 = $10;
 $22 = $21;
 $23 = 7 & $22;
 $24 = ($23|0)==(7);
 if (!($24)) {
  $25 = (_mu_all_key_def()|0);
  $26 = $13;
  _mu_errorargs($25,2,$26);
  // unreachable;
 }
 $27 = $iter;
 $28 = $13;
 HEAP32[$28>>2] = $27;
 $29 = (_mu_iter_def()|0);
 $30 = $13;
 _mu_fn_fcall($29,17,$30);
 $31 = $13;
 $32 = HEAP32[$31>>2]|0;
 $iter = $32;
 $33 = (_mu_true_def()|0);
 $34 = $13;
 HEAP32[$34>>2] = $33;
 while(1) {
  $35 = $iter;
  $36 = $13;
  $37 = (_mu_fn_next($35,15,$36)|0);
  $38 = $pred;
  if (!($37)) {
   label = 19;
   break;
  }
  $39 = $13;
  _mu_fn_fcall($38,-15,$39);
  $40 = $13;
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)!=(0|0);
  if (!($42)) {
   label = 10;
   break;
  }
  $43 = $13;
  $44 = HEAP32[$43>>2]|0;
  $7 = $44;
  $45 = $7;
  $6 = $45;
  $46 = $6;
  $47 = $46;
  $48 = 6 & $47;
  $49 = ($48|0)!=(0);
  if (!($49)) {
   continue;
  }
  $50 = $7;
  $51 = $50;
  $52 = -8 & $51;
  $53 = $52;
  $ref$i1 = $53;
  $54 = $ref$i1;
  $55 = HEAP16[$54>>1]|0;
  $count$i2 = $55;
  $56 = $count$i2;
  $57 = $56&65535;
  $58 = ($57|0)!=(0);
  if (!($58)) {
   continue;
  }
  $59 = $count$i2;
  $60 = (($59) + -1)<<16>>16;
  $count$i2 = $60;
  $61 = $count$i2;
  $62 = $ref$i1;
  HEAP16[$62>>1] = $61;
  $63 = $count$i2;
  $64 = $63&65535;
  $65 = ($64|0)==(0);
  if (!($65)) {
   continue;
  }
  $66 = $7;
  _mu_destroy($66);
 }
 if ((label|0) == 10) {
  $67 = $pred;
  $5 = $67;
  $68 = $5;
  $4 = $68;
  $69 = $4;
  $70 = $69;
  $71 = 6 & $70;
  $72 = ($71|0)!=(0);
  if ($72) {
   $73 = $5;
   $74 = $73;
   $75 = -8 & $74;
   $76 = $75;
   $ref$i4 = $76;
   $77 = $ref$i4;
   $78 = HEAP16[$77>>1]|0;
   $count$i5 = $78;
   $79 = $count$i5;
   $80 = $79&65535;
   $81 = ($80|0)!=(0);
   if ($81) {
    $82 = $count$i5;
    $83 = (($82) + -1)<<16>>16;
    $count$i5 = $83;
    $84 = $count$i5;
    $85 = $ref$i4;
    HEAP16[$85>>1] = $84;
    $86 = $count$i5;
    $87 = $86&65535;
    $88 = ($87|0)==(0);
    if ($88) {
     $89 = $5;
     _mu_destroy($89);
    }
   }
  }
  $90 = $iter;
  $3 = $90;
  $91 = $3;
  $2 = $91;
  $92 = $2;
  $93 = $92;
  $94 = 6 & $93;
  $95 = ($94|0)!=(0);
  if ($95) {
   $96 = $3;
   $97 = $96;
   $98 = -8 & $97;
   $99 = $98;
   $ref$i7 = $99;
   $100 = $ref$i7;
   $101 = HEAP16[$100>>1]|0;
   $count$i8 = $101;
   $102 = $count$i8;
   $103 = $102&65535;
   $104 = ($103|0)!=(0);
   if ($104) {
    $105 = $count$i8;
    $106 = (($105) + -1)<<16>>16;
    $count$i8 = $106;
    $107 = $count$i8;
    $108 = $ref$i7;
    HEAP16[$108>>1] = $107;
    $109 = $count$i8;
    $110 = $109&65535;
    $111 = ($110|0)==(0);
    if ($111) {
     $112 = $3;
     _mu_destroy($112);
    }
   }
  }
  $12 = 0;
  $158 = $12;
  STACKTOP = sp;return ($158|0);
 }
 else if ((label|0) == 19) {
  $1 = $38;
  $113 = $1;
  $0 = $113;
  $114 = $0;
  $115 = $114;
  $116 = 6 & $115;
  $117 = ($116|0)!=(0);
  if ($117) {
   $118 = $1;
   $119 = $118;
   $120 = -8 & $119;
   $121 = $120;
   $ref$i10 = $121;
   $122 = $ref$i10;
   $123 = HEAP16[$122>>1]|0;
   $count$i11 = $123;
   $124 = $count$i11;
   $125 = $124&65535;
   $126 = ($125|0)!=(0);
   if ($126) {
    $127 = $count$i11;
    $128 = (($127) + -1)<<16>>16;
    $count$i11 = $128;
    $129 = $count$i11;
    $130 = $ref$i10;
    HEAP16[$130>>1] = $129;
    $131 = $count$i11;
    $132 = $131&65535;
    $133 = ($132|0)==(0);
    if ($133) {
     $134 = $1;
     _mu_destroy($134);
    }
   }
  }
  $135 = $iter;
  $9 = $135;
  $136 = $9;
  $8 = $136;
  $137 = $8;
  $138 = $137;
  $139 = 6 & $138;
  $140 = ($139|0)!=(0);
  if ($140) {
   $141 = $9;
   $142 = $141;
   $143 = -8 & $142;
   $144 = $143;
   $ref$i = $144;
   $145 = $ref$i;
   $146 = HEAP16[$145>>1]|0;
   $count$i = $146;
   $147 = $count$i;
   $148 = $147&65535;
   $149 = ($148|0)!=(0);
   if ($149) {
    $150 = $count$i;
    $151 = (($150) + -1)<<16>>16;
    $count$i = $151;
    $152 = $count$i;
    $153 = $ref$i;
    HEAP16[$153>>1] = $152;
    $154 = $count$i;
    $155 = $154&65535;
    $156 = ($155|0)==(0);
    if ($156) {
     $157 = $9;
     _mu_destroy($157);
    }
   }
  }
  $12 = 1;
  $158 = $12;
  STACKTOP = sp;return ($158|0);
 }
 return (0)|0;
}
function _mu_repeat_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1327]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1016)|0);
  HEAP32[1327] = $2;
 }
 $3 = HEAP32[1327]|0;
 return ($3|0);
}
function _mu_repeat_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1032) + 7)|0))|0);
}
function _mu_repeat_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $2 = $frame;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $m = $5;
 $6 = $2;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $2;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $14 = $12;
 } else {
  $13 = (_mu_inf_def()|0);
  $14 = $13;
 }
 $count = $14;
 $15 = $count;
 $1 = $15;
 $16 = $1;
 $0 = $16;
 $17 = $0;
 $18 = $17;
 $19 = 7 & $18;
 $20 = ($19|0)==(1);
 if ($20) {
  $23 = $m;
  HEAP32[$3>>2] = $23;
  $24 = ((($3)) + 4|0);
  $25 = $count;
  HEAP32[$24>>2] = $25;
  $26 = (_mu_tbl_fromlist($3,2)|0);
  $27 = (_mu_fn_fromsbfn(0,298,$26)|0);
  $28 = $2;
  HEAP32[$28>>2] = $27;
  STACKTOP = sp;return 1;
 } else {
  $21 = (_mu_repeat_key_def()|0);
  $22 = $2;
  _mu_errorargs($21,2,$22);
  // unreachable;
 }
 return (0)|0;
}
function _mu_repeat_step_bfn($scope,$frame) {
 $scope = $scope|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 44|0;
 $3 = sp + 36|0;
 $5 = sp + 28|0;
 $7 = sp + 20|0;
 $9 = sp + 12|0;
 $11 = $scope;
 $12 = $frame;
 $13 = $11;
 $8 = 1;
 $14 = $8;
 $15 = (+($14>>>0));
 HEAPF32[$9>>2] = $15;
 $16 = HEAP32[$9>>2]|0;
 $17 = -8 & $16;
 $18 = (1 + ($17))|0;
 $19 = $18;
 $20 = (_mu_tbl_lookup($13,$19)|0);
 $i = $20;
 $21 = $i;
 $0 = 0;
 $22 = $0;
 $23 = (+($22>>>0));
 HEAPF32[$1>>2] = $23;
 $24 = HEAP32[$1>>2]|0;
 $25 = -8 & $24;
 $26 = (1 + ($25))|0;
 $27 = $26;
 $28 = (_mu_num_cmp($21,$27)|0);
 $29 = ($28|0)<=(0);
 if ($29) {
  $10 = 0;
  $54 = $10;
  STACKTOP = sp;return ($54|0);
 } else {
  $30 = $11;
  $2 = 0;
  $31 = $2;
  $32 = (+($31>>>0));
  HEAPF32[$3>>2] = $32;
  $33 = HEAP32[$3>>2]|0;
  $34 = -8 & $33;
  $35 = (1 + ($34))|0;
  $36 = $35;
  $37 = (_mu_tbl_lookup($30,$36)|0);
  $38 = $12;
  HEAP32[$38>>2] = $37;
  $39 = $11;
  $4 = 1;
  $40 = $4;
  $41 = (+($40>>>0));
  HEAPF32[$5>>2] = $41;
  $42 = HEAP32[$5>>2]|0;
  $43 = -8 & $42;
  $44 = (1 + ($43))|0;
  $45 = $44;
  $46 = $i;
  $6 = 1;
  $47 = $6;
  $48 = (+($47>>>0));
  HEAPF32[$7>>2] = $48;
  $49 = HEAP32[$7>>2]|0;
  $50 = -8 & $49;
  $51 = (1 + ($50))|0;
  $52 = $51;
  $53 = (_mu_num_sub($46,$52)|0);
  _mu_tbl_insert($39,$45,$53);
  $10 = 1;
  $54 = $10;
  STACKTOP = sp;return ($54|0);
 }
 return (0)|0;
}
function _mu_zip_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1328]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1048)|0);
  HEAP32[1328] = $2;
 }
 $3 = HEAP32[1328]|0;
 return ($3|0);
}
function _mu_chain_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1329]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1056)|0);
  HEAP32[1329] = $2;
 }
 $3 = HEAP32[1329]|0;
 return ($3|0);
}
function _mu_chain_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1072) + 7)|0))|0);
}
function _mu_chain_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $iter = 0, $ref$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $1 = sp + 52|0;
 $7 = sp + 20|0;
 $6 = $frame;
 $8 = $6;
 $9 = HEAP32[$8>>2]|0;
 $5 = $9;
 $10 = $5;
 $11 = $10;
 $12 = $11 & -8;
 $13 = $12;
 $14 = ((($13)) + 2|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = ($16|0)==(0);
 if ($17) {
  _mu_errorf(3726,$vararg_buffer);
  // unreachable;
 }
 $18 = $6;
 $19 = HEAP32[$18>>2]|0;
 $4 = $19;
 $20 = $4;
 $21 = $20;
 $22 = $21 & -8;
 $23 = $22;
 $24 = ((($23)) + 2|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25&65535;
 $27 = ($26|0)==(1);
 $28 = $6;
 $29 = HEAP32[$28>>2]|0;
 if ($27) {
  $0 = 0;
  $30 = $0;
  $31 = (+($30>>>0));
  HEAPF32[$1>>2] = $31;
  $32 = HEAP32[$1>>2]|0;
  $33 = -8 & $32;
  $34 = (1 + ($33))|0;
  $35 = $34;
  $36 = (_mu_tbl_lookup($29,$35)|0);
  $iter = $36;
  $37 = $6;
  $38 = HEAP32[$37>>2]|0;
  $3 = $38;
  $39 = $3;
  $2 = $39;
  $40 = $2;
  $41 = $40;
  $42 = 6 & $41;
  $43 = ($42|0)!=(0);
  if ($43) {
   $44 = $3;
   $45 = $44;
   $46 = -8 & $45;
   $47 = $46;
   $ref$i = $47;
   $48 = $ref$i;
   $49 = HEAP16[$48>>1]|0;
   $count$i = $49;
   $50 = $count$i;
   $51 = $50&65535;
   $52 = ($51|0)!=(0);
   if ($52) {
    $53 = $count$i;
    $54 = (($53) + -1)<<16>>16;
    $count$i = $54;
    $55 = $count$i;
    $56 = $ref$i;
    HEAP16[$56>>1] = $55;
    $57 = $count$i;
    $58 = $57&65535;
    $59 = ($58|0)==(0);
    if ($59) {
     $60 = $3;
     _mu_destroy($60);
    }
   }
  }
 } else {
  $iter = $29;
 }
 $61 = (_mu_iter_def()|0);
 $62 = $iter;
 HEAP32[$vararg_buffer1>>2] = $62;
 $63 = (_mu_fn_call($61,17,$vararg_buffer1)|0);
 HEAP32[$7>>2] = $63;
 $64 = (_mu_tbl_fromlist($7,1)|0);
 $65 = (_mu_fn_fromsbfn(0,299,$64)|0);
 $66 = $6;
 HEAP32[$66>>2] = $65;
 STACKTOP = sp;return 1;
}
function _mu_chain_step_bfn($scope,$frame) {
 $scope = $scope|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $count$i = 0, $count$i2 = 0, $count$i5 = 0, $count$i8 = 0, $iter = 0, $iters = 0, $m = 0, $ref$i = 0, $ref$i1 = 0, $ref$i4 = 0, $ref$i7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 32|0;
 $3 = sp + 116|0;
 $5 = sp + 108|0;
 $11 = sp + 76|0;
 $15 = sp + 56|0;
 $17 = $scope;
 $18 = $frame;
 $19 = $17;
 $14 = 1;
 $20 = $14;
 $21 = (+($20>>>0));
 HEAPF32[$15>>2] = $21;
 $22 = HEAP32[$15>>2]|0;
 $23 = -8 & $22;
 $24 = (1 + ($23))|0;
 $25 = $24;
 $26 = (_mu_tbl_lookup($19,$25)|0);
 $iter = $26;
 $27 = $iter;
 $28 = ($27|0)!=(0|0);
 do {
  if ($28) {
   $29 = $iter;
   $30 = $18;
   _mu_fn_fcall($29,15,$30);
   $31 = $iter;
   $13 = $31;
   $32 = $13;
   $12 = $32;
   $33 = $12;
   $34 = $33;
   $35 = 6 & $34;
   $36 = ($35|0)!=(0);
   if ($36) {
    $37 = $13;
    $38 = $37;
    $39 = -8 & $38;
    $40 = $39;
    $ref$i = $40;
    $41 = $ref$i;
    $42 = HEAP16[$41>>1]|0;
    $count$i = $42;
    $43 = $count$i;
    $44 = $43&65535;
    $45 = ($44|0)!=(0);
    if ($45) {
     $46 = $count$i;
     $47 = (($46) + -1)<<16>>16;
     $count$i = $47;
     $48 = $count$i;
     $49 = $ref$i;
     HEAP16[$49>>1] = $48;
     $50 = $count$i;
     $51 = $50&65535;
     $52 = ($51|0)==(0);
     if ($52) {
      $53 = $13;
      _mu_destroy($53);
     }
    }
   }
   $54 = $18;
   $55 = HEAP32[$54>>2]|0;
   $10 = 0;
   $56 = $10;
   $57 = (+($56>>>0));
   HEAPF32[$11>>2] = $57;
   $58 = HEAP32[$11>>2]|0;
   $59 = -8 & $58;
   $60 = (1 + ($59))|0;
   $61 = $60;
   $62 = (_mu_tbl_lookup($55,$61)|0);
   $m = $62;
   $63 = $m;
   $64 = ($63|0)!=(0|0);
   if (!($64)) {
    $88 = $18;
    $89 = HEAP32[$88>>2]|0;
    $7 = $89;
    $90 = $7;
    $6 = $90;
    $91 = $6;
    $92 = $91;
    $93 = 6 & $92;
    $94 = ($93|0)!=(0);
    if (!($94)) {
     break;
    }
    $95 = $7;
    $96 = $95;
    $97 = -8 & $96;
    $98 = $97;
    $ref$i4 = $98;
    $99 = $ref$i4;
    $100 = HEAP16[$99>>1]|0;
    $count$i5 = $100;
    $101 = $count$i5;
    $102 = $101&65535;
    $103 = ($102|0)!=(0);
    if (!($103)) {
     break;
    }
    $104 = $count$i5;
    $105 = (($104) + -1)<<16>>16;
    $count$i5 = $105;
    $106 = $count$i5;
    $107 = $ref$i4;
    HEAP16[$107>>1] = $106;
    $108 = $count$i5;
    $109 = $108&65535;
    $110 = ($109|0)==(0);
    if (!($110)) {
     break;
    }
    $111 = $7;
    _mu_destroy($111);
    break;
   }
   $65 = $m;
   $9 = $65;
   $66 = $9;
   $8 = $66;
   $67 = $8;
   $68 = $67;
   $69 = 6 & $68;
   $70 = ($69|0)!=(0);
   if ($70) {
    $71 = $9;
    $72 = $71;
    $73 = -8 & $72;
    $74 = $73;
    $ref$i1 = $74;
    $75 = $ref$i1;
    $76 = HEAP16[$75>>1]|0;
    $count$i2 = $76;
    $77 = $count$i2;
    $78 = $77&65535;
    $79 = ($78|0)!=(0);
    if ($79) {
     $80 = $count$i2;
     $81 = (($80) + -1)<<16>>16;
     $count$i2 = $81;
     $82 = $count$i2;
     $83 = $ref$i1;
     HEAP16[$83>>1] = $82;
     $84 = $count$i2;
     $85 = $84&65535;
     $86 = ($85|0)==(0);
     if ($86) {
      $87 = $9;
      _mu_destroy($87);
     }
    }
   }
   $16 = 15;
   $162 = $16;
   STACKTOP = sp;return ($162|0);
  }
 } while(0);
 $112 = $17;
 $4 = 0;
 $113 = $4;
 $114 = (+($113>>>0));
 HEAPF32[$5>>2] = $114;
 $115 = HEAP32[$5>>2]|0;
 $116 = -8 & $115;
 $117 = (1 + ($116))|0;
 $118 = $117;
 $119 = (_mu_tbl_lookup($112,$118)|0);
 $iters = $119;
 $120 = $iters;
 $121 = $18;
 _mu_fn_fcall($120,1,$121);
 $122 = $iters;
 $1 = $122;
 $123 = $1;
 $0 = $123;
 $124 = $0;
 $125 = $124;
 $126 = 6 & $125;
 $127 = ($126|0)!=(0);
 if ($127) {
  $128 = $1;
  $129 = $128;
  $130 = -8 & $129;
  $131 = $130;
  $ref$i7 = $131;
  $132 = $ref$i7;
  $133 = HEAP16[$132>>1]|0;
  $count$i8 = $133;
  $134 = $count$i8;
  $135 = $134&65535;
  $136 = ($135|0)!=(0);
  if ($136) {
   $137 = $count$i8;
   $138 = (($137) + -1)<<16>>16;
   $count$i8 = $138;
   $139 = $count$i8;
   $140 = $ref$i7;
   HEAP16[$140>>1] = $139;
   $141 = $count$i8;
   $142 = $141&65535;
   $143 = ($142|0)==(0);
   if ($143) {
    $144 = $1;
    _mu_destroy($144);
   }
  }
 }
 $145 = $18;
 $146 = HEAP32[$145>>2]|0;
 $147 = ($146|0)!=(0|0);
 if ($147) {
  $148 = $17;
  $2 = 1;
  $149 = $2;
  $150 = (+($149>>>0));
  HEAPF32[$3>>2] = $150;
  $151 = HEAP32[$3>>2]|0;
  $152 = -8 & $151;
  $153 = (1 + ($152))|0;
  $154 = $153;
  $155 = (_mu_iter_def()|0);
  $156 = $18;
  $157 = HEAP32[$156>>2]|0;
  HEAP32[$vararg_buffer>>2] = $157;
  $158 = (_mu_fn_call($155,17,$vararg_buffer)|0);
  _mu_tbl_insert($148,$154,$158);
  $159 = $17;
  $160 = $18;
  $161 = (_mu_chain_step_bfn($159,$160)|0);
  $16 = $161;
  $162 = $16;
  STACKTOP = sp;return ($162|0);
 } else {
  $16 = 0;
  $162 = $16;
  STACKTOP = sp;return ($162|0);
 }
 return (0)|0;
}
function _mu_take_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1330]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1088)|0);
  HEAP32[1330] = $2;
 }
 $3 = HEAP32[1330]|0;
 return ($3|0);
}
function _mu_take_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1096) + 7)|0))|0);
}
function _mu_take_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iter = 0, $m = 0, $mu_take_step_bfn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = sp;
 $6 = $frame;
 $8 = $6;
 $9 = HEAP32[$8>>2]|0;
 $m = $9;
 $10 = $6;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $iter = $12;
 $13 = $m;
 $5 = $13;
 $14 = $5;
 $4 = $14;
 $15 = $4;
 $16 = $15;
 $17 = 7 & $16;
 $18 = ($17|0)==(1);
 if (!($18)) {
  $19 = $m;
  $1 = $19;
  $20 = $1;
  $0 = $20;
  $21 = $0;
  $22 = $21;
  $23 = 7 & $22;
  $24 = ($23|0)==(7);
  if (!($24)) {
   $25 = (_mu_take_key_def()|0);
   $26 = $6;
   _mu_errorargs($25,2,$26);
   // unreachable;
  }
 }
 $27 = $iter;
 $28 = $6;
 HEAP32[$28>>2] = $27;
 $29 = (_mu_iter_def()|0);
 $30 = $6;
 _mu_fn_fcall($29,17,$30);
 $31 = $6;
 $32 = HEAP32[$31>>2]|0;
 $iter = $32;
 $33 = $m;
 $3 = $33;
 $34 = $3;
 $2 = $34;
 $35 = $2;
 $36 = $35;
 $37 = 7 & $36;
 $38 = ($37|0)==(1);
 if ($38) {
  $mu_take_step_bfn = 300;
 } else {
  $mu_take_step_bfn = 301;
 }
 $39 = $mu_take_step_bfn;
 $40 = $m;
 HEAP32[$7>>2] = $40;
 $41 = ((($7)) + 4|0);
 $42 = $iter;
 HEAP32[$41>>2] = $42;
 $43 = (_mu_tbl_fromlist($7,2)|0);
 $44 = (_mu_fn_fromsbfn(0,$39,$43)|0);
 $45 = $6;
 HEAP32[$45>>2] = $44;
 STACKTOP = sp;return 1;
}
function _mu_take_count_step_bfn($scope,$frame) {
 $scope = $scope|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $iter = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 48|0;
 $3 = sp + 40|0;
 $5 = sp + 32|0;
 $7 = sp + 24|0;
 $9 = sp + 16|0;
 $11 = $scope;
 $12 = $frame;
 $13 = $11;
 $8 = 0;
 $14 = $8;
 $15 = (+($14>>>0));
 HEAPF32[$9>>2] = $15;
 $16 = HEAP32[$9>>2]|0;
 $17 = -8 & $16;
 $18 = (1 + ($17))|0;
 $19 = $18;
 $20 = (_mu_tbl_lookup($13,$19)|0);
 $i = $20;
 $21 = $i;
 $0 = 0;
 $22 = $0;
 $23 = (+($22>>>0));
 HEAPF32[$1>>2] = $23;
 $24 = HEAP32[$1>>2]|0;
 $25 = -8 & $24;
 $26 = (1 + ($25))|0;
 $27 = $26;
 $28 = (_mu_num_cmp($21,$27)|0);
 $29 = ($28|0)<=(0);
 if ($29) {
  $10 = 0;
  $56 = $10;
  STACKTOP = sp;return ($56|0);
 } else {
  $30 = $11;
  $2 = 0;
  $31 = $2;
  $32 = (+($31>>>0));
  HEAPF32[$3>>2] = $32;
  $33 = HEAP32[$3>>2]|0;
  $34 = -8 & $33;
  $35 = (1 + ($34))|0;
  $36 = $35;
  $37 = $i;
  $4 = 1;
  $38 = $4;
  $39 = (+($38>>>0));
  HEAPF32[$5>>2] = $39;
  $40 = HEAP32[$5>>2]|0;
  $41 = -8 & $40;
  $42 = (1 + ($41))|0;
  $43 = $42;
  $44 = (_mu_num_sub($37,$43)|0);
  _mu_tbl_insert($30,$36,$44);
  $45 = $11;
  $6 = 1;
  $46 = $6;
  $47 = (+($46>>>0));
  HEAPF32[$7>>2] = $47;
  $48 = HEAP32[$7>>2]|0;
  $49 = -8 & $48;
  $50 = (1 + ($49))|0;
  $51 = $50;
  $52 = (_mu_tbl_lookup($45,$51)|0);
  $iter = $52;
  $53 = $iter;
  $54 = $12;
  $55 = (_mu_fn_tcall($53,0,$54)|0);
  $10 = $55;
  $56 = $10;
  STACKTOP = sp;return ($56|0);
 }
 return (0)|0;
}
function _mu_take_while_step_bfn($scope,$frame) {
 $scope = $scope|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond = 0, $count$i = 0, $count$i11 = 0, $count$i14 = 0, $count$i16 = 0, $count$i2 = 0, $count$i5 = 0, $count$i8 = 0, $iter = 0, $m = 0, $ref$i = 0, $ref$i1 = 0, $ref$i10 = 0, $ref$i13 = 0, $ref$i15 = 0, $ref$i4 = 0, $ref$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 172|0;
 $13 = sp + 104|0;
 $19 = sp + 72|0;
 $21 = $scope;
 $22 = $frame;
 $23 = $21;
 $18 = 1;
 $24 = $18;
 $25 = (+($24>>>0));
 HEAPF32[$19>>2] = $25;
 $26 = HEAP32[$19>>2]|0;
 $27 = -8 & $26;
 $28 = (1 + ($27))|0;
 $29 = $28;
 $30 = (_mu_tbl_lookup($23,$29)|0);
 $iter = $30;
 $31 = $iter;
 $32 = $22;
 _mu_fn_fcall($31,15,$32);
 $33 = $iter;
 $15 = $33;
 $34 = $15;
 $14 = $34;
 $35 = $14;
 $36 = $35;
 $37 = 6 & $36;
 $38 = ($37|0)!=(0);
 if ($38) {
  $39 = $15;
  $40 = $39;
  $41 = -8 & $40;
  $42 = $41;
  $ref$i1 = $42;
  $43 = $ref$i1;
  $44 = HEAP16[$43>>1]|0;
  $count$i2 = $44;
  $45 = $count$i2;
  $46 = $45&65535;
  $47 = ($46|0)!=(0);
  if ($47) {
   $48 = $count$i2;
   $49 = (($48) + -1)<<16>>16;
   $count$i2 = $49;
   $50 = $count$i2;
   $51 = $ref$i1;
   HEAP16[$51>>1] = $50;
   $52 = $count$i2;
   $53 = $52&65535;
   $54 = ($53|0)==(0);
   if ($54) {
    $55 = $15;
    _mu_destroy($55);
   }
  }
 }
 $56 = $22;
 $57 = HEAP32[$56>>2]|0;
 $12 = 0;
 $58 = $12;
 $59 = (+($58>>>0));
 HEAPF32[$13>>2] = $59;
 $60 = HEAP32[$13>>2]|0;
 $61 = -8 & $60;
 $62 = (1 + ($61))|0;
 $63 = $62;
 $64 = (_mu_tbl_lookup($57,$63)|0);
 $m = $64;
 $65 = $m;
 $66 = ($65|0)!=(0|0);
 if (!($66)) {
  $67 = $22;
  $68 = HEAP32[$67>>2]|0;
  $9 = $68;
  $69 = $9;
  $8 = $69;
  $70 = $8;
  $71 = $70;
  $72 = 6 & $71;
  $73 = ($72|0)!=(0);
  if ($73) {
   $74 = $9;
   $75 = $74;
   $76 = -8 & $75;
   $77 = $76;
   $ref$i7 = $77;
   $78 = $ref$i7;
   $79 = HEAP16[$78>>1]|0;
   $count$i8 = $79;
   $80 = $count$i8;
   $81 = $80&65535;
   $82 = ($81|0)!=(0);
   if ($82) {
    $83 = $count$i8;
    $84 = (($83) + -1)<<16>>16;
    $count$i8 = $84;
    $85 = $count$i8;
    $86 = $ref$i7;
    HEAP16[$86>>1] = $85;
    $87 = $count$i8;
    $88 = $87&65535;
    $89 = ($88|0)==(0);
    if ($89) {
     $90 = $9;
     _mu_destroy($90);
    }
   }
  }
  $20 = 0;
  $220 = $20;
  STACKTOP = sp;return ($220|0);
 }
 $91 = $m;
 $7 = $91;
 $92 = $7;
 $6 = $92;
 $93 = $6;
 $94 = $93;
 $95 = 6 & $94;
 $96 = ($95|0)!=(0);
 if ($96) {
  $97 = $7;
  $98 = $97;
  $99 = -8 & $98;
  $100 = $99;
  $ref$i10 = $100;
  $101 = $ref$i10;
  $102 = HEAP16[$101>>1]|0;
  $count$i11 = $102;
  $103 = $count$i11;
  $104 = $103&65535;
  $105 = ($104|0)!=(0);
  if ($105) {
   $106 = $count$i11;
   $107 = (($106) + -1)<<16>>16;
   $count$i11 = $107;
   $108 = $count$i11;
   $109 = $ref$i10;
   HEAP16[$109>>1] = $108;
   $110 = $count$i11;
   $111 = $110&65535;
   $112 = ($111|0)==(0);
   if ($112) {
    $113 = $7;
    _mu_destroy($113);
   }
  }
 }
 $114 = $22;
 $115 = HEAP32[$114>>2]|0;
 $5 = $115;
 $116 = $5;
 $4 = $116;
 $117 = $4;
 $118 = $117;
 $119 = 6 & $118;
 $120 = ($119|0)!=(0);
 if ($120) {
  $121 = $5;
  $122 = $121;
  $123 = -8 & $122;
  $124 = $123;
  $ref$i13 = $124;
  $125 = $ref$i13;
  $126 = HEAP16[$125>>1]|0;
  $count$i14 = $126;
  $127 = $count$i14;
  $128 = $127&65535;
  $129 = ($128|0)!=(0);
  if ($129) {
   $130 = $count$i14;
   $131 = (($130) + 1)<<16>>16;
   $count$i14 = $131;
   $132 = $count$i14;
   $133 = $ref$i13;
   HEAP16[$133>>1] = $132;
  }
 }
 $134 = $5;
 $m = $134;
 $135 = $21;
 $0 = 0;
 $136 = $0;
 $137 = (+($136>>>0));
 HEAPF32[$1>>2] = $137;
 $138 = HEAP32[$1>>2]|0;
 $139 = -8 & $138;
 $140 = (1 + ($139))|0;
 $141 = $140;
 $142 = (_mu_tbl_lookup($135,$141)|0);
 $cond = $142;
 $143 = $cond;
 $144 = $22;
 _mu_fn_fcall($143,-15,$144);
 $145 = $cond;
 $3 = $145;
 $146 = $3;
 $2 = $146;
 $147 = $2;
 $148 = $147;
 $149 = 6 & $148;
 $150 = ($149|0)!=(0);
 if ($150) {
  $151 = $3;
  $152 = $151;
  $153 = -8 & $152;
  $154 = $153;
  $ref$i15 = $154;
  $155 = $ref$i15;
  $156 = HEAP16[$155>>1]|0;
  $count$i16 = $156;
  $157 = $count$i16;
  $158 = $157&65535;
  $159 = ($158|0)!=(0);
  if ($159) {
   $160 = $count$i16;
   $161 = (($160) + -1)<<16>>16;
   $count$i16 = $161;
   $162 = $count$i16;
   $163 = $ref$i15;
   HEAP16[$163>>1] = $162;
   $164 = $count$i16;
   $165 = $164&65535;
   $166 = ($165|0)==(0);
   if ($166) {
    $167 = $3;
    _mu_destroy($167);
   }
  }
 }
 $168 = $22;
 $169 = HEAP32[$168>>2]|0;
 $170 = ($169|0)!=(0|0);
 if ($170) {
  $194 = $22;
  $195 = HEAP32[$194>>2]|0;
  $17 = $195;
  $196 = $17;
  $16 = $196;
  $197 = $16;
  $198 = $197;
  $199 = 6 & $198;
  $200 = ($199|0)!=(0);
  if ($200) {
   $201 = $17;
   $202 = $201;
   $203 = -8 & $202;
   $204 = $203;
   $ref$i = $204;
   $205 = $ref$i;
   $206 = HEAP16[$205>>1]|0;
   $count$i = $206;
   $207 = $count$i;
   $208 = $207&65535;
   $209 = ($208|0)!=(0);
   if ($209) {
    $210 = $count$i;
    $211 = (($210) + -1)<<16>>16;
    $count$i = $211;
    $212 = $count$i;
    $213 = $ref$i;
    HEAP16[$213>>1] = $212;
    $214 = $count$i;
    $215 = $214&65535;
    $216 = ($215|0)==(0);
    if ($216) {
     $217 = $17;
     _mu_destroy($217);
    }
   }
  }
  $218 = $m;
  $219 = $22;
  HEAP32[$219>>2] = $218;
  $20 = 15;
  $220 = $20;
  STACKTOP = sp;return ($220|0);
 } else {
  $171 = $m;
  $11 = $171;
  $172 = $11;
  $10 = $172;
  $173 = $10;
  $174 = $173;
  $175 = 6 & $174;
  $176 = ($175|0)!=(0);
  if ($176) {
   $177 = $11;
   $178 = $177;
   $179 = -8 & $178;
   $180 = $179;
   $ref$i4 = $180;
   $181 = $ref$i4;
   $182 = HEAP16[$181>>1]|0;
   $count$i5 = $182;
   $183 = $count$i5;
   $184 = $183&65535;
   $185 = ($184|0)!=(0);
   if ($185) {
    $186 = $count$i5;
    $187 = (($186) + -1)<<16>>16;
    $count$i5 = $187;
    $188 = $count$i5;
    $189 = $ref$i4;
    HEAP16[$189>>1] = $188;
    $190 = $count$i5;
    $191 = $190&65535;
    $192 = ($191|0)==(0);
    if ($192) {
     $193 = $11;
     _mu_destroy($193);
    }
   }
  }
  $20 = 0;
  $220 = $20;
  STACKTOP = sp;return ($220|0);
 }
 return (0)|0;
}
function _mu_drop_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1331]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1112)|0);
  HEAP32[1331] = $2;
 }
 $3 = HEAP32[1331]|0;
 return ($3|0);
}
function _mu_drop_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1120) + 7)|0))|0);
}
function _mu_drop_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iter = 0, $m = 0, $mu_drop_step_bfn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = sp;
 $6 = $frame;
 $8 = $6;
 $9 = HEAP32[$8>>2]|0;
 $m = $9;
 $10 = $6;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $iter = $12;
 $13 = $m;
 $5 = $13;
 $14 = $5;
 $4 = $14;
 $15 = $4;
 $16 = $15;
 $17 = 7 & $16;
 $18 = ($17|0)==(1);
 if (!($18)) {
  $19 = $m;
  $1 = $19;
  $20 = $1;
  $0 = $20;
  $21 = $0;
  $22 = $21;
  $23 = 7 & $22;
  $24 = ($23|0)==(7);
  if (!($24)) {
   $25 = (_mu_take_key_def()|0);
   $26 = $6;
   _mu_errorargs($25,2,$26);
   // unreachable;
  }
 }
 $27 = $iter;
 $28 = $6;
 HEAP32[$28>>2] = $27;
 $29 = (_mu_iter_def()|0);
 $30 = $6;
 _mu_fn_fcall($29,17,$30);
 $31 = $6;
 $32 = HEAP32[$31>>2]|0;
 $iter = $32;
 $33 = $m;
 $3 = $33;
 $34 = $3;
 $2 = $34;
 $35 = $2;
 $36 = $35;
 $37 = 7 & $36;
 $38 = ($37|0)==(1);
 if ($38) {
  $mu_drop_step_bfn = 302;
 } else {
  $mu_drop_step_bfn = 303;
 }
 $39 = $mu_drop_step_bfn;
 $40 = $m;
 HEAP32[$7>>2] = $40;
 $41 = ((($7)) + 4|0);
 $42 = $iter;
 HEAP32[$41>>2] = $42;
 $43 = (_mu_tbl_fromlist($7,2)|0);
 $44 = (_mu_fn_fromsbfn(0,$39,$43)|0);
 $45 = $6;
 HEAP32[$45>>2] = $44;
 STACKTOP = sp;return 1;
}
function _mu_drop_count_step_bfn($scope,$frame) {
 $scope = $scope|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $count$i = 0, $count$i2 = 0, $i = 0, $iter = 0, $ref$i = 0;
 var $ref$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 84|0;
 $5 = sp + 64|0;
 $9 = sp + 44|0;
 $11 = sp + 36|0;
 $13 = sp + 28|0;
 $15 = $scope;
 $16 = $frame;
 $17 = $15;
 $12 = 1;
 $18 = $12;
 $19 = (+($18>>>0));
 HEAPF32[$13>>2] = $19;
 $20 = HEAP32[$13>>2]|0;
 $21 = -8 & $20;
 $22 = (1 + ($21))|0;
 $23 = $22;
 $24 = (_mu_tbl_lookup($17,$23)|0);
 $iter = $24;
 $25 = $15;
 $4 = 0;
 $26 = $4;
 $27 = (+($26>>>0));
 HEAPF32[$5>>2] = $27;
 $28 = HEAP32[$5>>2]|0;
 $29 = -8 & $28;
 $30 = (1 + ($29))|0;
 $31 = $30;
 $32 = (_mu_tbl_lookup($25,$31)|0);
 $i = $32;
 $33 = $i;
 $34 = ($33|0)!=(0|0);
 do {
  if ($34) {
   while(1) {
    $35 = $i;
    $0 = 0;
    $36 = $0;
    $37 = (+($36>>>0));
    HEAPF32[$1>>2] = $37;
    $38 = HEAP32[$1>>2]|0;
    $39 = -8 & $38;
    $40 = (1 + ($39))|0;
    $41 = $40;
    $42 = (_mu_num_cmp($35,$41)|0);
    $43 = ($42|0)>(0);
    if (!($43)) {
     label = 14;
     break;
    }
    $44 = $iter;
    $45 = $16;
    _mu_fn_fcall($44,1,$45);
    $46 = $16;
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47|0)!=(0|0);
    if (!($48)) {
     break;
    }
    $72 = $16;
    $73 = HEAP32[$72>>2]|0;
    $7 = $73;
    $74 = $7;
    $6 = $74;
    $75 = $6;
    $76 = $75;
    $77 = 6 & $76;
    $78 = ($77|0)!=(0);
    if ($78) {
     $79 = $7;
     $80 = $79;
     $81 = -8 & $80;
     $82 = $81;
     $ref$i = $82;
     $83 = $ref$i;
     $84 = HEAP16[$83>>1]|0;
     $count$i = $84;
     $85 = $count$i;
     $86 = $85&65535;
     $87 = ($86|0)!=(0);
     if ($87) {
      $88 = $count$i;
      $89 = (($88) + -1)<<16>>16;
      $count$i = $89;
      $90 = $count$i;
      $91 = $ref$i;
      HEAP16[$91>>1] = $90;
      $92 = $count$i;
      $93 = $92&65535;
      $94 = ($93|0)==(0);
      if ($94) {
       $95 = $7;
       _mu_destroy($95);
      }
     }
    }
    $96 = $i;
    $8 = 1;
    $97 = $8;
    $98 = (+($97>>>0));
    HEAPF32[$9>>2] = $98;
    $99 = HEAP32[$9>>2]|0;
    $100 = -8 & $99;
    $101 = (1 + ($100))|0;
    $102 = $101;
    $103 = (_mu_num_sub($96,$102)|0);
    $i = $103;
   }
   if ((label|0) == 14) {
    $104 = $15;
    $10 = 0;
    $105 = $10;
    $106 = (+($105>>>0));
    HEAPF32[$11>>2] = $106;
    $107 = HEAP32[$11>>2]|0;
    $108 = -8 & $107;
    $109 = (1 + ($108))|0;
    $110 = $109;
    _mu_tbl_insert($104,$110,0);
    break;
   }
   $49 = $iter;
   $3 = $49;
   $50 = $3;
   $2 = $50;
   $51 = $2;
   $52 = $51;
   $53 = 6 & $52;
   $54 = ($53|0)!=(0);
   if ($54) {
    $55 = $3;
    $56 = $55;
    $57 = -8 & $56;
    $58 = $57;
    $ref$i1 = $58;
    $59 = $ref$i1;
    $60 = HEAP16[$59>>1]|0;
    $count$i2 = $60;
    $61 = $count$i2;
    $62 = $61&65535;
    $63 = ($62|0)!=(0);
    if ($63) {
     $64 = $count$i2;
     $65 = (($64) + -1)<<16>>16;
     $count$i2 = $65;
     $66 = $count$i2;
     $67 = $ref$i1;
     HEAP16[$67>>1] = $66;
     $68 = $count$i2;
     $69 = $68&65535;
     $70 = ($69|0)==(0);
     if ($70) {
      $71 = $3;
      _mu_destroy($71);
     }
    }
   }
   $14 = 0;
   $114 = $14;
   STACKTOP = sp;return ($114|0);
  }
 } while(0);
 $111 = $iter;
 $112 = $16;
 $113 = (_mu_fn_tcall($111,0,$112)|0);
 $14 = $113;
 $114 = $14;
 STACKTOP = sp;return ($114|0);
}
function _mu_drop_while_step_bfn($scope,$frame) {
 $scope = $scope|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $count$i = 0, $count$i10 = 0, $count$i13 = 0;
 var $count$i2 = 0, $count$i5 = 0, $count$i7 = 0, $iter = 0, $m = 0, $ref$i = 0, $ref$i1 = 0, $ref$i12 = 0, $ref$i4 = 0, $ref$i6 = 0, $ref$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 152|0;
 $13 = sp + 84|0;
 $17 = sp + 64|0;
 $19 = $scope;
 $20 = $frame;
 $21 = $19;
 $16 = 1;
 $22 = $16;
 $23 = (+($22>>>0));
 HEAPF32[$17>>2] = $23;
 $24 = HEAP32[$17>>2]|0;
 $25 = -8 & $24;
 $26 = (1 + ($25))|0;
 $27 = $26;
 $28 = (_mu_tbl_lookup($21,$27)|0);
 $iter = $28;
 $29 = $19;
 $12 = 0;
 $30 = $12;
 $31 = (+($30>>>0));
 HEAPF32[$13>>2] = $31;
 $32 = HEAP32[$13>>2]|0;
 $33 = -8 & $32;
 $34 = (1 + ($33))|0;
 $35 = $34;
 $36 = (_mu_tbl_lookup($29,$35)|0);
 $cond = $36;
 $37 = $cond;
 $38 = ($37|0)!=(0|0);
 if (!($38)) {
  $192 = $iter;
  $193 = $20;
  $194 = (_mu_fn_tcall($192,0,$193)|0);
  $18 = $194;
  $195 = $18;
  STACKTOP = sp;return ($195|0);
 }
 while(1) {
  $39 = $iter;
  $40 = $20;
  $41 = (_mu_fn_next($39,15,$40)|0);
  if (!($41)) {
   label = 20;
   break;
  }
  $42 = $20;
  $43 = HEAP32[$42>>2]|0;
  $9 = $43;
  $44 = $9;
  $8 = $44;
  $45 = $8;
  $46 = $45;
  $47 = 6 & $46;
  $48 = ($47|0)!=(0);
  if ($48) {
   $49 = $9;
   $50 = $49;
   $51 = -8 & $50;
   $52 = $51;
   $ref$i4 = $52;
   $53 = $ref$i4;
   $54 = HEAP16[$53>>1]|0;
   $count$i5 = $54;
   $55 = $count$i5;
   $56 = $55&65535;
   $57 = ($56|0)!=(0);
   if ($57) {
    $58 = $count$i5;
    $59 = (($58) + 1)<<16>>16;
    $count$i5 = $59;
    $60 = $count$i5;
    $61 = $ref$i4;
    HEAP16[$61>>1] = $60;
   }
  }
  $62 = $9;
  $m = $62;
  $63 = $cond;
  $64 = $20;
  _mu_fn_fcall($63,-15,$64);
  $65 = $20;
  $66 = HEAP32[$65>>2]|0;
  $67 = ($66|0)!=(0|0);
  if (!($67)) {
   label = 7;
   break;
  }
  $123 = $m;
  $7 = $123;
  $124 = $7;
  $6 = $124;
  $125 = $6;
  $126 = $125;
  $127 = 6 & $126;
  $128 = ($127|0)!=(0);
  if (!($128)) {
   continue;
  }
  $129 = $7;
  $130 = $129;
  $131 = -8 & $130;
  $132 = $131;
  $ref$i6 = $132;
  $133 = $ref$i6;
  $134 = HEAP16[$133>>1]|0;
  $count$i7 = $134;
  $135 = $count$i7;
  $136 = $135&65535;
  $137 = ($136|0)!=(0);
  if (!($137)) {
   continue;
  }
  $138 = $count$i7;
  $139 = (($138) + -1)<<16>>16;
  $count$i7 = $139;
  $140 = $count$i7;
  $141 = $ref$i6;
  HEAP16[$141>>1] = $140;
  $142 = $count$i7;
  $143 = $142&65535;
  $144 = ($143|0)==(0);
  if (!($144)) {
   continue;
  }
  $145 = $7;
  _mu_destroy($145);
 }
 if ((label|0) == 7) {
  $68 = $iter;
  $5 = $68;
  $69 = $5;
  $4 = $69;
  $70 = $4;
  $71 = $70;
  $72 = 6 & $71;
  $73 = ($72|0)!=(0);
  if ($73) {
   $74 = $5;
   $75 = $74;
   $76 = -8 & $75;
   $77 = $76;
   $ref$i9 = $77;
   $78 = $ref$i9;
   $79 = HEAP16[$78>>1]|0;
   $count$i10 = $79;
   $80 = $count$i10;
   $81 = $80&65535;
   $82 = ($81|0)!=(0);
   if ($82) {
    $83 = $count$i10;
    $84 = (($83) + -1)<<16>>16;
    $count$i10 = $84;
    $85 = $count$i10;
    $86 = $ref$i9;
    HEAP16[$86>>1] = $85;
    $87 = $count$i10;
    $88 = $87&65535;
    $89 = ($88|0)==(0);
    if ($89) {
     $90 = $5;
     _mu_destroy($90);
    }
   }
  }
  $91 = $cond;
  $3 = $91;
  $92 = $3;
  $2 = $92;
  $93 = $2;
  $94 = $93;
  $95 = 6 & $94;
  $96 = ($95|0)!=(0);
  if ($96) {
   $97 = $3;
   $98 = $97;
   $99 = -8 & $98;
   $100 = $99;
   $ref$i12 = $100;
   $101 = $ref$i12;
   $102 = HEAP16[$101>>1]|0;
   $count$i13 = $102;
   $103 = $count$i13;
   $104 = $103&65535;
   $105 = ($104|0)!=(0);
   if ($105) {
    $106 = $count$i13;
    $107 = (($106) + -1)<<16>>16;
    $count$i13 = $107;
    $108 = $count$i13;
    $109 = $ref$i12;
    HEAP16[$109>>1] = $108;
    $110 = $count$i13;
    $111 = $110&65535;
    $112 = ($111|0)==(0);
    if ($112) {
     $113 = $3;
     _mu_destroy($113);
    }
   }
  }
  $114 = $m;
  $115 = $20;
  HEAP32[$115>>2] = $114;
  $116 = $19;
  $0 = 0;
  $117 = $0;
  $118 = (+($117>>>0));
  HEAPF32[$1>>2] = $118;
  $119 = HEAP32[$1>>2]|0;
  $120 = -8 & $119;
  $121 = (1 + ($120))|0;
  $122 = $121;
  _mu_tbl_insert($116,$122,0);
  $18 = 15;
  $195 = $18;
  STACKTOP = sp;return ($195|0);
 }
 else if ((label|0) == 20) {
  $146 = $iter;
  $11 = $146;
  $147 = $11;
  $10 = $147;
  $148 = $10;
  $149 = $148;
  $150 = 6 & $149;
  $151 = ($150|0)!=(0);
  if ($151) {
   $152 = $11;
   $153 = $152;
   $154 = -8 & $153;
   $155 = $154;
   $ref$i1 = $155;
   $156 = $ref$i1;
   $157 = HEAP16[$156>>1]|0;
   $count$i2 = $157;
   $158 = $count$i2;
   $159 = $158&65535;
   $160 = ($159|0)!=(0);
   if ($160) {
    $161 = $count$i2;
    $162 = (($161) + -1)<<16>>16;
    $count$i2 = $162;
    $163 = $count$i2;
    $164 = $ref$i1;
    HEAP16[$164>>1] = $163;
    $165 = $count$i2;
    $166 = $165&65535;
    $167 = ($166|0)==(0);
    if ($167) {
     $168 = $11;
     _mu_destroy($168);
    }
   }
  }
  $169 = $cond;
  $15 = $169;
  $170 = $15;
  $14 = $170;
  $171 = $14;
  $172 = $171;
  $173 = 6 & $172;
  $174 = ($173|0)!=(0);
  if ($174) {
   $175 = $15;
   $176 = $175;
   $177 = -8 & $176;
   $178 = $177;
   $ref$i = $178;
   $179 = $ref$i;
   $180 = HEAP16[$179>>1]|0;
   $count$i = $180;
   $181 = $count$i;
   $182 = $181&65535;
   $183 = ($182|0)!=(0);
   if ($183) {
    $184 = $count$i;
    $185 = (($184) + -1)<<16>>16;
    $count$i = $185;
    $186 = $count$i;
    $187 = $ref$i;
    HEAP16[$187>>1] = $186;
    $188 = $count$i;
    $189 = $188&65535;
    $190 = ($189|0)==(0);
    if ($190) {
     $191 = $15;
     _mu_destroy($191);
    }
   }
  }
  $18 = 0;
  $195 = $18;
  STACKTOP = sp;return ($195|0);
 }
 return (0)|0;
}
function _mu_min_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1332]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1136)|0);
  HEAP32[1332] = $2;
 }
 $3 = HEAP32[1332]|0;
 return ($3|0);
}
function _mu_min_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1144) + 7)|0))|0);
}
function _mu_min_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cmp = 0, $count$i = 0, $count$i12 = 0, $count$i15 = 0, $count$i18 = 0, $count$i21 = 0, $count$i3 = 0, $count$i6 = 0, $count$i9 = 0, $iter = 0, $m = 0, $m1 = 0, $min = 0;
 var $min_frame = 0, $ref$i = 0, $ref$i11 = 0, $ref$i14 = 0, $ref$i17 = 0, $ref$i2 = 0, $ref$i20 = 0, $ref$i5 = 0, $ref$i8 = 0, $type = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 80|0;
 $vararg_buffer1 = sp + 72|0;
 $vararg_buffer = sp + 64|0;
 $8 = sp + 204|0;
 $15 = sp + 168|0;
 $21 = sp + 136|0;
 $25 = $frame;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $24 = $27;
 $28 = $24;
 $29 = $28;
 $30 = $29 & -8;
 $31 = $30;
 $32 = ((($31)) + 2|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = $33&65535;
 $35 = ($34|0)==(1);
 if ($35) {
  $36 = $25;
  $37 = HEAP32[$36>>2]|0;
  $20 = 0;
  $38 = $20;
  $39 = (+($38>>>0));
  HEAPF32[$21>>2] = $39;
  $40 = HEAP32[$21>>2]|0;
  $41 = -8 & $40;
  $42 = (1 + ($41))|0;
  $43 = $42;
  $44 = (_mu_tbl_lookup($37,$43)|0);
  $m = $44;
  $45 = $25;
  $46 = HEAP32[$45>>2]|0;
  $17 = $46;
  $47 = $17;
  $16 = $47;
  $48 = $16;
  $49 = $48;
  $50 = 6 & $49;
  $51 = ($50|0)!=(0);
  if ($51) {
   $52 = $17;
   $53 = $52;
   $54 = -8 & $53;
   $55 = $54;
   $ref$i5 = $55;
   $56 = $ref$i5;
   $57 = HEAP16[$56>>1]|0;
   $count$i6 = $57;
   $58 = $count$i6;
   $59 = $58&65535;
   $60 = ($59|0)!=(0);
   if ($60) {
    $61 = $count$i6;
    $62 = (($61) + -1)<<16>>16;
    $count$i6 = $62;
    $63 = $count$i6;
    $64 = $ref$i5;
    HEAP16[$64>>1] = $63;
    $65 = $count$i6;
    $66 = $65&65535;
    $67 = ($66|0)==(0);
    if ($67) {
     $68 = $17;
     _mu_destroy($68);
    }
   }
  }
  $69 = $m;
  $70 = $25;
  HEAP32[$70>>2] = $69;
 }
 $71 = (_mu_iter_def()|0);
 $72 = $25;
 _mu_fn_fcall($71,17,$72);
 $73 = $25;
 $74 = HEAP32[$73>>2]|0;
 $iter = $74;
 $75 = $iter;
 $76 = $25;
 _mu_fn_fcall($75,15,$76);
 $77 = $25;
 $78 = HEAP32[$77>>2]|0;
 $min_frame = $78;
 $79 = $min_frame;
 $14 = 0;
 $80 = $14;
 $81 = (+($80>>>0));
 HEAPF32[$15>>2] = $81;
 $82 = HEAP32[$15>>2]|0;
 $83 = -8 & $82;
 $84 = (1 + ($83))|0;
 $85 = $84;
 $86 = (_mu_tbl_lookup($79,$85)|0);
 $min = $86;
 $87 = $min;
 $88 = ($87|0)!=(0|0);
 if (!($88)) {
  _mu_errorf(3755,$vararg_buffer);
  // unreachable;
 }
 $89 = $min;
 $11 = $89;
 $90 = $11;
 $91 = $90;
 $92 = 7 & $91;
 $type = $92;
 $93 = $type;
 $94 = (2328 + ($93<<2)|0);
 $95 = HEAP32[$94>>2]|0;
 $cmp = $95;
 $96 = $cmp;
 $97 = ($96|0)!=(0|0);
 if (!($97)) {
  $98 = $min;
  HEAP32[$vararg_buffer1>>2] = $98;
  _mu_errorf(3781,$vararg_buffer1);
  // unreachable;
 }
 while(1) {
  $99 = $iter;
  $100 = $25;
  $101 = (_mu_fn_next($99,15,$100)|0);
  if (!($101)) {
   break;
  }
  $102 = $25;
  $103 = HEAP32[$102>>2]|0;
  $7 = 0;
  $104 = $7;
  $105 = (+($104>>>0));
  HEAPF32[$8>>2] = $105;
  $106 = HEAP32[$8>>2]|0;
  $107 = -8 & $106;
  $108 = (1 + ($107))|0;
  $109 = $108;
  $110 = (_mu_tbl_lookup($103,$109)|0);
  $m1 = $110;
  $111 = $m1;
  $4 = $111;
  $112 = $4;
  $113 = $112;
  $114 = 7 & $113;
  $115 = $type;
  $116 = ($114|0)!=($115|0);
  if ($116) {
   label = 13;
   break;
  }
  $119 = $cmp;
  $120 = $m1;
  $121 = $min;
  $1 = $121;
  $122 = $1;
  $0 = $122;
  $123 = $0;
  $124 = $123;
  $125 = 6 & $124;
  $126 = ($125|0)!=(0);
  if ($126) {
   $127 = $1;
   $128 = $127;
   $129 = -8 & $128;
   $130 = $129;
   $ref$i20 = $130;
   $131 = $ref$i20;
   $132 = HEAP16[$131>>1]|0;
   $count$i21 = $132;
   $133 = $count$i21;
   $134 = $133&65535;
   $135 = ($134|0)!=(0);
   if ($135) {
    $136 = $count$i21;
    $137 = (($136) + 1)<<16>>16;
    $count$i21 = $137;
    $138 = $count$i21;
    $139 = $ref$i20;
    HEAP16[$139>>1] = $138;
   }
  }
  $140 = $1;
  $141 = (FUNCTION_TABLE_iii[$119 & 511]($120,$140)|0);
  $142 = ($141|0)<(0);
  if (!($142)) {
   $192 = $m1;
   $10 = $192;
   $193 = $10;
   $9 = $193;
   $194 = $9;
   $195 = $194;
   $196 = 6 & $195;
   $197 = ($196|0)!=(0);
   if ($197) {
    $198 = $10;
    $199 = $198;
    $200 = -8 & $199;
    $201 = $200;
    $ref$i11 = $201;
    $202 = $ref$i11;
    $203 = HEAP16[$202>>1]|0;
    $count$i12 = $203;
    $204 = $count$i12;
    $205 = $204&65535;
    $206 = ($205|0)!=(0);
    if ($206) {
     $207 = $count$i12;
     $208 = (($207) + -1)<<16>>16;
     $count$i12 = $208;
     $209 = $count$i12;
     $210 = $ref$i11;
     HEAP16[$210>>1] = $209;
     $211 = $count$i12;
     $212 = $211&65535;
     $213 = ($212|0)==(0);
     if ($213) {
      $214 = $10;
      _mu_destroy($214);
     }
    }
   }
   $215 = $25;
   $216 = HEAP32[$215>>2]|0;
   $13 = $216;
   $217 = $13;
   $12 = $217;
   $218 = $12;
   $219 = $218;
   $220 = 6 & $219;
   $221 = ($220|0)!=(0);
   if (!($221)) {
    continue;
   }
   $222 = $13;
   $223 = $222;
   $224 = -8 & $223;
   $225 = $224;
   $ref$i8 = $225;
   $226 = $ref$i8;
   $227 = HEAP16[$226>>1]|0;
   $count$i9 = $227;
   $228 = $count$i9;
   $229 = $228&65535;
   $230 = ($229|0)!=(0);
   if (!($230)) {
    continue;
   }
   $231 = $count$i9;
   $232 = (($231) + -1)<<16>>16;
   $count$i9 = $232;
   $233 = $count$i9;
   $234 = $ref$i8;
   HEAP16[$234>>1] = $233;
   $235 = $count$i9;
   $236 = $235&65535;
   $237 = ($236|0)==(0);
   if (!($237)) {
    continue;
   }
   $238 = $13;
   _mu_destroy($238);
   continue;
  }
  $143 = $min;
  $3 = $143;
  $144 = $3;
  $2 = $144;
  $145 = $2;
  $146 = $145;
  $147 = 6 & $146;
  $148 = ($147|0)!=(0);
  if ($148) {
   $149 = $3;
   $150 = $149;
   $151 = -8 & $150;
   $152 = $151;
   $ref$i17 = $152;
   $153 = $ref$i17;
   $154 = HEAP16[$153>>1]|0;
   $count$i18 = $154;
   $155 = $count$i18;
   $156 = $155&65535;
   $157 = ($156|0)!=(0);
   if ($157) {
    $158 = $count$i18;
    $159 = (($158) + -1)<<16>>16;
    $count$i18 = $159;
    $160 = $count$i18;
    $161 = $ref$i17;
    HEAP16[$161>>1] = $160;
    $162 = $count$i18;
    $163 = $162&65535;
    $164 = ($163|0)==(0);
    if ($164) {
     $165 = $3;
     _mu_destroy($165);
    }
   }
  }
  $166 = $min_frame;
  $6 = $166;
  $167 = $6;
  $5 = $167;
  $168 = $5;
  $169 = $168;
  $170 = 6 & $169;
  $171 = ($170|0)!=(0);
  if ($171) {
   $172 = $6;
   $173 = $172;
   $174 = -8 & $173;
   $175 = $174;
   $ref$i14 = $175;
   $176 = $ref$i14;
   $177 = HEAP16[$176>>1]|0;
   $count$i15 = $177;
   $178 = $count$i15;
   $179 = $178&65535;
   $180 = ($179|0)!=(0);
   if ($180) {
    $181 = $count$i15;
    $182 = (($181) + -1)<<16>>16;
    $count$i15 = $182;
    $183 = $count$i15;
    $184 = $ref$i14;
    HEAP16[$184>>1] = $183;
    $185 = $count$i15;
    $186 = $185&65535;
    $187 = ($186|0)==(0);
    if ($187) {
     $188 = $6;
     _mu_destroy($188);
    }
   }
  }
  $189 = $m1;
  $min = $189;
  $190 = $25;
  $191 = HEAP32[$190>>2]|0;
  $min_frame = $191;
 }
 if ((label|0) == 13) {
  $117 = $min;
  $118 = $m1;
  HEAP32[$vararg_buffer3>>2] = $117;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $118;
  _mu_errorf(3802,$vararg_buffer3);
  // unreachable;
 }
 $239 = $iter;
 $19 = $239;
 $240 = $19;
 $18 = $240;
 $241 = $18;
 $242 = $241;
 $243 = 6 & $242;
 $244 = ($243|0)!=(0);
 if ($244) {
  $245 = $19;
  $246 = $245;
  $247 = -8 & $246;
  $248 = $247;
  $ref$i2 = $248;
  $249 = $ref$i2;
  $250 = HEAP16[$249>>1]|0;
  $count$i3 = $250;
  $251 = $count$i3;
  $252 = $251&65535;
  $253 = ($252|0)!=(0);
  if ($253) {
   $254 = $count$i3;
   $255 = (($254) + -1)<<16>>16;
   $count$i3 = $255;
   $256 = $count$i3;
   $257 = $ref$i2;
   HEAP16[$257>>1] = $256;
   $258 = $count$i3;
   $259 = $258&65535;
   $260 = ($259|0)==(0);
   if ($260) {
    $261 = $19;
    _mu_destroy($261);
   }
  }
 }
 $262 = $min;
 $23 = $262;
 $263 = $23;
 $22 = $263;
 $264 = $22;
 $265 = $264;
 $266 = 6 & $265;
 $267 = ($266|0)!=(0);
 if (!($267)) {
  $285 = $min_frame;
  $286 = $25;
  HEAP32[$286>>2] = $285;
  STACKTOP = sp;return 15;
 }
 $268 = $23;
 $269 = $268;
 $270 = -8 & $269;
 $271 = $270;
 $ref$i = $271;
 $272 = $ref$i;
 $273 = HEAP16[$272>>1]|0;
 $count$i = $273;
 $274 = $count$i;
 $275 = $274&65535;
 $276 = ($275|0)!=(0);
 if (!($276)) {
  $285 = $min_frame;
  $286 = $25;
  HEAP32[$286>>2] = $285;
  STACKTOP = sp;return 15;
 }
 $277 = $count$i;
 $278 = (($277) + -1)<<16>>16;
 $count$i = $278;
 $279 = $count$i;
 $280 = $ref$i;
 HEAP16[$280>>1] = $279;
 $281 = $count$i;
 $282 = $281&65535;
 $283 = ($282|0)==(0);
 if (!($283)) {
  $285 = $min_frame;
  $286 = $25;
  HEAP32[$286>>2] = $285;
  STACKTOP = sp;return 15;
 }
 $284 = $23;
 _mu_destroy($284);
 $285 = $min_frame;
 $286 = $25;
 HEAP32[$286>>2] = $285;
 STACKTOP = sp;return 15;
}
function _mu_max_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1333]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1160)|0);
  HEAP32[1333] = $2;
 }
 $3 = HEAP32[1333]|0;
 return ($3|0);
}
function _mu_max_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1168) + 7)|0))|0);
}
function _mu_max_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cmp = 0, $count$i = 0, $count$i12 = 0, $count$i15 = 0, $count$i18 = 0, $count$i21 = 0, $count$i3 = 0, $count$i6 = 0, $count$i9 = 0, $iter = 0, $m = 0, $m1 = 0, $max = 0;
 var $max_frame = 0, $ref$i = 0, $ref$i11 = 0, $ref$i14 = 0, $ref$i17 = 0, $ref$i2 = 0, $ref$i20 = 0, $ref$i5 = 0, $ref$i8 = 0, $type = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 80|0;
 $vararg_buffer1 = sp + 72|0;
 $vararg_buffer = sp + 64|0;
 $8 = sp + 204|0;
 $15 = sp + 168|0;
 $21 = sp + 136|0;
 $25 = $frame;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $24 = $27;
 $28 = $24;
 $29 = $28;
 $30 = $29 & -8;
 $31 = $30;
 $32 = ((($31)) + 2|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = $33&65535;
 $35 = ($34|0)==(1);
 if ($35) {
  $36 = $25;
  $37 = HEAP32[$36>>2]|0;
  $20 = 0;
  $38 = $20;
  $39 = (+($38>>>0));
  HEAPF32[$21>>2] = $39;
  $40 = HEAP32[$21>>2]|0;
  $41 = -8 & $40;
  $42 = (1 + ($41))|0;
  $43 = $42;
  $44 = (_mu_tbl_lookup($37,$43)|0);
  $m = $44;
  $45 = $25;
  $46 = HEAP32[$45>>2]|0;
  $17 = $46;
  $47 = $17;
  $16 = $47;
  $48 = $16;
  $49 = $48;
  $50 = 6 & $49;
  $51 = ($50|0)!=(0);
  if ($51) {
   $52 = $17;
   $53 = $52;
   $54 = -8 & $53;
   $55 = $54;
   $ref$i5 = $55;
   $56 = $ref$i5;
   $57 = HEAP16[$56>>1]|0;
   $count$i6 = $57;
   $58 = $count$i6;
   $59 = $58&65535;
   $60 = ($59|0)!=(0);
   if ($60) {
    $61 = $count$i6;
    $62 = (($61) + -1)<<16>>16;
    $count$i6 = $62;
    $63 = $count$i6;
    $64 = $ref$i5;
    HEAP16[$64>>1] = $63;
    $65 = $count$i6;
    $66 = $65&65535;
    $67 = ($66|0)==(0);
    if ($67) {
     $68 = $17;
     _mu_destroy($68);
    }
   }
  }
  $69 = $m;
  $70 = $25;
  HEAP32[$70>>2] = $69;
 }
 $71 = (_mu_iter_def()|0);
 $72 = $25;
 _mu_fn_fcall($71,17,$72);
 $73 = $25;
 $74 = HEAP32[$73>>2]|0;
 $iter = $74;
 $75 = $iter;
 $76 = $25;
 _mu_fn_fcall($75,15,$76);
 $77 = $25;
 $78 = HEAP32[$77>>2]|0;
 $max_frame = $78;
 $79 = $max_frame;
 $14 = 0;
 $80 = $14;
 $81 = (+($80>>>0));
 HEAPF32[$15>>2] = $81;
 $82 = HEAP32[$15>>2]|0;
 $83 = -8 & $82;
 $84 = (1 + ($83))|0;
 $85 = $84;
 $86 = (_mu_tbl_lookup($79,$85)|0);
 $max = $86;
 $87 = $max;
 $88 = ($87|0)!=(0|0);
 if (!($88)) {
  _mu_errorf(3830,$vararg_buffer);
  // unreachable;
 }
 $89 = $max;
 $11 = $89;
 $90 = $11;
 $91 = $90;
 $92 = 7 & $91;
 $type = $92;
 $93 = $type;
 $94 = (2328 + ($93<<2)|0);
 $95 = HEAP32[$94>>2]|0;
 $cmp = $95;
 $96 = $cmp;
 $97 = ($96|0)!=(0|0);
 if (!($97)) {
  $98 = $max;
  HEAP32[$vararg_buffer1>>2] = $98;
  _mu_errorf(3781,$vararg_buffer1);
  // unreachable;
 }
 while(1) {
  $99 = $iter;
  $100 = $25;
  $101 = (_mu_fn_next($99,15,$100)|0);
  if (!($101)) {
   break;
  }
  $102 = $25;
  $103 = HEAP32[$102>>2]|0;
  $7 = 0;
  $104 = $7;
  $105 = (+($104>>>0));
  HEAPF32[$8>>2] = $105;
  $106 = HEAP32[$8>>2]|0;
  $107 = -8 & $106;
  $108 = (1 + ($107))|0;
  $109 = $108;
  $110 = (_mu_tbl_lookup($103,$109)|0);
  $m1 = $110;
  $111 = $m1;
  $4 = $111;
  $112 = $4;
  $113 = $112;
  $114 = 7 & $113;
  $115 = $type;
  $116 = ($114|0)!=($115|0);
  if ($116) {
   label = 13;
   break;
  }
  $119 = $cmp;
  $120 = $m1;
  $121 = $max;
  $1 = $121;
  $122 = $1;
  $0 = $122;
  $123 = $0;
  $124 = $123;
  $125 = 6 & $124;
  $126 = ($125|0)!=(0);
  if ($126) {
   $127 = $1;
   $128 = $127;
   $129 = -8 & $128;
   $130 = $129;
   $ref$i20 = $130;
   $131 = $ref$i20;
   $132 = HEAP16[$131>>1]|0;
   $count$i21 = $132;
   $133 = $count$i21;
   $134 = $133&65535;
   $135 = ($134|0)!=(0);
   if ($135) {
    $136 = $count$i21;
    $137 = (($136) + 1)<<16>>16;
    $count$i21 = $137;
    $138 = $count$i21;
    $139 = $ref$i20;
    HEAP16[$139>>1] = $138;
   }
  }
  $140 = $1;
  $141 = (FUNCTION_TABLE_iii[$119 & 511]($120,$140)|0);
  $142 = ($141|0)>=(0);
  if (!($142)) {
   $192 = $m1;
   $10 = $192;
   $193 = $10;
   $9 = $193;
   $194 = $9;
   $195 = $194;
   $196 = 6 & $195;
   $197 = ($196|0)!=(0);
   if ($197) {
    $198 = $10;
    $199 = $198;
    $200 = -8 & $199;
    $201 = $200;
    $ref$i11 = $201;
    $202 = $ref$i11;
    $203 = HEAP16[$202>>1]|0;
    $count$i12 = $203;
    $204 = $count$i12;
    $205 = $204&65535;
    $206 = ($205|0)!=(0);
    if ($206) {
     $207 = $count$i12;
     $208 = (($207) + -1)<<16>>16;
     $count$i12 = $208;
     $209 = $count$i12;
     $210 = $ref$i11;
     HEAP16[$210>>1] = $209;
     $211 = $count$i12;
     $212 = $211&65535;
     $213 = ($212|0)==(0);
     if ($213) {
      $214 = $10;
      _mu_destroy($214);
     }
    }
   }
   $215 = $25;
   $216 = HEAP32[$215>>2]|0;
   $13 = $216;
   $217 = $13;
   $12 = $217;
   $218 = $12;
   $219 = $218;
   $220 = 6 & $219;
   $221 = ($220|0)!=(0);
   if (!($221)) {
    continue;
   }
   $222 = $13;
   $223 = $222;
   $224 = -8 & $223;
   $225 = $224;
   $ref$i8 = $225;
   $226 = $ref$i8;
   $227 = HEAP16[$226>>1]|0;
   $count$i9 = $227;
   $228 = $count$i9;
   $229 = $228&65535;
   $230 = ($229|0)!=(0);
   if (!($230)) {
    continue;
   }
   $231 = $count$i9;
   $232 = (($231) + -1)<<16>>16;
   $count$i9 = $232;
   $233 = $count$i9;
   $234 = $ref$i8;
   HEAP16[$234>>1] = $233;
   $235 = $count$i9;
   $236 = $235&65535;
   $237 = ($236|0)==(0);
   if (!($237)) {
    continue;
   }
   $238 = $13;
   _mu_destroy($238);
   continue;
  }
  $143 = $max;
  $3 = $143;
  $144 = $3;
  $2 = $144;
  $145 = $2;
  $146 = $145;
  $147 = 6 & $146;
  $148 = ($147|0)!=(0);
  if ($148) {
   $149 = $3;
   $150 = $149;
   $151 = -8 & $150;
   $152 = $151;
   $ref$i17 = $152;
   $153 = $ref$i17;
   $154 = HEAP16[$153>>1]|0;
   $count$i18 = $154;
   $155 = $count$i18;
   $156 = $155&65535;
   $157 = ($156|0)!=(0);
   if ($157) {
    $158 = $count$i18;
    $159 = (($158) + -1)<<16>>16;
    $count$i18 = $159;
    $160 = $count$i18;
    $161 = $ref$i17;
    HEAP16[$161>>1] = $160;
    $162 = $count$i18;
    $163 = $162&65535;
    $164 = ($163|0)==(0);
    if ($164) {
     $165 = $3;
     _mu_destroy($165);
    }
   }
  }
  $166 = $max_frame;
  $6 = $166;
  $167 = $6;
  $5 = $167;
  $168 = $5;
  $169 = $168;
  $170 = 6 & $169;
  $171 = ($170|0)!=(0);
  if ($171) {
   $172 = $6;
   $173 = $172;
   $174 = -8 & $173;
   $175 = $174;
   $ref$i14 = $175;
   $176 = $ref$i14;
   $177 = HEAP16[$176>>1]|0;
   $count$i15 = $177;
   $178 = $count$i15;
   $179 = $178&65535;
   $180 = ($179|0)!=(0);
   if ($180) {
    $181 = $count$i15;
    $182 = (($181) + -1)<<16>>16;
    $count$i15 = $182;
    $183 = $count$i15;
    $184 = $ref$i14;
    HEAP16[$184>>1] = $183;
    $185 = $count$i15;
    $186 = $185&65535;
    $187 = ($186|0)==(0);
    if ($187) {
     $188 = $6;
     _mu_destroy($188);
    }
   }
  }
  $189 = $m1;
  $max = $189;
  $190 = $25;
  $191 = HEAP32[$190>>2]|0;
  $max_frame = $191;
 }
 if ((label|0) == 13) {
  $117 = $max;
  $118 = $m1;
  HEAP32[$vararg_buffer3>>2] = $117;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $118;
  _mu_errorf(3802,$vararg_buffer3);
  // unreachable;
 }
 $239 = $iter;
 $19 = $239;
 $240 = $19;
 $18 = $240;
 $241 = $18;
 $242 = $241;
 $243 = 6 & $242;
 $244 = ($243|0)!=(0);
 if ($244) {
  $245 = $19;
  $246 = $245;
  $247 = -8 & $246;
  $248 = $247;
  $ref$i2 = $248;
  $249 = $ref$i2;
  $250 = HEAP16[$249>>1]|0;
  $count$i3 = $250;
  $251 = $count$i3;
  $252 = $251&65535;
  $253 = ($252|0)!=(0);
  if ($253) {
   $254 = $count$i3;
   $255 = (($254) + -1)<<16>>16;
   $count$i3 = $255;
   $256 = $count$i3;
   $257 = $ref$i2;
   HEAP16[$257>>1] = $256;
   $258 = $count$i3;
   $259 = $258&65535;
   $260 = ($259|0)==(0);
   if ($260) {
    $261 = $19;
    _mu_destroy($261);
   }
  }
 }
 $262 = $max;
 $23 = $262;
 $263 = $23;
 $22 = $263;
 $264 = $22;
 $265 = $264;
 $266 = 6 & $265;
 $267 = ($266|0)!=(0);
 if (!($267)) {
  $285 = $max_frame;
  $286 = $25;
  HEAP32[$286>>2] = $285;
  STACKTOP = sp;return 15;
 }
 $268 = $23;
 $269 = $268;
 $270 = -8 & $269;
 $271 = $270;
 $ref$i = $271;
 $272 = $ref$i;
 $273 = HEAP16[$272>>1]|0;
 $count$i = $273;
 $274 = $count$i;
 $275 = $274&65535;
 $276 = ($275|0)!=(0);
 if (!($276)) {
  $285 = $max_frame;
  $286 = $25;
  HEAP32[$286>>2] = $285;
  STACKTOP = sp;return 15;
 }
 $277 = $count$i;
 $278 = (($277) + -1)<<16>>16;
 $count$i = $278;
 $279 = $count$i;
 $280 = $ref$i;
 HEAP16[$280>>1] = $279;
 $281 = $count$i;
 $282 = $281&65535;
 $283 = ($282|0)==(0);
 if (!($283)) {
  $285 = $max_frame;
  $286 = $25;
  HEAP32[$286>>2] = $285;
  STACKTOP = sp;return 15;
 }
 $284 = $23;
 _mu_destroy($284);
 $285 = $max_frame;
 $286 = $25;
 HEAP32[$286>>2] = $285;
 STACKTOP = sp;return 15;
}
function _mu_reverse_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1334]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1184)|0);
  HEAP32[1334] = $2;
 }
 $3 = HEAP32[1334]|0;
 return ($3|0);
}
function _mu_reverse_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1200) + 7)|0))|0);
}
function _mu_reverse_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $count$i = 0, $iter = 0;
 var $ref$i = 0, $store = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 56|0;
 $6 = sp + 32|0;
 $9 = sp + 8|0;
 $8 = $frame;
 $10 = (_mu_iter_def()|0);
 $11 = $8;
 _mu_fn_fcall($10,17,$11);
 $12 = $8;
 $13 = HEAP32[$12>>2]|0;
 $iter = $13;
 $14 = (_mu_tbl_create(0)|0);
 $store = $14;
 while(1) {
  $15 = $iter;
  $16 = $8;
  $17 = (_mu_fn_next($15,15,$16)|0);
  if (!($17)) {
   break;
  }
  $18 = $store;
  $19 = $store;
  $7 = $19;
  $20 = $7;
  $21 = $20;
  $22 = $21 & -8;
  $23 = $22;
  $24 = ((($23)) + 2|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25&65535;
  $0 = $26;
  $27 = $0;
  $28 = (+($27>>>0));
  HEAPF32[$1>>2] = $28;
  $29 = HEAP32[$1>>2]|0;
  $30 = -8 & $29;
  $31 = (1 + ($30))|0;
  $32 = $31;
  $33 = $8;
  $34 = HEAP32[$33>>2]|0;
  _mu_tbl_insert($18,$32,$34);
 }
 $35 = $iter;
 $3 = $35;
 $36 = $3;
 $2 = $36;
 $37 = $2;
 $38 = $37;
 $39 = 6 & $38;
 $40 = ($39|0)!=(0);
 if ($40) {
  $41 = $3;
  $42 = $41;
  $43 = -8 & $42;
  $44 = $43;
  $ref$i = $44;
  $45 = $ref$i;
  $46 = HEAP16[$45>>1]|0;
  $count$i = $46;
  $47 = $count$i;
  $48 = $47&65535;
  $49 = ($48|0)!=(0);
  if ($49) {
   $50 = $count$i;
   $51 = (($50) + -1)<<16>>16;
   $count$i = $51;
   $52 = $count$i;
   $53 = $ref$i;
   HEAP16[$53>>1] = $52;
   $54 = $count$i;
   $55 = $54&65535;
   $56 = ($55|0)==(0);
   if ($56) {
    $57 = $3;
    _mu_destroy($57);
   }
  }
 }
 $58 = $store;
 HEAP32[$9>>2] = $58;
 $59 = ((($9)) + 4|0);
 $60 = $store;
 $4 = $60;
 $61 = $4;
 $62 = $61;
 $63 = $62 & -8;
 $64 = $63;
 $65 = ((($64)) + 2|0);
 $66 = HEAP16[$65>>1]|0;
 $67 = $66&65535;
 $68 = (($67) - 1)|0;
 $5 = $68;
 $69 = $5;
 $70 = (+($69>>>0));
 HEAPF32[$6>>2] = $70;
 $71 = HEAP32[$6>>2]|0;
 $72 = -8 & $71;
 $73 = (1 + ($72))|0;
 $74 = $73;
 HEAP32[$59>>2] = $74;
 $75 = (_mu_tbl_fromlist($9,2)|0);
 $76 = (_mu_fn_fromsbfn(0,304,$75)|0);
 $77 = $8;
 HEAP32[$77>>2] = $76;
 STACKTOP = sp;return 1;
}
function _mu_reverse_step_bfn($scope,$frame) {
 $scope = $scope|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $count$i = 0, $i = 0, $ref$i = 0, $store = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 64|0;
 $3 = sp + 56|0;
 $7 = sp + 36|0;
 $9 = sp + 28|0;
 $11 = sp + 20|0;
 $13 = $scope;
 $14 = $frame;
 $15 = $13;
 $10 = 1;
 $16 = $10;
 $17 = (+($16>>>0));
 HEAPF32[$11>>2] = $17;
 $18 = HEAP32[$11>>2]|0;
 $19 = -8 & $18;
 $20 = (1 + ($19))|0;
 $21 = $20;
 $22 = (_mu_tbl_lookup($15,$21)|0);
 $i = $22;
 $23 = $i;
 $2 = 0;
 $24 = $2;
 $25 = (+($24>>>0));
 HEAPF32[$3>>2] = $25;
 $26 = HEAP32[$3>>2]|0;
 $27 = -8 & $26;
 $28 = (1 + ($27))|0;
 $29 = $28;
 $30 = (_mu_num_cmp($23,$29)|0);
 $31 = ($30|0)<(0);
 if ($31) {
  $12 = 0;
  $82 = $12;
  STACKTOP = sp;return ($82|0);
 }
 $32 = $13;
 $0 = 0;
 $33 = $0;
 $34 = (+($33>>>0));
 HEAPF32[$1>>2] = $34;
 $35 = HEAP32[$1>>2]|0;
 $36 = -8 & $35;
 $37 = (1 + ($36))|0;
 $38 = $37;
 $39 = (_mu_tbl_lookup($32,$38)|0);
 $store = $39;
 $40 = $store;
 $41 = $i;
 $42 = (_mu_tbl_lookup($40,$41)|0);
 $43 = $14;
 HEAP32[$43>>2] = $42;
 $44 = $store;
 $5 = $44;
 $45 = $5;
 $4 = $45;
 $46 = $4;
 $47 = $46;
 $48 = 6 & $47;
 $49 = ($48|0)!=(0);
 if ($49) {
  $50 = $5;
  $51 = $50;
  $52 = -8 & $51;
  $53 = $52;
  $ref$i = $53;
  $54 = $ref$i;
  $55 = HEAP16[$54>>1]|0;
  $count$i = $55;
  $56 = $count$i;
  $57 = $56&65535;
  $58 = ($57|0)!=(0);
  if ($58) {
   $59 = $count$i;
   $60 = (($59) + -1)<<16>>16;
   $count$i = $60;
   $61 = $count$i;
   $62 = $ref$i;
   HEAP16[$62>>1] = $61;
   $63 = $count$i;
   $64 = $63&65535;
   $65 = ($64|0)==(0);
   if ($65) {
    $66 = $5;
    _mu_destroy($66);
   }
  }
 }
 $67 = $13;
 $6 = 1;
 $68 = $6;
 $69 = (+($68>>>0));
 HEAPF32[$7>>2] = $69;
 $70 = HEAP32[$7>>2]|0;
 $71 = -8 & $70;
 $72 = (1 + ($71))|0;
 $73 = $72;
 $74 = $i;
 $8 = 1;
 $75 = $8;
 $76 = (+($75>>>0));
 HEAPF32[$9>>2] = $76;
 $77 = HEAP32[$9>>2]|0;
 $78 = -8 & $77;
 $79 = (1 + ($78))|0;
 $80 = $79;
 $81 = (_mu_num_sub($74,$80)|0);
 _mu_tbl_insert($67,$73,$81);
 $12 = 15;
 $82 = $12;
 STACKTOP = sp;return ($82|0);
}
function _mu_sort_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1335]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1216)|0);
  HEAP32[1335] = $2;
 }
 $3 = HEAP32[1335]|0;
 return ($3|0);
}
function _mu_sort_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1224) + 7)|0))|0);
}
function _mu_sort_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $iter = 0, $ref$i = 0, $store = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 40|0;
 $5 = sp + 32|0;
 $8 = sp + 8|0;
 $7 = $frame;
 $9 = (_mu_iter_def()|0);
 $10 = $7;
 _mu_fn_fcall($9,17,$10);
 $11 = $7;
 $12 = HEAP32[$11>>2]|0;
 $iter = $12;
 $13 = (_mu_tbl_create(0)|0);
 $store = $13;
 while(1) {
  $14 = $iter;
  $15 = $7;
  $16 = (_mu_fn_next($14,15,$15)|0);
  if (!($16)) {
   break;
  }
  $17 = $store;
  $18 = $store;
  $6 = $18;
  $19 = $6;
  $20 = $19;
  $21 = $20 & -8;
  $22 = $21;
  $23 = ((($22)) + 2|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = $24&65535;
  $2 = $25;
  $26 = $2;
  $27 = (+($26>>>0));
  HEAPF32[$3>>2] = $27;
  $28 = HEAP32[$3>>2]|0;
  $29 = -8 & $28;
  $30 = (1 + ($29))|0;
  $31 = $30;
  $32 = $7;
  $33 = HEAP32[$32>>2]|0;
  _mu_tbl_insert($17,$31,$33);
 }
 $34 = $iter;
 $1 = $34;
 $35 = $1;
 $0 = $35;
 $36 = $0;
 $37 = $36;
 $38 = 6 & $37;
 $39 = ($38|0)!=(0);
 if ($39) {
  $40 = $1;
  $41 = $40;
  $42 = -8 & $41;
  $43 = $42;
  $ref$i = $43;
  $44 = $ref$i;
  $45 = HEAP16[$44>>1]|0;
  $count$i = $45;
  $46 = $count$i;
  $47 = $46&65535;
  $48 = ($47|0)!=(0);
  if ($48) {
   $49 = $count$i;
   $50 = (($49) + -1)<<16>>16;
   $count$i = $50;
   $51 = $count$i;
   $52 = $ref$i;
   HEAP16[$52>>1] = $51;
   $53 = $count$i;
   $54 = $53&65535;
   $55 = ($54|0)==(0);
   if ($55) {
    $56 = $1;
    _mu_destroy($56);
   }
  }
 }
 $57 = $store;
 _mu_fn_merge_sort($57);
 $58 = $store;
 HEAP32[$8>>2] = $58;
 $59 = ((($8)) + 4|0);
 $4 = 0;
 $60 = $4;
 $61 = (+($60>>>0));
 HEAPF32[$5>>2] = $61;
 $62 = HEAP32[$5>>2]|0;
 $63 = -8 & $62;
 $64 = (1 + ($63))|0;
 $65 = $64;
 HEAP32[$59>>2] = $65;
 $66 = (_mu_tbl_fromlist($8,2)|0);
 $67 = (_mu_fn_fromsbfn(0,305,$66)|0);
 $68 = $7;
 HEAP32[$68>>2] = $67;
 STACKTOP = sp;return 1;
}
function _mu_fn_merge_sort($elems) {
 $elems = $elems|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $b = 0, $cmp = 0, $count$i = 0, $count$i5 = 0, $i = 0, $i1 = 0, $i3 = 0, $j = 0;
 var $j2 = 0, $len = 0, $ref$i = 0, $ref$i4 = 0, $slice = 0, $t = 0, $type = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $6 = sp + 104|0;
 $9 = sp + 92|0;
 $i = sp + 64|0;
 $11 = $elems;
 $12 = $11;
 $10 = $12;
 $13 = $10;
 $14 = $13;
 $15 = $14 & -8;
 $16 = $15;
 $17 = ((($16)) + 2|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18&65535;
 $len = $19;
 $20 = $len;
 $21 = $20<<3;
 $22 = (_mu_alloc($21)|0);
 $a = $22;
 $23 = $len;
 $24 = $23<<3;
 $25 = (_mu_alloc($24)|0);
 $b = $25;
 $type = 1;
 HEAP32[$i>>2] = 0;
 $j = 0;
 while(1) {
  $26 = $11;
  $27 = $j;
  $28 = $a;
  $29 = (($28) + ($27<<3)|0);
  $30 = ((($29)) + 4|0);
  $31 = (_mu_tbl_next($26,$i,0,$30)|0);
  if (!($31)) {
   break;
  }
  $32 = $j;
  $33 = $a;
  $34 = (($33) + ($32<<3)|0);
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $8 = 0;
  $37 = $8;
  $38 = (+($37>>>0));
  HEAPF32[$9>>2] = $38;
  $39 = HEAP32[$9>>2]|0;
  $40 = -8 & $39;
  $41 = (1 + ($40))|0;
  $42 = $41;
  $43 = (_mu_tbl_lookup($36,$42)|0);
  $44 = $j;
  $45 = $a;
  $46 = (($45) + ($44<<3)|0);
  HEAP32[$46>>2] = $43;
  $47 = $j;
  $48 = ($47|0)==(0);
  if ($48) {
   $49 = $j;
   $50 = $a;
   $51 = (($50) + ($49<<3)|0);
   $52 = HEAP32[$51>>2]|0;
   $7 = $52;
   $53 = $7;
   $54 = $53;
   $55 = 7 & $54;
   $type = $55;
  } else {
   $56 = $type;
   $57 = $j;
   $58 = $a;
   $59 = (($58) + ($57<<3)|0);
   $60 = HEAP32[$59>>2]|0;
   $2 = $60;
   $61 = $2;
   $62 = $61;
   $63 = 7 & $62;
   $64 = ($56|0)!=($63|0);
   if ($64) {
    label = 6;
    break;
   }
  }
  $71 = $j;
  $72 = (($71) + 1)|0;
  $j = $72;
 }
 if ((label|0) == 6) {
  $65 = $a;
  $66 = HEAP32[$65>>2]|0;
  $67 = $j;
  $68 = $a;
  $69 = (($68) + ($67<<3)|0);
  $70 = HEAP32[$69>>2]|0;
  HEAP32[$vararg_buffer>>2] = $66;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $70;
  _mu_errorf(3802,$vararg_buffer);
  // unreachable;
 }
 $73 = $type;
 $74 = (2328 + ($73<<2)|0);
 $75 = HEAP32[$74>>2]|0;
 $cmp = $75;
 $76 = $cmp;
 $77 = ($76|0)!=(0|0);
 if (!($77)) {
  $78 = $a;
  $79 = HEAP32[$78>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $79;
  _mu_errorf(3781,$vararg_buffer2);
  // unreachable;
 }
 $slice = 1;
 while(1) {
  $80 = $slice;
  $81 = $len;
  $82 = ($80>>>0)<($81>>>0);
  if (!($82)) {
   break;
  }
  $i1 = 0;
  while(1) {
   $83 = $i1;
   $84 = $len;
   $85 = ($83>>>0)<($84>>>0);
   if (!($85)) {
    break;
   }
   $x = 0;
   $y = 0;
   $j2 = 0;
   while(1) {
    $86 = $j2;
    $87 = $slice;
    $88 = $87<<1;
    $89 = ($86>>>0)<($88>>>0);
    if (!($89)) {
     break;
    }
    $90 = $i1;
    $91 = $j2;
    $92 = (($90) + ($91))|0;
    $93 = $len;
    $94 = ($92>>>0)<($93>>>0);
    if (!($94)) {
     break;
    }
    $95 = $y;
    $96 = $slice;
    $97 = ($95>>>0)>=($96>>>0);
    do {
     if ($97) {
      label = 24;
     } else {
      $98 = $i1;
      $99 = $slice;
      $100 = (($98) + ($99))|0;
      $101 = $y;
      $102 = (($100) + ($101))|0;
      $103 = $len;
      $104 = ($102>>>0)>=($103>>>0);
      if ($104) {
       label = 24;
      } else {
       $105 = $x;
       $106 = $slice;
       $107 = ($105>>>0)<($106>>>0);
       if ($107) {
        $108 = $cmp;
        $109 = $i1;
        $110 = $x;
        $111 = (($109) + ($110))|0;
        $112 = $a;
        $113 = (($112) + ($111<<3)|0);
        $114 = HEAP32[$113>>2]|0;
        $115 = $i1;
        $116 = $slice;
        $117 = (($115) + ($116))|0;
        $118 = $y;
        $119 = (($117) + ($118))|0;
        $120 = $a;
        $121 = (($120) + ($119<<3)|0);
        $122 = HEAP32[$121>>2]|0;
        $1 = $122;
        $123 = $1;
        $0 = $123;
        $124 = $0;
        $125 = $124;
        $126 = 6 & $125;
        $127 = ($126|0)!=(0);
        if ($127) {
         $128 = $1;
         $129 = $128;
         $130 = -8 & $129;
         $131 = $130;
         $ref$i4 = $131;
         $132 = $ref$i4;
         $133 = HEAP16[$132>>1]|0;
         $count$i5 = $133;
         $134 = $count$i5;
         $135 = $134&65535;
         $136 = ($135|0)!=(0);
         if ($136) {
          $137 = $count$i5;
          $138 = (($137) + 1)<<16>>16;
          $count$i5 = $138;
          $139 = $count$i5;
          $140 = $ref$i4;
          HEAP16[$140>>1] = $139;
         }
        }
        $141 = $1;
        $142 = (FUNCTION_TABLE_iii[$108 & 511]($114,$141)|0);
        $143 = ($142|0)<=(0);
        if ($143) {
         label = 24;
         break;
        }
       }
       $156 = $i1;
       $157 = $j2;
       $158 = (($156) + ($157))|0;
       $159 = $b;
       $160 = (($159) + ($158<<3)|0);
       $161 = $i1;
       $162 = $slice;
       $163 = (($161) + ($162))|0;
       $164 = $y;
       $165 = (($163) + ($164))|0;
       $166 = $a;
       $167 = (($166) + ($165<<3)|0);
       ;HEAP32[$160>>2]=HEAP32[$167>>2]|0;HEAP32[$160+4>>2]=HEAP32[$167+4>>2]|0;
       $168 = $y;
       $169 = (($168) + 1)|0;
       $y = $169;
      }
     }
    } while(0);
    if ((label|0) == 24) {
     label = 0;
     $144 = $i1;
     $145 = $j2;
     $146 = (($144) + ($145))|0;
     $147 = $b;
     $148 = (($147) + ($146<<3)|0);
     $149 = $i1;
     $150 = $x;
     $151 = (($149) + ($150))|0;
     $152 = $a;
     $153 = (($152) + ($151<<3)|0);
     ;HEAP32[$148>>2]=HEAP32[$153>>2]|0;HEAP32[$148+4>>2]=HEAP32[$153+4>>2]|0;
     $154 = $x;
     $155 = (($154) + 1)|0;
     $x = $155;
    }
    $170 = $j2;
    $171 = (($170) + 1)|0;
    $j2 = $171;
   }
   $172 = $slice;
   $173 = $172<<1;
   $174 = $i1;
   $175 = (($174) + ($173))|0;
   $i1 = $175;
  }
  $176 = $a;
  $t = $176;
  $177 = $b;
  $a = $177;
  $178 = $t;
  $b = $178;
  $179 = $slice;
  $180 = $179<<1;
  $slice = $180;
 }
 $i3 = 0;
 while(1) {
  $181 = $i3;
  $182 = $len;
  $183 = ($181>>>0)<($182>>>0);
  if (!($183)) {
   break;
  }
  $184 = $i3;
  $185 = $a;
  $186 = (($185) + ($184<<3)|0);
  $187 = HEAP32[$186>>2]|0;
  $4 = $187;
  $188 = $4;
  $3 = $188;
  $189 = $3;
  $190 = $189;
  $191 = 6 & $190;
  $192 = ($191|0)!=(0);
  if ($192) {
   $193 = $4;
   $194 = $193;
   $195 = -8 & $194;
   $196 = $195;
   $ref$i = $196;
   $197 = $ref$i;
   $198 = HEAP16[$197>>1]|0;
   $count$i = $198;
   $199 = $count$i;
   $200 = $199&65535;
   $201 = ($200|0)!=(0);
   if ($201) {
    $202 = $count$i;
    $203 = (($202) + -1)<<16>>16;
    $count$i = $203;
    $204 = $count$i;
    $205 = $ref$i;
    HEAP16[$205>>1] = $204;
    $206 = $count$i;
    $207 = $206&65535;
    $208 = ($207|0)==(0);
    if ($208) {
     $209 = $4;
     _mu_destroy($209);
    }
   }
  }
  $210 = $11;
  $211 = $i3;
  $5 = $211;
  $212 = $5;
  $213 = (+($212>>>0));
  HEAPF32[$6>>2] = $213;
  $214 = HEAP32[$6>>2]|0;
  $215 = -8 & $214;
  $216 = (1 + ($215))|0;
  $217 = $216;
  $218 = $i3;
  $219 = $a;
  $220 = (($219) + ($218<<3)|0);
  $221 = ((($220)) + 4|0);
  $222 = HEAP32[$221>>2]|0;
  _mu_tbl_insert($210,$217,$222);
  $223 = $i3;
  $224 = (($223) + 1)|0;
  $i3 = $224;
 }
 $225 = $a;
 $226 = $len;
 $227 = $226<<3;
 _mu_dealloc($225,$227);
 $228 = $b;
 $229 = $len;
 $230 = $229<<3;
 _mu_dealloc($228,$230);
 STACKTOP = sp;return;
}
function _mu_sort_step_bfn($scope,$frame) {
 $scope = $scope|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $count$i = 0, $i = 0, $next = 0, $ref$i = 0, $store = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 68|0;
 $4 = sp + 56|0;
 $8 = sp + 36|0;
 $10 = sp + 28|0;
 $12 = sp + 20|0;
 $i = sp + 4|0;
 $13 = $scope;
 $14 = $frame;
 $15 = $13;
 $11 = 0;
 $16 = $11;
 $17 = (+($16>>>0));
 HEAPF32[$12>>2] = $17;
 $18 = HEAP32[$12>>2]|0;
 $19 = -8 & $18;
 $20 = (1 + ($19))|0;
 $21 = $20;
 $22 = (_mu_tbl_lookup($15,$21)|0);
 $store = $22;
 $23 = $13;
 $3 = 1;
 $24 = $3;
 $25 = (+($24>>>0));
 HEAPF32[$4>>2] = $25;
 $26 = HEAP32[$4>>2]|0;
 $27 = -8 & $26;
 $28 = (1 + ($27))|0;
 $29 = $28;
 $30 = (_mu_tbl_lookup($23,$29)|0);
 $2 = $30;
 $31 = $2;
 $0 = $31;
 $32 = $0;
 $33 = $32;
 $34 = (($33) - 1)|0;
 HEAP32[$1>>2] = $34;
 $35 = +HEAPF32[$1>>2];
 $36 = (~~(($35))>>>0);
 HEAP32[$i>>2] = $36;
 $37 = $store;
 $38 = $14;
 $39 = (_mu_tbl_next($37,$i,0,$38)|0);
 $40 = $39&1;
 $next = $40;
 $41 = $store;
 $6 = $41;
 $42 = $6;
 $5 = $42;
 $43 = $5;
 $44 = $43;
 $45 = 6 & $44;
 $46 = ($45|0)!=(0);
 if ($46) {
  $47 = $6;
  $48 = $47;
  $49 = -8 & $48;
  $50 = $49;
  $ref$i = $50;
  $51 = $ref$i;
  $52 = HEAP16[$51>>1]|0;
  $count$i = $52;
  $53 = $count$i;
  $54 = $53&65535;
  $55 = ($54|0)!=(0);
  if ($55) {
   $56 = $count$i;
   $57 = (($56) + -1)<<16>>16;
   $count$i = $57;
   $58 = $count$i;
   $59 = $ref$i;
   HEAP16[$59>>1] = $58;
   $60 = $count$i;
   $61 = $60&65535;
   $62 = ($61|0)==(0);
   if ($62) {
    $63 = $6;
    _mu_destroy($63);
   }
  }
 }
 $64 = $13;
 $7 = 1;
 $65 = $7;
 $66 = (+($65>>>0));
 HEAPF32[$8>>2] = $66;
 $67 = HEAP32[$8>>2]|0;
 $68 = -8 & $67;
 $69 = (1 + ($68))|0;
 $70 = $69;
 $71 = HEAP32[$i>>2]|0;
 $9 = $71;
 $72 = $9;
 $73 = (+($72>>>0));
 HEAPF32[$10>>2] = $73;
 $74 = HEAP32[$10>>2]|0;
 $75 = -8 & $74;
 $76 = (1 + ($75))|0;
 $77 = $76;
 _mu_tbl_insert($64,$70,$77);
 $78 = $next;
 $79 = $78&1;
 $80 = $79 ? 15 : 0;
 $81 = $80&255;
 STACKTOP = sp;return ($81|0);
}
function _mu_builtins_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1336]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_tbl_initpairs(5096,0,2392,82)|0);
  HEAP32[1336] = $2;
 }
 $3 = HEAP32[1336]|0;
 return ($3|0);
}
function _mu_empty_str() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1337]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(5112)|0);
  HEAP32[1337] = $2;
 }
 $3 = HEAP32[1337]|0;
 return ($3|0);
}
function _mu_str_init($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = $1;
 $3 = (($2) + 2)|0;
 $4 = $3;
 $5 = $0;
 $6 = ((($5)) + 2|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = (_mu_str_intern($4,$8)|0);
 $m = $9;
 $10 = $m;
 $11 = $10;
 $12 = (($11) - 3)|0;
 $13 = $12;
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  $21 = $m;
  STACKTOP = sp;return ($21|0);
 }
 $17 = $m;
 $18 = $17;
 $19 = (($18) - 3)|0;
 $20 = $19;
 HEAP16[$20>>1] = 0;
 $21 = $m;
 STACKTOP = sp;return ($21|0);
}
function _mu_str_intern($b,$n) {
 $b = $b|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf$i = 0, $count$i = 0, $count$i2 = 0, $count$i4 = 0, $i = 0, $ref$i = 0, $ref$i1 = 0, $ref$i3 = 0, $s = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp + 32|0;
 HEAP32[$11>>2] = $b;
 $12 = $n;
 $13 = HEAP32[$11>>2]|0;
 $9 = $13;
 $14 = $9;
 $15 = $14;
 $16 = -8 & $15;
 $17 = $16;
 $18 = ((($17)) + 4|0);
 $19 = $12;
 $20 = $19&65535;
 $21 = (_mu_str_table_find($18,$20)|0);
 $i = $21;
 $22 = $i;
 $23 = ($22|0)>=(0);
 $24 = HEAP32[$11>>2]|0;
 if ($23) {
  $6 = $24;
  $25 = $6;
  $5 = $25;
  $26 = $5;
  $27 = $26;
  $28 = 6 & $27;
  $29 = ($28|0)!=(0);
  if ($29) {
   $30 = $6;
   $31 = $30;
   $32 = -8 & $31;
   $33 = $32;
   $ref$i1 = $33;
   $34 = $ref$i1;
   $35 = HEAP16[$34>>1]|0;
   $count$i2 = $35;
   $36 = $count$i2;
   $37 = $36&65535;
   $38 = ($37|0)!=(0);
   if ($38) {
    $39 = $count$i2;
    $40 = (($39) + -1)<<16>>16;
    $count$i2 = $40;
    $41 = $count$i2;
    $42 = $ref$i1;
    HEAP16[$42>>1] = $41;
    $43 = $count$i2;
    $44 = $43&65535;
    $45 = ($44|0)==(0);
    if ($45) {
     $46 = $6;
     _mu_destroy($46);
    }
   }
  }
  $47 = $i;
  $48 = HEAP32[1339]|0;
  $49 = (($48) + ($47<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $4 = $50;
  $51 = $4;
  $3 = $51;
  $52 = $3;
  $53 = $52;
  $54 = 6 & $53;
  $55 = ($54|0)!=(0);
  if ($55) {
   $56 = $4;
   $57 = $56;
   $58 = -8 & $57;
   $59 = $58;
   $ref$i3 = $59;
   $60 = $ref$i3;
   $61 = HEAP16[$60>>1]|0;
   $count$i4 = $61;
   $62 = $count$i4;
   $63 = $62&65535;
   $64 = ($63|0)!=(0);
   if ($64) {
    $65 = $count$i4;
    $66 = (($65) + 1)<<16>>16;
    $count$i4 = $66;
    $67 = $count$i4;
    $68 = $ref$i3;
    HEAP16[$68>>1] = $67;
   }
  }
  $69 = $4;
  $10 = $69;
  $130 = $10;
  STACKTOP = sp;return ($130|0);
 }
 $1 = $24;
 $70 = $1;
 $71 = $70;
 $72 = 4 & $71;
 $73 = ($72|0)!=(0);
 if ($73) {
  $74 = $1;
  $75 = $74;
  $76 = (($75) - 6)|0;
  $77 = $76;
  $buf$i = $77;
  $78 = $buf$i;
  $79 = ((($78)) + 4|0);
  $80 = $buf$i;
  $81 = ((($80)) + 2|0);
  $82 = HEAP16[$81>>1]|0;
  $83 = $82&65535;
  $84 = (($83) + 4)|0;
  $85 = (($84) - 1)|0;
  $86 = $85 & -4;
  $87 = (($79) + ($86)|0);
  $88 = HEAP32[$87>>2]|0;
  $0 = $88;
 } else {
  $0 = 0;
 }
 $89 = $0;
 $90 = ($89|0)!=(0|0);
 if ($90) {
  _mu_buf_setdtor($11,0);
 }
 $91 = HEAP32[$11>>2]|0;
 $2 = $91;
 $92 = $2;
 $93 = $92;
 $94 = -8 & $93;
 $95 = $94;
 $96 = ((($95)) + 2|0);
 $97 = HEAP16[$96>>1]|0;
 $98 = $97&65535;
 $99 = $12;
 $100 = ($98|0)!=($99|0);
 if ($100) {
  $101 = $12;
  _mu_buf_resize($11,$101);
 }
 $102 = HEAP32[$11>>2]|0;
 $103 = $102;
 $104 = (($103) - 2)|0;
 $105 = (($104) + 3)|0;
 $106 = $105;
 $s = $106;
 $107 = $i;
 $108 = $107 ^ -1;
 $109 = $s;
 _mu_str_table_insert($108,$109);
 $110 = $s;
 $8 = $110;
 $111 = $8;
 $7 = $111;
 $112 = $7;
 $113 = $112;
 $114 = 6 & $113;
 $115 = ($114|0)!=(0);
 if ($115) {
  $116 = $8;
  $117 = $116;
  $118 = -8 & $117;
  $119 = $118;
  $ref$i = $119;
  $120 = $ref$i;
  $121 = HEAP16[$120>>1]|0;
  $count$i = $121;
  $122 = $count$i;
  $123 = $122&65535;
  $124 = ($123|0)!=(0);
  if ($124) {
   $125 = $count$i;
   $126 = (($125) + 1)<<16>>16;
   $count$i = $126;
   $127 = $count$i;
   $128 = $ref$i;
   HEAP16[$128>>1] = $127;
  }
 }
 $129 = $8;
 $10 = $129;
 $130 = $10;
 STACKTOP = sp;return ($130|0);
}
function _mu_str_table_find($s,$len) {
 $s = $s|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $max = 0, $mid = 0, $min = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $s;
 $5 = $len;
 $min = 0;
 $6 = HEAP32[1338]|0;
 $7 = (($6) - 1)|0;
 $max = $7;
 while(1) {
  $8 = $min;
  $9 = $max;
  $10 = ($8|0)<=($9|0);
  if (!($10)) {
   label = 11;
   break;
  }
  $11 = $max;
  $12 = $min;
  $13 = (($11) + ($12))|0;
  $14 = (($13|0) / 2)&-1;
  $mid = $14;
  $15 = $5;
  $16 = $15&65535;
  $17 = $mid;
  $18 = HEAP32[1339]|0;
  $19 = (($18) + ($17<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $2 = $20;
  $21 = $2;
  $22 = $21;
  $23 = (($22) - 3)|0;
  $24 = $23;
  $25 = ((($24)) + 2|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26&65535;
  $28 = ($16|0)>($27|0);
  if ($28) {
   $56 = 1;
  } else {
   $29 = $5;
   $30 = $29&65535;
   $31 = $mid;
   $32 = HEAP32[1339]|0;
   $33 = (($32) + ($31<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $0 = $34;
   $35 = $0;
   $36 = $35;
   $37 = (($36) - 3)|0;
   $38 = $37;
   $39 = ((($38)) + 2|0);
   $40 = HEAP16[$39>>1]|0;
   $41 = $40&65535;
   $42 = ($30|0)<($41|0);
   if ($42) {
    $56 = -1;
   } else {
    $43 = $4;
    $44 = $mid;
    $45 = HEAP32[1339]|0;
    $46 = (($45) + ($44<<2)|0);
    $47 = HEAP32[$46>>2]|0;
    $1 = $47;
    $48 = $1;
    $49 = $48;
    $50 = (($49) - 3)|0;
    $51 = $50;
    $52 = ((($51)) + 4|0);
    $53 = $5;
    $54 = $53&65535;
    $55 = (_memcmp($43,$52,$54)|0);
    $56 = $55;
   }
  }
  $cmp = $56;
  $57 = $cmp;
  $58 = ($57|0)==(0);
  if ($58) {
   label = 7;
   break;
  }
  $60 = $cmp;
  $61 = ($60|0)<(0);
  $62 = $mid;
  if ($61) {
   $63 = (($62) - 1)|0;
   $max = $63;
   continue;
  } else {
   $64 = (($62) + 1)|0;
   $min = $64;
   continue;
  }
 }
 if ((label|0) == 7) {
  $59 = $mid;
  $3 = $59;
  $67 = $3;
  STACKTOP = sp;return ($67|0);
 }
 else if ((label|0) == 11) {
  $65 = $min;
  $66 = $65 ^ -1;
  $3 = $66;
  $67 = $3;
  STACKTOP = sp;return ($67|0);
 }
 return (0)|0;
}
function _mu_str_table_insert($i,$s) {
 $i = $i|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nsize = 0, $ntable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $i;
 $1 = $s;
 $2 = HEAP32[1338]|0;
 $3 = HEAP32[1340]|0;
 $4 = ($2|0)==($3|0);
 if (!($4)) {
  $32 = $0;
  $33 = (($32) + 1)|0;
  $34 = HEAP32[1339]|0;
  $35 = (($34) + ($33<<2)|0);
  $36 = $0;
  $37 = HEAP32[1339]|0;
  $38 = (($37) + ($36<<2)|0);
  $39 = HEAP32[1338]|0;
  $40 = $0;
  $41 = (($39) - ($40))|0;
  $42 = $41<<2;
  _memmove(($35|0),($38|0),($42|0))|0;
  $43 = $1;
  $44 = $0;
  $45 = HEAP32[1339]|0;
  $46 = (($45) + ($44<<2)|0);
  HEAP32[$46>>2] = $43;
  $47 = HEAP32[1338]|0;
  $48 = (($47) + 1)|0;
  HEAP32[1338] = $48;
  STACKTOP = sp;return;
 }
 $5 = HEAP32[1340]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $nsize = 4;
 } else {
  $7 = HEAP32[1340]|0;
  $8 = $7 << 1;
  $nsize = $8;
 }
 $9 = $nsize;
 $10 = $9<<2;
 $11 = (_mu_alloc($10)|0);
 $ntable = $11;
 $12 = $ntable;
 $13 = HEAP32[1339]|0;
 $14 = $0;
 $15 = $14<<2;
 _memcpy(($12|0),($13|0),($15|0))|0;
 $16 = $0;
 $17 = (($16) + 1)|0;
 $18 = $ntable;
 $19 = (($18) + ($17<<2)|0);
 $20 = $0;
 $21 = HEAP32[1339]|0;
 $22 = (($21) + ($20<<2)|0);
 $23 = HEAP32[1338]|0;
 $24 = $0;
 $25 = (($23) - ($24))|0;
 $26 = $25<<2;
 _memcpy(($19|0),($22|0),($26|0))|0;
 $27 = HEAP32[1339]|0;
 $28 = HEAP32[1340]|0;
 $29 = $28<<2;
 _mu_dealloc($27,$29);
 $30 = $ntable;
 HEAP32[1339] = $30;
 $31 = $nsize;
 HEAP32[1340] = $31;
 $43 = $1;
 $44 = $0;
 $45 = HEAP32[1339]|0;
 $46 = (($45) + ($44<<2)|0);
 HEAP32[$46>>2] = $43;
 $47 = HEAP32[1338]|0;
 $48 = (($47) + 1)|0;
 HEAP32[1338] = $48;
 STACKTOP = sp;return;
}
function _mu_space_str() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1341]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1240)|0);
  HEAP32[1341] = $2;
 }
 $3 = HEAP32[1341]|0;
 return ($3|0);
}
function _mu_str_fromdata($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $b = 0, $count$i = 0;
 var $count$i2 = 0, $i = 0, $ns = 0, $ref$i = 0, $ref$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $s;
 $7 = $n;
 $8 = $7;
 $9 = ($8>>>0)<=(65535);
 if (!($9)) {
  _mu_errorlen(3856);
  // unreachable;
 }
 $10 = $6;
 $11 = $7;
 $12 = $11&65535;
 $13 = (_mu_str_table_find($10,$12)|0);
 $i = $13;
 $14 = $i;
 $15 = ($14|0)>=(0);
 if ($15) {
  $16 = $i;
  $17 = HEAP32[1339]|0;
  $18 = (($17) + ($16<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $4 = $19;
  $20 = $4;
  $3 = $20;
  $21 = $3;
  $22 = $21;
  $23 = 6 & $22;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $4;
   $26 = $25;
   $27 = -8 & $26;
   $28 = $27;
   $ref$i = $28;
   $29 = $ref$i;
   $30 = HEAP16[$29>>1]|0;
   $count$i = $30;
   $31 = $count$i;
   $32 = $31&65535;
   $33 = ($32|0)!=(0);
   if ($33) {
    $34 = $count$i;
    $35 = (($34) + 1)<<16>>16;
    $count$i = $35;
    $36 = $count$i;
    $37 = $ref$i;
    HEAP16[$37>>1] = $36;
   }
  }
  $38 = $4;
  $5 = $38;
  $77 = $5;
  STACKTOP = sp;return ($77|0);
 } else {
  $39 = $7;
  $40 = (_mu_buf_create($39)|0);
  $b = $40;
  $41 = $b;
  $0 = $41;
  $42 = $0;
  $43 = $42;
  $44 = -8 & $43;
  $45 = $44;
  $46 = ((($45)) + 4|0);
  $47 = $6;
  $48 = $7;
  _memcpy(($46|0),($47|0),($48|0))|0;
  $49 = $b;
  $50 = $49;
  $51 = (($50) - 2)|0;
  $52 = (($51) + 3)|0;
  $53 = $52;
  $ns = $53;
  $54 = $i;
  $55 = $54 ^ -1;
  $56 = $ns;
  _mu_str_table_insert($55,$56);
  $57 = $ns;
  $2 = $57;
  $58 = $2;
  $1 = $58;
  $59 = $1;
  $60 = $59;
  $61 = 6 & $60;
  $62 = ($61|0)!=(0);
  if ($62) {
   $63 = $2;
   $64 = $63;
   $65 = -8 & $64;
   $66 = $65;
   $ref$i1 = $66;
   $67 = $ref$i1;
   $68 = HEAP16[$67>>1]|0;
   $count$i2 = $68;
   $69 = $count$i2;
   $70 = $69&65535;
   $71 = ($70|0)!=(0);
   if ($71) {
    $72 = $count$i2;
    $73 = (($72) + 1)<<16>>16;
    $count$i2 = $73;
    $74 = $count$i2;
    $75 = $ref$i1;
    HEAP16[$75>>1] = $74;
   }
  }
  $76 = $2;
  $5 = $76;
  $77 = $5;
  STACKTOP = sp;return ($77|0);
 }
 return (0)|0;
}
function _mu_str_destroy($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $s;
 $4 = $3;
 $2 = $4;
 $5 = $2;
 $6 = $5;
 $7 = (($6) - 3)|0;
 $8 = $7;
 $9 = ((($8)) + 4|0);
 $10 = $3;
 $0 = $10;
 $11 = $0;
 $12 = $11;
 $13 = (($12) - 3)|0;
 $14 = $13;
 $15 = ((($14)) + 2|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = (_mu_str_table_find($9,$16)|0);
 $i = $17;
 $18 = $i;
 _mu_str_table_remove($18);
 $19 = $3;
 $20 = $19;
 $21 = (($20) - 3)|0;
 $22 = $21;
 $23 = $3;
 $1 = $23;
 $24 = $1;
 $25 = $24;
 $26 = (($25) - 3)|0;
 $27 = $26;
 $28 = ((($27)) + 2|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29&65535;
 $31 = (4 + ($30))|0;
 _mu_dealloc($22,$31);
 STACKTOP = sp;return;
}
function _mu_str_table_remove($i) {
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $i;
 $1 = HEAP32[1338]|0;
 $2 = (($1) - 1)|0;
 HEAP32[1338] = $2;
 $3 = $0;
 $4 = HEAP32[1339]|0;
 $5 = (($4) + ($3<<2)|0);
 $6 = $0;
 $7 = (($6) + 1)|0;
 $8 = HEAP32[1339]|0;
 $9 = (($8) + ($7<<2)|0);
 $10 = HEAP32[1338]|0;
 $11 = $0;
 $12 = (($10) - ($11))|0;
 $13 = $12<<2;
 _memmove(($5|0),($9|0),($13|0))|0;
 STACKTOP = sp;return;
}
function _mu_str_frommu($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $2 = $m;
 $3 = $2;
 $0 = $3;
 $4 = $0;
 $5 = $4;
 $6 = 7 & $5;
 switch ($6|0) {
 case 0:  {
  $7 = (_mu_empty_str()|0);
  $1 = $7;
  break;
 }
 case 3:  {
  $8 = $2;
  $1 = $8;
  break;
 }
 default: {
  $9 = $2;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 0;
  $10 = (_mu_str_format(3943,$vararg_buffer)|0);
  $1 = $10;
 }
 }
 $11 = $1;
 STACKTOP = sp;return ($11|0);
}
function _mu_str_format($f,$varargs) {
 $f = $f|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $args = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 8|0;
 $0 = $f;
 HEAP32[$args>>2] = $varargs;
 $1 = $0;
 $2 = (_mu_str_vformat($1,$args)|0);
 $m = $2;
 $3 = $m;
 STACKTOP = sp;return ($3|0);
}
function _mu_str_vformat($f,$args) {
 $f = $f|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $b = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 4|0;
 $n = sp;
 $0 = $f;
 $1 = $args;
 $2 = (_mu_buf_create(0)|0);
 HEAP32[$b>>2] = $2;
 HEAP32[$n>>2] = 0;
 $3 = $0;
 $4 = $1;
 _mu_buf_vpushf($b,$n,$3,$4);
 $5 = HEAP32[$b>>2]|0;
 $6 = HEAP32[$n>>2]|0;
 $7 = (_mu_str_intern($5,$6)|0);
 STACKTOP = sp;return ($7|0);
}
function _mu_str_cmp($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $alen = 0, $blen = 0;
 var $cmp = 0, $count$i = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = $a;
 $8 = $b;
 $9 = $7;
 $10 = $8;
 $11 = ($9|0)==($10|0);
 if ($11) {
  $6 = 0;
  $77 = $6;
  STACKTOP = sp;return ($77|0);
 }
 $12 = $7;
 $5 = $12;
 $13 = $5;
 $14 = $13;
 $15 = (($14) - 3)|0;
 $16 = $15;
 $17 = ((($16)) + 2|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18&65535;
 $alen = $19;
 $20 = $8;
 $2 = $20;
 $21 = $2;
 $22 = $21;
 $23 = (($22) - 3)|0;
 $24 = $23;
 $25 = ((($24)) + 2|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = $26&65535;
 $blen = $27;
 $28 = $7;
 $0 = $28;
 $29 = $0;
 $30 = $29;
 $31 = (($30) - 3)|0;
 $32 = $31;
 $33 = ((($32)) + 4|0);
 $34 = $8;
 $1 = $34;
 $35 = $1;
 $36 = $35;
 $37 = (($36) - 3)|0;
 $38 = $37;
 $39 = ((($38)) + 4|0);
 $40 = $alen;
 $41 = $blen;
 $42 = ($40>>>0)<($41>>>0);
 $43 = $alen;
 $44 = $blen;
 $45 = $42 ? $43 : $44;
 $46 = (_memcmp($33,$39,$45)|0);
 $cmp = $46;
 $47 = $8;
 $4 = $47;
 $48 = $4;
 $3 = $48;
 $49 = $3;
 $50 = $49;
 $51 = 6 & $50;
 $52 = ($51|0)!=(0);
 if ($52) {
  $53 = $4;
  $54 = $53;
  $55 = -8 & $54;
  $56 = $55;
  $ref$i = $56;
  $57 = $ref$i;
  $58 = HEAP16[$57>>1]|0;
  $count$i = $58;
  $59 = $count$i;
  $60 = $59&65535;
  $61 = ($60|0)!=(0);
  if ($61) {
   $62 = $count$i;
   $63 = (($62) + -1)<<16>>16;
   $count$i = $63;
   $64 = $count$i;
   $65 = $ref$i;
   HEAP16[$65>>1] = $64;
   $66 = $count$i;
   $67 = $66&65535;
   $68 = ($67|0)==(0);
   if ($68) {
    $69 = $4;
    _mu_destroy($69);
   }
  }
 }
 $70 = $cmp;
 $71 = ($70|0)!=(0);
 if ($71) {
  $72 = $cmp;
  $76 = $72;
 } else {
  $73 = $alen;
  $74 = $blen;
  $75 = (($73) - ($74))|0;
  $76 = $75;
 }
 $6 = $76;
 $77 = $6;
 STACKTOP = sp;return ($77|0);
}
function _mu_str_next($s,$ip,$cp) {
 $s = $s|0;
 $ip = $ip|0;
 $cp = $cp|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 24|0;
 $3 = $s;
 $4 = $ip;
 $5 = $cp;
 $6 = $4;
 $7 = HEAP32[$6>>2]|0;
 $i = $7;
 $8 = $i;
 $9 = $3;
 $1 = $9;
 $10 = $1;
 $11 = $10;
 $12 = (($11) - 3)|0;
 $13 = $12;
 $14 = ((($13)) + 2|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = ($8>>>0)>=($16>>>0);
 if ($17) {
  $$expand_i1_val = 0;
  HEAP8[$2>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$2>>0]|0;
  $33 = $$pre_trunc&1;
  STACKTOP = sp;return ($33|0);
 }
 $18 = $5;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = $3;
  $0 = $20;
  $21 = $0;
  $22 = $21;
  $23 = (($22) - 3)|0;
  $24 = $23;
  $25 = ((($24)) + 4|0);
  $26 = $i;
  $27 = (($25) + ($26)|0);
  $28 = (_mu_str_fromdata($27,1)|0);
  $29 = $5;
  HEAP32[$29>>2] = $28;
 }
 $30 = $i;
 $31 = (($30) + 1)|0;
 $32 = $4;
 HEAP32[$32>>2] = $31;
 $$expand_i1_val2 = 1;
 HEAP8[$2>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$2>>0]|0;
 $33 = $$pre_trunc&1;
 STACKTOP = sp;return ($33|0);
}
function _mu_str_iter($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 32|0;
 $5 = sp + 8|0;
 $4 = $s;
 $6 = $4;
 $3 = $6;
 $7 = $3;
 $2 = $7;
 $8 = $2;
 $9 = $8;
 $10 = 6 & $9;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $3;
  $13 = $12;
  $14 = -8 & $13;
  $15 = $14;
  $ref$i = $15;
  $16 = $ref$i;
  $17 = HEAP16[$16>>1]|0;
  $count$i = $17;
  $18 = $count$i;
  $19 = $18&65535;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $count$i;
   $22 = (($21) + 1)<<16>>16;
   $count$i = $22;
   $23 = $count$i;
   $24 = $ref$i;
   HEAP16[$24>>1] = $23;
  }
 }
 $25 = $3;
 HEAP32[$5>>2] = $25;
 $26 = ((($5)) + 4|0);
 $0 = 0;
 $27 = $0;
 $28 = (+($27>>>0));
 HEAPF32[$1>>2] = $28;
 $29 = HEAP32[$1>>2]|0;
 $30 = -8 & $29;
 $31 = (1 + ($30))|0;
 $32 = $31;
 HEAP32[$26>>2] = $32;
 $33 = (_mu_tbl_fromlist($5,2)|0);
 $34 = (_mu_fn_fromsbfn(0,306,$33)|0);
 STACKTOP = sp;return ($34|0);
}
function _mu_str_step($scope,$frame) {
 $scope = $scope|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $count$i = 0, $i = 0, $next = 0, $ref$i = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 68|0;
 $4 = sp + 56|0;
 $8 = sp + 36|0;
 $10 = sp + 28|0;
 $12 = sp + 20|0;
 $i = sp + 4|0;
 $13 = $scope;
 $14 = $frame;
 $15 = $13;
 $11 = 0;
 $16 = $11;
 $17 = (+($16>>>0));
 HEAPF32[$12>>2] = $17;
 $18 = HEAP32[$12>>2]|0;
 $19 = -8 & $18;
 $20 = (1 + ($19))|0;
 $21 = $20;
 $22 = (_mu_tbl_lookup($15,$21)|0);
 $s = $22;
 $23 = $13;
 $3 = 1;
 $24 = $3;
 $25 = (+($24>>>0));
 HEAPF32[$4>>2] = $25;
 $26 = HEAP32[$4>>2]|0;
 $27 = -8 & $26;
 $28 = (1 + ($27))|0;
 $29 = $28;
 $30 = (_mu_tbl_lookup($23,$29)|0);
 $2 = $30;
 $31 = $2;
 $0 = $31;
 $32 = $0;
 $33 = $32;
 $34 = (($33) - 1)|0;
 HEAP32[$1>>2] = $34;
 $35 = +HEAPF32[$1>>2];
 $36 = (~~(($35))>>>0);
 HEAP32[$i>>2] = $36;
 $37 = $s;
 $38 = $14;
 $39 = (_mu_str_next($37,$i,$38)|0);
 $40 = $39&1;
 $next = $40;
 $41 = $s;
 $6 = $41;
 $42 = $6;
 $5 = $42;
 $43 = $5;
 $44 = $43;
 $45 = 6 & $44;
 $46 = ($45|0)!=(0);
 if ($46) {
  $47 = $6;
  $48 = $47;
  $49 = -8 & $48;
  $50 = $49;
  $ref$i = $50;
  $51 = $ref$i;
  $52 = HEAP16[$51>>1]|0;
  $count$i = $52;
  $53 = $count$i;
  $54 = $53&65535;
  $55 = ($54|0)!=(0);
  if ($55) {
   $56 = $count$i;
   $57 = (($56) + -1)<<16>>16;
   $count$i = $57;
   $58 = $count$i;
   $59 = $ref$i;
   HEAP16[$59>>1] = $58;
   $60 = $count$i;
   $61 = $60&65535;
   $62 = ($61|0)==(0);
   if ($62) {
    $63 = $6;
    _mu_destroy($63);
   }
  }
 }
 $64 = $13;
 $7 = 1;
 $65 = $7;
 $66 = (+($65>>>0));
 HEAPF32[$8>>2] = $66;
 $67 = HEAP32[$8>>2]|0;
 $68 = -8 & $67;
 $69 = (1 + ($68))|0;
 $70 = $69;
 $71 = HEAP32[$i>>2]|0;
 $9 = $71;
 $72 = $9;
 $73 = (+($72>>>0));
 HEAPF32[$10>>2] = $73;
 $74 = HEAP32[$10>>2]|0;
 $75 = -8 & $74;
 $76 = (1 + ($75))|0;
 $77 = $76;
 _mu_tbl_insert($64,$70,$77);
 $78 = $next;
 $79 = $78&1;
 $80 = $79 ? 1 : 0;
 $81 = $80&255;
 STACKTOP = sp;return ($81|0);
}
function _mu_str_concat($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $an = 0, $bn = 0, $count$i = 0, $d = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = $a;
 $9 = $b;
 $10 = $8;
 $7 = $10;
 $11 = $7;
 $12 = $11;
 $13 = (($12) - 3)|0;
 $14 = $13;
 $15 = ((($14)) + 2|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $an = $17;
 $18 = $9;
 $6 = $18;
 $19 = $6;
 $20 = $19;
 $21 = (($20) - 3)|0;
 $22 = $21;
 $23 = ((($22)) + 2|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24&65535;
 $bn = $25;
 $26 = $an;
 $27 = $bn;
 $28 = (($26) + ($27))|0;
 $29 = (_mu_buf_create($28)|0);
 $d = $29;
 $30 = $d;
 $3 = $30;
 $31 = $3;
 $32 = $31;
 $33 = -8 & $32;
 $34 = $33;
 $35 = ((($34)) + 4|0);
 $36 = $8;
 $0 = $36;
 $37 = $0;
 $38 = $37;
 $39 = (($38) - 3)|0;
 $40 = $39;
 $41 = ((($40)) + 4|0);
 $42 = $an;
 _memcpy(($35|0),($41|0),($42|0))|0;
 $43 = $d;
 $1 = $43;
 $44 = $1;
 $45 = $44;
 $46 = -8 & $45;
 $47 = $46;
 $48 = ((($47)) + 4|0);
 $49 = $an;
 $50 = (($48) + ($49)|0);
 $51 = $9;
 $2 = $51;
 $52 = $2;
 $53 = $52;
 $54 = (($53) - 3)|0;
 $55 = $54;
 $56 = ((($55)) + 4|0);
 $57 = $bn;
 _memcpy(($50|0),($56|0),($57|0))|0;
 $58 = $9;
 $5 = $58;
 $59 = $5;
 $4 = $59;
 $60 = $4;
 $61 = $60;
 $62 = 6 & $61;
 $63 = ($62|0)!=(0);
 if ($63) {
  $64 = $5;
  $65 = $64;
  $66 = -8 & $65;
  $67 = $66;
  $ref$i = $67;
  $68 = $ref$i;
  $69 = HEAP16[$68>>1]|0;
  $count$i = $69;
  $70 = $count$i;
  $71 = $70&65535;
  $72 = ($71|0)!=(0);
  if ($72) {
   $73 = $count$i;
   $74 = (($73) + -1)<<16>>16;
   $count$i = $74;
   $75 = $count$i;
   $76 = $ref$i;
   HEAP16[$76>>1] = $75;
   $77 = $count$i;
   $78 = $77&65535;
   $79 = ($78|0)==(0);
   if ($79) {
    $80 = $5;
    _mu_destroy($80);
   }
  }
 }
 $81 = $d;
 $82 = $an;
 $83 = $bn;
 $84 = (($82) + ($83))|0;
 $85 = (_mu_str_intern($81,$84)|0);
 STACKTOP = sp;return ($85|0);
}
function _mu_str_subset($s,$lower,$upper) {
 $s = $s|0;
 $lower = $lower|0;
 $upper = $upper|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $s;
 $7 = $lower;
 $8 = $upper;
 $9 = $7;
 $10 = ($9|0)>=(0);
 $11 = $7;
 if ($10) {
  $21 = $11;
 } else {
  $12 = $6;
  $4 = $12;
  $13 = $4;
  $14 = $13;
  $15 = (($14) - 3)|0;
  $16 = $15;
  $17 = ((($16)) + 2|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18&65535;
  $20 = (($11) + ($19))|0;
  $21 = $20;
 }
 $7 = $21;
 $22 = $8;
 $23 = ($22|0)>=(0);
 $24 = $8;
 if ($23) {
  $34 = $24;
 } else {
  $25 = $6;
  $3 = $25;
  $26 = $3;
  $27 = $26;
  $28 = (($27) - 3)|0;
  $29 = $28;
  $30 = ((($29)) + 2|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = $31&65535;
  $33 = (($24) + ($32))|0;
  $34 = $33;
 }
 $8 = $34;
 $35 = $7;
 $36 = ($35|0)<(0);
 if ($36) {
  $7 = 0;
 }
 $37 = $8;
 $38 = $6;
 $1 = $38;
 $39 = $1;
 $40 = $39;
 $41 = (($40) - 3)|0;
 $42 = $41;
 $43 = ((($42)) + 2|0);
 $44 = HEAP16[$43>>1]|0;
 $45 = $44&65535;
 $46 = ($37|0)>($45|0);
 if ($46) {
  $47 = $6;
  $0 = $47;
  $48 = $0;
  $49 = $48;
  $50 = (($49) - 3)|0;
  $51 = $50;
  $52 = ((($51)) + 2|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53&65535;
  $8 = $54;
 }
 $55 = $7;
 $56 = $8;
 $57 = ($55|0)>=($56|0);
 if ($57) {
  $58 = (_mu_empty_str()|0);
  $5 = $58;
  $71 = $5;
  STACKTOP = sp;return ($71|0);
 } else {
  $59 = $6;
  $2 = $59;
  $60 = $2;
  $61 = $60;
  $62 = (($61) - 3)|0;
  $63 = $62;
  $64 = ((($63)) + 4|0);
  $65 = $7;
  $66 = (($64) + ($65)|0);
  $67 = $8;
  $68 = $7;
  $69 = (($67) - ($68))|0;
  $70 = (_mu_str_fromdata($66,$69)|0);
  $5 = $70;
  $71 = $5;
  STACKTOP = sp;return ($71|0);
 }
 return (0)|0;
}
function _mu_str_parsen($ppos,$end) {
 $ppos = $ppos|0;
 $end = $end|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $count$i = 0, $count$i2 = 0, $n = 0, $pos = 0, $quote = 0, $ref$i = 0, $ref$i1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 195|0;
 $7 = sp + 194|0;
 $10 = sp + 193|0;
 $13 = sp + 192|0;
 $16 = sp + 191|0;
 $19 = sp + 190|0;
 $22 = sp + 189|0;
 $25 = sp + 188|0;
 $28 = sp + 187|0;
 $31 = sp + 186|0;
 $34 = sp + 185|0;
 $37 = sp + 184|0;
 $40 = sp + 183|0;
 $43 = sp + 182|0;
 $46 = sp + 181|0;
 $b = sp + 16|0;
 $n = sp + 12|0;
 $50 = $ppos;
 $51 = $end;
 $52 = $50;
 $53 = HEAP32[$52>>2]|0;
 $pos = $53;
 $54 = $pos;
 $55 = ((($54)) + 1|0);
 $pos = $55;
 $56 = HEAP8[$54>>0]|0;
 $quote = $56;
 $57 = (_mu_buf_create(0)|0);
 HEAP32[$b>>2] = $57;
 HEAP32[$n>>2] = 0;
 $58 = $quote;
 $59 = $58&255;
 $60 = ($59|0)!=(39);
 if ($60) {
  $61 = $quote;
  $62 = $61&255;
  $63 = ($62|0)!=(34);
  if ($63) {
   $64 = HEAP32[$b>>2]|0;
   $48 = $64;
   $65 = $48;
   $47 = $65;
   $66 = $47;
   $67 = $66;
   $68 = 6 & $67;
   $69 = ($68|0)!=(0);
   if ($69) {
    $70 = $48;
    $71 = $70;
    $72 = -8 & $71;
    $73 = $72;
    $ref$i = $73;
    $74 = $ref$i;
    $75 = HEAP16[$74>>1]|0;
    $count$i = $75;
    $76 = $count$i;
    $77 = $76&65535;
    $78 = ($77|0)!=(0);
    if ($78) {
     $79 = $count$i;
     $80 = (($79) + -1)<<16>>16;
     $count$i = $80;
     $81 = $count$i;
     $82 = $ref$i;
     HEAP16[$82>>1] = $81;
     $83 = $count$i;
     $84 = $83&65535;
     $85 = ($84|0)==(0);
     if ($85) {
      $86 = $48;
      _mu_destroy($86);
     }
    }
   }
   $49 = 0;
   $471 = $49;
   STACKTOP = sp;return ($471|0);
  }
 }
 while(1) {
  $87 = $pos;
  $88 = $51;
  $89 = ((($88)) + -1|0);
  $90 = ($87>>>0)<($89>>>0);
  if (!($90)) {
   break;
  }
  $91 = $pos;
  $92 = HEAP8[$91>>0]|0;
  $93 = $92&255;
  $94 = $quote;
  $95 = $94&255;
  $96 = ($93|0)!=($95|0);
  if (!($96)) {
   break;
  }
  $97 = $pos;
  $98 = HEAP8[$97>>0]|0;
  $99 = $98&255;
  $100 = ($99|0)==(92);
  $101 = $pos;
  $102 = ((($101)) + 1|0);
  if (!($100)) {
   $pos = $102;
   $433 = HEAP8[$101>>0]|0;
   $2 = $b;
   $3 = $n;
   HEAP8[$4>>0] = $433;
   $434 = $2;
   $435 = $3;
   _mu_buf_pushdata($434,$435,$4,1);
   continue;
  }
  $103 = HEAP8[$102>>0]|0;
  $104 = $103&255;
  $105 = ($104|0)==(98);
  if ($105) {
   $106 = $pos;
   $107 = $51;
   $108 = ((($107)) + -9|0);
   $109 = ($106>>>0)<($108>>>0);
   if ($109) {
    $110 = $pos;
    $111 = ((($110)) + 2|0);
    $112 = HEAP8[$111>>0]|0;
    $113 = (_mu_str_fromascii($112)|0);
    $114 = ($113>>>0)<(2);
    if ($114) {
     $115 = $pos;
     $116 = ((($115)) + 3|0);
     $117 = HEAP8[$116>>0]|0;
     $118 = (_mu_str_fromascii($117)|0);
     $119 = ($118>>>0)<(2);
     if ($119) {
      $120 = $pos;
      $121 = ((($120)) + 4|0);
      $122 = HEAP8[$121>>0]|0;
      $123 = (_mu_str_fromascii($122)|0);
      $124 = ($123>>>0)<(2);
      if ($124) {
       $125 = $pos;
       $126 = ((($125)) + 5|0);
       $127 = HEAP8[$126>>0]|0;
       $128 = (_mu_str_fromascii($127)|0);
       $129 = ($128>>>0)<(2);
       if ($129) {
        $130 = $pos;
        $131 = ((($130)) + 6|0);
        $132 = HEAP8[$131>>0]|0;
        $133 = (_mu_str_fromascii($132)|0);
        $134 = ($133>>>0)<(2);
        if ($134) {
         $135 = $pos;
         $136 = ((($135)) + 7|0);
         $137 = HEAP8[$136>>0]|0;
         $138 = (_mu_str_fromascii($137)|0);
         $139 = ($138>>>0)<(2);
         if ($139) {
          $140 = $pos;
          $141 = ((($140)) + 8|0);
          $142 = HEAP8[$141>>0]|0;
          $143 = (_mu_str_fromascii($142)|0);
          $144 = ($143>>>0)<(2);
          if ($144) {
           $145 = $pos;
           $146 = ((($145)) + 9|0);
           $147 = HEAP8[$146>>0]|0;
           $148 = (_mu_str_fromascii($147)|0);
           $149 = ($148>>>0)<(2);
           if ($149) {
            $150 = $pos;
            $151 = ((($150)) + 2|0);
            $152 = HEAP8[$151>>0]|0;
            $153 = (_mu_str_fromascii($152)|0);
            $154 = $153<<1;
            $155 = $154<<1;
            $156 = $155<<1;
            $157 = $156<<1;
            $158 = $157<<1;
            $159 = $158<<1;
            $160 = $159<<1;
            $161 = $pos;
            $162 = ((($161)) + 3|0);
            $163 = HEAP8[$162>>0]|0;
            $164 = (_mu_str_fromascii($163)|0);
            $165 = $164<<1;
            $166 = $165<<1;
            $167 = $166<<1;
            $168 = $167<<1;
            $169 = $168<<1;
            $170 = $169<<1;
            $171 = (($160) + ($170))|0;
            $172 = $pos;
            $173 = ((($172)) + 4|0);
            $174 = HEAP8[$173>>0]|0;
            $175 = (_mu_str_fromascii($174)|0);
            $176 = $175<<1;
            $177 = $176<<1;
            $178 = $177<<1;
            $179 = $178<<1;
            $180 = $179<<1;
            $181 = (($171) + ($180))|0;
            $182 = $pos;
            $183 = ((($182)) + 5|0);
            $184 = HEAP8[$183>>0]|0;
            $185 = (_mu_str_fromascii($184)|0);
            $186 = $185<<1;
            $187 = $186<<1;
            $188 = $187<<1;
            $189 = $188<<1;
            $190 = (($181) + ($189))|0;
            $191 = $pos;
            $192 = ((($191)) + 6|0);
            $193 = HEAP8[$192>>0]|0;
            $194 = (_mu_str_fromascii($193)|0);
            $195 = $194<<1;
            $196 = $195<<1;
            $197 = $196<<1;
            $198 = (($190) + ($197))|0;
            $199 = $pos;
            $200 = ((($199)) + 7|0);
            $201 = HEAP8[$200>>0]|0;
            $202 = (_mu_str_fromascii($201)|0);
            $203 = $202<<1;
            $204 = $203<<1;
            $205 = (($198) + ($204))|0;
            $206 = $pos;
            $207 = ((($206)) + 8|0);
            $208 = HEAP8[$207>>0]|0;
            $209 = (_mu_str_fromascii($208)|0);
            $210 = $209<<1;
            $211 = (($205) + ($210))|0;
            $212 = $pos;
            $213 = ((($212)) + 9|0);
            $214 = HEAP8[$213>>0]|0;
            $215 = (_mu_str_fromascii($214)|0);
            $216 = (($211) + ($215))|0;
            $217 = $216&255;
            $44 = $b;
            $45 = $n;
            HEAP8[$46>>0] = $217;
            $218 = $44;
            $219 = $45;
            _mu_buf_pushdata($218,$219,$46,1);
            $220 = $pos;
            $221 = ((($220)) + 10|0);
            $pos = $221;
            continue;
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
  $222 = $pos;
  $223 = ((($222)) + 1|0);
  $224 = HEAP8[$223>>0]|0;
  $225 = $224&255;
  $226 = ($225|0)==(111);
  if ($226) {
   $227 = $pos;
   $228 = $51;
   $229 = ((($228)) + -4|0);
   $230 = ($227>>>0)<($229>>>0);
   if ($230) {
    $231 = $pos;
    $232 = ((($231)) + 2|0);
    $233 = HEAP8[$232>>0]|0;
    $234 = (_mu_str_fromascii($233)|0);
    $235 = ($234>>>0)<(8);
    if ($235) {
     $236 = $pos;
     $237 = ((($236)) + 3|0);
     $238 = HEAP8[$237>>0]|0;
     $239 = (_mu_str_fromascii($238)|0);
     $240 = ($239>>>0)<(8);
     if ($240) {
      $241 = $pos;
      $242 = ((($241)) + 4|0);
      $243 = HEAP8[$242>>0]|0;
      $244 = (_mu_str_fromascii($243)|0);
      $245 = ($244>>>0)<(8);
      if ($245) {
       $246 = $pos;
       $247 = ((($246)) + 2|0);
       $248 = HEAP8[$247>>0]|0;
       $249 = (_mu_str_fromascii($248)|0);
       $250 = $249<<3;
       $251 = $250<<3;
       $252 = $pos;
       $253 = ((($252)) + 3|0);
       $254 = HEAP8[$253>>0]|0;
       $255 = (_mu_str_fromascii($254)|0);
       $256 = $255<<3;
       $257 = (($251) + ($256))|0;
       $258 = $pos;
       $259 = ((($258)) + 4|0);
       $260 = HEAP8[$259>>0]|0;
       $261 = (_mu_str_fromascii($260)|0);
       $262 = (($257) + ($261))|0;
       $263 = $262&255;
       $41 = $b;
       $42 = $n;
       HEAP8[$43>>0] = $263;
       $264 = $41;
       $265 = $42;
       _mu_buf_pushdata($264,$265,$43,1);
       $266 = $pos;
       $267 = ((($266)) + 5|0);
       $pos = $267;
       continue;
      }
     }
    }
   }
  }
  $268 = $pos;
  $269 = ((($268)) + 1|0);
  $270 = HEAP8[$269>>0]|0;
  $271 = $270&255;
  $272 = ($271|0)==(100);
  if ($272) {
   $273 = $pos;
   $274 = $51;
   $275 = ((($274)) + -4|0);
   $276 = ($273>>>0)<($275>>>0);
   if ($276) {
    $277 = $pos;
    $278 = ((($277)) + 2|0);
    $279 = HEAP8[$278>>0]|0;
    $280 = (_mu_str_fromascii($279)|0);
    $281 = ($280>>>0)<(10);
    if ($281) {
     $282 = $pos;
     $283 = ((($282)) + 3|0);
     $284 = HEAP8[$283>>0]|0;
     $285 = (_mu_str_fromascii($284)|0);
     $286 = ($285>>>0)<(10);
     if ($286) {
      $287 = $pos;
      $288 = ((($287)) + 4|0);
      $289 = HEAP8[$288>>0]|0;
      $290 = (_mu_str_fromascii($289)|0);
      $291 = ($290>>>0)<(10);
      if ($291) {
       $292 = $pos;
       $293 = ((($292)) + 2|0);
       $294 = HEAP8[$293>>0]|0;
       $295 = (_mu_str_fromascii($294)|0);
       $296 = ($295*10)|0;
       $297 = ($296*10)|0;
       $298 = $pos;
       $299 = ((($298)) + 3|0);
       $300 = HEAP8[$299>>0]|0;
       $301 = (_mu_str_fromascii($300)|0);
       $302 = ($301*10)|0;
       $303 = (($297) + ($302))|0;
       $304 = $pos;
       $305 = ((($304)) + 4|0);
       $306 = HEAP8[$305>>0]|0;
       $307 = (_mu_str_fromascii($306)|0);
       $308 = (($303) + ($307))|0;
       $309 = $308&255;
       $38 = $b;
       $39 = $n;
       HEAP8[$40>>0] = $309;
       $310 = $38;
       $311 = $39;
       _mu_buf_pushdata($310,$311,$40,1);
       $312 = $pos;
       $313 = ((($312)) + 5|0);
       $pos = $313;
       continue;
      }
     }
    }
   }
  }
  $314 = $pos;
  $315 = ((($314)) + 1|0);
  $316 = HEAP8[$315>>0]|0;
  $317 = $316&255;
  $318 = ($317|0)==(120);
  if ($318) {
   $319 = $pos;
   $320 = $51;
   $321 = ((($320)) + -3|0);
   $322 = ($319>>>0)<($321>>>0);
   if ($322) {
    $323 = $pos;
    $324 = ((($323)) + 2|0);
    $325 = HEAP8[$324>>0]|0;
    $326 = (_mu_str_fromascii($325)|0);
    $327 = ($326>>>0)<(16);
    if ($327) {
     $328 = $pos;
     $329 = ((($328)) + 3|0);
     $330 = HEAP8[$329>>0]|0;
     $331 = (_mu_str_fromascii($330)|0);
     $332 = ($331>>>0)<(16);
     if ($332) {
      $333 = $pos;
      $334 = ((($333)) + 2|0);
      $335 = HEAP8[$334>>0]|0;
      $336 = (_mu_str_fromascii($335)|0);
      $337 = $336<<4;
      $338 = $pos;
      $339 = ((($338)) + 3|0);
      $340 = HEAP8[$339>>0]|0;
      $341 = (_mu_str_fromascii($340)|0);
      $342 = (($337) + ($341))|0;
      $343 = $342&255;
      $35 = $b;
      $36 = $n;
      HEAP8[$37>>0] = $343;
      $344 = $35;
      $345 = $36;
      _mu_buf_pushdata($344,$345,$37,1);
      $346 = $pos;
      $347 = ((($346)) + 4|0);
      $pos = $347;
      continue;
     }
    }
   }
  }
  $348 = $pos;
  $349 = ((($348)) + 1|0);
  $350 = HEAP8[$349>>0]|0;
  $351 = $350&255;
  $352 = ($351|0)==(92);
  if ($352) {
   $32 = $b;
   $33 = $n;
   HEAP8[$34>>0] = 92;
   $353 = $32;
   $354 = $33;
   _mu_buf_pushdata($353,$354,$34,1);
   $355 = $pos;
   $356 = ((($355)) + 2|0);
   $pos = $356;
   continue;
  }
  $357 = $pos;
  $358 = ((($357)) + 1|0);
  $359 = HEAP8[$358>>0]|0;
  $360 = $359&255;
  $361 = ($360|0)==(39);
  if ($361) {
   $29 = $b;
   $30 = $n;
   HEAP8[$31>>0] = 39;
   $362 = $29;
   $363 = $30;
   _mu_buf_pushdata($362,$363,$31,1);
   $364 = $pos;
   $365 = ((($364)) + 2|0);
   $pos = $365;
   continue;
  }
  $366 = $pos;
  $367 = ((($366)) + 1|0);
  $368 = HEAP8[$367>>0]|0;
  $369 = $368&255;
  $370 = ($369|0)==(34);
  if ($370) {
   $26 = $b;
   $27 = $n;
   HEAP8[$28>>0] = 34;
   $371 = $26;
   $372 = $27;
   _mu_buf_pushdata($371,$372,$28,1);
   $373 = $pos;
   $374 = ((($373)) + 2|0);
   $pos = $374;
   continue;
  }
  $375 = $pos;
  $376 = ((($375)) + 1|0);
  $377 = HEAP8[$376>>0]|0;
  $378 = $377&255;
  $379 = ($378|0)==(102);
  if ($379) {
   $23 = $b;
   $24 = $n;
   HEAP8[$25>>0] = 12;
   $380 = $23;
   $381 = $24;
   _mu_buf_pushdata($380,$381,$25,1);
   $382 = $pos;
   $383 = ((($382)) + 2|0);
   $pos = $383;
   continue;
  }
  $384 = $pos;
  $385 = ((($384)) + 1|0);
  $386 = HEAP8[$385>>0]|0;
  $387 = $386&255;
  $388 = ($387|0)==(110);
  if ($388) {
   $20 = $b;
   $21 = $n;
   HEAP8[$22>>0] = 10;
   $389 = $20;
   $390 = $21;
   _mu_buf_pushdata($389,$390,$22,1);
   $391 = $pos;
   $392 = ((($391)) + 2|0);
   $pos = $392;
   continue;
  }
  $393 = $pos;
  $394 = ((($393)) + 1|0);
  $395 = HEAP8[$394>>0]|0;
  $396 = $395&255;
  $397 = ($396|0)==(114);
  if ($397) {
   $17 = $b;
   $18 = $n;
   HEAP8[$19>>0] = 13;
   $398 = $17;
   $399 = $18;
   _mu_buf_pushdata($398,$399,$19,1);
   $400 = $pos;
   $401 = ((($400)) + 2|0);
   $pos = $401;
   continue;
  }
  $402 = $pos;
  $403 = ((($402)) + 1|0);
  $404 = HEAP8[$403>>0]|0;
  $405 = $404&255;
  $406 = ($405|0)==(116);
  if ($406) {
   $14 = $b;
   $15 = $n;
   HEAP8[$16>>0] = 9;
   $407 = $14;
   $408 = $15;
   _mu_buf_pushdata($407,$408,$16,1);
   $409 = $pos;
   $410 = ((($409)) + 2|0);
   $pos = $410;
   continue;
  }
  $411 = $pos;
  $412 = ((($411)) + 1|0);
  $413 = HEAP8[$412>>0]|0;
  $414 = $413&255;
  $415 = ($414|0)==(118);
  if ($415) {
   $11 = $b;
   $12 = $n;
   HEAP8[$13>>0] = 11;
   $416 = $11;
   $417 = $12;
   _mu_buf_pushdata($416,$417,$13,1);
   $418 = $pos;
   $419 = ((($418)) + 2|0);
   $pos = $419;
   continue;
  }
  $420 = $pos;
  $421 = ((($420)) + 1|0);
  $422 = HEAP8[$421>>0]|0;
  $423 = $422&255;
  $424 = ($423|0)==(48);
  if ($424) {
   $8 = $b;
   $9 = $n;
   HEAP8[$10>>0] = 0;
   $425 = $8;
   $426 = $9;
   _mu_buf_pushdata($425,$426,$10,1);
   $427 = $pos;
   $428 = ((($427)) + 2|0);
   $pos = $428;
   continue;
  } else {
   $5 = $b;
   $6 = $n;
   HEAP8[$7>>0] = 92;
   $429 = $5;
   $430 = $6;
   _mu_buf_pushdata($429,$430,$7,1);
   $431 = $pos;
   $432 = ((($431)) + 1|0);
   $pos = $432;
   continue;
  }
 }
 $436 = $quote;
 $437 = $436&255;
 $438 = $pos;
 $439 = ((($438)) + 1|0);
 $pos = $439;
 $440 = HEAP8[$438>>0]|0;
 $441 = $440&255;
 $442 = ($437|0)!=($441|0);
 if (!($442)) {
  $466 = $pos;
  $467 = $50;
  HEAP32[$467>>2] = $466;
  $468 = HEAP32[$b>>2]|0;
  $469 = HEAP32[$n>>2]|0;
  $470 = (_mu_str_intern($468,$469)|0);
  $49 = $470;
  $471 = $49;
  STACKTOP = sp;return ($471|0);
 }
 $443 = HEAP32[$b>>2]|0;
 $1 = $443;
 $444 = $1;
 $0 = $444;
 $445 = $0;
 $446 = $445;
 $447 = 6 & $446;
 $448 = ($447|0)!=(0);
 if ($448) {
  $449 = $1;
  $450 = $449;
  $451 = -8 & $450;
  $452 = $451;
  $ref$i1 = $452;
  $453 = $ref$i1;
  $454 = HEAP16[$453>>1]|0;
  $count$i2 = $454;
  $455 = $count$i2;
  $456 = $455&65535;
  $457 = ($456|0)!=(0);
  if ($457) {
   $458 = $count$i2;
   $459 = (($458) + -1)<<16>>16;
   $count$i2 = $459;
   $460 = $count$i2;
   $461 = $ref$i1;
   HEAP16[$461>>1] = $460;
   $462 = $count$i2;
   $463 = $462&65535;
   $464 = ($463|0)==(0);
   if ($464) {
    $465 = $1;
    _mu_destroy($465);
   }
  }
 }
 $49 = 0;
 $471 = $49;
 STACKTOP = sp;return ($471|0);
}
function _mu_str_fromascii($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $0;
 $2 = $1&255;
 $3 = $2 | 32;
 $4 = $3&255;
 $0 = $4;
 $5 = $0;
 $6 = $5&255;
 $7 = ($6|0)>=(48);
 if ($7) {
  $8 = $0;
  $9 = $8&255;
  $10 = ($9|0)<=(57);
  if ($10) {
   $11 = $0;
   $12 = $11&255;
   $13 = (($12) - 48)|0;
   $24 = $13;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $14 = $0;
  $15 = $14&255;
  $16 = ($15|0)>=(97);
  if ($16) {
   $17 = $0;
   $18 = $17&255;
   $19 = ($18|0)<=(70);
   if ($19) {
    $20 = $0;
    $21 = $20&255;
    $22 = (($21) - 65)|0;
    $23 = (($22) + 10)|0;
    $24 = $23;
   } else {
    $24 = -1;
   }
  } else {
   $24 = -1;
  }
 }
 STACKTOP = sp;return ($24|0);
}
function _mu_str_repr($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $end = 0, $n = 0, $pos = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 126|0;
 $5 = sp + 125|0;
 $9 = sp + 124|0;
 $b = sp + 72|0;
 $n = sp + 68|0;
 $12 = $m;
 $13 = $12;
 $11 = $13;
 $14 = $11;
 $15 = $14;
 $16 = (($15) - 3)|0;
 $17 = $16;
 $18 = ((($17)) + 4|0);
 $pos = $18;
 $19 = $pos;
 $20 = $12;
 $10 = $20;
 $21 = $10;
 $22 = $21;
 $23 = (($22) - 3)|0;
 $24 = $23;
 $25 = ((($24)) + 2|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = $26&65535;
 $28 = (($19) + ($27)|0);
 $end = $28;
 $29 = $12;
 $6 = $29;
 $30 = $6;
 $31 = $30;
 $32 = (($31) - 3)|0;
 $33 = $32;
 $34 = ((($33)) + 2|0);
 $35 = HEAP16[$34>>1]|0;
 $36 = $35&65535;
 $37 = (2 + ($36))|0;
 $38 = (_mu_buf_create($37)|0);
 HEAP32[$b>>2] = $38;
 HEAP32[$n>>2] = 0;
 $0 = $b;
 $1 = $n;
 HEAP8[$2>>0] = 39;
 $39 = $0;
 $40 = $1;
 _mu_buf_pushdata($39,$40,$2,1);
 while(1) {
  $41 = $pos;
  $42 = $end;
  $43 = ($41>>>0)<($42>>>0);
  if (!($43)) {
   break;
  }
  $44 = $pos;
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = ($46|0)<(32);
  if ($47) {
   label = 7;
  } else {
   $48 = $pos;
   $49 = HEAP8[$48>>0]|0;
   $50 = $49&255;
   $51 = ($50|0)>(126);
   if ($51) {
    label = 7;
   } else {
    $52 = $pos;
    $53 = HEAP8[$52>>0]|0;
    $54 = $53&255;
    $55 = ($54|0)==(92);
    if ($55) {
     label = 7;
    } else {
     $56 = $pos;
     $57 = HEAP8[$56>>0]|0;
     $58 = $57&255;
     $59 = ($58|0)==(39);
     if ($59) {
      label = 7;
     } else {
      $95 = $pos;
      $96 = HEAP8[$95>>0]|0;
      $3 = $b;
      $4 = $n;
      HEAP8[$5>>0] = $96;
      $97 = $3;
      $98 = $4;
      _mu_buf_pushdata($97,$98,$5,1);
     }
    }
   }
  }
  do {
   if ((label|0) == 7) {
    label = 0;
    $60 = $pos;
    $61 = HEAP8[$60>>0]|0;
    $62 = $61&255;
    $63 = ($62|0)==(92);
    if ($63) {
     _mu_buf_pushf($b,$n,3863,$vararg_buffer);
     break;
    }
    $64 = $pos;
    $65 = HEAP8[$64>>0]|0;
    $66 = $65&255;
    $67 = ($66|0)==(39);
    if ($67) {
     _mu_buf_pushf($b,$n,3866,$vararg_buffer1);
     break;
    }
    $68 = $pos;
    $69 = HEAP8[$68>>0]|0;
    $70 = $69&255;
    $71 = ($70|0)==(12);
    if ($71) {
     _mu_buf_pushf($b,$n,3869,$vararg_buffer3);
     break;
    }
    $72 = $pos;
    $73 = HEAP8[$72>>0]|0;
    $74 = $73&255;
    $75 = ($74|0)==(10);
    if ($75) {
     _mu_buf_pushf($b,$n,3872,$vararg_buffer5);
     break;
    }
    $76 = $pos;
    $77 = HEAP8[$76>>0]|0;
    $78 = $77&255;
    $79 = ($78|0)==(13);
    if ($79) {
     _mu_buf_pushf($b,$n,3875,$vararg_buffer7);
     break;
    }
    $80 = $pos;
    $81 = HEAP8[$80>>0]|0;
    $82 = $81&255;
    $83 = ($82|0)==(9);
    if ($83) {
     _mu_buf_pushf($b,$n,3878,$vararg_buffer9);
     break;
    }
    $84 = $pos;
    $85 = HEAP8[$84>>0]|0;
    $86 = $85&255;
    $87 = ($86|0)==(11);
    if ($87) {
     _mu_buf_pushf($b,$n,3881,$vararg_buffer11);
     break;
    }
    $88 = $pos;
    $89 = HEAP8[$88>>0]|0;
    $90 = $89&255;
    $91 = ($90|0)==(0);
    if ($91) {
     _mu_buf_pushf($b,$n,3884,$vararg_buffer13);
     break;
    } else {
     $92 = $pos;
     $93 = HEAP8[$92>>0]|0;
     $94 = $93&255;
     HEAP32[$vararg_buffer15>>2] = $94;
     _mu_buf_pushf($b,$n,3887,$vararg_buffer15);
     break;
    }
   }
  } while(0);
  $99 = $pos;
  $100 = ((($99)) + 1|0);
  $pos = $100;
 }
 $7 = $b;
 $8 = $n;
 HEAP8[$9>>0] = 39;
 $101 = $7;
 $102 = $8;
 _mu_buf_pushdata($101,$102,$9,1);
 $103 = HEAP32[$b>>2]|0;
 $104 = HEAP32[$n>>2]|0;
 $105 = (_mu_str_intern($103,$104)|0);
 STACKTOP = sp;return ($105|0);
}
function _mu_str_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1342]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1248)|0);
  HEAP32[1342] = $2;
 }
 $3 = HEAP32[1342]|0;
 return ($3|0);
}
function _mu_str_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1256) + 7)|0))|0);
}
function _mu_str_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $count$i2 = 0, $m = 0;
 var $ref$i = 0, $ref$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $frame;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $3 = $6;
 $7 = $3;
 $2 = $7;
 $8 = $2;
 $9 = $8;
 $10 = 6 & $9;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $3;
  $13 = $12;
  $14 = -8 & $13;
  $15 = $14;
  $ref$i = $15;
  $16 = $ref$i;
  $17 = HEAP16[$16>>1]|0;
  $count$i = $17;
  $18 = $count$i;
  $19 = $18&65535;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $count$i;
   $22 = (($21) + 1)<<16>>16;
   $count$i = $22;
   $23 = $count$i;
   $24 = $ref$i;
   HEAP16[$24>>1] = $23;
  }
 }
 $25 = $3;
 $26 = (_mu_str_frommu($25)|0);
 $m = $26;
 $27 = $m;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  $29 = (_mu_str_key_def()|0);
  $30 = $4;
  _mu_errorargs($29,1,$30);
  // unreachable;
 }
 $31 = $4;
 $32 = HEAP32[$31>>2]|0;
 $1 = $32;
 $33 = $1;
 $0 = $33;
 $34 = $0;
 $35 = $34;
 $36 = 6 & $35;
 $37 = ($36|0)!=(0);
 if (!($37)) {
  $55 = $m;
  $56 = $4;
  HEAP32[$56>>2] = $55;
  STACKTOP = sp;return 1;
 }
 $38 = $1;
 $39 = $38;
 $40 = -8 & $39;
 $41 = $40;
 $ref$i1 = $41;
 $42 = $ref$i1;
 $43 = HEAP16[$42>>1]|0;
 $count$i2 = $43;
 $44 = $count$i2;
 $45 = $44&65535;
 $46 = ($45|0)!=(0);
 if (!($46)) {
  $55 = $m;
  $56 = $4;
  HEAP32[$56>>2] = $55;
  STACKTOP = sp;return 1;
 }
 $47 = $count$i2;
 $48 = (($47) + -1)<<16>>16;
 $count$i2 = $48;
 $49 = $count$i2;
 $50 = $ref$i1;
 HEAP16[$50>>1] = $49;
 $51 = $count$i2;
 $52 = $51&65535;
 $53 = ($52|0)==(0);
 if (!($53)) {
  $55 = $m;
  $56 = $4;
  HEAP32[$56>>2] = $55;
  STACKTOP = sp;return 1;
 }
 $54 = $1;
 _mu_destroy($54);
 $55 = $m;
 $56 = $4;
 HEAP32[$56>>2] = $55;
 STACKTOP = sp;return 1;
}
function _mu_find_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1343]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1272)|0);
  HEAP32[1343] = $2;
 }
 $3 = HEAP32[1343]|0;
 return ($3|0);
}
function _mu_find_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1280) + 7)|0))|0);
}
function _mu_find_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$i = 0, $count$i2 = 0, $count$i5 = 0;
 var $count$i8 = 0, $i = 0, $m = 0, $mb = 0, $mlen = 0, $ref$i = 0, $ref$i1 = 0, $ref$i4 = 0, $ref$i7 = 0, $s = 0, $sb = 0, $slen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 104|0;
 $10 = sp + 96|0;
 $21 = $frame;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $s = $23;
 $24 = $21;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $m = $26;
 $27 = $s;
 $19 = $27;
 $28 = $19;
 $18 = $28;
 $29 = $18;
 $30 = $29;
 $31 = 7 & $30;
 $32 = ($31|0)==(3);
 if (!($32)) {
  $39 = (_mu_find_key_def()|0);
  $40 = $21;
  _mu_errorargs($39,2,$40);
  // unreachable;
 }
 $33 = $m;
 $15 = $33;
 $34 = $15;
 $14 = $34;
 $35 = $14;
 $36 = $35;
 $37 = 7 & $36;
 $38 = ($37|0)==(3);
 if (!($38)) {
  $39 = (_mu_find_key_def()|0);
  $40 = $21;
  _mu_errorargs($39,2,$40);
  // unreachable;
 }
 $41 = $s;
 $11 = $41;
 $42 = $11;
 $43 = $42;
 $44 = (($43) - 3)|0;
 $45 = $44;
 $46 = ((($45)) + 4|0);
 $sb = $46;
 $47 = $s;
 $4 = $47;
 $48 = $4;
 $49 = $48;
 $50 = (($49) - 3)|0;
 $51 = $50;
 $52 = ((($51)) + 2|0);
 $53 = HEAP16[$52>>1]|0;
 $slen = $53;
 $54 = $m;
 $1 = $54;
 $55 = $1;
 $56 = $55;
 $57 = (($56) - 3)|0;
 $58 = $57;
 $59 = ((($58)) + 4|0);
 $mb = $59;
 $60 = $m;
 $0 = $60;
 $61 = $0;
 $62 = $61;
 $63 = (($62) - 3)|0;
 $64 = $63;
 $65 = ((($64)) + 2|0);
 $66 = HEAP16[$65>>1]|0;
 $mlen = $66;
 $i = 0;
 while(1) {
  $67 = $i;
  $68 = $mlen;
  $69 = $68&65535;
  $70 = (($67) + ($69))|0;
  $71 = $slen;
  $72 = $71&65535;
  $73 = ($70>>>0)<=($72>>>0);
  if (!($73)) {
   label = 17;
   break;
  }
  $74 = $i;
  $75 = $sb;
  $76 = (($75) + ($74)|0);
  $77 = $mb;
  $78 = $mlen;
  $79 = $78&65535;
  $80 = (_memcmp($76,$77,$79)|0);
  $81 = ($80|0)==(0);
  if ($81) {
   label = 7;
   break;
  }
  $148 = $i;
  $149 = (($148) + 1)|0;
  $i = $149;
 }
 if ((label|0) == 7) {
  $82 = $m;
  $3 = $82;
  $83 = $3;
  $2 = $83;
  $84 = $2;
  $85 = $84;
  $86 = 6 & $85;
  $87 = ($86|0)!=(0);
  if ($87) {
   $88 = $3;
   $89 = $88;
   $90 = -8 & $89;
   $91 = $90;
   $ref$i7 = $91;
   $92 = $ref$i7;
   $93 = HEAP16[$92>>1]|0;
   $count$i8 = $93;
   $94 = $count$i8;
   $95 = $94&65535;
   $96 = ($95|0)!=(0);
   if ($96) {
    $97 = $count$i8;
    $98 = (($97) + -1)<<16>>16;
    $count$i8 = $98;
    $99 = $count$i8;
    $100 = $ref$i7;
    HEAP16[$100>>1] = $99;
    $101 = $count$i8;
    $102 = $101&65535;
    $103 = ($102|0)==(0);
    if ($103) {
     $104 = $3;
     _mu_destroy($104);
    }
   }
  }
  $105 = $s;
  $6 = $105;
  $106 = $6;
  $5 = $106;
  $107 = $5;
  $108 = $107;
  $109 = 6 & $108;
  $110 = ($109|0)!=(0);
  if ($110) {
   $111 = $6;
   $112 = $111;
   $113 = -8 & $112;
   $114 = $113;
   $ref$i4 = $114;
   $115 = $ref$i4;
   $116 = HEAP16[$115>>1]|0;
   $count$i5 = $116;
   $117 = $count$i5;
   $118 = $117&65535;
   $119 = ($118|0)!=(0);
   if ($119) {
    $120 = $count$i5;
    $121 = (($120) + -1)<<16>>16;
    $count$i5 = $121;
    $122 = $count$i5;
    $123 = $ref$i4;
    HEAP16[$123>>1] = $122;
    $124 = $count$i5;
    $125 = $124&65535;
    $126 = ($125|0)==(0);
    if ($126) {
     $127 = $6;
     _mu_destroy($127);
    }
   }
  }
  $128 = $i;
  $7 = $128;
  $129 = $7;
  $130 = (+($129>>>0));
  HEAPF32[$8>>2] = $130;
  $131 = HEAP32[$8>>2]|0;
  $132 = -8 & $131;
  $133 = (1 + ($132))|0;
  $134 = $133;
  $135 = $21;
  HEAP32[$135>>2] = $134;
  $136 = $i;
  $137 = $mlen;
  $138 = $137&65535;
  $139 = (($136) + ($138))|0;
  $9 = $139;
  $140 = $9;
  $141 = (+($140>>>0));
  HEAPF32[$10>>2] = $141;
  $142 = HEAP32[$10>>2]|0;
  $143 = -8 & $142;
  $144 = (1 + ($143))|0;
  $145 = $144;
  $146 = $21;
  $147 = ((($146)) + 4|0);
  HEAP32[$147>>2] = $145;
  $20 = 2;
  $196 = $20;
  STACKTOP = sp;return ($196|0);
 }
 else if ((label|0) == 17) {
  $150 = $s;
  $13 = $150;
  $151 = $13;
  $12 = $151;
  $152 = $12;
  $153 = $152;
  $154 = 6 & $153;
  $155 = ($154|0)!=(0);
  if ($155) {
   $156 = $13;
   $157 = $156;
   $158 = -8 & $157;
   $159 = $158;
   $ref$i1 = $159;
   $160 = $ref$i1;
   $161 = HEAP16[$160>>1]|0;
   $count$i2 = $161;
   $162 = $count$i2;
   $163 = $162&65535;
   $164 = ($163|0)!=(0);
   if ($164) {
    $165 = $count$i2;
    $166 = (($165) + -1)<<16>>16;
    $count$i2 = $166;
    $167 = $count$i2;
    $168 = $ref$i1;
    HEAP16[$168>>1] = $167;
    $169 = $count$i2;
    $170 = $169&65535;
    $171 = ($170|0)==(0);
    if ($171) {
     $172 = $13;
     _mu_destroy($172);
    }
   }
  }
  $173 = $m;
  $17 = $173;
  $174 = $17;
  $16 = $174;
  $175 = $16;
  $176 = $175;
  $177 = 6 & $176;
  $178 = ($177|0)!=(0);
  if ($178) {
   $179 = $17;
   $180 = $179;
   $181 = -8 & $180;
   $182 = $181;
   $ref$i = $182;
   $183 = $ref$i;
   $184 = HEAP16[$183>>1]|0;
   $count$i = $184;
   $185 = $count$i;
   $186 = $185&65535;
   $187 = ($186|0)!=(0);
   if ($187) {
    $188 = $count$i;
    $189 = (($188) + -1)<<16>>16;
    $count$i = $189;
    $190 = $count$i;
    $191 = $ref$i;
    HEAP16[$191>>1] = $190;
    $192 = $count$i;
    $193 = $192&65535;
    $194 = ($193|0)==(0);
    if ($194) {
     $195 = $17;
     _mu_destroy($195);
    }
   }
  }
  $20 = 0;
  $196 = $20;
  STACKTOP = sp;return ($196|0);
 }
 return (0)|0;
}
function _mu_replace_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1344]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1296)|0);
  HEAP32[1344] = $2;
 }
 $3 = HEAP32[1344]|0;
 return ($3|0);
}
function _mu_replace_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1312) + 7)|0))|0);
}
function _mu_replace_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$i = 0, $count$i2 = 0, $count$i5 = 0, $count$i8 = 0, $d = 0, $i = 0, $m = 0, $match = 0, $mb = 0;
 var $mlen = 0, $n = 0, $r = 0, $ref$i = 0, $ref$i1 = 0, $ref$i4 = 0, $ref$i7 = 0, $s = 0, $sb = 0, $slen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 165|0;
 $d = sp + 36|0;
 $n = sp + 32|0;
 $21 = $frame;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $s = $23;
 $24 = $21;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $m = $26;
 $27 = $21;
 $28 = ((($27)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $r = $29;
 $30 = $s;
 $20 = $30;
 $31 = $20;
 $19 = $31;
 $32 = $19;
 $33 = $32;
 $34 = 7 & $33;
 $35 = ($34|0)==(3);
 if (!($35)) {
  $48 = (_mu_replace_def()|0);
  $49 = $21;
  _mu_errorargs($48,3,$49);
  // unreachable;
 }
 $36 = $m;
 $18 = $36;
 $37 = $18;
 $17 = $37;
 $38 = $17;
 $39 = $38;
 $40 = 7 & $39;
 $41 = ($40|0)==(3);
 if (!($41)) {
  $48 = (_mu_replace_def()|0);
  $49 = $21;
  _mu_errorargs($48,3,$49);
  // unreachable;
 }
 $42 = $r;
 $14 = $42;
 $43 = $14;
 $13 = $43;
 $44 = $13;
 $45 = $44;
 $46 = 7 & $45;
 $47 = ($46|0)==(3);
 if (!($47)) {
  $48 = (_mu_replace_def()|0);
  $49 = $21;
  _mu_errorargs($48,3,$49);
  // unreachable;
 }
 $50 = $s;
 $10 = $50;
 $51 = $10;
 $52 = $51;
 $53 = (($52) - 3)|0;
 $54 = $53;
 $55 = ((($54)) + 4|0);
 $sb = $55;
 $56 = $s;
 $7 = $56;
 $57 = $7;
 $58 = $57;
 $59 = (($58) - 3)|0;
 $60 = $59;
 $61 = ((($60)) + 2|0);
 $62 = HEAP16[$61>>1]|0;
 $slen = $62;
 $63 = $m;
 $3 = $63;
 $64 = $3;
 $65 = $64;
 $66 = (($65) - 3)|0;
 $67 = $66;
 $68 = ((($67)) + 4|0);
 $mb = $68;
 $69 = $m;
 $0 = $69;
 $70 = $0;
 $71 = $70;
 $72 = (($71) - 3)|0;
 $73 = $72;
 $74 = ((($73)) + 2|0);
 $75 = HEAP16[$74>>1]|0;
 $mlen = $75;
 $76 = $slen;
 $77 = $76&65535;
 $78 = (_mu_buf_create($77)|0);
 HEAP32[$d>>2] = $78;
 HEAP32[$n>>2] = 0;
 $i = 0;
 while(1) {
  $79 = $i;
  $80 = $mlen;
  $81 = $80&65535;
  $82 = (($79) + ($81))|0;
  $83 = $slen;
  $84 = $83&65535;
  $85 = ($82>>>0)<=($84>>>0);
  $86 = $i;
  $87 = $sb;
  $88 = (($87) + ($86)|0);
  if (!($85)) {
   break;
  }
  $89 = $mb;
  $90 = $mlen;
  $91 = $90&65535;
  $92 = (_memcmp($88,$89,$91)|0);
  $93 = ($92|0)==(0);
  $94 = $93&1;
  $match = $94;
  $95 = $match;
  $96 = $95&1;
  if ($96) {
   $97 = $r;
   $2 = $97;
   $98 = $2;
   $1 = $98;
   $99 = $1;
   $100 = $99;
   $101 = 6 & $100;
   $102 = ($101|0)!=(0);
   if ($102) {
    $103 = $2;
    $104 = $103;
    $105 = -8 & $104;
    $106 = $105;
    $ref$i7 = $106;
    $107 = $ref$i7;
    $108 = HEAP16[$107>>1]|0;
    $count$i8 = $108;
    $109 = $count$i8;
    $110 = $109&65535;
    $111 = ($110|0)!=(0);
    if ($111) {
     $112 = $count$i8;
     $113 = (($112) + 1)<<16>>16;
     $count$i8 = $113;
     $114 = $count$i8;
     $115 = $ref$i7;
     HEAP16[$115>>1] = $114;
    }
   }
   $116 = $2;
   _mu_buf_pushmu($d,$n,$116);
   $117 = $mlen;
   $118 = $117&65535;
   $119 = $i;
   $120 = (($119) + ($118))|0;
   $i = $120;
  }
  $121 = $match;
  $122 = $121&1;
  if ($122) {
   $123 = $mlen;
   $124 = $123&65535;
   $125 = ($124|0)==(0);
   if (!($125)) {
    continue;
   }
  }
  $126 = $i;
  $127 = $sb;
  $128 = (($127) + ($126)|0);
  $129 = HEAP8[$128>>0]|0;
  $4 = $d;
  $5 = $n;
  HEAP8[$6>>0] = $129;
  $130 = $4;
  $131 = $5;
  _mu_buf_pushdata($130,$131,$6,1);
  $132 = $i;
  $133 = (($132) + 1)|0;
  $i = $133;
 }
 $134 = $slen;
 $135 = $134&65535;
 $136 = $i;
 $137 = (($135) - ($136))|0;
 _mu_buf_pushdata($d,$n,$88,$137);
 $138 = $s;
 $9 = $138;
 $139 = $9;
 $8 = $139;
 $140 = $8;
 $141 = $140;
 $142 = 6 & $141;
 $143 = ($142|0)!=(0);
 if ($143) {
  $144 = $9;
  $145 = $144;
  $146 = -8 & $145;
  $147 = $146;
  $ref$i4 = $147;
  $148 = $ref$i4;
  $149 = HEAP16[$148>>1]|0;
  $count$i5 = $149;
  $150 = $count$i5;
  $151 = $150&65535;
  $152 = ($151|0)!=(0);
  if ($152) {
   $153 = $count$i5;
   $154 = (($153) + -1)<<16>>16;
   $count$i5 = $154;
   $155 = $count$i5;
   $156 = $ref$i4;
   HEAP16[$156>>1] = $155;
   $157 = $count$i5;
   $158 = $157&65535;
   $159 = ($158|0)==(0);
   if ($159) {
    $160 = $9;
    _mu_destroy($160);
   }
  }
 }
 $161 = $m;
 $12 = $161;
 $162 = $12;
 $11 = $162;
 $163 = $11;
 $164 = $163;
 $165 = 6 & $164;
 $166 = ($165|0)!=(0);
 if ($166) {
  $167 = $12;
  $168 = $167;
  $169 = -8 & $168;
  $170 = $169;
  $ref$i1 = $170;
  $171 = $ref$i1;
  $172 = HEAP16[$171>>1]|0;
  $count$i2 = $172;
  $173 = $count$i2;
  $174 = $173&65535;
  $175 = ($174|0)!=(0);
  if ($175) {
   $176 = $count$i2;
   $177 = (($176) + -1)<<16>>16;
   $count$i2 = $177;
   $178 = $count$i2;
   $179 = $ref$i1;
   HEAP16[$179>>1] = $178;
   $180 = $count$i2;
   $181 = $180&65535;
   $182 = ($181|0)==(0);
   if ($182) {
    $183 = $12;
    _mu_destroy($183);
   }
  }
 }
 $184 = $r;
 $16 = $184;
 $185 = $16;
 $15 = $185;
 $186 = $15;
 $187 = $186;
 $188 = 6 & $187;
 $189 = ($188|0)!=(0);
 if (!($189)) {
  $207 = HEAP32[$d>>2]|0;
  $208 = HEAP32[$n>>2]|0;
  $209 = (_mu_str_intern($207,$208)|0);
  $210 = $21;
  HEAP32[$210>>2] = $209;
  STACKTOP = sp;return 1;
 }
 $190 = $16;
 $191 = $190;
 $192 = -8 & $191;
 $193 = $192;
 $ref$i = $193;
 $194 = $ref$i;
 $195 = HEAP16[$194>>1]|0;
 $count$i = $195;
 $196 = $count$i;
 $197 = $196&65535;
 $198 = ($197|0)!=(0);
 if (!($198)) {
  $207 = HEAP32[$d>>2]|0;
  $208 = HEAP32[$n>>2]|0;
  $209 = (_mu_str_intern($207,$208)|0);
  $210 = $21;
  HEAP32[$210>>2] = $209;
  STACKTOP = sp;return 1;
 }
 $199 = $count$i;
 $200 = (($199) + -1)<<16>>16;
 $count$i = $200;
 $201 = $count$i;
 $202 = $ref$i;
 HEAP16[$202>>1] = $201;
 $203 = $count$i;
 $204 = $203&65535;
 $205 = ($204|0)==(0);
 if (!($205)) {
  $207 = HEAP32[$d>>2]|0;
  $208 = HEAP32[$n>>2]|0;
  $209 = (_mu_str_intern($207,$208)|0);
  $210 = $21;
  HEAP32[$210>>2] = $209;
  STACKTOP = sp;return 1;
 }
 $206 = $16;
 _mu_destroy($206);
 $207 = HEAP32[$d>>2]|0;
 $208 = HEAP32[$n>>2]|0;
 $209 = (_mu_str_intern($207,$208)|0);
 $210 = $21;
 HEAP32[$210>>2] = $209;
 STACKTOP = sp;return 1;
}
function _mu_split_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1345]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1328)|0);
  HEAP32[1345] = $2;
 }
 $3 = HEAP32[1345]|0;
 return ($3|0);
}
function _mu_split_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1344) + 7)|0))|0);
}
function _mu_split_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $count$i = 0, $delim = 0, $ref$i = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 36|0;
 $11 = sp + 4|0;
 $10 = $frame;
 $12 = $10;
 $13 = HEAP32[$12>>2]|0;
 $s = $13;
 $14 = $10;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $10;
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $22 = $20;
 } else {
  $21 = (_mu_empty_str()|0);
  $22 = $21;
 }
 $delim = $22;
 $23 = $s;
 $8 = $23;
 $24 = $8;
 $7 = $24;
 $25 = $7;
 $26 = $25;
 $27 = 7 & $26;
 $28 = ($27|0)==(3);
 if (!($28)) {
  $35 = (_mu_split_key_def()|0);
  $36 = $10;
  _mu_errorargs($35,2,$36);
  // unreachable;
 }
 $29 = $delim;
 $2 = $29;
 $30 = $2;
 $1 = $30;
 $31 = $1;
 $32 = $31;
 $33 = 7 & $32;
 $34 = ($33|0)==(3);
 if (!($34)) {
  $35 = (_mu_split_key_def()|0);
  $36 = $10;
  _mu_errorargs($35,2,$36);
  // unreachable;
 }
 $37 = $delim;
 $0 = $37;
 $38 = $0;
 $39 = $38;
 $40 = (($39) - 3)|0;
 $41 = $40;
 $42 = ((($41)) + 2|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = $43&65535;
 $45 = ($44|0)==(0);
 if (!($45)) {
  $72 = $s;
  HEAP32[$11>>2] = $72;
  $73 = ((($11)) + 4|0);
  $74 = $delim;
  HEAP32[$73>>2] = $74;
  $75 = ((($73)) + 4|0);
  $5 = 0;
  $76 = $5;
  $77 = (+($76>>>0));
  HEAPF32[$6>>2] = $77;
  $78 = HEAP32[$6>>2]|0;
  $79 = -8 & $78;
  $80 = (1 + ($79))|0;
  $81 = $80;
  HEAP32[$75>>2] = $81;
  $82 = (_mu_tbl_fromlist($11,3)|0);
  $83 = (_mu_fn_fromsbfn(0,307,$82)|0);
  $84 = $10;
  HEAP32[$84>>2] = $83;
  $9 = 1;
  $85 = $9;
  STACKTOP = sp;return ($85|0);
 }
 $46 = $s;
 $47 = (_mu_str_iter($46)|0);
 $48 = $10;
 HEAP32[$48>>2] = $47;
 $49 = $s;
 $4 = $49;
 $50 = $4;
 $3 = $50;
 $51 = $3;
 $52 = $51;
 $53 = 6 & $52;
 $54 = ($53|0)!=(0);
 if ($54) {
  $55 = $4;
  $56 = $55;
  $57 = -8 & $56;
  $58 = $57;
  $ref$i = $58;
  $59 = $ref$i;
  $60 = HEAP16[$59>>1]|0;
  $count$i = $60;
  $61 = $count$i;
  $62 = $61&65535;
  $63 = ($62|0)!=(0);
  if ($63) {
   $64 = $count$i;
   $65 = (($64) + -1)<<16>>16;
   $count$i = $65;
   $66 = $count$i;
   $67 = $ref$i;
   HEAP16[$67>>1] = $66;
   $68 = $count$i;
   $69 = $68&65535;
   $70 = ($69|0)==(0);
   if ($70) {
    $71 = $4;
    _mu_destroy($71);
   }
  }
 }
 $9 = 1;
 $85 = $9;
 STACKTOP = sp;return ($85|0);
}
function _mu_str_split_step($scope,$frame) {
 $scope = $scope|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $a = 0, $ab = 0, $alen = 0, $count$i = 0, $count$i2 = 0, $count$i5 = 0, $i = 0, $j = 0, $ref$i = 0, $ref$i1 = 0, $ref$i4 = 0, $s = 0, $sb = 0, $slen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 148|0;
 $6 = sp + 124|0;
 $10 = sp + 108|0;
 $12 = sp + 100|0;
 $14 = sp + 92|0;
 $22 = sp + 52|0;
 $24 = $scope;
 $25 = $frame;
 $26 = $24;
 $21 = 0;
 $27 = $21;
 $28 = (+($27>>>0));
 HEAPF32[$22>>2] = $28;
 $29 = HEAP32[$22>>2]|0;
 $30 = -8 & $29;
 $31 = (1 + ($30))|0;
 $32 = $31;
 $33 = (_mu_tbl_lookup($26,$32)|0);
 $a = $33;
 $34 = $a;
 $18 = $34;
 $35 = $18;
 $36 = $35;
 $37 = (($36) - 3)|0;
 $38 = $37;
 $39 = ((($38)) + 4|0);
 $ab = $39;
 $40 = $a;
 $15 = $40;
 $41 = $15;
 $42 = $41;
 $43 = (($42) - 3)|0;
 $44 = $43;
 $45 = ((($44)) + 2|0);
 $46 = HEAP16[$45>>1]|0;
 $alen = $46;
 $47 = $24;
 $9 = 2;
 $48 = $9;
 $49 = (+($48>>>0));
 HEAPF32[$10>>2] = $49;
 $50 = HEAP32[$10>>2]|0;
 $51 = -8 & $50;
 $52 = (1 + ($51))|0;
 $53 = $52;
 $54 = (_mu_tbl_lookup($47,$53)|0);
 $2 = $54;
 $55 = $2;
 $0 = $55;
 $56 = $0;
 $57 = $56;
 $58 = (($57) - 1)|0;
 HEAP32[$1>>2] = $58;
 $59 = +HEAPF32[$1>>2];
 $60 = (~~(($59))>>>0);
 $i = $60;
 $61 = $i;
 $62 = $alen;
 $63 = $62&65535;
 $64 = ($61>>>0)>($63>>>0);
 if ($64) {
  $65 = $a;
  $4 = $65;
  $66 = $4;
  $3 = $66;
  $67 = $3;
  $68 = $67;
  $69 = 6 & $68;
  $70 = ($69|0)!=(0);
  if ($70) {
   $71 = $4;
   $72 = $71;
   $73 = -8 & $72;
   $74 = $73;
   $ref$i4 = $74;
   $75 = $ref$i4;
   $76 = HEAP16[$75>>1]|0;
   $count$i5 = $76;
   $77 = $count$i5;
   $78 = $77&65535;
   $79 = ($78|0)!=(0);
   if ($79) {
    $80 = $count$i5;
    $81 = (($80) + -1)<<16>>16;
    $count$i5 = $81;
    $82 = $count$i5;
    $83 = $ref$i4;
    HEAP16[$83>>1] = $82;
    $84 = $count$i5;
    $85 = $84&65535;
    $86 = ($85|0)==(0);
    if ($86) {
     $87 = $4;
     _mu_destroy($87);
    }
   }
  }
  $23 = 0;
  $202 = $23;
  STACKTOP = sp;return ($202|0);
 }
 $88 = $24;
 $5 = 1;
 $89 = $5;
 $90 = (+($89>>>0));
 HEAPF32[$6>>2] = $90;
 $91 = HEAP32[$6>>2]|0;
 $92 = -8 & $91;
 $93 = (1 + ($92))|0;
 $94 = $93;
 $95 = (_mu_tbl_lookup($88,$94)|0);
 $s = $95;
 $96 = $s;
 $7 = $96;
 $97 = $7;
 $98 = $97;
 $99 = (($98) - 3)|0;
 $100 = $99;
 $101 = ((($100)) + 4|0);
 $sb = $101;
 $102 = $s;
 $8 = $102;
 $103 = $8;
 $104 = $103;
 $105 = (($104) - 3)|0;
 $106 = $105;
 $107 = ((($106)) + 2|0);
 $108 = HEAP16[$107>>1]|0;
 $slen = $108;
 $109 = $i;
 $j = $109;
 while(1) {
  $110 = $j;
  $111 = $alen;
  $112 = $111&65535;
  $113 = ($110>>>0)<($112>>>0);
  if (!($113)) {
   break;
  }
  $114 = $j;
  $115 = $slen;
  $116 = $115&65535;
  $117 = (($114) + ($116))|0;
  $118 = $alen;
  $119 = $118&65535;
  $120 = ($117>>>0)<=($119>>>0);
  if ($120) {
   $121 = $j;
   $122 = $ab;
   $123 = (($122) + ($121)|0);
   $124 = $sb;
   $125 = $slen;
   $126 = $125&65535;
   $127 = (_memcmp($123,$124,$126)|0);
   $128 = ($127|0)==(0);
   if ($128) {
    break;
   }
  }
  $129 = $j;
  $130 = (($129) + 1)|0;
  $j = $130;
 }
 $131 = $ab;
 $132 = $i;
 $133 = (($131) + ($132)|0);
 $134 = $j;
 $135 = $i;
 $136 = (($134) - ($135))|0;
 $137 = (_mu_str_fromdata($133,$136)|0);
 $138 = $25;
 HEAP32[$138>>2] = $137;
 $139 = $24;
 $11 = 2;
 $140 = $11;
 $141 = (+($140>>>0));
 HEAPF32[$12>>2] = $141;
 $142 = HEAP32[$12>>2]|0;
 $143 = -8 & $142;
 $144 = (1 + ($143))|0;
 $145 = $144;
 $146 = $j;
 $147 = $slen;
 $148 = $147&65535;
 $149 = (($146) + ($148))|0;
 $13 = $149;
 $150 = $13;
 $151 = (+($150>>>0));
 HEAPF32[$14>>2] = $151;
 $152 = HEAP32[$14>>2]|0;
 $153 = -8 & $152;
 $154 = (1 + ($153))|0;
 $155 = $154;
 _mu_tbl_insert($139,$145,$155);
 $156 = $a;
 $17 = $156;
 $157 = $17;
 $16 = $157;
 $158 = $16;
 $159 = $158;
 $160 = 6 & $159;
 $161 = ($160|0)!=(0);
 if ($161) {
  $162 = $17;
  $163 = $162;
  $164 = -8 & $163;
  $165 = $164;
  $ref$i1 = $165;
  $166 = $ref$i1;
  $167 = HEAP16[$166>>1]|0;
  $count$i2 = $167;
  $168 = $count$i2;
  $169 = $168&65535;
  $170 = ($169|0)!=(0);
  if ($170) {
   $171 = $count$i2;
   $172 = (($171) + -1)<<16>>16;
   $count$i2 = $172;
   $173 = $count$i2;
   $174 = $ref$i1;
   HEAP16[$174>>1] = $173;
   $175 = $count$i2;
   $176 = $175&65535;
   $177 = ($176|0)==(0);
   if ($177) {
    $178 = $17;
    _mu_destroy($178);
   }
  }
 }
 $179 = $s;
 $20 = $179;
 $180 = $20;
 $19 = $180;
 $181 = $19;
 $182 = $181;
 $183 = 6 & $182;
 $184 = ($183|0)!=(0);
 if ($184) {
  $185 = $20;
  $186 = $185;
  $187 = -8 & $186;
  $188 = $187;
  $ref$i = $188;
  $189 = $ref$i;
  $190 = HEAP16[$189>>1]|0;
  $count$i = $190;
  $191 = $count$i;
  $192 = $191&65535;
  $193 = ($192|0)!=(0);
  if ($193) {
   $194 = $count$i;
   $195 = (($194) + -1)<<16>>16;
   $count$i = $195;
   $196 = $count$i;
   $197 = $ref$i;
   HEAP16[$197>>1] = $196;
   $198 = $count$i;
   $199 = $198&65535;
   $200 = ($199|0)==(0);
   if ($200) {
    $201 = $20;
    _mu_destroy($201);
   }
  }
 }
 $23 = 1;
 $202 = $23;
 STACKTOP = sp;return ($202|0);
}
function _mu_join_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1346]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1360)|0);
  HEAP32[1346] = $2;
 }
 $3 = HEAP32[1346]|0;
 return ($3|0);
}
function _mu_join_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1368) + 7)|0))|0);
}
function _mu_join_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $b = 0, $count$i = 0, $count$i2 = 0, $count$i4 = 0, $delim = 0, $first = 0, $iter = 0, $n = 0, $ref$i = 0, $ref$i1 = 0, $ref$i3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 32|0;
 $vararg_buffer = sp + 24|0;
 $b = sp + 40|0;
 $n = sp + 36|0;
 $10 = $frame;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $iter = $12;
 $13 = $10;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $10;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $21 = $19;
 } else {
  $20 = (_mu_empty_str()|0);
  $21 = $20;
 }
 $delim = $21;
 $22 = $delim;
 $9 = $22;
 $23 = $9;
 $8 = $23;
 $24 = $8;
 $25 = $24;
 $26 = 7 & $25;
 $27 = ($26|0)==(3);
 if (!($27)) {
  $28 = (_mu_join_key_def()|0);
  $29 = $10;
  _mu_errorargs($28,2,$29);
  // unreachable;
 }
 $30 = (_mu_buf_create(0)|0);
 HEAP32[$b>>2] = $30;
 HEAP32[$n>>2] = 0;
 $first = 1;
 $31 = (_mu_iter_def()|0);
 $32 = $iter;
 HEAP32[$vararg_buffer>>2] = $32;
 $33 = (_mu_fn_call($31,17,$vararg_buffer)|0);
 $iter = $33;
 while(1) {
  $34 = $iter;
  $35 = $10;
  $36 = (_mu_fn_next($34,1,$35)|0);
  if (!($36)) {
   break;
  }
  $37 = $10;
  $38 = HEAP32[$37>>2]|0;
  $7 = $38;
  $39 = $7;
  $6 = $39;
  $40 = $6;
  $41 = $40;
  $42 = 7 & $41;
  $43 = ($42|0)==(3);
  if (!($43)) {
   label = 9;
   break;
  }
  $46 = $first;
  $47 = $46&1;
  if ($47) {
   $first = 0;
  } else {
   $48 = $delim;
   $3 = $48;
   $49 = $3;
   $2 = $49;
   $50 = $2;
   $51 = $50;
   $52 = 6 & $51;
   $53 = ($52|0)!=(0);
   if ($53) {
    $54 = $3;
    $55 = $54;
    $56 = -8 & $55;
    $57 = $56;
    $ref$i1 = $57;
    $58 = $ref$i1;
    $59 = HEAP16[$58>>1]|0;
    $count$i2 = $59;
    $60 = $count$i2;
    $61 = $60&65535;
    $62 = ($61|0)!=(0);
    if ($62) {
     $63 = $count$i2;
     $64 = (($63) + 1)<<16>>16;
     $count$i2 = $64;
     $65 = $count$i2;
     $66 = $ref$i1;
     HEAP16[$66>>1] = $65;
    }
   }
   $67 = $3;
   _mu_buf_pushmu($b,$n,$67);
  }
  $68 = $10;
  $69 = HEAP32[$68>>2]|0;
  _mu_buf_pushmu($b,$n,$69);
 }
 if ((label|0) == 9) {
  $44 = $10;
  $45 = HEAP32[$44>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $45;
  _mu_errorf(3893,$vararg_buffer1);
  // unreachable;
 }
 $70 = $iter;
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = $72;
 $74 = 6 & $73;
 $75 = ($74|0)!=(0);
 if ($75) {
  $76 = $1;
  $77 = $76;
  $78 = -8 & $77;
  $79 = $78;
  $ref$i3 = $79;
  $80 = $ref$i3;
  $81 = HEAP16[$80>>1]|0;
  $count$i4 = $81;
  $82 = $count$i4;
  $83 = $82&65535;
  $84 = ($83|0)!=(0);
  if ($84) {
   $85 = $count$i4;
   $86 = (($85) + -1)<<16>>16;
   $count$i4 = $86;
   $87 = $count$i4;
   $88 = $ref$i3;
   HEAP16[$88>>1] = $87;
   $89 = $count$i4;
   $90 = $89&65535;
   $91 = ($90|0)==(0);
   if ($91) {
    $92 = $1;
    _mu_destroy($92);
   }
  }
 }
 $93 = $delim;
 $5 = $93;
 $94 = $5;
 $4 = $94;
 $95 = $4;
 $96 = $95;
 $97 = 6 & $96;
 $98 = ($97|0)!=(0);
 if (!($98)) {
  $116 = HEAP32[$b>>2]|0;
  $117 = HEAP32[$n>>2]|0;
  $118 = (_mu_str_intern($116,$117)|0);
  $119 = $10;
  HEAP32[$119>>2] = $118;
  STACKTOP = sp;return 1;
 }
 $99 = $5;
 $100 = $99;
 $101 = -8 & $100;
 $102 = $101;
 $ref$i = $102;
 $103 = $ref$i;
 $104 = HEAP16[$103>>1]|0;
 $count$i = $104;
 $105 = $count$i;
 $106 = $105&65535;
 $107 = ($106|0)!=(0);
 if (!($107)) {
  $116 = HEAP32[$b>>2]|0;
  $117 = HEAP32[$n>>2]|0;
  $118 = (_mu_str_intern($116,$117)|0);
  $119 = $10;
  HEAP32[$119>>2] = $118;
  STACKTOP = sp;return 1;
 }
 $108 = $count$i;
 $109 = (($108) + -1)<<16>>16;
 $count$i = $109;
 $110 = $count$i;
 $111 = $ref$i;
 HEAP16[$111>>1] = $110;
 $112 = $count$i;
 $113 = $112&65535;
 $114 = ($113|0)==(0);
 if (!($114)) {
  $116 = HEAP32[$b>>2]|0;
  $117 = HEAP32[$n>>2]|0;
  $118 = (_mu_str_intern($116,$117)|0);
  $119 = $10;
  HEAP32[$119>>2] = $118;
  STACKTOP = sp;return 1;
 }
 $115 = $5;
 _mu_destroy($115);
 $116 = HEAP32[$b>>2]|0;
 $117 = HEAP32[$n>>2]|0;
 $118 = (_mu_str_intern($116,$117)|0);
 $119 = $10;
 HEAP32[$119>>2] = $118;
 STACKTOP = sp;return 1;
}
function _mu_pad_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1347]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1384)|0);
  HEAP32[1347] = $2;
 }
 $3 = HEAP32[1347]|0;
 return ($3|0);
}
function _mu_pad_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1392) + 7)|0))|0);
}
function _mu_pad_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count = 0, $count$i = 0, $count$i2 = 0, $count$i4 = 0, $d = 0, $i = 0, $left = 0, $len = 0, $mlen = 0, $n = 0, $pad = 0, $ref$i = 0, $ref$i1 = 0, $ref$i3 = 0;
 var $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 156|0;
 $3 = sp + 148|0;
 $6 = sp + 136|0;
 $d = sp + 32|0;
 $n = sp + 28|0;
 $25 = $frame;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $s = $27;
 $28 = $25;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $mlen = $30;
 $31 = $25;
 $32 = ((($31)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 if ($34) {
  $35 = $25;
  $36 = ((($35)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $39 = $37;
 } else {
  $38 = (_mu_space_str()|0);
  $39 = $38;
 }
 $pad = $39;
 $40 = $s;
 $23 = $40;
 $41 = $23;
 $22 = $41;
 $42 = $22;
 $43 = $42;
 $44 = 7 & $43;
 $45 = ($44|0)==(3);
 if (!($45)) {
  $67 = (_mu_pad_key_def()|0);
  $68 = $25;
  _mu_errorargs($67,3,$68);
  // unreachable;
 }
 $46 = $mlen;
 $21 = $46;
 $47 = $21;
 $20 = $47;
 $48 = $20;
 $49 = $48;
 $50 = 7 & $49;
 $51 = ($50|0)==(1);
 if (!($51)) {
  $67 = (_mu_pad_key_def()|0);
  $68 = $25;
  _mu_errorargs($67,3,$68);
  // unreachable;
 }
 $52 = $pad;
 $17 = $52;
 $53 = $17;
 $16 = $53;
 $54 = $16;
 $55 = $54;
 $56 = 7 & $55;
 $57 = ($56|0)==(3);
 if (!($57)) {
  $67 = (_mu_pad_key_def()|0);
  $68 = $25;
  _mu_errorargs($67,3,$68);
  // unreachable;
 }
 $58 = $pad;
 $9 = $58;
 $59 = $9;
 $60 = $59;
 $61 = (($60) - 3)|0;
 $62 = $61;
 $63 = ((($62)) + 2|0);
 $64 = HEAP16[$63>>1]|0;
 $65 = $64&65535;
 $66 = ($65|0)>(0);
 if (!($66)) {
  $67 = (_mu_pad_key_def()|0);
  $68 = $25;
  _mu_errorargs($67,3,$68);
  // unreachable;
 }
 $69 = $mlen;
 $0 = 0;
 $70 = $0;
 $71 = (+($70>>>0));
 HEAPF32[$1>>2] = $71;
 $72 = HEAP32[$1>>2]|0;
 $73 = -8 & $72;
 $74 = (1 + ($73))|0;
 $75 = $74;
 $76 = (_mu_num_cmp($69,$75)|0);
 $77 = ($76|0)<(0);
 if ($77) {
  $left = 0;
  $78 = $mlen;
  $79 = (_mu_num_neg($78)|0);
  $4 = $79;
  $80 = $4;
  $2 = $80;
  $81 = $2;
  $82 = $81;
  $83 = (($82) - 1)|0;
  HEAP32[$3>>2] = $83;
  $84 = +HEAPF32[$3>>2];
  $85 = (~~(($84))>>>0);
  $len = $85;
 } else {
  $left = 1;
  $86 = $mlen;
  $7 = $86;
  $87 = $7;
  $5 = $87;
  $88 = $5;
  $89 = $88;
  $90 = (($89) - 1)|0;
  HEAP32[$6>>2] = $90;
  $91 = +HEAPF32[$6>>2];
  $92 = (~~(($91))>>>0);
  $len = $92;
 }
 $93 = $s;
 $8 = $93;
 $94 = $8;
 $95 = $94;
 $96 = (($95) - 3)|0;
 $97 = $96;
 $98 = ((($97)) + 2|0);
 $99 = HEAP16[$98>>1]|0;
 $100 = $99&65535;
 $101 = $len;
 $102 = ($100>>>0)>=($101>>>0);
 if ($102) {
  $103 = $pad;
  $11 = $103;
  $104 = $11;
  $10 = $104;
  $105 = $10;
  $106 = $105;
  $107 = 6 & $106;
  $108 = ($107|0)!=(0);
  if ($108) {
   $109 = $11;
   $110 = $109;
   $111 = -8 & $110;
   $112 = $111;
   $ref$i3 = $112;
   $113 = $ref$i3;
   $114 = HEAP16[$113>>1]|0;
   $count$i4 = $114;
   $115 = $count$i4;
   $116 = $115&65535;
   $117 = ($116|0)!=(0);
   if ($117) {
    $118 = $count$i4;
    $119 = (($118) + -1)<<16>>16;
    $count$i4 = $119;
    $120 = $count$i4;
    $121 = $ref$i3;
    HEAP16[$121>>1] = $120;
    $122 = $count$i4;
    $123 = $122&65535;
    $124 = ($123|0)==(0);
    if ($124) {
     $125 = $11;
     _mu_destroy($125);
    }
   }
  }
  $24 = 1;
  $205 = $24;
  STACKTOP = sp;return ($205|0);
 }
 $126 = $len;
 $127 = (_mu_buf_create($126)|0);
 HEAP32[$d>>2] = $127;
 HEAP32[$n>>2] = 0;
 $128 = $len;
 $129 = $s;
 $12 = $129;
 $130 = $12;
 $131 = $130;
 $132 = (($131) - 3)|0;
 $133 = $132;
 $134 = ((($133)) + 2|0);
 $135 = HEAP16[$134>>1]|0;
 $136 = $135&65535;
 $137 = (($128) - ($136))|0;
 $138 = $pad;
 $13 = $138;
 $139 = $13;
 $140 = $139;
 $141 = (($140) - 3)|0;
 $142 = $141;
 $143 = ((($142)) + 2|0);
 $144 = HEAP16[$143>>1]|0;
 $145 = $144&65535;
 $146 = (($137>>>0) / ($145>>>0))&-1;
 $count = $146;
 $147 = $left;
 $148 = $147&1;
 if ($148) {
  $149 = $s;
  _mu_buf_pushmu($d,$n,$149);
 }
 $i = 0;
 while(1) {
  $150 = $i;
  $151 = $count;
  $152 = ($150>>>0)<($151>>>0);
  if (!($152)) {
   break;
  }
  $153 = $pad;
  $15 = $153;
  $154 = $15;
  $14 = $154;
  $155 = $14;
  $156 = $155;
  $157 = 6 & $156;
  $158 = ($157|0)!=(0);
  if ($158) {
   $159 = $15;
   $160 = $159;
   $161 = -8 & $160;
   $162 = $161;
   $ref$i1 = $162;
   $163 = $ref$i1;
   $164 = HEAP16[$163>>1]|0;
   $count$i2 = $164;
   $165 = $count$i2;
   $166 = $165&65535;
   $167 = ($166|0)!=(0);
   if ($167) {
    $168 = $count$i2;
    $169 = (($168) + 1)<<16>>16;
    $count$i2 = $169;
    $170 = $count$i2;
    $171 = $ref$i1;
    HEAP16[$171>>1] = $170;
   }
  }
  $172 = $15;
  _mu_buf_pushmu($d,$n,$172);
  $173 = $i;
  $174 = (($173) + 1)|0;
  $i = $174;
 }
 $175 = $left;
 $176 = $175&1;
 if (!($176)) {
  $177 = $s;
  _mu_buf_pushmu($d,$n,$177);
 }
 $178 = $pad;
 $19 = $178;
 $179 = $19;
 $18 = $179;
 $180 = $18;
 $181 = $180;
 $182 = 6 & $181;
 $183 = ($182|0)!=(0);
 if ($183) {
  $184 = $19;
  $185 = $184;
  $186 = -8 & $185;
  $187 = $186;
  $ref$i = $187;
  $188 = $ref$i;
  $189 = HEAP16[$188>>1]|0;
  $count$i = $189;
  $190 = $count$i;
  $191 = $190&65535;
  $192 = ($191|0)!=(0);
  if ($192) {
   $193 = $count$i;
   $194 = (($193) + -1)<<16>>16;
   $count$i = $194;
   $195 = $count$i;
   $196 = $ref$i;
   HEAP16[$196>>1] = $195;
   $197 = $count$i;
   $198 = $197&65535;
   $199 = ($198|0)==(0);
   if ($199) {
    $200 = $19;
    _mu_destroy($200);
   }
  }
 }
 $201 = HEAP32[$d>>2]|0;
 $202 = HEAP32[$n>>2]|0;
 $203 = (_mu_str_intern($201,$202)|0);
 $204 = $25;
 HEAP32[$204>>2] = $203;
 $24 = 1;
 $205 = $24;
 STACKTOP = sp;return ($205|0);
}
function _mu_strip_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1348]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1408)|0);
  HEAP32[1348] = $2;
 }
 $3 = HEAP32[1348]|0;
 return ($3|0);
}
function _mu_strip_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1424) + 7)|0))|0);
}
function _mu_strip_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$i = 0, $count$i2 = 0, $count$i5 = 0, $dir = 0, $end = 0;
 var $pad = 0, $pb = 0, $plen = 0, $pos = 0, $ref$i = 0, $ref$i1 = 0, $ref$i4 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 124|0;
 $8 = sp + 116|0;
 $23 = $frame;
 $24 = $23;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $22 = $26;
 $27 = $22;
 $21 = $27;
 $28 = $21;
 $29 = $28;
 $30 = 7 & $29;
 $31 = ($30|0)==(3);
 if ($31) {
  $32 = $23;
  $33 = ((($32)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $18 = $34;
  $35 = $18;
  $17 = $35;
  $36 = $17;
  $37 = $36;
  $38 = 6 & $37;
  $39 = ($38|0)!=(0);
  if ($39) {
   $40 = $18;
   $41 = $40;
   $42 = -8 & $41;
   $43 = $42;
   $ref$i1 = $43;
   $44 = $ref$i1;
   $45 = HEAP16[$44>>1]|0;
   $count$i2 = $45;
   $46 = $count$i2;
   $47 = $46&65535;
   $48 = ($47|0)!=(0);
   if ($48) {
    $49 = $count$i2;
    $50 = (($49) + -1)<<16>>16;
    $count$i2 = $50;
    $51 = $count$i2;
    $52 = $ref$i1;
    HEAP16[$52>>1] = $51;
    $53 = $count$i2;
    $54 = $53&65535;
    $55 = ($54|0)==(0);
    if ($55) {
     $56 = $18;
     _mu_destroy($56);
    }
   }
  }
  $57 = $23;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $23;
  $61 = ((($60)) + 8|0);
  HEAP32[$61>>2] = $59;
  $62 = $23;
  $63 = ((($62)) + 4|0);
  HEAP32[$63>>2] = 0;
 }
 $64 = $23;
 $65 = HEAP32[$64>>2]|0;
 $s = $65;
 $66 = $23;
 $67 = ((($66)) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $dir = $68;
 $69 = $23;
 $70 = ((($69)) + 8|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($71|0)!=(0|0);
 if ($72) {
  $73 = $23;
  $74 = ((($73)) + 8|0);
  $75 = HEAP32[$74>>2]|0;
  $77 = $75;
 } else {
  $76 = (_mu_space_str()|0);
  $77 = $76;
 }
 $pad = $77;
 $78 = $s;
 $16 = $78;
 $79 = $16;
 $15 = $79;
 $80 = $15;
 $81 = $80;
 $82 = 7 & $81;
 $83 = ($82|0)==(3);
 if (!($83)) {
  $107 = (_mu_str_key_def()|0);
  $108 = $23;
  _mu_errorargs($107,3,$108);
  // unreachable;
 }
 $84 = $dir;
 $85 = ($84|0)!=(0|0);
 if ($85) {
  $86 = $dir;
  $12 = $86;
  $87 = $12;
  $11 = $87;
  $88 = $11;
  $89 = $88;
  $90 = 7 & $89;
  $91 = ($90|0)==(1);
  if (!($91)) {
   $107 = (_mu_str_key_def()|0);
   $108 = $23;
   _mu_errorargs($107,3,$108);
   // unreachable;
  }
 }
 $92 = $pad;
 $10 = $92;
 $93 = $10;
 $9 = $93;
 $94 = $9;
 $95 = $94;
 $96 = 7 & $95;
 $97 = ($96|0)==(3);
 if (!($97)) {
  $107 = (_mu_str_key_def()|0);
  $108 = $23;
  _mu_errorargs($107,3,$108);
  // unreachable;
 }
 $98 = $pad;
 $0 = $98;
 $99 = $0;
 $100 = $99;
 $101 = (($100) - 3)|0;
 $102 = $101;
 $103 = ((($102)) + 2|0);
 $104 = HEAP16[$103>>1]|0;
 $105 = $104&65535;
 $106 = ($105|0)>(0);
 if (!($106)) {
  $107 = (_mu_str_key_def()|0);
  $108 = $23;
  _mu_errorargs($107,3,$108);
  // unreachable;
 }
 $109 = $s;
 $1 = $109;
 $110 = $1;
 $111 = $110;
 $112 = (($111) - 3)|0;
 $113 = $112;
 $114 = ((($113)) + 4|0);
 $pos = $114;
 $115 = $pos;
 $116 = $s;
 $2 = $116;
 $117 = $2;
 $118 = $117;
 $119 = (($118) - 3)|0;
 $120 = $119;
 $121 = ((($120)) + 2|0);
 $122 = HEAP16[$121>>1]|0;
 $123 = $122&65535;
 $124 = (($115) + ($123)|0);
 $end = $124;
 $125 = $pad;
 $3 = $125;
 $126 = $3;
 $127 = $126;
 $128 = (($127) - 3)|0;
 $129 = $128;
 $130 = ((($129)) + 4|0);
 $pb = $130;
 $131 = $pad;
 $4 = $131;
 $132 = $4;
 $133 = $132;
 $134 = (($133) - 3)|0;
 $135 = $134;
 $136 = ((($135)) + 2|0);
 $137 = HEAP16[$136>>1]|0;
 $plen = $137;
 $138 = $dir;
 $139 = ($138|0)!=(0|0);
 if ($139) {
  $140 = $dir;
  $5 = 0;
  $141 = $5;
  $142 = (+($141>>>0));
  HEAPF32[$6>>2] = $142;
  $143 = HEAP32[$6>>2]|0;
  $144 = -8 & $143;
  $145 = (1 + ($144))|0;
  $146 = $145;
  $147 = (_mu_num_cmp($140,$146)|0);
  $148 = ($147|0)<=(0);
  if ($148) {
   label = 18;
  }
 } else {
  label = 18;
 }
 L28: do {
  if ((label|0) == 18) {
   while(1) {
    label = 0;
    $149 = $end;
    $150 = $pos;
    $151 = $149;
    $152 = $150;
    $153 = (($151) - ($152))|0;
    $154 = $plen;
    $155 = $154&65535;
    $156 = ($153|0)>=($155|0);
    if (!($156)) {
     break L28;
    }
    $157 = $pos;
    $158 = $pb;
    $159 = $plen;
    $160 = $159&65535;
    $161 = (_memcmp($157,$158,$160)|0);
    $162 = ($161|0)==(0);
    if (!($162)) {
     break L28;
    }
    $163 = $plen;
    $164 = $163&65535;
    $165 = $pos;
    $166 = (($165) + ($164)|0);
    $pos = $166;
    label = 18;
   }
  }
 } while(0);
 $167 = $dir;
 $168 = ($167|0)!=(0|0);
 if ($168) {
  $169 = $dir;
  $7 = 0;
  $170 = $7;
  $171 = (+($170>>>0));
  HEAPF32[$8>>2] = $171;
  $172 = HEAP32[$8>>2]|0;
  $173 = -8 & $172;
  $174 = (1 + ($173))|0;
  $175 = $174;
  $176 = (_mu_num_cmp($169,$175)|0);
  $177 = ($176|0)>=(0);
  if ($177) {
   label = 23;
  }
 } else {
  label = 23;
 }
 L36: do {
  if ((label|0) == 23) {
   while(1) {
    label = 0;
    $178 = $end;
    $179 = $pos;
    $180 = $178;
    $181 = $179;
    $182 = (($180) - ($181))|0;
    $183 = $plen;
    $184 = $183&65535;
    $185 = ($182|0)>=($184|0);
    if (!($185)) {
     break L36;
    }
    $186 = $end;
    $187 = $plen;
    $188 = $187&65535;
    $189 = (0 - ($188))|0;
    $190 = (($186) + ($189)|0);
    $191 = $pb;
    $192 = $plen;
    $193 = $192&65535;
    $194 = (_memcmp($190,$191,$193)|0);
    $195 = ($194|0)==(0);
    if (!($195)) {
     break L36;
    }
    $196 = $plen;
    $197 = $196&65535;
    $198 = $end;
    $199 = (0 - ($197))|0;
    $200 = (($198) + ($199)|0);
    $end = $200;
    label = 23;
   }
  }
 } while(0);
 $201 = $pos;
 $202 = $end;
 $203 = $pos;
 $204 = $202;
 $205 = $203;
 $206 = (($204) - ($205))|0;
 $207 = (_mu_str_fromdata($201,$206)|0);
 $208 = $23;
 HEAP32[$208>>2] = $207;
 $209 = $s;
 $14 = $209;
 $210 = $14;
 $13 = $210;
 $211 = $13;
 $212 = $211;
 $213 = 6 & $212;
 $214 = ($213|0)!=(0);
 if ($214) {
  $215 = $14;
  $216 = $215;
  $217 = -8 & $216;
  $218 = $217;
  $ref$i4 = $218;
  $219 = $ref$i4;
  $220 = HEAP16[$219>>1]|0;
  $count$i5 = $220;
  $221 = $count$i5;
  $222 = $221&65535;
  $223 = ($222|0)!=(0);
  if ($223) {
   $224 = $count$i5;
   $225 = (($224) + -1)<<16>>16;
   $count$i5 = $225;
   $226 = $count$i5;
   $227 = $ref$i4;
   HEAP16[$227>>1] = $226;
   $228 = $count$i5;
   $229 = $228&65535;
   $230 = ($229|0)==(0);
   if ($230) {
    $231 = $14;
    _mu_destroy($231);
   }
  }
 }
 $232 = $pad;
 $20 = $232;
 $233 = $20;
 $19 = $233;
 $234 = $19;
 $235 = $234;
 $236 = 6 & $235;
 $237 = ($236|0)!=(0);
 if (!($237)) {
  STACKTOP = sp;return 1;
 }
 $238 = $20;
 $239 = $238;
 $240 = -8 & $239;
 $241 = $240;
 $ref$i = $241;
 $242 = $ref$i;
 $243 = HEAP16[$242>>1]|0;
 $count$i = $243;
 $244 = $count$i;
 $245 = $244&65535;
 $246 = ($245|0)!=(0);
 if (!($246)) {
  STACKTOP = sp;return 1;
 }
 $247 = $count$i;
 $248 = (($247) + -1)<<16>>16;
 $count$i = $248;
 $249 = $count$i;
 $250 = $ref$i;
 HEAP16[$250>>1] = $249;
 $251 = $count$i;
 $252 = $251&65535;
 $253 = ($252|0)==(0);
 if (!($253)) {
  STACKTOP = sp;return 1;
 }
 $254 = $20;
 _mu_destroy($254);
 STACKTOP = sp;return 1;
}
function _mu_fn_fromcode($c,$closure) {
 $c = $c|0;
 $closure = $closure|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $count$i = 0, $f = 0;
 var $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = $c;
 $9 = $closure;
 $10 = $8;
 $7 = $10;
 $11 = $7;
 $6 = $11;
 $12 = $6;
 $13 = $12;
 $14 = -8 & $13;
 $15 = $14;
 $16 = ((($15)) + 4|0);
 $17 = ((($16)) + 1|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $19 & 4;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $9;
  $1 = $22;
  $23 = $1;
  $0 = $23;
  $24 = $0;
  $25 = $24;
  $26 = 6 & $25;
  $27 = ($26|0)!=(0);
  if ($27) {
   $28 = $1;
   $29 = $28;
   $30 = -8 & $29;
   $31 = $30;
   $ref$i = $31;
   $32 = $ref$i;
   $33 = HEAP16[$32>>1]|0;
   $count$i = $33;
   $34 = $count$i;
   $35 = $34&65535;
   $36 = ($35|0)!=(0);
   if ($36) {
    $37 = $count$i;
    $38 = (($37) + -1)<<16>>16;
    $count$i = $38;
    $39 = $count$i;
    $40 = $ref$i;
    HEAP16[$40>>1] = $39;
    $41 = $count$i;
    $42 = $41&65535;
    $43 = ($42|0)==(0);
    if ($43) {
     $44 = $1;
     _mu_destroy($44);
    }
   }
  }
 }
 $45 = (_mu_alloc(16)|0);
 $f = $45;
 $46 = $f;
 HEAP16[$46>>1] = 1;
 $47 = $8;
 $3 = $47;
 $48 = $3;
 $2 = $48;
 $49 = $2;
 $50 = $49;
 $51 = -8 & $50;
 $52 = $51;
 $53 = ((($52)) + 4|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $f;
 $56 = ((($55)) + 2|0);
 HEAP8[$56>>0] = $54;
 $57 = $8;
 $5 = $57;
 $58 = $5;
 $4 = $58;
 $59 = $4;
 $60 = $59;
 $61 = -8 & $60;
 $62 = $61;
 $63 = ((($62)) + 4|0);
 $64 = ((($63)) + 1|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = $f;
 $67 = ((($66)) + 3|0);
 HEAP8[$67>>0] = $65;
 $68 = $9;
 $69 = $f;
 $70 = ((($69)) + 4|0);
 HEAP32[$70>>2] = $68;
 $71 = $8;
 $72 = $f;
 $73 = ((($72)) + 8|0);
 HEAP32[$73>>2] = $71;
 $74 = $f;
 $75 = $74;
 $76 = (($75) + 7)|0;
 $77 = $76;
 STACKTOP = sp;return ($77|0);
}
function _mu_fn_fromsbfn($args,$sbfn,$closure) {
 $args = $args|0;
 $sbfn = $sbfn|0;
 $closure = $closure|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $f = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $args;
 $1 = $sbfn;
 $2 = $closure;
 $3 = (_mu_alloc(16)|0);
 $f = $3;
 $4 = $f;
 HEAP16[$4>>1] = 1;
 $5 = $0;
 $6 = $f;
 $7 = ((($6)) + 2|0);
 HEAP8[$7>>0] = $5;
 $8 = $f;
 $9 = ((($8)) + 3|0);
 HEAP8[$9>>0] = 3;
 $10 = $2;
 $11 = $f;
 $12 = ((($11)) + 4|0);
 HEAP32[$12>>2] = $10;
 $13 = $1;
 $14 = $f;
 $15 = ((($14)) + 8|0);
 HEAP32[$15>>2] = $13;
 $16 = $f;
 $17 = $16;
 $18 = (($17) + 7)|0;
 $19 = $18;
 STACKTOP = sp;return ($19|0);
}
function _mu_id_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1440) + 7)|0))|0);
}
function _mu_id_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $frame;
 STACKTOP = sp;return 15;
}
function _mu_fn_frommu($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $m;
 $5 = $4;
 $2 = $5;
 $6 = $2;
 $7 = $6;
 $8 = 7 & $7;
 switch ($8|0) {
 case 0:  {
  $9 = (_mu_id_def()|0);
  $3 = $9;
  $34 = $3;
  STACKTOP = sp;return ($34|0);
  break;
 }
 case 7:  {
  $10 = $4;
  $3 = $10;
  $34 = $3;
  STACKTOP = sp;return ($34|0);
  break;
 }
 default: {
  $11 = $4;
  $1 = $11;
  $12 = $1;
  $0 = $12;
  $13 = $0;
  $14 = $13;
  $15 = 6 & $14;
  $16 = ($15|0)!=(0);
  if ($16) {
   $17 = $1;
   $18 = $17;
   $19 = -8 & $18;
   $20 = $19;
   $ref$i = $20;
   $21 = $ref$i;
   $22 = HEAP16[$21>>1]|0;
   $count$i = $22;
   $23 = $count$i;
   $24 = $23&65535;
   $25 = ($24|0)!=(0);
   if ($25) {
    $26 = $count$i;
    $27 = (($26) + -1)<<16>>16;
    $count$i = $27;
    $28 = $count$i;
    $29 = $ref$i;
    HEAP16[$29>>1] = $28;
    $30 = $count$i;
    $31 = $30&65535;
    $32 = ($31|0)==(0);
    if ($32) {
     $33 = $1;
     _mu_destroy($33);
    }
   }
  }
  $3 = 0;
  $34 = $3;
  STACKTOP = sp;return ($34|0);
 }
 }
 return (0)|0;
}
function _mu_fn_destroy($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $count$i = 0, $count$i2 = 0, $ref$i = 0, $ref$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = $f;
 $10 = $9;
 $8 = $10;
 $11 = $8;
 $12 = $11;
 $13 = (($12) - 7)|0;
 $14 = $13;
 $15 = ((($14)) + 3|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $17 & 1;
 $19 = ($18|0)!=(0);
 if (!($19)) {
  $20 = $9;
  $4 = $20;
  $21 = $4;
  $22 = $21;
  $23 = (($22) - 7)|0;
  $24 = $23;
  $25 = ((($24)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $1 = $26;
  $27 = $1;
  $0 = $27;
  $28 = $0;
  $29 = $28;
  $30 = 6 & $29;
  $31 = ($30|0)!=(0);
  if ($31) {
   $32 = $1;
   $33 = $32;
   $34 = -8 & $33;
   $35 = $34;
   $ref$i1 = $35;
   $36 = $ref$i1;
   $37 = HEAP16[$36>>1]|0;
   $count$i2 = $37;
   $38 = $count$i2;
   $39 = $38&65535;
   $40 = ($39|0)!=(0);
   if ($40) {
    $41 = $count$i2;
    $42 = (($41) + -1)<<16>>16;
    $count$i2 = $42;
    $43 = $count$i2;
    $44 = $ref$i1;
    HEAP16[$44>>1] = $43;
    $45 = $count$i2;
    $46 = $45&65535;
    $47 = ($46|0)==(0);
    if ($47) {
     $48 = $1;
     _mu_destroy($48);
    }
   }
  }
 }
 $49 = $9;
 $2 = $49;
 $50 = $2;
 $51 = $50;
 $52 = (($51) - 7)|0;
 $53 = $52;
 $54 = ((($53)) + 3|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $57 = $56 & 4;
 $58 = ($57|0)!=(0);
 if (!($58)) {
  $59 = $9;
  $3 = $59;
  $60 = $3;
  $61 = $60;
  $62 = (($61) - 7)|0;
  $63 = $62;
  $64 = ((($63)) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $6 = $65;
  $66 = $6;
  $5 = $66;
  $67 = $5;
  $68 = $67;
  $69 = 6 & $68;
  $70 = ($69|0)!=(0);
  if ($70) {
   $71 = $6;
   $72 = $71;
   $73 = -8 & $72;
   $74 = $73;
   $ref$i = $74;
   $75 = $ref$i;
   $76 = HEAP16[$75>>1]|0;
   $count$i = $76;
   $77 = $count$i;
   $78 = $77&65535;
   $79 = ($78|0)!=(0);
   if ($79) {
    $80 = $count$i;
    $81 = (($80) + -1)<<16>>16;
    $count$i = $81;
    $82 = $count$i;
    $83 = $ref$i;
    HEAP16[$83>>1] = $82;
    $84 = $count$i;
    $85 = $84&65535;
    $86 = ($85|0)==(0);
    if ($86) {
     $87 = $6;
     _mu_destroy($87);
    }
   }
  }
 }
 $88 = $9;
 $7 = $88;
 $89 = $7;
 $90 = $89;
 $91 = (($90) - 7)|0;
 $92 = $91;
 _mu_dealloc($92,16);
 STACKTOP = sp;return;
}
function _mu_code_destroy($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $i = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $c;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = $6;
  $5 = $8;
  $9 = $5;
  $4 = $9;
  $10 = $4;
  $11 = $10;
  $12 = -8 & $11;
  $13 = $12;
  $14 = ((($13)) + 4|0);
  $15 = ((($14)) + 4|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = ($7>>>0)<($17>>>0);
  if (!($18)) {
   break;
  }
  $19 = $i;
  $20 = $6;
  $1 = $20;
  $21 = $1;
  $0 = $21;
  $22 = $0;
  $23 = $22;
  $24 = -8 & $23;
  $25 = $24;
  $26 = ((($25)) + 4|0);
  $27 = ((($26)) + 8|0);
  $28 = (($27) + ($19<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $3 = $29;
  $30 = $3;
  $2 = $30;
  $31 = $2;
  $32 = $31;
  $33 = 6 & $32;
  $34 = ($33|0)!=(0);
  if ($34) {
   $35 = $3;
   $36 = $35;
   $37 = -8 & $36;
   $38 = $37;
   $ref$i = $38;
   $39 = $ref$i;
   $40 = HEAP16[$39>>1]|0;
   $count$i = $40;
   $41 = $count$i;
   $42 = $41&65535;
   $43 = ($42|0)!=(0);
   if ($43) {
    $44 = $count$i;
    $45 = (($44) + -1)<<16>>16;
    $count$i = $45;
    $46 = $count$i;
    $47 = $ref$i;
    HEAP16[$47>>1] = $46;
    $48 = $count$i;
    $49 = $48&65535;
    $50 = ($49|0)==(0);
    if ($50) {
     $51 = $3;
     _mu_destroy($51);
    }
   }
  }
  $52 = $i;
  $53 = (($52) + 1)|0;
  $i = $53;
 }
 STACKTOP = sp;return;
}
function _mu_fn_tcall($f,$fc,$frame) {
 $f = $f|0;
 $fc = $fc|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bfn = 0, $c = 0, $count$i = 0, $count$i$i = 0, $count$i2 = 0, $count$i4 = 0, $count$i7 = 0, $rc = 0, $ref$i = 0, $ref$i$i = 0, $ref$i1 = 0, $ref$i3 = 0, $ref$i6 = 0, $scope = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $20 = $f;
 $21 = $fc;
 $22 = $frame;
 $23 = $21;
 $24 = $20;
 $18 = $24;
 $25 = $18;
 $26 = $25;
 $27 = (($26) - 7)|0;
 $28 = $27;
 $29 = ((($28)) + 2|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $22;
 _mu_frameconvert($23,$30,$31);
 $32 = $20;
 $15 = $32;
 $33 = $15;
 $34 = $33;
 $35 = (($34) - 7)|0;
 $36 = $35;
 $37 = ((($36)) + 3|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = $39 & 3;
 switch ($40|0) {
 case 1:  {
  $41 = $20;
  $4 = $41;
  $42 = $4;
  $43 = $42;
  $44 = (($43) - 7)|0;
  $45 = $44;
  $46 = ((($45)) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $bfn = $47;
  $48 = $20;
  $3 = $48;
  $49 = $3;
  $2 = $49;
  $50 = $2;
  $51 = $50;
  $52 = 6 & $51;
  $53 = ($52|0)!=(0);
  if ($53) {
   $54 = $3;
   $55 = $54;
   $56 = -8 & $55;
   $57 = $56;
   $ref$i6 = $57;
   $58 = $ref$i6;
   $59 = HEAP16[$58>>1]|0;
   $count$i7 = $59;
   $60 = $count$i7;
   $61 = $60&65535;
   $62 = ($61|0)!=(0);
   if ($62) {
    $63 = $count$i7;
    $64 = (($63) + -1)<<16>>16;
    $count$i7 = $64;
    $65 = $count$i7;
    $66 = $ref$i6;
    HEAP16[$66>>1] = $65;
    $67 = $count$i7;
    $68 = $67&65535;
    $69 = ($68|0)==(0);
    if ($69) {
     $70 = $3;
     _mu_destroy($70);
    }
   }
  }
  $71 = $bfn;
  $72 = $22;
  $73 = (FUNCTION_TABLE_ii[$71 & 511]($72)|0);
  $19 = $73;
  $205 = $19;
  STACKTOP = sp;return ($205|0);
  break;
 }
 case 3:  {
  $74 = $20;
  $1 = $74;
  $75 = $1;
  $76 = $75;
  $77 = (($76) - 7)|0;
  $78 = $77;
  $79 = ((($78)) + 8|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $20;
  $0 = $81;
  $82 = $0;
  $83 = $82;
  $84 = (($83) - 7)|0;
  $85 = $84;
  $86 = ((($85)) + 4|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = $22;
  $89 = (FUNCTION_TABLE_iii[$80 & 511]($87,$88)|0);
  $rc = $89;
  $90 = $20;
  $6 = $90;
  $91 = $6;
  $5 = $91;
  $92 = $5;
  $93 = $92;
  $94 = 6 & $93;
  $95 = ($94|0)!=(0);
  if ($95) {
   $96 = $6;
   $97 = $96;
   $98 = -8 & $97;
   $99 = $98;
   $ref$i3 = $99;
   $100 = $ref$i3;
   $101 = HEAP16[$100>>1]|0;
   $count$i4 = $101;
   $102 = $count$i4;
   $103 = $102&65535;
   $104 = ($103|0)!=(0);
   if ($104) {
    $105 = $count$i4;
    $106 = (($105) + -1)<<16>>16;
    $count$i4 = $106;
    $107 = $count$i4;
    $108 = $ref$i3;
    HEAP16[$108>>1] = $107;
    $109 = $count$i4;
    $110 = $109&65535;
    $111 = ($110|0)==(0);
    if ($111) {
     $112 = $6;
     _mu_destroy($112);
    }
   }
  }
  $113 = $rc;
  $19 = $113;
  $205 = $19;
  STACKTOP = sp;return ($205|0);
  break;
 }
 case 2:  {
  $114 = $20;
  $7 = $114;
  $115 = $7;
  $116 = $115;
  $117 = (($116) - 7)|0;
  $118 = $117;
  $119 = ((($118)) + 8|0);
  $120 = HEAP32[$119>>2]|0;
  $9 = $120;
  $121 = $9;
  $8 = $121;
  $122 = $8;
  $123 = $122;
  $124 = 6 & $123;
  $125 = ($124|0)!=(0);
  if ($125) {
   $126 = $9;
   $127 = $126;
   $128 = -8 & $127;
   $129 = $128;
   $ref$i1 = $129;
   $130 = $ref$i1;
   $131 = HEAP16[$130>>1]|0;
   $count$i2 = $131;
   $132 = $count$i2;
   $133 = $132&65535;
   $134 = ($133|0)!=(0);
   if ($134) {
    $135 = $count$i2;
    $136 = (($135) + 1)<<16>>16;
    $count$i2 = $136;
    $137 = $count$i2;
    $138 = $ref$i1;
    HEAP16[$138>>1] = $137;
   }
  }
  $139 = $9;
  $c = $139;
  $140 = $c;
  $11 = $140;
  $141 = $11;
  $10 = $141;
  $142 = $10;
  $143 = $142;
  $144 = -8 & $143;
  $145 = $144;
  $146 = ((($145)) + 4|0);
  $147 = ((($146)) + 3|0);
  $148 = HEAP8[$147>>0]|0;
  $149 = $148&255;
  $150 = (_mu_tbl_create($149)|0);
  $scope = $150;
  $151 = $scope;
  $152 = $20;
  $14 = $152;
  $153 = $14;
  $154 = $153;
  $155 = (($154) - 7)|0;
  $156 = $155;
  $157 = ((($156)) + 4|0);
  $158 = HEAP32[$157>>2]|0;
  $13 = $158;
  $159 = $13;
  $12 = $159;
  $160 = $12;
  $161 = $160;
  $162 = 6 & $161;
  $163 = ($162|0)!=(0);
  if ($163) {
   $164 = $13;
   $165 = $164;
   $166 = -8 & $165;
   $167 = $166;
   $ref$i$i = $167;
   $168 = $ref$i$i;
   $169 = HEAP16[$168>>1]|0;
   $count$i$i = $169;
   $170 = $count$i$i;
   $171 = $170&65535;
   $172 = ($171|0)!=(0);
   if ($172) {
    $173 = $count$i$i;
    $174 = (($173) + 1)<<16>>16;
    $count$i$i = $174;
    $175 = $count$i$i;
    $176 = $ref$i$i;
    HEAP16[$176>>1] = $175;
   }
  }
  $177 = $13;
  _mu_tbl_settail($151,$177);
  $178 = $20;
  $17 = $178;
  $179 = $17;
  $16 = $179;
  $180 = $16;
  $181 = $180;
  $182 = 6 & $181;
  $183 = ($182|0)!=(0);
  if ($183) {
   $184 = $17;
   $185 = $184;
   $186 = -8 & $185;
   $187 = $186;
   $ref$i = $187;
   $188 = $ref$i;
   $189 = HEAP16[$188>>1]|0;
   $count$i = $189;
   $190 = $count$i;
   $191 = $190&65535;
   $192 = ($191|0)!=(0);
   if ($192) {
    $193 = $count$i;
    $194 = (($193) + -1)<<16>>16;
    $count$i = $194;
    $195 = $count$i;
    $196 = $ref$i;
    HEAP16[$196>>1] = $195;
    $197 = $count$i;
    $198 = $197&65535;
    $199 = ($198|0)==(0);
    if ($199) {
     $200 = $17;
     _mu_destroy($200);
    }
   }
  }
  $201 = $c;
  $202 = $scope;
  $203 = $22;
  $204 = (_mu_exec($201,$202,$203)|0);
  $19 = $204;
  $205 = $19;
  STACKTOP = sp;return ($205|0);
  break;
 }
 default: {
  // unreachable;
 }
 }
 return (0)|0;
}
function _mu_fn_fcall($f,$fc,$frame) {
 $f = $f|0;
 $fc = $fc|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $ref$i = 0, $rets = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $f;
 $3 = $fc;
 $4 = $frame;
 $5 = $2;
 $1 = $5;
 $6 = $1;
 $0 = $6;
 $7 = $0;
 $8 = $7;
 $9 = 6 & $8;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $1;
  $12 = $11;
  $13 = -8 & $12;
  $14 = $13;
  $ref$i = $14;
  $15 = $ref$i;
  $16 = HEAP16[$15>>1]|0;
  $count$i = $16;
  $17 = $count$i;
  $18 = $17&65535;
  $19 = ($18|0)!=(0);
  if ($19) {
   $20 = $count$i;
   $21 = (($20) + 1)<<16>>16;
   $count$i = $21;
   $22 = $count$i;
   $23 = $ref$i;
   HEAP16[$23>>1] = $22;
  }
 }
 $24 = $1;
 $25 = $3;
 $26 = $25&255;
 $27 = $26 >> 4;
 $28 = $27&255;
 $29 = $4;
 $30 = (_mu_fn_tcall($24,$28,$29)|0);
 $rets = $30;
 $31 = $rets;
 $32 = $3;
 $33 = $32&255;
 $34 = $33 & 15;
 $35 = $34&255;
 $36 = $4;
 _mu_frameconvert($31,$35,$36);
 STACKTOP = sp;return;
}
function _mu_fn_vcall($f,$fc,$args) {
 $f = $f|0;
 $fc = $fc|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0;
 var $frame = 0, $i = 0, $i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $frame = sp + 8|0;
 $2 = $f;
 $3 = $fc;
 $4 = $args;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $3;
  $7 = $6&255;
  $8 = $7 >> 4;
  $9 = $8&255;
  $1 = $9;
  $10 = $1;
  $11 = $10&255;
  $12 = ($11|0)>(4);
  $13 = $1;
  $14 = $13&255;
  $15 = $12 ? 1 : $14;
  $16 = $15&65535;
  $17 = $16&65535;
  $18 = ($5>>>0)<($17>>>0);
  if (!($18)) {
   break;
  }
  $19 = $4;
  $arglist_current = HEAP32[$19>>2]|0;
  $20 = $arglist_current;
  $21 = ((0) + 4|0);
  $expanded4 = $21;
  $expanded = (($expanded4) - 1)|0;
  $22 = (($20) + ($expanded))|0;
  $23 = ((0) + 4|0);
  $expanded8 = $23;
  $expanded7 = (($expanded8) - 1)|0;
  $expanded6 = $expanded7 ^ -1;
  $24 = $22 & $expanded6;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $arglist_next = ((($25)) + 4|0);
  HEAP32[$19>>2] = $arglist_next;
  $27 = $i;
  $28 = (($frame) + ($27<<2)|0);
  HEAP32[$28>>2] = $26;
  $29 = $i;
  $30 = (($29) + 1)|0;
  $i = $30;
 }
 $31 = $2;
 $32 = $3;
 _mu_fn_fcall($31,$32,$frame);
 $i1 = 1;
 while(1) {
  $33 = $i1;
  $34 = $3;
  $35 = $34&255;
  $36 = 15 & $35;
  $37 = $36&255;
  $0 = $37;
  $38 = $0;
  $39 = $38&255;
  $40 = ($39|0)>(4);
  $41 = $0;
  $42 = $41&255;
  $43 = $40 ? 1 : $42;
  $44 = $43&65535;
  $45 = $44&65535;
  $46 = ($33>>>0)<($45>>>0);
  if (!($46)) {
   break;
  }
  $47 = $i1;
  $48 = (($frame) + ($47<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $4;
  $arglist_current2 = HEAP32[$50>>2]|0;
  $51 = $arglist_current2;
  $52 = ((0) + 4|0);
  $expanded11 = $52;
  $expanded10 = (($expanded11) - 1)|0;
  $53 = (($51) + ($expanded10))|0;
  $54 = ((0) + 4|0);
  $expanded15 = $54;
  $expanded14 = (($expanded15) - 1)|0;
  $expanded13 = $expanded14 ^ -1;
  $55 = $53 & $expanded13;
  $56 = $55;
  $57 = HEAP32[$56>>2]|0;
  $arglist_next3 = ((($56)) + 4|0);
  HEAP32[$50>>2] = $arglist_next3;
  HEAP32[$57>>2] = $49;
  $58 = $i1;
  $59 = (($58) + 1)|0;
  $i1 = $59;
 }
 $60 = $3;
 $61 = $60&255;
 $62 = 15 & $61;
 $63 = ($62|0)!=(0);
 $64 = HEAP32[$frame>>2]|0;
 $65 = $63 ? $64 : 0;
 STACKTOP = sp;return ($65|0);
}
function _mu_fn_call($f,$fc,$varargs) {
 $f = $f|0;
 $fc = $fc|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $args = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 8|0;
 $0 = $f;
 $1 = $fc;
 HEAP32[$args>>2] = $varargs;
 $2 = $0;
 $3 = $1;
 $4 = (_mu_fn_vcall($2,$3,$args)|0);
 $ret = $4;
 $5 = $ret;
 STACKTOP = sp;return ($5|0);
}
function _mu_fn_next($f,$fc,$frame) {
 $f = $f|0;
 $fc = $fc|0;
 $frame = $frame|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$i = 0, $count$i2 = 0, $count$i5 = 0;
 var $m = 0, $ref$i = 0, $ref$i1 = 0, $ref$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 44|0;
 $8 = sp + 77|0;
 $9 = $f;
 $10 = $fc;
 $11 = $frame;
 $12 = $9;
 $13 = $10;
 $14 = $13&255;
 $15 = ($14|0)==(0);
 $16 = $10;
 $17 = $16&255;
 $18 = $15 ? 1 : $17;
 $19 = $18&255;
 $20 = $11;
 _mu_fn_fcall($12,$19,$20);
 $21 = $10;
 $22 = $21&255;
 $23 = ($22|0)!=(15);
 $24 = $11;
 $25 = HEAP32[$24>>2]|0;
 if ($23) {
  $26 = ($25|0)!=(0|0);
  $27 = $10;
  if (!($26)) {
   $54 = $11;
   _mu_frameconvert($27,0,$54);
   $$expand_i1_val2 = 0;
   HEAP8[$8>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$8>>0]|0;
   $111 = $$pre_trunc&1;
   STACKTOP = sp;return ($111|0);
  }
  $28 = $27&255;
  $29 = ($28|0)==(0);
  if ($29) {
   $30 = $11;
   $31 = HEAP32[$30>>2]|0;
   $7 = $31;
   $32 = $7;
   $6 = $32;
   $33 = $6;
   $34 = $33;
   $35 = 6 & $34;
   $36 = ($35|0)!=(0);
   if ($36) {
    $37 = $7;
    $38 = $37;
    $39 = -8 & $38;
    $40 = $39;
    $ref$i = $40;
    $41 = $ref$i;
    $42 = HEAP16[$41>>1]|0;
    $count$i = $42;
    $43 = $count$i;
    $44 = $43&65535;
    $45 = ($44|0)!=(0);
    if ($45) {
     $46 = $count$i;
     $47 = (($46) + -1)<<16>>16;
     $count$i = $47;
     $48 = $count$i;
     $49 = $ref$i;
     HEAP16[$49>>1] = $48;
     $50 = $count$i;
     $51 = $50&65535;
     $52 = ($51|0)==(0);
     if ($52) {
      $53 = $7;
      _mu_destroy($53);
     }
    }
   }
  }
  $$expand_i1_val = 1;
  HEAP8[$8>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$8>>0]|0;
  $111 = $$pre_trunc&1;
  STACKTOP = sp;return ($111|0);
 }
 $4 = 0;
 $55 = $4;
 $56 = (+($55>>>0));
 HEAPF32[$5>>2] = $56;
 $57 = HEAP32[$5>>2]|0;
 $58 = -8 & $57;
 $59 = (1 + ($58))|0;
 $60 = $59;
 $61 = (_mu_tbl_lookup($25,$60)|0);
 $m = $61;
 $62 = $m;
 $63 = ($62|0)!=(0|0);
 if ($63) {
  $64 = $m;
  $1 = $64;
  $65 = $1;
  $0 = $65;
  $66 = $0;
  $67 = $66;
  $68 = 6 & $67;
  $69 = ($68|0)!=(0);
  if ($69) {
   $70 = $1;
   $71 = $70;
   $72 = -8 & $71;
   $73 = $72;
   $ref$i4 = $73;
   $74 = $ref$i4;
   $75 = HEAP16[$74>>1]|0;
   $count$i5 = $75;
   $76 = $count$i5;
   $77 = $76&65535;
   $78 = ($77|0)!=(0);
   if ($78) {
    $79 = $count$i5;
    $80 = (($79) + -1)<<16>>16;
    $count$i5 = $80;
    $81 = $count$i5;
    $82 = $ref$i4;
    HEAP16[$82>>1] = $81;
    $83 = $count$i5;
    $84 = $83&65535;
    $85 = ($84|0)==(0);
    if ($85) {
     $86 = $1;
     _mu_destroy($86);
    }
   }
  }
  $$expand_i1_val4 = 1;
  HEAP8[$8>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$8>>0]|0;
  $111 = $$pre_trunc&1;
  STACKTOP = sp;return ($111|0);
 } else {
  $87 = $11;
  $88 = HEAP32[$87>>2]|0;
  $3 = $88;
  $89 = $3;
  $2 = $89;
  $90 = $2;
  $91 = $90;
  $92 = 6 & $91;
  $93 = ($92|0)!=(0);
  if ($93) {
   $94 = $3;
   $95 = $94;
   $96 = -8 & $95;
   $97 = $96;
   $ref$i1 = $97;
   $98 = $ref$i1;
   $99 = HEAP16[$98>>1]|0;
   $count$i2 = $99;
   $100 = $count$i2;
   $101 = $100&65535;
   $102 = ($101|0)!=(0);
   if ($102) {
    $103 = $count$i2;
    $104 = (($103) + -1)<<16>>16;
    $count$i2 = $104;
    $105 = $count$i2;
    $106 = $ref$i1;
    HEAP16[$106>>1] = $105;
    $107 = $count$i2;
    $108 = $107&65535;
    $109 = ($108|0)==(0);
    if ($109) {
     $110 = $3;
     _mu_destroy($110);
    }
   }
  }
  $$expand_i1_val6 = 0;
  HEAP8[$8>>0] = $$expand_i1_val6;
  $$pre_trunc = HEAP8[$8>>0]|0;
  $111 = $$pre_trunc&1;
  STACKTOP = sp;return ($111|0);
 }
 return (0)|0;
}
function _mu_fn_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1349]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1456)|0);
  HEAP32[1349] = $2;
 }
 $3 = HEAP32[1349]|0;
 return ($3|0);
}
function _mu_fn_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1464) + 7)|0))|0);
}
function _mu_fn_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $count$i2 = 0, $m = 0;
 var $ref$i = 0, $ref$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $frame;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $3 = $6;
 $7 = $3;
 $2 = $7;
 $8 = $2;
 $9 = $8;
 $10 = 6 & $9;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $3;
  $13 = $12;
  $14 = -8 & $13;
  $15 = $14;
  $ref$i = $15;
  $16 = $ref$i;
  $17 = HEAP16[$16>>1]|0;
  $count$i = $17;
  $18 = $count$i;
  $19 = $18&65535;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $count$i;
   $22 = (($21) + 1)<<16>>16;
   $count$i = $22;
   $23 = $count$i;
   $24 = $ref$i;
   HEAP16[$24>>1] = $23;
  }
 }
 $25 = $3;
 $26 = (_mu_fn_frommu($25)|0);
 $m = $26;
 $27 = $m;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  $29 = (_mu_fn_key_def()|0);
  $30 = $4;
  _mu_errorargs($29,1,$30);
  // unreachable;
 }
 $31 = $4;
 $32 = HEAP32[$31>>2]|0;
 $1 = $32;
 $33 = $1;
 $0 = $33;
 $34 = $0;
 $35 = $34;
 $36 = 6 & $35;
 $37 = ($36|0)!=(0);
 if (!($37)) {
  $55 = $m;
  $56 = $4;
  HEAP32[$56>>2] = $55;
  STACKTOP = sp;return 1;
 }
 $38 = $1;
 $39 = $38;
 $40 = -8 & $39;
 $41 = $40;
 $ref$i1 = $41;
 $42 = $ref$i1;
 $43 = HEAP16[$42>>1]|0;
 $count$i2 = $43;
 $44 = $count$i2;
 $45 = $44&65535;
 $46 = ($45|0)!=(0);
 if (!($46)) {
  $55 = $m;
  $56 = $4;
  HEAP32[$56>>2] = $55;
  STACKTOP = sp;return 1;
 }
 $47 = $count$i2;
 $48 = (($47) + -1)<<16>>16;
 $count$i2 = $48;
 $49 = $count$i2;
 $50 = $ref$i1;
 HEAP16[$50>>1] = $49;
 $51 = $count$i2;
 $52 = $51&65535;
 $53 = ($52|0)==(0);
 if (!($53)) {
  $55 = $m;
  $56 = $4;
  HEAP32[$56>>2] = $55;
  STACKTOP = sp;return 1;
 }
 $54 = $1;
 _mu_destroy($54);
 $55 = $m;
 $56 = $4;
 HEAP32[$56>>2] = $55;
 STACKTOP = sp;return 1;
}
function _mu_fn_bind($f,$g) {
 $f = $f|0;
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 8|0;
 $2 = $f;
 $3 = $g;
 $5 = $2;
 $1 = $5;
 $6 = $1;
 $0 = $6;
 $7 = $0;
 $8 = $7;
 $9 = 6 & $8;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $1;
  $12 = $11;
  $13 = -8 & $12;
  $14 = $13;
  $ref$i = $14;
  $15 = $ref$i;
  $16 = HEAP16[$15>>1]|0;
  $count$i = $16;
  $17 = $count$i;
  $18 = $17&65535;
  $19 = ($18|0)!=(0);
  if ($19) {
   $20 = $count$i;
   $21 = (($20) + 1)<<16>>16;
   $count$i = $21;
   $22 = $count$i;
   $23 = $ref$i;
   HEAP16[$23>>1] = $22;
  }
 }
 $24 = $1;
 HEAP32[$4>>2] = $24;
 $25 = ((($4)) + 4|0);
 $26 = $3;
 HEAP32[$25>>2] = $26;
 $27 = (_mu_tbl_fromlist($4,2)|0);
 $28 = (_mu_fn_fromsbfn(15,308,$27)|0);
 STACKTOP = sp;return ($28|0);
}
function _mu_fn_bound($scope,$frame) {
 $scope = $scope|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $args = 0, $f = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 24|0;
 $3 = sp + 16|0;
 $4 = $scope;
 $5 = $frame;
 $6 = $4;
 $2 = 0;
 $7 = $2;
 $8 = (+($7>>>0));
 HEAPF32[$3>>2] = $8;
 $9 = HEAP32[$3>>2]|0;
 $10 = -8 & $9;
 $11 = (1 + ($10))|0;
 $12 = $11;
 $13 = (_mu_tbl_lookup($6,$12)|0);
 $f = $13;
 $14 = $4;
 $0 = 1;
 $15 = $0;
 $16 = (+($15>>>0));
 HEAPF32[$1>>2] = $16;
 $17 = HEAP32[$1>>2]|0;
 $18 = -8 & $17;
 $19 = (1 + ($18))|0;
 $20 = $19;
 $21 = (_mu_tbl_lookup($14,$20)|0);
 $args = $21;
 $22 = $args;
 $23 = $5;
 $24 = HEAP32[$23>>2]|0;
 $25 = (_mu_tbl_concat($22,$24,0)|0);
 $26 = $5;
 HEAP32[$26>>2] = $25;
 $27 = $f;
 $28 = $5;
 $29 = (_mu_fn_tcall($27,15,$28)|0);
 STACKTOP = sp;return ($29|0);
}
function _mu_bind_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1350]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1480)|0);
  HEAP32[1350] = $2;
 }
 $3 = HEAP32[1350]|0;
 return ($3|0);
}
function _mu_bind_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1488) + 7)|0))|0);
}
function _mu_bind_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $f = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $4 = $frame;
 $6 = $4;
 $7 = HEAP32[$6>>2]|0;
 $8 = (_mu_tbl_pop($7,0)|0);
 $f = $8;
 $9 = $f;
 $3 = $9;
 $10 = $3;
 $2 = $10;
 $11 = $2;
 $12 = $11;
 $13 = 7 & $12;
 $14 = ($13|0)==(7);
 if (!($14)) {
  $15 = (_mu_bind_key_def()|0);
  $16 = $f;
  HEAP32[$5>>2] = $16;
  $17 = ((($5)) + 4|0);
  $18 = $4;
  $19 = HEAP32[$18>>2]|0;
  HEAP32[$17>>2] = $19;
  _mu_errorargs($15,2,$5);
  // unreachable;
 }
 $20 = $f;
 $21 = $4;
 $22 = HEAP32[$21>>2]|0;
 $23 = (_mu_fn_bind($20,$22)|0);
 $24 = $4;
 HEAP32[$24>>2] = $23;
 $25 = $f;
 $1 = $25;
 $26 = $1;
 $0 = $26;
 $27 = $0;
 $28 = $27;
 $29 = 6 & $28;
 $30 = ($29|0)!=(0);
 if (!($30)) {
  STACKTOP = sp;return 1;
 }
 $31 = $1;
 $32 = $31;
 $33 = -8 & $32;
 $34 = $33;
 $ref$i = $34;
 $35 = $ref$i;
 $36 = HEAP16[$35>>1]|0;
 $count$i = $36;
 $37 = $count$i;
 $38 = $37&65535;
 $39 = ($38|0)!=(0);
 if (!($39)) {
  STACKTOP = sp;return 1;
 }
 $40 = $count$i;
 $41 = (($40) + -1)<<16>>16;
 $count$i = $41;
 $42 = $count$i;
 $43 = $ref$i;
 HEAP16[$43>>1] = $42;
 $44 = $count$i;
 $45 = $44&65535;
 $46 = ($45|0)==(0);
 if (!($46)) {
  STACKTOP = sp;return 1;
 }
 $47 = $1;
 _mu_destroy($47);
 STACKTOP = sp;return 1;
}
function _mu_fn_comp($f,$g) {
 $f = $f|0;
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 8|0;
 $2 = $f;
 $3 = $g;
 $5 = $2;
 $1 = $5;
 $6 = $1;
 $0 = $6;
 $7 = $0;
 $8 = $7;
 $9 = 6 & $8;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $1;
  $12 = $11;
  $13 = -8 & $12;
  $14 = $13;
  $ref$i = $14;
  $15 = $ref$i;
  $16 = HEAP16[$15>>1]|0;
  $count$i = $16;
  $17 = $count$i;
  $18 = $17&65535;
  $19 = ($18|0)!=(0);
  if ($19) {
   $20 = $count$i;
   $21 = (($20) + 1)<<16>>16;
   $count$i = $21;
   $22 = $count$i;
   $23 = $ref$i;
   HEAP16[$23>>1] = $22;
  }
 }
 $24 = $1;
 HEAP32[$4>>2] = $24;
 $25 = ((($4)) + 4|0);
 $26 = $3;
 HEAP32[$25>>2] = $26;
 $27 = (_mu_tbl_fromlist($4,2)|0);
 $28 = (_mu_fn_fromsbfn(15,309,$27)|0);
 STACKTOP = sp;return ($28|0);
}
function _mu_fn_composed($fs,$frame) {
 $fs = $fs|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $f = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 20|0;
 $3 = $fs;
 $4 = $frame;
 $c = 15;
 $5 = $3;
 $2 = $5;
 $6 = $2;
 $7 = $6;
 $8 = $7 & -8;
 $9 = $8;
 $10 = ((($9)) + 2|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = (($12) - 1)|0;
 $i = $13;
 while(1) {
  $14 = $i;
  $15 = (($14) + 1)|0;
  $16 = ($15>>>0)>(0);
  if (!($16)) {
   break;
  }
  $17 = $3;
  $18 = $i;
  $0 = $18;
  $19 = $0;
  $20 = (+($19>>>0));
  HEAPF32[$1>>2] = $20;
  $21 = HEAP32[$1>>2]|0;
  $22 = -8 & $21;
  $23 = (1 + ($22))|0;
  $24 = $23;
  $25 = (_mu_tbl_lookup($17,$24)|0);
  $f = $25;
  $26 = $f;
  $27 = $c;
  $28 = $4;
  $29 = (_mu_fn_tcall($26,$27,$28)|0);
  $c = $29;
  $30 = $i;
  $31 = (($30) + -1)|0;
  $i = $31;
 }
 $32 = $c;
 STACKTOP = sp;return ($32|0);
}
function _mu_comp_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1351]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1504)|0);
  HEAP32[1351] = $2;
 }
 $3 = HEAP32[1351]|0;
 return ($3|0);
}
function _mu_comp_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1512) + 7)|0))|0);
}
function _mu_comp_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $f = 0, $g = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $frame;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $f = $8;
 $9 = $6;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $g = $11;
 $12 = $f;
 $5 = $12;
 $13 = $5;
 $4 = $13;
 $14 = $4;
 $15 = $14;
 $16 = 7 & $15;
 $17 = ($16|0)==(7);
 if (!($17)) {
  $24 = (_mu_comp_key_def()|0);
  $25 = $6;
  _mu_errorargs($24,15,$25);
  // unreachable;
 }
 $18 = $g;
 $1 = $18;
 $19 = $1;
 $0 = $19;
 $20 = $0;
 $21 = $20;
 $22 = 7 & $21;
 $23 = ($22|0)==(7);
 if (!($23)) {
  $24 = (_mu_comp_key_def()|0);
  $25 = $6;
  _mu_errorargs($24,15,$25);
  // unreachable;
 }
 $26 = $f;
 $27 = $g;
 $28 = (_mu_fn_comp($26,$27)|0);
 $29 = $6;
 HEAP32[$29>>2] = $28;
 $30 = $f;
 $3 = $30;
 $31 = $3;
 $2 = $31;
 $32 = $2;
 $33 = $32;
 $34 = 6 & $33;
 $35 = ($34|0)!=(0);
 if (!($35)) {
  STACKTOP = sp;return 1;
 }
 $36 = $3;
 $37 = $36;
 $38 = -8 & $37;
 $39 = $38;
 $ref$i = $39;
 $40 = $ref$i;
 $41 = HEAP16[$40>>1]|0;
 $count$i = $41;
 $42 = $count$i;
 $43 = $42&65535;
 $44 = ($43|0)!=(0);
 if (!($44)) {
  STACKTOP = sp;return 1;
 }
 $45 = $count$i;
 $46 = (($45) + -1)<<16>>16;
 $count$i = $46;
 $47 = $count$i;
 $48 = $ref$i;
 HEAP16[$48>>1] = $47;
 $49 = $count$i;
 $50 = $49&65535;
 $51 = ($50|0)==(0);
 if (!($51)) {
  STACKTOP = sp;return 1;
 }
 $52 = $3;
 _mu_destroy($52);
 STACKTOP = sp;return 1;
}
function _mu_tbl_create($len) {
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $len;
 $1 = (_mu_alloc(16)|0);
 $t = $1;
 $2 = $t;
 HEAP16[$2>>1] = 1;
 $3 = $0;
 $4 = $3&65535;
 $5 = (_mu_tbl_listnpw2($4)|0);
 $6 = $t;
 $7 = ((($6)) + 6|0);
 HEAP8[$7>>0] = $5;
 $8 = $t;
 $9 = ((($8)) + 7|0);
 HEAP8[$9>>0] = 0;
 $10 = $t;
 $11 = ((($10)) + 2|0);
 HEAP16[$11>>1] = 0;
 $12 = $t;
 $13 = ((($12)) + 4|0);
 HEAP16[$13>>1] = 0;
 $14 = $t;
 $15 = ((($14)) + 8|0);
 HEAP32[$15>>2] = 0;
 $16 = $t;
 $17 = ((($16)) + 6|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = 1 << $19;
 $size = $20;
 $21 = $size;
 $22 = $21<<2;
 $23 = (_mu_alloc($22)|0);
 $24 = $t;
 $25 = ((($24)) + 12|0);
 HEAP32[$25>>2] = $23;
 $26 = $t;
 $27 = ((($26)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $size;
 $30 = $29<<2;
 _memset(($28|0),0,($30|0))|0;
 $31 = $t;
 $32 = $31;
 $33 = (($32) + 4)|0;
 $34 = $33;
 STACKTOP = sp;return ($34|0);
}
function _mu_tbl_listnpw2($len) {
 $len = $len|0;
 var $$len = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $len;
 $1 = $0;
 $2 = $1&65535;
 $3 = ($2>>>0)<(4);
 $$len = $3 ? 4 : $len;
 $0 = $$len;
 $4 = $0;
 $5 = $4&65535;
 $6 = (($5) - 1)|0;
 $7 = (Math_clz32(($6|0))|0);
 $8 = (32 - ($7))|0;
 $9 = $8&255;
 STACKTOP = sp;return ($9|0);
}
function _mu_tbl_createtail($len,$tail) {
 $len = $len|0;
 $tail = $tail|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $len;
 $1 = $tail;
 $2 = $0;
 $3 = (_mu_tbl_create($2)|0);
 $t = $3;
 $4 = $t;
 $5 = $1;
 _mu_tbl_settail($4,$5);
 $6 = $t;
 STACKTOP = sp;return ($6|0);
}
function _mu_tbl_settail($t,$tail) {
 $t = $t|0;
 $tail = $tail|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $b = 0, $buf$i = 0, $count$i = 0, $count$i$i = 0, $ref$i = 0, $ref$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = $t;
 $10 = $tail;
 $11 = $9;
 $8 = $11;
 $12 = $8;
 $13 = $12;
 $14 = 1 & $13;
 $15 = ($14|0)!=(0);
 if ($15) {
  _mu_errorro(3925);
  // unreachable;
 }
 $16 = $10;
 $4 = $16;
 $17 = $4;
 $18 = $17;
 $19 = 3 & $18;
 $20 = ($19|0)==(2);
 if ($20) {
  $21 = $10;
  $b = $21;
  $22 = $b;
  $3 = $22;
  $23 = $3;
  $24 = $23;
  $25 = 4 & $24;
  $26 = ($25|0)!=(0);
  if ($26) {
   $27 = $3;
   $28 = $27;
   $29 = (($28) - 6)|0;
   $30 = $29;
   $buf$i = $30;
   $31 = $buf$i;
   $32 = ((($31)) + 4|0);
   $33 = $buf$i;
   $34 = ((($33)) + 2|0);
   $35 = HEAP16[$34>>1]|0;
   $36 = $35&65535;
   $37 = (($36) + 4)|0;
   $38 = (($37) - 1)|0;
   $39 = $38 & -4;
   $40 = (($32) + ($39)|0);
   $41 = ((($40)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $1 = $42;
   $43 = $1;
   $0 = $43;
   $44 = $0;
   $45 = $44;
   $46 = 6 & $45;
   $47 = ($46|0)!=(0);
   if ($47) {
    $48 = $1;
    $49 = $48;
    $50 = -8 & $49;
    $51 = $50;
    $ref$i$i = $51;
    $52 = $ref$i$i;
    $53 = HEAP16[$52>>1]|0;
    $count$i$i = $53;
    $54 = $count$i$i;
    $55 = $54&65535;
    $56 = ($55|0)!=(0);
    if ($56) {
     $57 = $count$i$i;
     $58 = (($57) + 1)<<16>>16;
     $count$i$i = $58;
     $59 = $count$i$i;
     $60 = $ref$i$i;
     HEAP16[$60>>1] = $59;
    }
   }
   $61 = $1;
   $2 = $61;
  } else {
   $2 = 0;
  }
  $62 = $2;
  $10 = $62;
  $63 = $b;
  $6 = $63;
  $64 = $6;
  $5 = $64;
  $65 = $5;
  $66 = $65;
  $67 = 6 & $66;
  $68 = ($67|0)!=(0);
  if ($68) {
   $69 = $6;
   $70 = $69;
   $71 = -8 & $70;
   $72 = $71;
   $ref$i = $72;
   $73 = $ref$i;
   $74 = HEAP16[$73>>1]|0;
   $count$i = $74;
   $75 = $count$i;
   $76 = $75&65535;
   $77 = ($76|0)!=(0);
   if ($77) {
    $78 = $count$i;
    $79 = (($78) + -1)<<16>>16;
    $count$i = $79;
    $80 = $count$i;
    $81 = $ref$i;
    HEAP16[$81>>1] = $80;
    $82 = $count$i;
    $83 = $82&65535;
    $84 = ($83|0)==(0);
    if ($84) {
     $85 = $6;
     _mu_destroy($85);
    }
   }
  }
 }
 $86 = $10;
 $87 = $9;
 $7 = $87;
 $88 = $7;
 $89 = $88;
 $90 = $89 & -8;
 $91 = $90;
 $92 = ((($91)) + 8|0);
 HEAP32[$92>>2] = $86;
 STACKTOP = sp;return;
}
function _mu_tbl_destroy($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$i = 0, $count$i2 = 0, $i = 0, $len = 0, $psize$i = 0, $ref$i = 0, $ref$i1 = 0, $size = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = $t;
 $24 = $23;
 $22 = $24;
 $25 = $22;
 $21 = $25;
 $26 = $21;
 $27 = $26;
 $28 = $27 & -8;
 $29 = $28;
 $30 = ((($29)) + 7|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = ($32|0)==(0);
 $34 = $33 ? 1 : 2;
 $35 = $23;
 $17 = $35;
 $psize$i = 8;
 $36 = $17;
 $16 = $36;
 $37 = $16;
 $38 = $37;
 $39 = $38 & -8;
 $40 = $39;
 $41 = ((($40)) + 7|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = $17;
 $15 = $44;
 $45 = $15;
 $14 = $45;
 $46 = $14;
 $47 = $46;
 $48 = $47 & -8;
 $49 = $48;
 $50 = ((($49)) + 6|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = $51&255;
 $53 = 1 << $52;
 $54 = Math_imul($43, $53)|0;
 $55 = (($54) + 8)|0;
 $56 = (($55) - 1)|0;
 $57 = (($56>>>0) / 8)&-1;
 $58 = Math_imul($34, $57)|0;
 $i = $58;
 $59 = $23;
 $9 = $59;
 $60 = $9;
 $8 = $60;
 $61 = $8;
 $62 = $61;
 $63 = $62 & -8;
 $64 = $63;
 $65 = ((($64)) + 7|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = $66&255;
 $68 = ($67|0)==(0);
 $69 = $68 ? 1 : 2;
 $70 = $23;
 $2 = $70;
 $71 = $2;
 $1 = $71;
 $72 = $1;
 $73 = $72;
 $74 = $73 & -8;
 $75 = $74;
 $76 = ((($75)) + 2|0);
 $77 = HEAP16[$76>>1]|0;
 $78 = $77&65535;
 $79 = $2;
 $0 = $79;
 $80 = $0;
 $81 = $80;
 $82 = $81 & -8;
 $83 = $82;
 $84 = ((($83)) + 4|0);
 $85 = HEAP16[$84>>1]|0;
 $86 = $85&65535;
 $87 = (($78) + ($86))|0;
 $88 = Math_imul($69, $87)|0;
 $len = $88;
 $89 = $23;
 $4 = $89;
 $90 = $4;
 $3 = $90;
 $91 = $3;
 $92 = $91;
 $93 = $92 & -8;
 $94 = $93;
 $95 = ((($94)) + 7|0);
 $96 = HEAP8[$95>>0]|0;
 $97 = $96&255;
 $98 = ($97|0)==(0);
 $99 = $98 ? 1 : 2;
 $100 = $23;
 $6 = $100;
 $101 = $6;
 $5 = $101;
 $102 = $5;
 $103 = $102;
 $104 = $103 & -8;
 $105 = $104;
 $106 = ((($105)) + 6|0);
 $107 = HEAP8[$106>>0]|0;
 $108 = $107&255;
 $109 = 1 << $108;
 $110 = Math_imul($99, $109)|0;
 $size = $110;
 while(1) {
  $111 = $i;
  $112 = $len;
  $113 = ($111>>>0)<($112>>>0);
  if (!($113)) {
   break;
  }
  $114 = $i;
  $115 = $23;
  $7 = $115;
  $116 = $7;
  $117 = $116;
  $118 = $117 & -8;
  $119 = $118;
  $120 = ((($119)) + 12|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = (($121) + ($114<<2)|0);
  $123 = HEAP32[$122>>2]|0;
  $11 = $123;
  $124 = $11;
  $10 = $124;
  $125 = $10;
  $126 = $125;
  $127 = 6 & $126;
  $128 = ($127|0)!=(0);
  if ($128) {
   $129 = $11;
   $130 = $129;
   $131 = -8 & $130;
   $132 = $131;
   $ref$i1 = $132;
   $133 = $ref$i1;
   $134 = HEAP16[$133>>1]|0;
   $count$i2 = $134;
   $135 = $count$i2;
   $136 = $135&65535;
   $137 = ($136|0)!=(0);
   if ($137) {
    $138 = $count$i2;
    $139 = (($138) + -1)<<16>>16;
    $count$i2 = $139;
    $140 = $count$i2;
    $141 = $ref$i1;
    HEAP16[$141>>1] = $140;
    $142 = $count$i2;
    $143 = $142&65535;
    $144 = ($143|0)==(0);
    if ($144) {
     $145 = $11;
     _mu_destroy($145);
    }
   }
  }
  $146 = $i;
  $147 = (($146) + 1)|0;
  $i = $147;
 }
 $148 = $23;
 $12 = $148;
 $149 = $12;
 $150 = $149;
 $151 = $150 & -8;
 $152 = $151;
 $153 = ((($152)) + 12|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = $size;
 $156 = $155<<2;
 _mu_dealloc($154,$156);
 $157 = $23;
 $13 = $157;
 $158 = $13;
 $159 = $158;
 $160 = $159 & -8;
 $161 = $160;
 $162 = ((($161)) + 8|0);
 $163 = HEAP32[$162>>2]|0;
 $19 = $163;
 $164 = $19;
 $18 = $164;
 $165 = $18;
 $166 = $165;
 $167 = 6 & $166;
 $168 = ($167|0)!=(0);
 if (!($168)) {
  $186 = $23;
  $20 = $186;
  $187 = $20;
  $188 = $187;
  $189 = $188 & -8;
  $190 = $189;
  _mu_dealloc($190,16);
  STACKTOP = sp;return;
 }
 $169 = $19;
 $170 = $169;
 $171 = -8 & $170;
 $172 = $171;
 $ref$i = $172;
 $173 = $ref$i;
 $174 = HEAP16[$173>>1]|0;
 $count$i = $174;
 $175 = $count$i;
 $176 = $175&65535;
 $177 = ($176|0)!=(0);
 if (!($177)) {
  $186 = $23;
  $20 = $186;
  $187 = $20;
  $188 = $187;
  $189 = $188 & -8;
  $190 = $189;
  _mu_dealloc($190,16);
  STACKTOP = sp;return;
 }
 $178 = $count$i;
 $179 = (($178) + -1)<<16>>16;
 $count$i = $179;
 $180 = $count$i;
 $181 = $ref$i;
 HEAP16[$181>>1] = $180;
 $182 = $count$i;
 $183 = $182&65535;
 $184 = ($183|0)==(0);
 if (!($184)) {
  $186 = $23;
  $20 = $186;
  $187 = $20;
  $188 = $187;
  $189 = $188 & -8;
  $190 = $189;
  _mu_dealloc($190,16);
  STACKTOP = sp;return;
 }
 $185 = $19;
 _mu_destroy($185);
 $186 = $23;
 $20 = $186;
 $187 = $20;
 $188 = $187;
 $189 = $188 & -8;
 $190 = $189;
 _mu_dealloc($190,16);
 STACKTOP = sp;return;
}
function _mu_tbl_lookup($t,$k) {
 $t = $t|0;
 $k = $k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $count$i = 0, $count$i3 = 0, $count$i5 = 0, $count$i8 = 0, $i = 0, $i1 = 0, $mask = 0, $p = 0, $ref$i = 0, $ref$i2 = 0, $ref$i4 = 0, $ref$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = sp + 120|0;
 $9 = sp + 112|0;
 $22 = $t;
 $23 = $k;
 $24 = $23;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  $21 = 0;
  $200 = $21;
  STACKTOP = sp;return ($200|0);
 }
 L4: while(1) {
  $26 = $22;
  $27 = ($26|0)!=(0|0);
  if (!($27)) {
   label = 24;
   break;
  }
  $28 = $22;
  $20 = $28;
  $29 = $20;
  $30 = $29;
  $31 = $30 & -8;
  $32 = $31;
  $33 = ((($32)) + 6|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = 1 << $35;
  $37 = (($36) - 1)|0;
  $mask = $37;
  $38 = $22;
  $17 = $38;
  $39 = $17;
  $16 = $39;
  $40 = $16;
  $41 = $40;
  $42 = $41 & -8;
  $43 = $42;
  $44 = ((($43)) + 7|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = ($46|0)==(0);
  L7: do {
   if ($47) {
    $48 = $23;
    $10 = $48;
    $49 = $10;
    $8 = $49;
    $50 = $8;
    $51 = $50;
    $52 = (($51) - 1)|0;
    HEAP32[$9>>2] = $52;
    $53 = +HEAPF32[$9>>2];
    $54 = (~~(($53))>>>0);
    $55 = $mask;
    $56 = $54 & $55;
    $i = $56;
    $57 = $23;
    $58 = $i;
    $6 = $58;
    $59 = $6;
    $60 = (+($59>>>0));
    HEAPF32[$7>>2] = $60;
    $61 = HEAP32[$7>>2]|0;
    $62 = -8 & $61;
    $63 = (1 + ($62))|0;
    $64 = $63;
    $65 = ($57|0)==($64|0);
    if ($65) {
     label = 6;
     break L4;
    }
   } else {
    $95 = $22;
    $96 = $23;
    $4 = $95;
    $5 = $96;
    $97 = $5;
    $98 = $97;
    $99 = Math_imul($98, -1640531535)|0;
    $100 = $4;
    $3 = $100;
    $101 = $3;
    $102 = $101;
    $103 = $102 & -8;
    $104 = $103;
    $105 = ((($104)) + 6|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = $106&255;
    $108 = (32 - ($107))|0;
    $109 = $99 >>> $108;
    $i1 = $109;
    while(1) {
     $110 = $22;
     $111 = $i1;
     $112 = $mask;
     $113 = $111 & $112;
     $114 = (_mu_tbl_getpair($110,$113)|0);
     $p = $114;
     $115 = $p;
     $116 = ($115|0)!=(0|0);
     if ($116) {
      $117 = $p;
      $118 = HEAP32[$117>>2]|0;
      $119 = $23;
      $120 = ($118|0)==($119|0);
      if ($120) {
       label = 13;
       break L4;
      }
     }
     $166 = $p;
     $167 = ($166|0)!=(0|0);
     if (!($167)) {
      break L7;
     }
     $168 = $i1;
     $169 = (($168) + 1)|0;
     $i1 = $169;
    }
   }
  } while(0);
  $170 = $22;
  $15 = $170;
  $171 = $15;
  $172 = $171;
  $173 = $172 & -8;
  $174 = $173;
  $175 = ((($174)) + 8|0);
  $176 = HEAP32[$175>>2]|0;
  $22 = $176;
 }
 if ((label|0) == 6) {
  $66 = $i;
  $67 = $22;
  $0 = $67;
  $68 = $0;
  $69 = $68;
  $70 = $69 & -8;
  $71 = $70;
  $72 = ((($71)) + 12|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) + ($66<<2)|0);
  $75 = HEAP32[$74>>2]|0;
  $2 = $75;
  $76 = $2;
  $1 = $76;
  $77 = $1;
  $78 = $77;
  $79 = 6 & $78;
  $80 = ($79|0)!=(0);
  if ($80) {
   $81 = $2;
   $82 = $81;
   $83 = -8 & $82;
   $84 = $83;
   $ref$i7 = $84;
   $85 = $ref$i7;
   $86 = HEAP16[$85>>1]|0;
   $count$i8 = $86;
   $87 = $count$i8;
   $88 = $87&65535;
   $89 = ($88|0)!=(0);
   if ($89) {
    $90 = $count$i8;
    $91 = (($90) + 1)<<16>>16;
    $count$i8 = $91;
    $92 = $count$i8;
    $93 = $ref$i7;
    HEAP16[$93>>1] = $92;
   }
  }
  $94 = $2;
  $21 = $94;
  $200 = $21;
  STACKTOP = sp;return ($200|0);
 }
 else if ((label|0) == 13) {
  $121 = $23;
  $12 = $121;
  $122 = $12;
  $11 = $122;
  $123 = $11;
  $124 = $123;
  $125 = 6 & $124;
  $126 = ($125|0)!=(0);
  if ($126) {
   $127 = $12;
   $128 = $127;
   $129 = -8 & $128;
   $130 = $129;
   $ref$i4 = $130;
   $131 = $ref$i4;
   $132 = HEAP16[$131>>1]|0;
   $count$i5 = $132;
   $133 = $count$i5;
   $134 = $133&65535;
   $135 = ($134|0)!=(0);
   if ($135) {
    $136 = $count$i5;
    $137 = (($136) + -1)<<16>>16;
    $count$i5 = $137;
    $138 = $count$i5;
    $139 = $ref$i4;
    HEAP16[$139>>1] = $138;
    $140 = $count$i5;
    $141 = $140&65535;
    $142 = ($141|0)==(0);
    if ($142) {
     $143 = $12;
     _mu_destroy($143);
    }
   }
  }
  $144 = $p;
  $145 = ((($144)) + 4|0);
  $146 = HEAP32[$145>>2]|0;
  $14 = $146;
  $147 = $14;
  $13 = $147;
  $148 = $13;
  $149 = $148;
  $150 = 6 & $149;
  $151 = ($150|0)!=(0);
  if ($151) {
   $152 = $14;
   $153 = $152;
   $154 = -8 & $153;
   $155 = $154;
   $ref$i2 = $155;
   $156 = $ref$i2;
   $157 = HEAP16[$156>>1]|0;
   $count$i3 = $157;
   $158 = $count$i3;
   $159 = $158&65535;
   $160 = ($159|0)!=(0);
   if ($160) {
    $161 = $count$i3;
    $162 = (($161) + 1)<<16>>16;
    $count$i3 = $162;
    $163 = $count$i3;
    $164 = $ref$i2;
    HEAP16[$164>>1] = $163;
   }
  }
  $165 = $14;
  $21 = $165;
  $200 = $21;
  STACKTOP = sp;return ($200|0);
 }
 else if ((label|0) == 24) {
  $177 = $23;
  $19 = $177;
  $178 = $19;
  $18 = $178;
  $179 = $18;
  $180 = $179;
  $181 = 6 & $180;
  $182 = ($181|0)!=(0);
  if ($182) {
   $183 = $19;
   $184 = $183;
   $185 = -8 & $184;
   $186 = $185;
   $ref$i = $186;
   $187 = $ref$i;
   $188 = HEAP16[$187>>1]|0;
   $count$i = $188;
   $189 = $count$i;
   $190 = $189&65535;
   $191 = ($190|0)!=(0);
   if ($191) {
    $192 = $count$i;
    $193 = (($192) + -1)<<16>>16;
    $count$i = $193;
    $194 = $count$i;
    $195 = $ref$i;
    HEAP16[$195>>1] = $194;
    $196 = $count$i;
    $197 = $196&65535;
    $198 = ($197|0)==(0);
    if ($198) {
     $199 = $19;
     _mu_destroy($199);
    }
   }
  }
  $21 = 0;
  $200 = $21;
  STACKTOP = sp;return ($200|0);
 }
 return (0)|0;
}
function _mu_tbl_getpair($t,$i) {
 $t = $t|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $off = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = $t;
 $10 = $i;
 $off = 0;
 $11 = $9;
 $8 = $11;
 $12 = $8;
 $13 = $12;
 $14 = $13 & -8;
 $15 = $14;
 $16 = ((($15)) + 7|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = ($18|0)==(1);
 do {
  if ($19) {
   $20 = $10;
   $21 = $9;
   $0 = $21;
   $22 = $0;
   $23 = $22;
   $24 = $23 & -8;
   $25 = $24;
   $26 = ((($25)) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + ($20)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&255;
   $off = $30;
  } else {
   $31 = $9;
   $1 = $31;
   $32 = $1;
   $33 = $32;
   $34 = $33 & -8;
   $35 = $34;
   $36 = ((($35)) + 7|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==(2);
   if ($39) {
    $40 = $10;
    $41 = $9;
    $2 = $41;
    $42 = $2;
    $43 = $42;
    $44 = $43 & -8;
    $45 = $44;
    $46 = ((($45)) + 12|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (($47) + ($40<<1)|0);
    $49 = HEAP16[$48>>1]|0;
    $50 = $49&65535;
    $off = $50;
    break;
   }
   $51 = $9;
   $3 = $51;
   $52 = $3;
   $53 = $52;
   $54 = $53 & -8;
   $55 = $54;
   $56 = ((($55)) + 7|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = ($58|0)==(4);
   if ($59) {
    $60 = $10;
    $61 = $9;
    $4 = $61;
    $62 = $4;
    $63 = $62;
    $64 = $63 & -8;
    $65 = $64;
    $66 = ((($65)) + 12|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (($67) + ($60<<2)|0);
    $69 = HEAP32[$68>>2]|0;
    $off = $69;
    break;
   }
   $70 = $9;
   $5 = $70;
   $71 = $5;
   $72 = $71;
   $73 = $72 & -8;
   $74 = $73;
   $75 = ((($74)) + 7|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = $76&255;
   $78 = ($77|0)==(8);
   if ($78) {
    $79 = $10;
    $80 = $9;
    $6 = $80;
    $81 = $6;
    $82 = $81;
    $83 = $82 & -8;
    $84 = $83;
    $85 = ((($84)) + 12|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (($86) + ($79<<3)|0);
    $88 = $87;
    $89 = $88;
    $90 = HEAP32[$89>>2]|0;
    $91 = (($88) + 4)|0;
    $92 = $91;
    $93 = HEAP32[$92>>2]|0;
    $off = $90;
   }
  }
 } while(0);
 $94 = $off;
 $95 = ($94|0)!=(0);
 if (!($95)) {
  $106 = 0;
  STACKTOP = sp;return ($106|0);
 }
 $96 = $off;
 $97 = $96<<1;
 $98 = $9;
 $7 = $98;
 $99 = $7;
 $100 = $99;
 $101 = $100 & -8;
 $102 = $101;
 $103 = ((($102)) + 12|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = (($104) + ($97<<2)|0);
 $106 = $105;
 STACKTOP = sp;return ($106|0);
}
function _mu_tbl_insert($t,$k,$v) {
 $t = $t|0;
 $k = $k|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0.0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $count$i = 0, $count$i11 = 0, $count$i5 = 0, $count$i8 = 0, $i = 0, $i1 = 0, $i2 = 0, $j = 0, $mask = 0, $oldv = 0, $oldv3 = 0, $or$cond = 0, $p = 0, $psize$i = 0, $ref$i = 0, $ref$i10 = 0, $ref$i4 = 0, $ref$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $35 = sp + 204|0;
 $37 = sp + 196|0;
 $43 = sp + 172|0;
 $56 = sp + 116|0;
 $58 = sp + 108|0;
 $67 = $t;
 $68 = $k;
 $69 = $v;
 $70 = $67;
 $65 = $70;
 $71 = $65;
 $72 = $71;
 $73 = 1 & $72;
 $74 = ($73|0)!=(0);
 if ($74) {
  _mu_errorro(3925);
  // unreachable;
 }
 $75 = $68;
 $76 = ($75|0)!=(0|0);
 if (!($76)) {
  $77 = $69;
  $64 = $77;
  $78 = $64;
  $63 = $78;
  $79 = $63;
  $80 = $79;
  $81 = 6 & $80;
  $82 = ($81|0)!=(0);
  if (!($82)) {
   STACKTOP = sp;return;
  }
  $83 = $64;
  $84 = $83;
  $85 = -8 & $84;
  $86 = $85;
  $ref$i = $86;
  $87 = $ref$i;
  $88 = HEAP16[$87>>1]|0;
  $count$i = $88;
  $89 = $count$i;
  $90 = $89&65535;
  $91 = ($90|0)!=(0);
  if (!($91)) {
   STACKTOP = sp;return;
  }
  $92 = $count$i;
  $93 = (($92) + -1)<<16>>16;
  $count$i = $93;
  $94 = $count$i;
  $95 = $ref$i;
  HEAP16[$95>>1] = $94;
  $96 = $count$i;
  $97 = $96&65535;
  $98 = ($97|0)==(0);
  if (!($98)) {
   STACKTOP = sp;return;
  }
  $99 = $64;
  _mu_destroy($99);
  STACKTOP = sp;return;
 }
 $100 = $67;
 $62 = $100;
 $101 = $62;
 $102 = $101;
 $103 = $102 & -8;
 $104 = $103;
 $105 = ((($104)) + 6|0);
 $106 = HEAP8[$105>>0]|0;
 $107 = $106&255;
 $108 = 1 << $107;
 $109 = (($108) - 1)|0;
 $mask = $109;
 $110 = $67;
 $61 = $110;
 $111 = $61;
 $60 = $111;
 $112 = $60;
 $113 = $112;
 $114 = $113 & -8;
 $115 = $114;
 $116 = ((($115)) + 7|0);
 $117 = HEAP8[$116>>0]|0;
 $118 = $117&255;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = $68;
  $59 = $120;
  $121 = $59;
  $57 = $121;
  $122 = $57;
  $123 = $122;
  $124 = (($123) - 1)|0;
  HEAP32[$58>>2] = $124;
  $125 = +HEAPF32[$58>>2];
  $126 = (~~(($125))>>>0);
  $127 = $mask;
  $128 = $126 & $127;
  $i = $128;
  $129 = $68;
  $130 = $i;
  $55 = $130;
  $131 = $55;
  $132 = (+($131>>>0));
  HEAPF32[$56>>2] = $132;
  $133 = HEAP32[$56>>2]|0;
  $134 = -8 & $133;
  $135 = (1 + ($134))|0;
  $136 = $135;
  $137 = ($129|0)==($136|0);
  if ($137) {
   $138 = $i;
   $139 = $67;
   $54 = $139;
   $140 = $54;
   $53 = $140;
   $141 = $53;
   $142 = $141;
   $143 = $142 & -8;
   $144 = $143;
   $145 = ((($144)) + 2|0);
   $146 = HEAP16[$145>>1]|0;
   $147 = $146&65535;
   $148 = $54;
   $52 = $148;
   $149 = $52;
   $150 = $149;
   $151 = $150 & -8;
   $152 = $151;
   $153 = ((($152)) + 4|0);
   $154 = HEAP16[$153>>1]|0;
   $155 = $154&65535;
   $156 = (($147) + ($155))|0;
   $157 = ($138>>>0)<($156>>>0);
   if ($157) {
    $158 = $i;
    $159 = $67;
    $51 = $159;
    $160 = $51;
    $161 = $160;
    $162 = $161 & -8;
    $163 = $162;
    $164 = ((($163)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = (($165) + ($158<<2)|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = ($167|0)!=(0|0);
    if ($168) {
     $169 = $i;
     $170 = $67;
     $50 = $170;
     $171 = $50;
     $172 = $171;
     $173 = $172 & -8;
     $174 = $173;
     $175 = ((($174)) + 12|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = (($176) + ($169<<2)|0);
     $178 = HEAP32[$177>>2]|0;
     $oldv = $178;
     $179 = $69;
     $180 = $i;
     $181 = $67;
     $49 = $181;
     $182 = $49;
     $183 = $182;
     $184 = $183 & -8;
     $185 = $184;
     $186 = ((($185)) + 12|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = (($187) + ($180<<2)|0);
     HEAP32[$188>>2] = $179;
     $189 = $69;
     $190 = ($189|0)!=(0|0);
     $191 = $190 ? 1 : 0;
     $192 = (($191) - 1)|0;
     $193 = $67;
     $48 = $193;
     $194 = $48;
     $195 = $194;
     $196 = $195 & -8;
     $197 = $196;
     $198 = ((($197)) + 2|0);
     $199 = HEAP16[$198>>1]|0;
     $200 = $199&65535;
     $201 = (($200) + ($192))|0;
     $202 = $201&65535;
     HEAP16[$198>>1] = $202;
     $203 = $69;
     $204 = ($203|0)!=(0|0);
     $205 = $204 ^ 1;
     $206 = $205 ? 1 : 0;
     $207 = $67;
     $47 = $207;
     $208 = $47;
     $209 = $208;
     $210 = $209 & -8;
     $211 = $210;
     $212 = ((($211)) + 4|0);
     $213 = HEAP16[$212>>1]|0;
     $214 = $213&65535;
     $215 = (($214) + ($206))|0;
     $216 = $215&65535;
     HEAP16[$212>>1] = $216;
     $217 = $oldv;
     $46 = $217;
     $218 = $46;
     $45 = $218;
     $219 = $45;
     $220 = $219;
     $221 = 6 & $220;
     $222 = ($221|0)!=(0);
     if (!($222)) {
      STACKTOP = sp;return;
     }
     $223 = $46;
     $224 = $223;
     $225 = -8 & $224;
     $226 = $225;
     $ref$i4 = $226;
     $227 = $ref$i4;
     $228 = HEAP16[$227>>1]|0;
     $count$i5 = $228;
     $229 = $count$i5;
     $230 = $229&65535;
     $231 = ($230|0)!=(0);
     if (!($231)) {
      STACKTOP = sp;return;
     }
     $232 = $count$i5;
     $233 = (($232) + -1)<<16>>16;
     $count$i5 = $233;
     $234 = $count$i5;
     $235 = $ref$i4;
     HEAP16[$235>>1] = $234;
     $236 = $count$i5;
     $237 = $236&65535;
     $238 = ($237|0)==(0);
     if (!($238)) {
      STACKTOP = sp;return;
     }
     $239 = $46;
     _mu_destroy($239);
     STACKTOP = sp;return;
    }
   }
  }
  $240 = $69;
  $241 = ($240|0)!=(0|0);
  if (!($241)) {
   STACKTOP = sp;return;
  }
  $242 = $67;
  $44 = $242;
  $243 = $44;
  $244 = $243;
  $245 = $244 & -8;
  $246 = $245;
  $247 = ((($246)) + 2|0);
  $248 = HEAP16[$247>>1]|0;
  $249 = $248&65535;
  $250 = (($249) + 1)|0;
  $251 = ($250>>>0)<=(65535);
  if (!($251)) {
   _mu_errorlen(3925);
   // unreachable;
  }
  $252 = $68;
  $253 = $i;
  $42 = $253;
  $254 = $42;
  $255 = (+($254>>>0));
  HEAPF32[$43>>2] = $255;
  $256 = HEAP32[$43>>2]|0;
  $257 = -8 & $256;
  $258 = (1 + ($257))|0;
  $259 = $258;
  $260 = ($252|0)==($259|0);
  if ($260) {
   $261 = $i;
   $262 = $67;
   $41 = $262;
   $263 = $41;
   $40 = $263;
   $264 = $40;
   $265 = $264;
   $266 = $265 & -8;
   $267 = $266;
   $268 = ((($267)) + 2|0);
   $269 = HEAP16[$268>>1]|0;
   $270 = $269&65535;
   $271 = $41;
   $39 = $271;
   $272 = $39;
   $273 = $272;
   $274 = $273 & -8;
   $275 = $274;
   $276 = ((($275)) + 4|0);
   $277 = HEAP16[$276>>1]|0;
   $278 = $277&65535;
   $279 = (($270) + ($278))|0;
   $280 = ($261>>>0)>=($279>>>0);
   if ($280) {
    $342 = $69;
    $343 = $i;
    $344 = $67;
    $26 = $344;
    $345 = $26;
    $346 = $345;
    $347 = $346 & -8;
    $348 = $347;
    $349 = ((($348)) + 12|0);
    $350 = HEAP32[$349>>2]|0;
    $351 = (($350) + ($343<<2)|0);
    HEAP32[$351>>2] = $342;
    $352 = $67;
    $25 = $352;
    $353 = $25;
    $354 = $353;
    $355 = $354 & -8;
    $356 = $355;
    $357 = ((($356)) + 2|0);
    $358 = HEAP16[$357>>1]|0;
    $359 = $358&65535;
    $360 = (($359) + 1)|0;
    $361 = $360&65535;
    HEAP16[$357>>1] = $361;
    $362 = $67;
    $24 = $362;
    $363 = $24;
    $364 = $363;
    $365 = $364 & -8;
    $366 = $365;
    $367 = ((($366)) + 2|0);
    $368 = HEAP16[$367>>1]|0;
    $369 = $368&65535;
    $370 = (($369) - 1)|0;
    $371 = $67;
    $23 = $371;
    $372 = $23;
    $373 = $372;
    $374 = $373 & -8;
    $375 = $374;
    $376 = ((($375)) + 12|0);
    $377 = HEAP32[$376>>2]|0;
    $378 = (($377) + ($370<<2)|0);
    $379 = $i;
    $380 = $67;
    $22 = $380;
    $381 = $22;
    $382 = $381;
    $383 = $382 & -8;
    $384 = $383;
    $385 = ((($384)) + 2|0);
    $386 = HEAP16[$385>>1]|0;
    $387 = $386&65535;
    $388 = (($387) - 1)|0;
    $389 = (($379) - ($388))|0;
    $390 = $389<<2;
    _memset(($378|0),0,($390|0))|0;
    $391 = $i;
    $392 = $67;
    $21 = $392;
    $393 = $21;
    $394 = $393;
    $395 = $394 & -8;
    $396 = $395;
    $397 = ((($396)) + 2|0);
    $398 = HEAP16[$397>>1]|0;
    $399 = $398&65535;
    $400 = (($399) - 1)|0;
    $401 = (($391) - ($400))|0;
    $402 = $67;
    $20 = $402;
    $403 = $20;
    $404 = $403;
    $405 = $404 & -8;
    $406 = $405;
    $407 = ((($406)) + 4|0);
    $408 = HEAP16[$407>>1]|0;
    $409 = $408&65535;
    $410 = (($409) + ($401))|0;
    $411 = $410&65535;
    HEAP16[$407>>1] = $411;
    STACKTOP = sp;return;
   }
  }
  $281 = $68;
  $38 = $281;
  $282 = $38;
  $36 = $282;
  $283 = $36;
  $284 = $283;
  $285 = (($284) - 1)|0;
  HEAP32[$37>>2] = $285;
  $286 = +HEAPF32[$37>>2];
  $287 = (~~(($286))>>>0);
  $288 = $mask;
  $289 = $288<<1;
  $290 = (($289) + 1)|0;
  $291 = $287 & $290;
  $i1 = $291;
  $292 = $68;
  $293 = $i1;
  $34 = $293;
  $294 = $34;
  $295 = (+($294>>>0));
  HEAPF32[$35>>2] = $295;
  $296 = HEAP32[$35>>2]|0;
  $297 = -8 & $296;
  $298 = (1 + ($297))|0;
  $299 = $298;
  $300 = ($292|0)==($299|0);
  if ($300) {
   $301 = $i1;
   $302 = $67;
   $33 = $302;
   $303 = $33;
   $32 = $303;
   $304 = $32;
   $305 = $304;
   $306 = $305 & -8;
   $307 = $306;
   $308 = ((($307)) + 2|0);
   $309 = HEAP16[$308>>1]|0;
   $310 = $309&65535;
   $311 = $33;
   $31 = $311;
   $312 = $31;
   $313 = $312;
   $314 = $313 & -8;
   $315 = $314;
   $316 = ((($315)) + 4|0);
   $317 = HEAP16[$316>>1]|0;
   $318 = $317&65535;
   $319 = (($310) + ($318))|0;
   $320 = ($301>>>0)>=($319>>>0);
   if ($320) {
    $321 = $67;
    $322 = $i1;
    $323 = (($322) + 1)|0;
    $324 = $323&65535;
    _mu_tbl_listexpand($321,$324);
    $325 = $67;
    $326 = $68;
    $327 = $69;
    _mu_tbl_insert($325,$326,$327);
    STACKTOP = sp;return;
   }
  }
  $328 = $67;
  $329 = $67;
  $29 = $329;
  $330 = $29;
  $331 = $330;
  $332 = $331 & -8;
  $333 = $332;
  $334 = ((($333)) + 2|0);
  $335 = HEAP16[$334>>1]|0;
  $336 = $335&65535;
  $337 = (($336) + 1)|0;
  $338 = $337&65535;
  _mu_tbl_pairsexpand($328,$338);
  $339 = $67;
  $340 = $68;
  $341 = $69;
  _mu_tbl_insert($339,$340,$341);
  STACKTOP = sp;return;
 }
 $412 = $67;
 $413 = $68;
 $18 = $412;
 $19 = $413;
 $414 = $19;
 $415 = $414;
 $416 = Math_imul($415, -1640531535)|0;
 $417 = $18;
 $17 = $417;
 $418 = $17;
 $419 = $418;
 $420 = $419 & -8;
 $421 = $420;
 $422 = ((($421)) + 6|0);
 $423 = HEAP8[$422>>0]|0;
 $424 = $423&255;
 $425 = (32 - ($424))|0;
 $426 = $416 >>> $425;
 $i2 = $426;
 while(1) {
  $427 = $67;
  $428 = $i2;
  $429 = $mask;
  $430 = $428 & $429;
  $431 = (_mu_tbl_getpair($427,$430)|0);
  $p = $431;
  $432 = $p;
  $433 = ($432|0)!=(0|0);
  if ($433) {
   $434 = $p;
   $435 = HEAP32[$434>>2]|0;
   $436 = $68;
   $437 = ($435|0)==($436|0);
   if ($437) {
    label = 29;
    break;
   }
  }
  $526 = $p;
  $527 = ($526|0)!=(0|0);
  $528 = $69;
  $529 = ($528|0)!=(0|0);
  $or$cond = $527 | $529;
  if (!($or$cond)) {
   label = 45;
   break;
  }
  $530 = $p;
  $531 = ($530|0)!=(0|0);
  if (!($531)) {
   label = 39;
   break;
  }
  $658 = $i2;
  $659 = (($658) + 1)|0;
  $i2 = $659;
 }
 if ((label|0) == 29) {
  $438 = $p;
  $439 = ((($438)) + 4|0);
  $440 = HEAP32[$439>>2]|0;
  $oldv3 = $440;
  $441 = $69;
  $442 = $p;
  $443 = ((($442)) + 4|0);
  HEAP32[$443>>2] = $441;
  $444 = $69;
  $445 = ($444|0)!=(0|0);
  $446 = $445 ? 1 : 0;
  $447 = $oldv3;
  $448 = ($447|0)!=(0|0);
  $449 = $448 ? 1 : 0;
  $450 = (($446) - ($449))|0;
  $451 = $67;
  $16 = $451;
  $452 = $16;
  $453 = $452;
  $454 = $453 & -8;
  $455 = $454;
  $456 = ((($455)) + 2|0);
  $457 = HEAP16[$456>>1]|0;
  $458 = $457&65535;
  $459 = (($458) + ($450))|0;
  $460 = $459&65535;
  HEAP16[$456>>1] = $460;
  $461 = $69;
  $462 = ($461|0)!=(0|0);
  $463 = $462 ^ 1;
  $464 = $463 ? 1 : 0;
  $465 = $oldv3;
  $466 = ($465|0)!=(0|0);
  $467 = $466 ^ 1;
  $468 = $467 ? 1 : 0;
  $469 = (($464) - ($468))|0;
  $470 = $67;
  $15 = $470;
  $471 = $15;
  $472 = $471;
  $473 = $472 & -8;
  $474 = $473;
  $475 = ((($474)) + 4|0);
  $476 = HEAP16[$475>>1]|0;
  $477 = $476&65535;
  $478 = (($477) + ($469))|0;
  $479 = $478&65535;
  HEAP16[$475>>1] = $479;
  $480 = $68;
  $14 = $480;
  $481 = $14;
  $13 = $481;
  $482 = $13;
  $483 = $482;
  $484 = 6 & $483;
  $485 = ($484|0)!=(0);
  if ($485) {
   $486 = $14;
   $487 = $486;
   $488 = -8 & $487;
   $489 = $488;
   $ref$i7 = $489;
   $490 = $ref$i7;
   $491 = HEAP16[$490>>1]|0;
   $count$i8 = $491;
   $492 = $count$i8;
   $493 = $492&65535;
   $494 = ($493|0)!=(0);
   if ($494) {
    $495 = $count$i8;
    $496 = (($495) + -1)<<16>>16;
    $count$i8 = $496;
    $497 = $count$i8;
    $498 = $ref$i7;
    HEAP16[$498>>1] = $497;
    $499 = $count$i8;
    $500 = $499&65535;
    $501 = ($500|0)==(0);
    if ($501) {
     $502 = $14;
     _mu_destroy($502);
    }
   }
  }
  $503 = $oldv3;
  $12 = $503;
  $504 = $12;
  $11 = $504;
  $505 = $11;
  $506 = $505;
  $507 = 6 & $506;
  $508 = ($507|0)!=(0);
  if (!($508)) {
   STACKTOP = sp;return;
  }
  $509 = $12;
  $510 = $509;
  $511 = -8 & $510;
  $512 = $511;
  $ref$i10 = $512;
  $513 = $ref$i10;
  $514 = HEAP16[$513>>1]|0;
  $count$i11 = $514;
  $515 = $count$i11;
  $516 = $515&65535;
  $517 = ($516|0)!=(0);
  if (!($517)) {
   STACKTOP = sp;return;
  }
  $518 = $count$i11;
  $519 = (($518) + -1)<<16>>16;
  $count$i11 = $519;
  $520 = $count$i11;
  $521 = $ref$i10;
  HEAP16[$521>>1] = $520;
  $522 = $count$i11;
  $523 = $522&65535;
  $524 = ($523|0)==(0);
  if (!($524)) {
   STACKTOP = sp;return;
  }
  $525 = $12;
  _mu_destroy($525);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 39) {
  $532 = $67;
  $10 = $532;
  $533 = $10;
  $534 = $533;
  $535 = $534 & -8;
  $536 = $535;
  $537 = ((($536)) + 2|0);
  $538 = HEAP16[$537>>1]|0;
  $539 = $538&65535;
  $540 = (($539) + 1)|0;
  $541 = ($540>>>0)<=(65535);
  if (!($541)) {
   _mu_errorlen(3925);
   // unreachable;
  }
  $542 = $67;
  $9 = $542;
  $psize$i = 8;
  $543 = $9;
  $8 = $543;
  $544 = $8;
  $545 = $544;
  $546 = $545 & -8;
  $547 = $546;
  $548 = ((($547)) + 7|0);
  $549 = HEAP8[$548>>0]|0;
  $550 = $549&255;
  $551 = $9;
  $7 = $551;
  $552 = $7;
  $6 = $552;
  $553 = $6;
  $554 = $553;
  $555 = $554 & -8;
  $556 = $555;
  $557 = ((($556)) + 6|0);
  $558 = HEAP8[$557>>0]|0;
  $559 = $558&255;
  $560 = 1 << $559;
  $561 = Math_imul($550, $560)|0;
  $562 = (($561) + 8)|0;
  $563 = (($562) - 1)|0;
  $564 = (($563>>>0) / 8)&-1;
  $565 = $67;
  $5 = $565;
  $566 = $5;
  $4 = $566;
  $567 = $4;
  $568 = $567;
  $569 = $568 & -8;
  $570 = $569;
  $571 = ((($570)) + 2|0);
  $572 = HEAP16[$571>>1]|0;
  $573 = $572&65535;
  $574 = $5;
  $3 = $574;
  $575 = $3;
  $576 = $575;
  $577 = $576 & -8;
  $578 = $577;
  $579 = ((($578)) + 4|0);
  $580 = HEAP16[$579>>1]|0;
  $581 = $580&65535;
  $582 = (($573) + ($581))|0;
  $583 = (($564) + ($582))|0;
  $j = $583;
  $584 = $j;
  $585 = $67;
  $2 = $585;
  $586 = $2;
  $1 = $586;
  $587 = $1;
  $588 = $587;
  $589 = $588 & -8;
  $590 = $589;
  $591 = ((($590)) + 6|0);
  $592 = HEAP8[$591>>0]|0;
  $593 = $592&255;
  $594 = 1 << $593;
  $595 = ($584>>>0)>=($594>>>0);
  if ($595) {
   $596 = $67;
   $597 = $67;
   $0 = $597;
   $598 = $0;
   $599 = $598;
   $600 = $599 & -8;
   $601 = $600;
   $602 = ((($601)) + 2|0);
   $603 = HEAP16[$602>>1]|0;
   $604 = $603&65535;
   $605 = (($604) + 1)|0;
   $606 = $605&65535;
   _mu_tbl_pairsexpand($596,$606);
   $607 = $67;
   $608 = $68;
   $609 = $69;
   _mu_tbl_insert($607,$608,$609);
   STACKTOP = sp;return;
  } else {
   $610 = $68;
   $611 = $j;
   $612 = $611<<1;
   $613 = (($612) + 0)|0;
   $614 = $67;
   $27 = $614;
   $615 = $27;
   $616 = $615;
   $617 = $616 & -8;
   $618 = $617;
   $619 = ((($618)) + 12|0);
   $620 = HEAP32[$619>>2]|0;
   $621 = (($620) + ($613<<2)|0);
   HEAP32[$621>>2] = $610;
   $622 = $69;
   $623 = $j;
   $624 = $623<<1;
   $625 = (($624) + 1)|0;
   $626 = $67;
   $28 = $626;
   $627 = $28;
   $628 = $627;
   $629 = $628 & -8;
   $630 = $629;
   $631 = ((($630)) + 12|0);
   $632 = HEAP32[$631>>2]|0;
   $633 = (($632) + ($625<<2)|0);
   HEAP32[$633>>2] = $622;
   $634 = $67;
   $30 = $634;
   $635 = $30;
   $636 = $635;
   $637 = $636 & -8;
   $638 = $637;
   $639 = ((($638)) + 2|0);
   $640 = HEAP16[$639>>1]|0;
   $641 = $640&65535;
   $642 = (($641) + 1)|0;
   $643 = $642&65535;
   HEAP16[$639>>1] = $643;
   $644 = $67;
   $645 = $i2;
   $646 = $mask;
   $647 = $645 & $646;
   $648 = $j;
   $649 = $648<<1;
   $650 = $67;
   $66 = $650;
   $651 = $66;
   $652 = $651;
   $653 = $652 & -8;
   $654 = $653;
   $655 = ((($654)) + 12|0);
   $656 = HEAP32[$655>>2]|0;
   $657 = (($656) + ($649<<2)|0);
   _mu_tbl_setpair($644,$647,$657);
   STACKTOP = sp;return;
  }
 }
 else if ((label|0) == 45) {
  STACKTOP = sp;return;
 }
}
function _mu_tbl_listexpand($t,$len) {
 $t = $t|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $oldarray = 0, $oldcount = 0, $oldsize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = $t;
 $12 = $len;
 $13 = $11;
 $10 = $13;
 $14 = $10;
 $15 = $14;
 $16 = $15 & -8;
 $17 = $16;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $oldarray = $19;
 $20 = $11;
 $4 = $20;
 $21 = $4;
 $3 = $21;
 $22 = $3;
 $23 = $22;
 $24 = $23 & -8;
 $25 = $24;
 $26 = ((($25)) + 2|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27&65535;
 $29 = $4;
 $2 = $29;
 $30 = $2;
 $31 = $30;
 $32 = $31 & -8;
 $33 = $32;
 $34 = ((($33)) + 4|0);
 $35 = HEAP16[$34>>1]|0;
 $36 = $35&65535;
 $37 = (($28) + ($36))|0;
 $oldcount = $37;
 $38 = $11;
 $1 = $38;
 $39 = $1;
 $0 = $39;
 $40 = $0;
 $41 = $40;
 $42 = $41 & -8;
 $43 = $42;
 $44 = ((($43)) + 6|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = $45&255;
 $47 = 1 << $46;
 $oldsize = $47;
 $48 = $12;
 $49 = (_mu_tbl_listnpw2($48)|0);
 $50 = $11;
 $5 = $50;
 $51 = $5;
 $52 = $51;
 $53 = $52 & -8;
 $54 = $53;
 $55 = ((($54)) + 6|0);
 HEAP8[$55>>0] = $49;
 $56 = $11;
 $7 = $56;
 $57 = $7;
 $6 = $57;
 $58 = $6;
 $59 = $58;
 $60 = $59 & -8;
 $61 = $60;
 $62 = ((($61)) + 6|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&255;
 $65 = 1 << $64;
 $66 = $65<<2;
 $67 = (_mu_alloc($66)|0);
 $68 = $11;
 $8 = $68;
 $69 = $8;
 $70 = $69;
 $71 = $70 & -8;
 $72 = $71;
 $73 = ((($72)) + 12|0);
 HEAP32[$73>>2] = $67;
 $74 = $11;
 $9 = $74;
 $75 = $9;
 $76 = $75;
 $77 = $76 & -8;
 $78 = $77;
 $79 = ((($78)) + 12|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $oldarray;
 $82 = $oldcount;
 $83 = $82<<2;
 _memcpy(($80|0),($81|0),($83|0))|0;
 $84 = $oldarray;
 $85 = $oldsize;
 $86 = $85<<2;
 _mu_dealloc($84,$86);
 STACKTOP = sp;return;
}
function _mu_tbl_pairsexpand($t,$len) {
 $t = $t|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $oldarray = 0, $oldcount = 0, $oldoff = 0, $oldsize = 0;
 var $psize$i = 0, $psize$i1 = 0, $waslist = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 120|0;
 $26 = $t;
 $27 = $len;
 $28 = $26;
 $25 = $28;
 $29 = $25;
 $24 = $29;
 $30 = $24;
 $31 = $30;
 $32 = $31 & -8;
 $33 = $32;
 $34 = ((($33)) + 7|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = ($36|0)==(0);
 $38 = $37&1;
 $waslist = $38;
 $39 = $26;
 $23 = $39;
 $40 = $23;
 $41 = $40;
 $42 = $41 & -8;
 $43 = $42;
 $44 = ((($43)) + 12|0);
 $45 = HEAP32[$44>>2]|0;
 $oldarray = $45;
 $46 = $26;
 $22 = $46;
 $psize$i = 8;
 $47 = $22;
 $21 = $47;
 $48 = $21;
 $49 = $48;
 $50 = $49 & -8;
 $51 = $50;
 $52 = ((($51)) + 7|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = $53&255;
 $55 = $22;
 $20 = $55;
 $56 = $20;
 $19 = $56;
 $57 = $19;
 $58 = $57;
 $59 = $58 & -8;
 $60 = $59;
 $61 = ((($60)) + 6|0);
 $62 = HEAP8[$61>>0]|0;
 $63 = $62&255;
 $64 = 1 << $63;
 $65 = Math_imul($54, $64)|0;
 $66 = (($65) + 8)|0;
 $67 = (($66) - 1)|0;
 $68 = (($67>>>0) / 8)&-1;
 $oldoff = $68;
 $69 = $26;
 $18 = $69;
 $70 = $18;
 $17 = $70;
 $71 = $17;
 $72 = $71;
 $73 = $72 & -8;
 $74 = $73;
 $75 = ((($74)) + 2|0);
 $76 = HEAP16[$75>>1]|0;
 $77 = $76&65535;
 $78 = $18;
 $16 = $78;
 $79 = $16;
 $80 = $79;
 $81 = $80 & -8;
 $82 = $81;
 $83 = ((($82)) + 4|0);
 $84 = HEAP16[$83>>1]|0;
 $85 = $84&65535;
 $86 = (($77) + ($85))|0;
 $oldcount = $86;
 $87 = $26;
 $15 = $87;
 $88 = $15;
 $14 = $88;
 $89 = $14;
 $90 = $89;
 $91 = $90 & -8;
 $92 = $91;
 $93 = ((($92)) + 6|0);
 $94 = HEAP8[$93>>0]|0;
 $95 = $94&255;
 $96 = 1 << $95;
 $oldsize = $96;
 $97 = $27;
 $98 = $26;
 $13 = $98;
 $99 = $13;
 $100 = $99;
 $101 = $100 & -8;
 $102 = $101;
 $103 = ((($102)) + 7|0);
 $104 = (_mu_tbl_pairsnpw2($97,$103)|0);
 $105 = $26;
 $12 = $105;
 $106 = $12;
 $107 = $106;
 $108 = $107 & -8;
 $109 = $108;
 $110 = ((($109)) + 6|0);
 HEAP8[$110>>0] = $104;
 $111 = $26;
 $11 = $111;
 $112 = $11;
 $113 = $112;
 $114 = $113 & -8;
 $115 = $114;
 $116 = ((($115)) + 2|0);
 HEAP16[$116>>1] = 0;
 $117 = $26;
 $10 = $117;
 $118 = $10;
 $119 = $118;
 $120 = $119 & -8;
 $121 = $120;
 $122 = ((($121)) + 4|0);
 HEAP16[$122>>1] = 0;
 $123 = $26;
 $9 = $123;
 $124 = $9;
 $8 = $124;
 $125 = $8;
 $126 = $125;
 $127 = $126 & -8;
 $128 = $127;
 $129 = ((($128)) + 6|0);
 $130 = HEAP8[$129>>0]|0;
 $131 = $130&255;
 $132 = 1 << $131;
 $133 = $132<<1;
 $134 = $133<<2;
 $135 = (_mu_alloc($134)|0);
 $136 = $26;
 $7 = $136;
 $137 = $7;
 $138 = $137;
 $139 = $138 & -8;
 $140 = $139;
 $141 = ((($140)) + 12|0);
 HEAP32[$141>>2] = $135;
 $142 = $26;
 $6 = $142;
 $143 = $6;
 $144 = $143;
 $145 = $144 & -8;
 $146 = $145;
 $147 = ((($146)) + 12|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = $26;
 $5 = $149;
 $psize$i1 = 8;
 $150 = $5;
 $4 = $150;
 $151 = $4;
 $152 = $151;
 $153 = $152 & -8;
 $154 = $153;
 $155 = ((($154)) + 7|0);
 $156 = HEAP8[$155>>0]|0;
 $157 = $156&255;
 $158 = $5;
 $3 = $158;
 $159 = $3;
 $2 = $159;
 $160 = $2;
 $161 = $160;
 $162 = $161 & -8;
 $163 = $162;
 $164 = ((($163)) + 6|0);
 $165 = HEAP8[$164>>0]|0;
 $166 = $165&255;
 $167 = 1 << $166;
 $168 = Math_imul($157, $167)|0;
 $169 = (($168) + 8)|0;
 $170 = (($169) - 1)|0;
 $171 = (($170>>>0) / 8)&-1;
 $172 = $171<<1;
 $173 = $172<<2;
 _memset(($148|0),0,($173|0))|0;
 $i = 0;
 while(1) {
  $174 = $i;
  $175 = $oldcount;
  $176 = ($174>>>0)<($175>>>0);
  if (!($176)) {
   break;
  }
  $177 = $waslist;
  $178 = $177&1;
  $179 = $26;
  $180 = $i;
  if ($178) {
   $0 = $180;
   $181 = $0;
   $182 = (+($181>>>0));
   HEAPF32[$1>>2] = $182;
   $183 = HEAP32[$1>>2]|0;
   $184 = -8 & $183;
   $185 = (1 + ($184))|0;
   $186 = $185;
   $187 = $i;
   $188 = $oldarray;
   $189 = (($188) + ($187<<2)|0);
   $190 = HEAP32[$189>>2]|0;
   _mu_tbl_insert($179,$186,$190);
  } else {
   $191 = $oldoff;
   $192 = (($180) + ($191))|0;
   $193 = $192<<1;
   $194 = (($193) + 0)|0;
   $195 = $oldarray;
   $196 = (($195) + ($194<<2)|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $i;
   $199 = $oldoff;
   $200 = (($198) + ($199))|0;
   $201 = $200<<1;
   $202 = (($201) + 1)|0;
   $203 = $oldarray;
   $204 = (($203) + ($202<<2)|0);
   $205 = HEAP32[$204>>2]|0;
   _mu_tbl_insert($179,$197,$205);
  }
  $206 = $i;
  $207 = (($206) + 1)|0;
  $i = $207;
 }
 $208 = $oldarray;
 $209 = $waslist;
 $210 = $209&1;
 $211 = $210 ? 1 : 2;
 $212 = $oldsize;
 $213 = Math_imul($211, $212)|0;
 $214 = $213<<2;
 _mu_dealloc($208,$214);
 STACKTOP = sp;return;
}
function _mu_tbl_pairsnpw2($len,$pisize) {
 $len = $len|0;
 $pisize = $pisize|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $indices = 0, $isize = 0, $psize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $len;
 $1 = $pisize;
 $psize = 8;
 $2 = $0;
 $3 = (_mu_tbl_isize($2)|0);
 $isize = $3;
 $4 = $0;
 $5 = $4&65535;
 $6 = $5<<3;
 $7 = (($6) + 8)|0;
 $8 = (($7) - 1)|0;
 $9 = $isize;
 $10 = $9&255;
 $11 = (8 - ($10))|0;
 $12 = (($8>>>0) / ($11>>>0))&-1;
 $indices = $12;
 $13 = $indices;
 $14 = ($13>>>0)<(2);
 $$ = $14 ? 2 : $12;
 $indices = $$;
 $15 = $isize;
 $16 = $1;
 HEAP8[$16>>0] = $15;
 $17 = $indices;
 $18 = (($17) - 1)|0;
 $19 = (Math_clz32(($18|0))|0);
 $20 = (32 - ($19))|0;
 $21 = $20&255;
 STACKTOP = sp;return ($21|0);
}
function _mu_tbl_isize($len) {
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $len;
 $2 = $1;
 $3 = $2&65535;
 $4 = (0)>(0);
 $5 = ($3>>>0)>(3221225472);
 $6 = (0)==(0);
 $7 = $6 & $5;
 $8 = $4 | $7;
 do {
  if ($8) {
   $0 = 8;
  } else {
   $9 = $1;
   $10 = $9&65535;
   $11 = ($10|0)>(57344);
   if ($11) {
    $0 = 4;
    break;
   }
   $12 = $1;
   $13 = $12&65535;
   $14 = ($13|0)>(240);
   if ($14) {
    $0 = 2;
    break;
   } else {
    $0 = 1;
    break;
   }
  }
 } while(0);
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function _mu_tbl_setpair($t,$i,$p) {
 $t = $t|0;
 $i = $i|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = $t;
 $10 = $i;
 $11 = $p;
 $12 = $11;
 $13 = $9;
 $8 = $13;
 $14 = $8;
 $15 = $14;
 $16 = $15 & -8;
 $17 = $16;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $12;
 $21 = $19;
 $22 = (($20) - ($21))|0;
 $23 = (($22|0) / 4)&-1;
 $24 = (($23|0) / 2)&-1;
 $j = $24;
 $25 = $9;
 $0 = $25;
 $26 = $0;
 $27 = $26;
 $28 = $27 & -8;
 $29 = $28;
 $30 = ((($29)) + 7|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = ($32|0)==(1);
 if ($33) {
  $34 = $j;
  $35 = $34&255;
  $36 = $10;
  $37 = $9;
  $1 = $37;
  $38 = $1;
  $39 = $38;
  $40 = $39 & -8;
  $41 = $40;
  $42 = ((($41)) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + ($36)|0);
  HEAP8[$44>>0] = $35;
  STACKTOP = sp;return;
 }
 $45 = $9;
 $2 = $45;
 $46 = $2;
 $47 = $46;
 $48 = $47 & -8;
 $49 = $48;
 $50 = ((($49)) + 7|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = $51&255;
 $53 = ($52|0)==(2);
 if ($53) {
  $54 = $j;
  $55 = $54&65535;
  $56 = $10;
  $57 = $9;
  $3 = $57;
  $58 = $3;
  $59 = $58;
  $60 = $59 & -8;
  $61 = $60;
  $62 = ((($61)) + 12|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) + ($56<<1)|0);
  HEAP16[$64>>1] = $55;
  STACKTOP = sp;return;
 }
 $65 = $9;
 $4 = $65;
 $66 = $4;
 $67 = $66;
 $68 = $67 & -8;
 $69 = $68;
 $70 = ((($69)) + 7|0);
 $71 = HEAP8[$70>>0]|0;
 $72 = $71&255;
 $73 = ($72|0)==(4);
 if ($73) {
  $74 = $j;
  $75 = $10;
  $76 = $9;
  $5 = $76;
  $77 = $5;
  $78 = $77;
  $79 = $78 & -8;
  $80 = $79;
  $81 = ((($80)) + 12|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($82) + ($75<<2)|0);
  HEAP32[$83>>2] = $74;
  STACKTOP = sp;return;
 }
 $84 = $9;
 $6 = $84;
 $85 = $6;
 $86 = $85;
 $87 = $86 & -8;
 $88 = $87;
 $89 = ((($88)) + 7|0);
 $90 = HEAP8[$89>>0]|0;
 $91 = $90&255;
 $92 = ($91|0)==(8);
 if (!($92)) {
  STACKTOP = sp;return;
 }
 $93 = $j;
 $94 = $10;
 $95 = $9;
 $7 = $95;
 $96 = $7;
 $97 = $96;
 $98 = $97 & -8;
 $99 = $98;
 $100 = ((($99)) + 12|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = (($101) + ($94<<3)|0);
 $103 = $102;
 $104 = $103;
 HEAP32[$104>>2] = $93;
 $105 = (($103) + 4)|0;
 $106 = $105;
 HEAP32[$106>>2] = 0;
 STACKTOP = sp;return;
}
function _mu_tbl_assign($head,$k,$v) {
 $head = $head|0;
 $k = $k|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $count$i = 0, $count$i10 = 0, $count$i13 = 0, $count$i4 = 0, $count$i7 = 0, $i = 0, $i1 = 0, $mask = 0;
 var $oldv = 0, $oldv2 = 0, $p = 0, $ref$i = 0, $ref$i12 = 0, $ref$i3 = 0, $ref$i6 = 0, $ref$i9 = 0, $ro = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 156|0;
 $20 = sp + 136|0;
 $33 = $head;
 $34 = $k;
 $35 = $v;
 $ro = 0;
 $36 = $34;
 $37 = ($36|0)!=(0|0);
 if (!($37)) {
  $38 = $34;
  $32 = $38;
  $39 = $32;
  $31 = $39;
  $40 = $31;
  $41 = $40;
  $42 = 6 & $41;
  $43 = ($42|0)!=(0);
  if (!($43)) {
   STACKTOP = sp;return;
  }
  $44 = $32;
  $45 = $44;
  $46 = -8 & $45;
  $47 = $46;
  $ref$i = $47;
  $48 = $ref$i;
  $49 = HEAP16[$48>>1]|0;
  $count$i = $49;
  $50 = $count$i;
  $51 = $50&65535;
  $52 = ($51|0)!=(0);
  if (!($52)) {
   STACKTOP = sp;return;
  }
  $53 = $count$i;
  $54 = (($53) + -1)<<16>>16;
  $count$i = $54;
  $55 = $count$i;
  $56 = $ref$i;
  HEAP16[$56>>1] = $55;
  $57 = $count$i;
  $58 = $57&65535;
  $59 = ($58|0)==(0);
  if (!($59)) {
   STACKTOP = sp;return;
  }
  $60 = $32;
  _mu_destroy($60);
  STACKTOP = sp;return;
 }
 $61 = $33;
 $t = $61;
 L14: while(1) {
  $62 = $t;
  $63 = ($62|0)!=(0|0);
  if (!($63)) {
   label = 37;
   break;
  }
  $64 = $ro;
  $65 = $64&1;
  if ($65) {
   $72 = 1;
  } else {
   $66 = $t;
   $30 = $66;
   $67 = $30;
   $68 = $67;
   $69 = 1 & $68;
   $70 = ($69|0)!=(0);
   $72 = $70;
  }
  $71 = $72&1;
  $ro = $71;
  $73 = $t;
  $29 = $73;
  $74 = $29;
  $75 = $74;
  $76 = $75 & -8;
  $77 = $76;
  $78 = ((($77)) + 6|0);
  $79 = HEAP8[$78>>0]|0;
  $80 = $79&255;
  $81 = 1 << $80;
  $82 = (($81) - 1)|0;
  $mask = $82;
  $83 = $t;
  $26 = $83;
  $84 = $26;
  $25 = $84;
  $85 = $25;
  $86 = $85;
  $87 = $86 & -8;
  $88 = $87;
  $89 = ((($88)) + 7|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = $90&255;
  $92 = ($91|0)==(0);
  L20: do {
   if ($92) {
    $93 = $34;
    $21 = $93;
    $94 = $21;
    $19 = $94;
    $95 = $19;
    $96 = $95;
    $97 = (($96) - 1)|0;
    HEAP32[$20>>2] = $97;
    $98 = +HEAPF32[$20>>2];
    $99 = (~~(($98))>>>0);
    $100 = $mask;
    $101 = $99 & $100;
    $i = $101;
    $102 = $34;
    $103 = $i;
    $15 = $103;
    $104 = $15;
    $105 = (+($104>>>0));
    HEAPF32[$16>>2] = $105;
    $106 = HEAP32[$16>>2]|0;
    $107 = -8 & $106;
    $108 = (1 + ($107))|0;
    $109 = $108;
    $110 = ($102|0)==($109|0);
    if ($110) {
     $111 = $i;
     $112 = $t;
     $12 = $112;
     $113 = $12;
     $11 = $113;
     $114 = $11;
     $115 = $114;
     $116 = $115 & -8;
     $117 = $116;
     $118 = ((($117)) + 2|0);
     $119 = HEAP16[$118>>1]|0;
     $120 = $119&65535;
     $121 = $12;
     $10 = $121;
     $122 = $10;
     $123 = $122;
     $124 = $123 & -8;
     $125 = $124;
     $126 = ((($125)) + 4|0);
     $127 = HEAP16[$126>>1]|0;
     $128 = $127&65535;
     $129 = (($120) + ($128))|0;
     $130 = ($111>>>0)<($129>>>0);
     if ($130) {
      $131 = $i;
      $132 = $t;
      $4 = $132;
      $133 = $4;
      $134 = $133;
      $135 = $134 & -8;
      $136 = $135;
      $137 = ((($136)) + 12|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = (($138) + ($131<<2)|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)!=(0|0);
      if ($141) {
       label = 14;
       break L14;
      }
     }
    }
   } else {
    $215 = $t;
    $216 = $34;
    $8 = $215;
    $9 = $216;
    $217 = $9;
    $218 = $217;
    $219 = Math_imul($218, -1640531535)|0;
    $220 = $8;
    $7 = $220;
    $221 = $7;
    $222 = $221;
    $223 = $222 & -8;
    $224 = $223;
    $225 = ((($224)) + 6|0);
    $226 = HEAP8[$225>>0]|0;
    $227 = $226&255;
    $228 = (32 - ($227))|0;
    $229 = $219 >>> $228;
    $i1 = $229;
    while(1) {
     $230 = $t;
     $231 = $i1;
     $232 = $mask;
     $233 = $231 & $232;
     $234 = (_mu_tbl_getpair($230,$233)|0);
     $p = $234;
     $235 = $p;
     $236 = ($235|0)!=(0|0);
     if ($236) {
      $237 = $p;
      $238 = HEAP32[$237>>2]|0;
      $239 = $34;
      $240 = ($238|0)==($239|0);
      if ($240) {
       $241 = $p;
       $242 = ((($241)) + 4|0);
       $243 = HEAP32[$242>>2]|0;
       $244 = ($243|0)!=(0|0);
       if ($244) {
        label = 24;
        break L14;
       }
      }
     }
     $333 = $p;
     $334 = ($333|0)!=(0|0);
     if (!($334)) {
      break L20;
     }
     $335 = $i1;
     $336 = (($335) + 1)|0;
     $i1 = $336;
    }
   }
  } while(0);
  $337 = $t;
  $24 = $337;
  $338 = $24;
  $339 = $338;
  $340 = $339 & -8;
  $341 = $340;
  $342 = ((($341)) + 8|0);
  $343 = HEAP32[$342>>2]|0;
  $t = $343;
 }
 if ((label|0) == 14) {
  $142 = $ro;
  $143 = $142&1;
  if ($143) {
   _mu_errorro(3925);
   // unreachable;
  }
  $144 = $i;
  $145 = $t;
  $0 = $145;
  $146 = $0;
  $147 = $146;
  $148 = $147 & -8;
  $149 = $148;
  $150 = ((($149)) + 12|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = (($151) + ($144<<2)|0);
  $153 = HEAP32[$152>>2]|0;
  $oldv = $153;
  $154 = $35;
  $155 = $i;
  $156 = $t;
  $1 = $156;
  $157 = $1;
  $158 = $157;
  $159 = $158 & -8;
  $160 = $159;
  $161 = ((($160)) + 12|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (($162) + ($155<<2)|0);
  HEAP32[$163>>2] = $154;
  $164 = $35;
  $165 = ($164|0)!=(0|0);
  $166 = $165 ? 1 : 0;
  $167 = (($166) - 1)|0;
  $168 = $t;
  $2 = $168;
  $169 = $2;
  $170 = $169;
  $171 = $170 & -8;
  $172 = $171;
  $173 = ((($172)) + 2|0);
  $174 = HEAP16[$173>>1]|0;
  $175 = $174&65535;
  $176 = (($175) + ($167))|0;
  $177 = $176&65535;
  HEAP16[$173>>1] = $177;
  $178 = $35;
  $179 = ($178|0)!=(0|0);
  $180 = $179 ^ 1;
  $181 = $180 ? 1 : 0;
  $182 = $t;
  $3 = $182;
  $183 = $3;
  $184 = $183;
  $185 = $184 & -8;
  $186 = $185;
  $187 = ((($186)) + 4|0);
  $188 = HEAP16[$187>>1]|0;
  $189 = $188&65535;
  $190 = (($189) + ($181))|0;
  $191 = $190&65535;
  HEAP16[$187>>1] = $191;
  $192 = $oldv;
  $6 = $192;
  $193 = $6;
  $5 = $193;
  $194 = $5;
  $195 = $194;
  $196 = 6 & $195;
  $197 = ($196|0)!=(0);
  if (!($197)) {
   STACKTOP = sp;return;
  }
  $198 = $6;
  $199 = $198;
  $200 = -8 & $199;
  $201 = $200;
  $ref$i12 = $201;
  $202 = $ref$i12;
  $203 = HEAP16[$202>>1]|0;
  $count$i13 = $203;
  $204 = $count$i13;
  $205 = $204&65535;
  $206 = ($205|0)!=(0);
  if (!($206)) {
   STACKTOP = sp;return;
  }
  $207 = $count$i13;
  $208 = (($207) + -1)<<16>>16;
  $count$i13 = $208;
  $209 = $count$i13;
  $210 = $ref$i12;
  HEAP16[$210>>1] = $209;
  $211 = $count$i13;
  $212 = $211&65535;
  $213 = ($212|0)==(0);
  if (!($213)) {
   STACKTOP = sp;return;
  }
  $214 = $6;
  _mu_destroy($214);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 24) {
  $245 = $ro;
  $246 = $245&1;
  if ($246) {
   _mu_errorro(3925);
   // unreachable;
  }
  $247 = $p;
  $248 = ((($247)) + 4|0);
  $249 = HEAP32[$248>>2]|0;
  $oldv2 = $249;
  $250 = $35;
  $251 = $p;
  $252 = ((($251)) + 4|0);
  HEAP32[$252>>2] = $250;
  $253 = $35;
  $254 = ($253|0)!=(0|0);
  $255 = $254 ? 1 : 0;
  $256 = $oldv2;
  $257 = ($256|0)!=(0|0);
  $258 = $257 ? 1 : 0;
  $259 = (($255) - ($258))|0;
  $260 = $t;
  $13 = $260;
  $261 = $13;
  $262 = $261;
  $263 = $262 & -8;
  $264 = $263;
  $265 = ((($264)) + 2|0);
  $266 = HEAP16[$265>>1]|0;
  $267 = $266&65535;
  $268 = (($267) + ($259))|0;
  $269 = $268&65535;
  HEAP16[$265>>1] = $269;
  $270 = $35;
  $271 = ($270|0)!=(0|0);
  $272 = $271 ? 1 : 0;
  $273 = $oldv2;
  $274 = ($273|0)!=(0|0);
  $275 = $274 ? 1 : 0;
  $276 = (($272) - ($275))|0;
  $277 = $t;
  $14 = $277;
  $278 = $14;
  $279 = $278;
  $280 = $279 & -8;
  $281 = $280;
  $282 = ((($281)) + 4|0);
  $283 = HEAP16[$282>>1]|0;
  $284 = $283&65535;
  $285 = (($284) - ($276))|0;
  $286 = $285&65535;
  HEAP16[$282>>1] = $286;
  $287 = $34;
  $18 = $287;
  $288 = $18;
  $17 = $288;
  $289 = $17;
  $290 = $289;
  $291 = 6 & $290;
  $292 = ($291|0)!=(0);
  if ($292) {
   $293 = $18;
   $294 = $293;
   $295 = -8 & $294;
   $296 = $295;
   $ref$i9 = $296;
   $297 = $ref$i9;
   $298 = HEAP16[$297>>1]|0;
   $count$i10 = $298;
   $299 = $count$i10;
   $300 = $299&65535;
   $301 = ($300|0)!=(0);
   if ($301) {
    $302 = $count$i10;
    $303 = (($302) + -1)<<16>>16;
    $count$i10 = $303;
    $304 = $count$i10;
    $305 = $ref$i9;
    HEAP16[$305>>1] = $304;
    $306 = $count$i10;
    $307 = $306&65535;
    $308 = ($307|0)==(0);
    if ($308) {
     $309 = $18;
     _mu_destroy($309);
    }
   }
  }
  $310 = $oldv2;
  $23 = $310;
  $311 = $23;
  $22 = $311;
  $312 = $22;
  $313 = $312;
  $314 = 6 & $313;
  $315 = ($314|0)!=(0);
  if (!($315)) {
   STACKTOP = sp;return;
  }
  $316 = $23;
  $317 = $316;
  $318 = -8 & $317;
  $319 = $318;
  $ref$i6 = $319;
  $320 = $ref$i6;
  $321 = HEAP16[$320>>1]|0;
  $count$i7 = $321;
  $322 = $count$i7;
  $323 = $322&65535;
  $324 = ($323|0)!=(0);
  if (!($324)) {
   STACKTOP = sp;return;
  }
  $325 = $count$i7;
  $326 = (($325) + -1)<<16>>16;
  $count$i7 = $326;
  $327 = $count$i7;
  $328 = $ref$i6;
  HEAP16[$328>>1] = $327;
  $329 = $count$i7;
  $330 = $329&65535;
  $331 = ($330|0)==(0);
  if (!($331)) {
   STACKTOP = sp;return;
  }
  $332 = $23;
  _mu_destroy($332);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 37) {
  $344 = $35;
  $345 = ($344|0)!=(0|0);
  if ($345) {
   $369 = $33;
   $370 = $34;
   $371 = $35;
   _mu_tbl_insert($369,$370,$371);
   STACKTOP = sp;return;
  }
  $346 = $34;
  $28 = $346;
  $347 = $28;
  $27 = $347;
  $348 = $27;
  $349 = $348;
  $350 = 6 & $349;
  $351 = ($350|0)!=(0);
  if (!($351)) {
   STACKTOP = sp;return;
  }
  $352 = $28;
  $353 = $352;
  $354 = -8 & $353;
  $355 = $354;
  $ref$i3 = $355;
  $356 = $ref$i3;
  $357 = HEAP16[$356>>1]|0;
  $count$i4 = $357;
  $358 = $count$i4;
  $359 = $358&65535;
  $360 = ($359|0)!=(0);
  if (!($360)) {
   STACKTOP = sp;return;
  }
  $361 = $count$i4;
  $362 = (($361) + -1)<<16>>16;
  $count$i4 = $362;
  $363 = $count$i4;
  $364 = $ref$i3;
  HEAP16[$364>>1] = $363;
  $365 = $count$i4;
  $366 = $365&65535;
  $367 = ($366|0)==(0);
  if (!($367)) {
   STACKTOP = sp;return;
  }
  $368 = $28;
  _mu_destroy($368);
  STACKTOP = sp;return;
 }
}
function _mu_tbl_next($t,$ip,$kp,$vp) {
 $t = $t|0;
 $ip = $ip|0;
 $kp = $kp|0;
 $vp = $vp|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $count = 0, $count$i = 0, $count$i2 = 0, $i = 0, $k = 0, $off = 0, $psize$i = 0, $ref$i = 0, $ref$i1 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 100|0;
 $18 = sp + 128|0;
 $19 = $t;
 $20 = $ip;
 $21 = $kp;
 $22 = $vp;
 $23 = $19;
 $17 = $23;
 $psize$i = 8;
 $24 = $17;
 $16 = $24;
 $25 = $16;
 $26 = $25;
 $27 = $26 & -8;
 $28 = $27;
 $29 = ((($28)) + 7|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = $17;
 $15 = $32;
 $33 = $15;
 $14 = $33;
 $34 = $14;
 $35 = $34;
 $36 = $35 & -8;
 $37 = $36;
 $38 = ((($37)) + 6|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 $41 = 1 << $40;
 $42 = Math_imul($31, $41)|0;
 $43 = (($42) + 8)|0;
 $44 = (($43) - 1)|0;
 $45 = (($44>>>0) / 8)&-1;
 $off = $45;
 $46 = $19;
 $2 = $46;
 $47 = $2;
 $1 = $47;
 $48 = $1;
 $49 = $48;
 $50 = $49 & -8;
 $51 = $50;
 $52 = ((($51)) + 2|0);
 $53 = HEAP16[$52>>1]|0;
 $54 = $53&65535;
 $55 = $2;
 $0 = $55;
 $56 = $0;
 $57 = $56;
 $58 = $57 & -8;
 $59 = $58;
 $60 = ((($59)) + 4|0);
 $61 = HEAP16[$60>>1]|0;
 $62 = $61&65535;
 $63 = (($54) + ($62))|0;
 $count = $63;
 $64 = $20;
 $65 = HEAP32[$64>>2]|0;
 $i = $65;
 while(1) {
  $66 = $i;
  $67 = $count;
  $68 = ($66>>>0)>=($67>>>0);
  if ($68) {
   label = 3;
   break;
  }
  $69 = $19;
  $4 = $69;
  $70 = $4;
  $3 = $70;
  $71 = $3;
  $72 = $71;
  $73 = $72 & -8;
  $74 = $73;
  $75 = ((($74)) + 7|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = $76&255;
  $78 = ($77|0)==(0);
  $79 = $i;
  if ($78) {
   $5 = $79;
   $80 = $5;
   $81 = (+($80>>>0));
   HEAPF32[$6>>2] = $81;
   $82 = HEAP32[$6>>2]|0;
   $83 = -8 & $82;
   $84 = (1 + ($83))|0;
   $85 = $84;
   $k = $85;
   $86 = $i;
   $87 = $19;
   $7 = $87;
   $88 = $7;
   $89 = $88;
   $90 = $89 & -8;
   $91 = $90;
   $92 = ((($91)) + 12|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (($93) + ($86<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $v = $95;
  } else {
   $96 = $off;
   $97 = (($79) + ($96))|0;
   $98 = $97<<1;
   $99 = (($98) + 0)|0;
   $100 = $19;
   $8 = $100;
   $101 = $8;
   $102 = $101;
   $103 = $102 & -8;
   $104 = $103;
   $105 = ((($104)) + 12|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (($106) + ($99<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $k = $108;
   $109 = $i;
   $110 = $off;
   $111 = (($109) + ($110))|0;
   $112 = $111<<1;
   $113 = (($112) + 1)|0;
   $114 = $19;
   $9 = $114;
   $115 = $9;
   $116 = $115;
   $117 = $116 & -8;
   $118 = $117;
   $119 = ((($118)) + 12|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (($120) + ($113<<2)|0);
   $122 = HEAP32[$121>>2]|0;
   $v = $122;
  }
  $123 = $i;
  $124 = (($123) + 1)|0;
  $i = $124;
  $125 = $v;
  $126 = ($125|0)!=(0|0);
  $127 = $126 ^ 1;
  if (!($127)) {
   break;
  }
 }
 if ((label|0) == 3) {
  $$expand_i1_val = 0;
  HEAP8[$18>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$18>>0]|0;
  $176 = $$pre_trunc&1;
  STACKTOP = sp;return ($176|0);
 }
 $128 = $21;
 $129 = ($128|0)!=(0|0);
 if ($129) {
  $130 = $k;
  $11 = $130;
  $131 = $11;
  $10 = $131;
  $132 = $10;
  $133 = $132;
  $134 = 6 & $133;
  $135 = ($134|0)!=(0);
  if ($135) {
   $136 = $11;
   $137 = $136;
   $138 = -8 & $137;
   $139 = $138;
   $ref$i1 = $139;
   $140 = $ref$i1;
   $141 = HEAP16[$140>>1]|0;
   $count$i2 = $141;
   $142 = $count$i2;
   $143 = $142&65535;
   $144 = ($143|0)!=(0);
   if ($144) {
    $145 = $count$i2;
    $146 = (($145) + 1)<<16>>16;
    $count$i2 = $146;
    $147 = $count$i2;
    $148 = $ref$i1;
    HEAP16[$148>>1] = $147;
   }
  }
  $149 = $11;
  $150 = $21;
  HEAP32[$150>>2] = $149;
 }
 $151 = $22;
 $152 = ($151|0)!=(0|0);
 if ($152) {
  $153 = $v;
  $13 = $153;
  $154 = $13;
  $12 = $154;
  $155 = $12;
  $156 = $155;
  $157 = 6 & $156;
  $158 = ($157|0)!=(0);
  if ($158) {
   $159 = $13;
   $160 = $159;
   $161 = -8 & $160;
   $162 = $161;
   $ref$i = $162;
   $163 = $ref$i;
   $164 = HEAP16[$163>>1]|0;
   $count$i = $164;
   $165 = $count$i;
   $166 = $165&65535;
   $167 = ($166|0)!=(0);
   if ($167) {
    $168 = $count$i;
    $169 = (($168) + 1)<<16>>16;
    $count$i = $169;
    $170 = $count$i;
    $171 = $ref$i;
    HEAP16[$171>>1] = $170;
   }
  }
  $172 = $13;
  $173 = $22;
  HEAP32[$173>>2] = $172;
 }
 $174 = $i;
 $175 = $20;
 HEAP32[$175>>2] = $174;
 $$expand_i1_val2 = 1;
 HEAP8[$18>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$18>>0]|0;
 $176 = $$pre_trunc&1;
 STACKTOP = sp;return ($176|0);
}
function _mu_tbl_iter($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 32|0;
 $5 = sp + 8|0;
 $4 = $t;
 $6 = $4;
 $3 = $6;
 $7 = $3;
 $2 = $7;
 $8 = $2;
 $9 = $8;
 $10 = 6 & $9;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $3;
  $13 = $12;
  $14 = -8 & $13;
  $15 = $14;
  $ref$i = $15;
  $16 = $ref$i;
  $17 = HEAP16[$16>>1]|0;
  $count$i = $17;
  $18 = $count$i;
  $19 = $18&65535;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $count$i;
   $22 = (($21) + 1)<<16>>16;
   $count$i = $22;
   $23 = $count$i;
   $24 = $ref$i;
   HEAP16[$24>>1] = $23;
  }
 }
 $25 = $3;
 HEAP32[$5>>2] = $25;
 $26 = ((($5)) + 4|0);
 $0 = 0;
 $27 = $0;
 $28 = (+($27>>>0));
 HEAPF32[$1>>2] = $28;
 $29 = HEAP32[$1>>2]|0;
 $30 = -8 & $29;
 $31 = (1 + ($30))|0;
 $32 = $31;
 HEAP32[$26>>2] = $32;
 $33 = (_mu_tbl_fromlist($5,2)|0);
 $34 = (_mu_fn_fromsbfn(0,310,$33)|0);
 STACKTOP = sp;return ($34|0);
}
function _mu_tbl_fromlist($list,$n) {
 $list = $list|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 16|0;
 $2 = $list;
 $3 = $n;
 $4 = $3;
 $5 = (_mu_tbl_create($4)|0);
 $t = $5;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $3;
  $8 = ($6>>>0)<($7>>>0);
  $9 = $t;
  if (!($8)) {
   break;
  }
  $10 = $i;
  $0 = $10;
  $11 = $0;
  $12 = (+($11>>>0));
  HEAPF32[$1>>2] = $12;
  $13 = HEAP32[$1>>2]|0;
  $14 = -8 & $13;
  $15 = (1 + ($14))|0;
  $16 = $15;
  $17 = $i;
  $18 = $2;
  $19 = (($18) + ($17<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  _mu_tbl_insert($9,$16,$20);
  $21 = $i;
  $22 = (($21) + 1)|0;
  $i = $22;
 }
 STACKTOP = sp;return ($9|0);
}
function _mu_tbl_iter_step($scope,$frame) {
 $scope = $scope|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $count$i = 0, $i = 0, $next = 0, $ref$i = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 68|0;
 $6 = sp + 44|0;
 $8 = sp + 36|0;
 $10 = sp + 28|0;
 $12 = sp + 20|0;
 $i = sp + 4|0;
 $13 = $scope;
 $14 = $frame;
 $15 = $13;
 $11 = 0;
 $16 = $11;
 $17 = (+($16>>>0));
 HEAPF32[$12>>2] = $17;
 $18 = HEAP32[$12>>2]|0;
 $19 = -8 & $18;
 $20 = (1 + ($19))|0;
 $21 = $20;
 $22 = (_mu_tbl_lookup($15,$21)|0);
 $t = $22;
 $23 = $13;
 $9 = 1;
 $24 = $9;
 $25 = (+($24>>>0));
 HEAPF32[$10>>2] = $25;
 $26 = HEAP32[$10>>2]|0;
 $27 = -8 & $26;
 $28 = (1 + ($27))|0;
 $29 = $28;
 $30 = (_mu_tbl_lookup($23,$29)|0);
 $2 = $30;
 $31 = $2;
 $0 = $31;
 $32 = $0;
 $33 = $32;
 $34 = (($33) - 1)|0;
 HEAP32[$1>>2] = $34;
 $35 = +HEAPF32[$1>>2];
 $36 = (~~(($35))>>>0);
 HEAP32[$i>>2] = $36;
 $37 = $t;
 $38 = $14;
 $39 = (_mu_tbl_next($37,$i,0,$38)|0);
 $40 = $39&1;
 $next = $40;
 $41 = $t;
 $4 = $41;
 $42 = $4;
 $3 = $42;
 $43 = $3;
 $44 = $43;
 $45 = 6 & $44;
 $46 = ($45|0)!=(0);
 if ($46) {
  $47 = $4;
  $48 = $47;
  $49 = -8 & $48;
  $50 = $49;
  $ref$i = $50;
  $51 = $ref$i;
  $52 = HEAP16[$51>>1]|0;
  $count$i = $52;
  $53 = $count$i;
  $54 = $53&65535;
  $55 = ($54|0)!=(0);
  if ($55) {
   $56 = $count$i;
   $57 = (($56) + -1)<<16>>16;
   $count$i = $57;
   $58 = $count$i;
   $59 = $ref$i;
   HEAP16[$59>>1] = $58;
   $60 = $count$i;
   $61 = $60&65535;
   $62 = ($61|0)==(0);
   if ($62) {
    $63 = $4;
    _mu_destroy($63);
   }
  }
 }
 $64 = $13;
 $5 = 1;
 $65 = $5;
 $66 = (+($65>>>0));
 HEAPF32[$6>>2] = $66;
 $67 = HEAP32[$6>>2]|0;
 $68 = -8 & $67;
 $69 = (1 + ($68))|0;
 $70 = $69;
 $71 = HEAP32[$i>>2]|0;
 $7 = $71;
 $72 = $7;
 $73 = (+($72>>>0));
 HEAPF32[$8>>2] = $73;
 $74 = HEAP32[$8>>2]|0;
 $75 = -8 & $74;
 $76 = (1 + ($75))|0;
 $77 = $76;
 _mu_tbl_insert($64,$70,$77);
 $78 = $next;
 $79 = $78&1;
 $80 = $79 ? 1 : 0;
 $81 = $80&255;
 STACKTOP = sp;return ($81|0);
}
function _mu_tbl_pairs($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 32|0;
 $5 = sp + 8|0;
 $4 = $t;
 $6 = $4;
 $3 = $6;
 $7 = $3;
 $2 = $7;
 $8 = $2;
 $9 = $8;
 $10 = 6 & $9;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $3;
  $13 = $12;
  $14 = -8 & $13;
  $15 = $14;
  $ref$i = $15;
  $16 = $ref$i;
  $17 = HEAP16[$16>>1]|0;
  $count$i = $17;
  $18 = $count$i;
  $19 = $18&65535;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $count$i;
   $22 = (($21) + 1)<<16>>16;
   $count$i = $22;
   $23 = $count$i;
   $24 = $ref$i;
   HEAP16[$24>>1] = $23;
  }
 }
 $25 = $3;
 HEAP32[$5>>2] = $25;
 $26 = ((($5)) + 4|0);
 $0 = 0;
 $27 = $0;
 $28 = (+($27>>>0));
 HEAPF32[$1>>2] = $28;
 $29 = HEAP32[$1>>2]|0;
 $30 = -8 & $29;
 $31 = (1 + ($30))|0;
 $32 = $31;
 HEAP32[$26>>2] = $32;
 $33 = (_mu_tbl_fromlist($5,2)|0);
 $34 = (_mu_fn_fromsbfn(0,311,$33)|0);
 STACKTOP = sp;return ($34|0);
}
function _mu_tbl_pairs_step($scope,$frame) {
 $scope = $scope|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $count$i = 0, $i = 0, $next = 0, $ref$i = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 68|0;
 $6 = sp + 44|0;
 $8 = sp + 36|0;
 $10 = sp + 28|0;
 $12 = sp + 20|0;
 $i = sp + 4|0;
 $13 = $scope;
 $14 = $frame;
 $15 = $13;
 $11 = 0;
 $16 = $11;
 $17 = (+($16>>>0));
 HEAPF32[$12>>2] = $17;
 $18 = HEAP32[$12>>2]|0;
 $19 = -8 & $18;
 $20 = (1 + ($19))|0;
 $21 = $20;
 $22 = (_mu_tbl_lookup($15,$21)|0);
 $t = $22;
 $23 = $13;
 $9 = 1;
 $24 = $9;
 $25 = (+($24>>>0));
 HEAPF32[$10>>2] = $25;
 $26 = HEAP32[$10>>2]|0;
 $27 = -8 & $26;
 $28 = (1 + ($27))|0;
 $29 = $28;
 $30 = (_mu_tbl_lookup($23,$29)|0);
 $2 = $30;
 $31 = $2;
 $0 = $31;
 $32 = $0;
 $33 = $32;
 $34 = (($33) - 1)|0;
 HEAP32[$1>>2] = $34;
 $35 = +HEAPF32[$1>>2];
 $36 = (~~(($35))>>>0);
 HEAP32[$i>>2] = $36;
 $37 = $t;
 $38 = $14;
 $39 = $14;
 $40 = ((($39)) + 4|0);
 $41 = (_mu_tbl_next($37,$i,$38,$40)|0);
 $42 = $41&1;
 $next = $42;
 $43 = $t;
 $4 = $43;
 $44 = $4;
 $3 = $44;
 $45 = $3;
 $46 = $45;
 $47 = 6 & $46;
 $48 = ($47|0)!=(0);
 if ($48) {
  $49 = $4;
  $50 = $49;
  $51 = -8 & $50;
  $52 = $51;
  $ref$i = $52;
  $53 = $ref$i;
  $54 = HEAP16[$53>>1]|0;
  $count$i = $54;
  $55 = $count$i;
  $56 = $55&65535;
  $57 = ($56|0)!=(0);
  if ($57) {
   $58 = $count$i;
   $59 = (($58) + -1)<<16>>16;
   $count$i = $59;
   $60 = $count$i;
   $61 = $ref$i;
   HEAP16[$61>>1] = $60;
   $62 = $count$i;
   $63 = $62&65535;
   $64 = ($63|0)==(0);
   if ($64) {
    $65 = $4;
    _mu_destroy($65);
   }
  }
 }
 $66 = $13;
 $5 = 1;
 $67 = $5;
 $68 = (+($67>>>0));
 HEAPF32[$6>>2] = $68;
 $69 = HEAP32[$6>>2]|0;
 $70 = -8 & $69;
 $71 = (1 + ($70))|0;
 $72 = $71;
 $73 = HEAP32[$i>>2]|0;
 $7 = $73;
 $74 = $7;
 $75 = (+($74>>>0));
 HEAPF32[$8>>2] = $75;
 $76 = HEAP32[$8>>2]|0;
 $77 = -8 & $76;
 $78 = (1 + ($77))|0;
 $79 = $78;
 _mu_tbl_insert($66,$72,$79);
 $80 = $next;
 $81 = $80&1;
 $82 = $81 ? 2 : 0;
 $83 = $82&255;
 STACKTOP = sp;return ($83|0);
}
function _mu_tbl_initpairs($t,$tail,$def,$n) {
 $t = $t|0;
 $tail = $tail|0;
 $def = $def|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = $tail;
 $2 = $def;
 $3 = $n;
 $4 = $0;
 $5 = $4;
 $6 = (($5) + 4)|0;
 $7 = $6;
 $m = $7;
 $8 = $1;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $m;
  $11 = $1;
  $12 = (FUNCTION_TABLE_i[$11 & 511]()|0);
  _mu_tbl_settail($10,$12);
 }
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = $3;
  $15 = ($13>>>0)<($14>>>0);
  if (!($15)) {
   break;
  }
  $16 = $m;
  $17 = $i;
  $18 = $2;
  $19 = (($18) + ($17<<3)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_i[$20 & 511]()|0);
  $22 = $i;
  $23 = $2;
  $24 = (($23) + ($22<<3)|0);
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (FUNCTION_TABLE_i[$26 & 511]()|0);
  _mu_tbl_insert($16,$21,$27);
  $28 = $i;
  $29 = (($28) + 1)|0;
  $i = $29;
 }
 $30 = $0;
 $31 = $30;
 $32 = (($31) + 5)|0;
 $33 = $32;
 STACKTOP = sp;return ($33|0);
}
function _mu_tbl_frommu($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $ref$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $1 = sp + 48|0;
 $7 = $m;
 $8 = $7;
 $5 = $8;
 $9 = $5;
 $10 = $9;
 $11 = 7 & $10;
 switch ($11|0) {
 case 0:  {
  $12 = (_mu_tbl_create(0)|0);
  $6 = $12;
  $54 = $6;
  STACKTOP = sp;return ($54|0);
  break;
 }
 case 1:  {
  $13 = $7;
  $2 = $13;
  $14 = $2;
  $0 = $14;
  $15 = $0;
  $16 = $15;
  $17 = (($16) - 1)|0;
  HEAP32[$1>>2] = $17;
  $18 = +HEAPF32[$1>>2];
  $19 = (~~(($18))>>>0);
  $20 = (_mu_tbl_create($19)|0);
  $6 = $20;
  $54 = $6;
  STACKTOP = sp;return ($54|0);
  break;
 }
 case 3:  {
  $21 = (_mu_iter_def()|0);
  $22 = $7;
  HEAP32[$vararg_buffer>>2] = $22;
  $23 = (_mu_fn_call($21,17,$vararg_buffer)|0);
  $24 = (_mu_tbl_fromiter($23)|0);
  $6 = $24;
  $54 = $6;
  STACKTOP = sp;return ($54|0);
  break;
 }
 case 5: case 4:  {
  $25 = (_mu_pairs_def()|0);
  $26 = $7;
  HEAP32[$vararg_buffer1>>2] = $26;
  $27 = (_mu_fn_call($25,17,$vararg_buffer1)|0);
  $28 = (_mu_tbl_fromiter($27)|0);
  $6 = $28;
  $54 = $6;
  STACKTOP = sp;return ($54|0);
  break;
 }
 case 7:  {
  $29 = $7;
  $30 = (_mu_tbl_fromiter($29)|0);
  $6 = $30;
  $54 = $6;
  STACKTOP = sp;return ($54|0);
  break;
 }
 default: {
  $31 = $7;
  $4 = $31;
  $32 = $4;
  $3 = $32;
  $33 = $3;
  $34 = $33;
  $35 = 6 & $34;
  $36 = ($35|0)!=(0);
  if ($36) {
   $37 = $4;
   $38 = $37;
   $39 = -8 & $38;
   $40 = $39;
   $ref$i = $40;
   $41 = $ref$i;
   $42 = HEAP16[$41>>1]|0;
   $count$i = $42;
   $43 = $count$i;
   $44 = $43&65535;
   $45 = ($44|0)!=(0);
   if ($45) {
    $46 = $count$i;
    $47 = (($46) + -1)<<16>>16;
    $count$i = $47;
    $48 = $count$i;
    $49 = $ref$i;
    HEAP16[$49>>1] = $48;
    $50 = $count$i;
    $51 = $50&65535;
    $52 = ($51|0)==(0);
    if ($52) {
     $53 = $4;
     _mu_destroy($53);
    }
   }
  }
  $6 = 0;
  $54 = $6;
  STACKTOP = sp;return ($54|0);
 }
 }
 return (0)|0;
}
function _mu_tbl_fromiter($i) {
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $frame = 0, $index = 0, $ref$i = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 36|0;
 $frame = sp + 16|0;
 $4 = $i;
 $5 = (_mu_tbl_create(0)|0);
 $t = $5;
 $index = 0;
 while(1) {
  $6 = $4;
  $7 = (_mu_fn_next($6,2,$frame)|0);
  if (!($7)) {
   break;
  }
  $8 = ((($frame)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0|0);
  $11 = $t;
  if ($10) {
   $12 = HEAP32[$frame>>2]|0;
   $13 = ((($frame)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   _mu_tbl_insert($11,$12,$14);
   continue;
  } else {
   $15 = $index;
   $16 = (($15) + 1)|0;
   $index = $16;
   $2 = $15;
   $17 = $2;
   $18 = (+($17>>>0));
   HEAPF32[$3>>2] = $18;
   $19 = HEAP32[$3>>2]|0;
   $20 = -8 & $19;
   $21 = (1 + ($20))|0;
   $22 = $21;
   $23 = HEAP32[$frame>>2]|0;
   _mu_tbl_insert($11,$22,$23);
   continue;
  }
 }
 $24 = $4;
 $1 = $24;
 $25 = $1;
 $0 = $25;
 $26 = $0;
 $27 = $26;
 $28 = 6 & $27;
 $29 = ($28|0)!=(0);
 if (!($29)) {
  $47 = $t;
  STACKTOP = sp;return ($47|0);
 }
 $30 = $1;
 $31 = $30;
 $32 = -8 & $31;
 $33 = $32;
 $ref$i = $33;
 $34 = $ref$i;
 $35 = HEAP16[$34>>1]|0;
 $count$i = $35;
 $36 = $count$i;
 $37 = $36&65535;
 $38 = ($37|0)!=(0);
 if (!($38)) {
  $47 = $t;
  STACKTOP = sp;return ($47|0);
 }
 $39 = $count$i;
 $40 = (($39) + -1)<<16>>16;
 $count$i = $40;
 $41 = $count$i;
 $42 = $ref$i;
 HEAP16[$42>>1] = $41;
 $43 = $count$i;
 $44 = $43&65535;
 $45 = ($44|0)==(0);
 if (!($45)) {
  $47 = $t;
  STACKTOP = sp;return ($47|0);
 }
 $46 = $1;
 _mu_destroy($46);
 $47 = $t;
 STACKTOP = sp;return ($47|0);
}
function _mu_tbl_push($t,$p,$i) {
 $t = $t|0;
 $p = $p|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0.0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count = 0, $j = 0, $j1 = 0, $k = 0, $off = 0;
 var $psize$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $37 = sp + 68|0;
 $43 = sp + 44|0;
 $47 = $t;
 $48 = $p;
 $49 = $i;
 $50 = $47;
 $46 = $50;
 $51 = $46;
 $52 = $51;
 $53 = 1 & $52;
 $54 = ($53|0)!=(0);
 if ($54) {
  _mu_errorro(3925);
  // unreachable;
 }
 $55 = $49;
 $56 = ($55|0)>=(0);
 $57 = $49;
 if ($56) {
  $67 = $57;
 } else {
  $58 = $47;
  $45 = $58;
  $59 = $45;
  $60 = $59;
  $61 = $60 & -8;
  $62 = $61;
  $63 = ((($62)) + 2|0);
  $64 = HEAP16[$63>>1]|0;
  $65 = $64&65535;
  $66 = (($57) + ($65))|0;
  $67 = $66;
 }
 $49 = $67;
 $68 = $49;
 $69 = $47;
 $38 = $69;
 $70 = $38;
 $71 = $70;
 $72 = $71 & -8;
 $73 = $72;
 $74 = ((($73)) + 2|0);
 $75 = HEAP16[$74>>1]|0;
 $76 = $75&65535;
 $77 = ($68|0)>($76|0);
 if ($77) {
  $78 = $47;
  $31 = $78;
  $79 = $31;
  $80 = $79;
  $81 = $80 & -8;
  $82 = $81;
  $83 = ((($82)) + 2|0);
  $84 = HEAP16[$83>>1]|0;
  $85 = $84&65535;
  $90 = $85;
 } else {
  $86 = $49;
  $87 = ($86|0)<(0);
  $88 = $49;
  $89 = $87 ? 0 : $88;
  $90 = $89;
 }
 $49 = $90;
 $91 = $47;
 $7 = $91;
 $92 = $7;
 $6 = $92;
 $93 = $6;
 $94 = $93;
 $95 = $94 & -8;
 $96 = $95;
 $97 = ((($96)) + 2|0);
 $98 = HEAP16[$97>>1]|0;
 $99 = $98&65535;
 $100 = $7;
 $5 = $100;
 $101 = $5;
 $102 = $101;
 $103 = $102 & -8;
 $104 = $103;
 $105 = ((($104)) + 4|0);
 $106 = HEAP16[$105>>1]|0;
 $107 = $106&65535;
 $108 = (($99) + ($107))|0;
 $109 = (($108) + 1)|0;
 $110 = $47;
 $4 = $110;
 $111 = $4;
 $3 = $111;
 $112 = $3;
 $113 = $112;
 $114 = $113 & -8;
 $115 = $114;
 $116 = ((($115)) + 6|0);
 $117 = HEAP8[$116>>0]|0;
 $118 = $117&255;
 $119 = 1 << $118;
 $120 = ($109>>>0)>=($119>>>0);
 do {
  if ($120) {
   $121 = $47;
   $0 = $121;
   $122 = $0;
   $123 = $122;
   $124 = $123 & -8;
   $125 = $124;
   $126 = ((($125)) + 2|0);
   $127 = HEAP16[$126>>1]|0;
   $128 = $127&65535;
   $129 = (($128) + 1)|0;
   $130 = ($129>>>0)<=(65535);
   if (!($130)) {
    _mu_errorlen(3925);
    // unreachable;
   }
   $131 = $47;
   $2 = $131;
   $132 = $2;
   $1 = $132;
   $133 = $1;
   $134 = $133;
   $135 = $134 & -8;
   $136 = $135;
   $137 = ((($136)) + 7|0);
   $138 = HEAP8[$137>>0]|0;
   $139 = $138&255;
   $140 = ($139|0)==(0);
   $141 = $47;
   $142 = $49;
   $143 = (($142) + 1)|0;
   $144 = $143&65535;
   if ($140) {
    _mu_tbl_listexpand($141,$144);
    break;
   } else {
    _mu_tbl_pairsexpand($141,$144);
    break;
   }
  }
 } while(0);
 $145 = $47;
 $9 = $145;
 $146 = $9;
 $8 = $146;
 $147 = $8;
 $148 = $147;
 $149 = $148 & -8;
 $150 = $149;
 $151 = ((($150)) + 7|0);
 $152 = HEAP8[$151>>0]|0;
 $153 = $152&255;
 $154 = ($153|0)==(0);
 if ($154) {
  $155 = $49;
  $156 = (($155) + 1)|0;
  $157 = $47;
  $10 = $157;
  $158 = $10;
  $159 = $158;
  $160 = $159 & -8;
  $161 = $160;
  $162 = ((($161)) + 12|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (($163) + ($156<<2)|0);
  $165 = $49;
  $166 = $47;
  $11 = $166;
  $167 = $11;
  $168 = $167;
  $169 = $168 & -8;
  $170 = $169;
  $171 = ((($170)) + 12|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = (($172) + ($165<<2)|0);
  $174 = $47;
  $13 = $174;
  $175 = $13;
  $12 = $175;
  $176 = $12;
  $177 = $176;
  $178 = $177 & -8;
  $179 = $178;
  $180 = ((($179)) + 6|0);
  $181 = HEAP8[$180>>0]|0;
  $182 = $181&255;
  $183 = 1 << $182;
  $184 = $49;
  $185 = (($184) + 1)|0;
  $186 = (($183) - ($185))|0;
  $187 = $186<<2;
  _memmove(($164|0),($173|0),($187|0))|0;
  $188 = $48;
  $189 = $49;
  $190 = $47;
  $14 = $190;
  $191 = $14;
  $192 = $191;
  $193 = $192 & -8;
  $194 = $193;
  $195 = ((($194)) + 12|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = (($196) + ($189<<2)|0);
  HEAP32[$197>>2] = $188;
  $198 = $48;
  $199 = ($198|0)!=(0|0);
  $200 = $199 ? 1 : 0;
  $201 = $47;
  $15 = $201;
  $202 = $15;
  $203 = $202;
  $204 = $203 & -8;
  $205 = $204;
  $206 = ((($205)) + 2|0);
  $207 = HEAP16[$206>>1]|0;
  $208 = $207&65535;
  $209 = (($208) + ($200))|0;
  $210 = $209&65535;
  HEAP16[$206>>1] = $210;
  STACKTOP = sp;return;
 }
 $211 = $47;
 $19 = $211;
 $psize$i = 8;
 $212 = $19;
 $18 = $212;
 $213 = $18;
 $214 = $213;
 $215 = $214 & -8;
 $216 = $215;
 $217 = ((($216)) + 7|0);
 $218 = HEAP8[$217>>0]|0;
 $219 = $218&255;
 $220 = $19;
 $17 = $220;
 $221 = $17;
 $16 = $221;
 $222 = $16;
 $223 = $222;
 $224 = $223 & -8;
 $225 = $224;
 $226 = ((($225)) + 6|0);
 $227 = HEAP8[$226>>0]|0;
 $228 = $227&255;
 $229 = 1 << $228;
 $230 = Math_imul($219, $229)|0;
 $231 = (($230) + 8)|0;
 $232 = (($231) - 1)|0;
 $233 = (($232>>>0) / 8)&-1;
 $off = $233;
 $234 = $47;
 $22 = $234;
 $235 = $22;
 $21 = $235;
 $236 = $21;
 $237 = $236;
 $238 = $237 & -8;
 $239 = $238;
 $240 = ((($239)) + 2|0);
 $241 = HEAP16[$240>>1]|0;
 $242 = $241&65535;
 $243 = $22;
 $20 = $243;
 $244 = $20;
 $245 = $244;
 $246 = $245 & -8;
 $247 = $246;
 $248 = ((($247)) + 4|0);
 $249 = HEAP16[$248>>1]|0;
 $250 = $249&65535;
 $251 = (($242) + ($250))|0;
 $count = $251;
 $252 = $47;
 $23 = $252;
 $253 = $23;
 $254 = $253;
 $255 = $254 & -8;
 $256 = $255;
 $257 = ((($256)) + 2|0);
 HEAP16[$257>>1] = 0;
 $258 = $47;
 $24 = $258;
 $259 = $24;
 $260 = $259;
 $261 = $260 & -8;
 $262 = $261;
 $263 = ((($262)) + 4|0);
 HEAP16[$263>>1] = 0;
 $264 = $47;
 $25 = $264;
 $265 = $25;
 $266 = $265;
 $267 = $266 & -8;
 $268 = $267;
 $269 = ((($268)) + 12|0);
 $270 = HEAP32[$269>>2]|0;
 $271 = $47;
 $27 = $271;
 $272 = $27;
 $26 = $272;
 $273 = $26;
 $274 = $273;
 $275 = $274 & -8;
 $276 = $275;
 $277 = ((($276)) + 6|0);
 $278 = HEAP8[$277>>0]|0;
 $279 = $278&255;
 $280 = 1 << $279;
 _memset(($270|0),0,($280|0))|0;
 $j = 0;
 while(1) {
  $281 = $j;
  $282 = $49;
  $283 = ($281>>>0)<($282>>>0);
  if (!($283)) {
   break;
  }
  $284 = $j;
  $285 = $off;
  $286 = (($284) + ($285))|0;
  $287 = $286<<1;
  $288 = (($287) + 1)|0;
  $289 = $47;
  $28 = $289;
  $290 = $28;
  $291 = $290;
  $292 = $291 & -8;
  $293 = $292;
  $294 = ((($293)) + 12|0);
  $295 = HEAP32[$294>>2]|0;
  $296 = (($295) + ($288<<2)|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = ($297|0)!=(0|0);
  if ($298) {
   $301 = $47;
   $302 = $j;
   $303 = $off;
   $304 = (($302) + ($303))|0;
   $305 = $304<<1;
   $306 = (($305) + 0)|0;
   $307 = $47;
   $29 = $307;
   $308 = $29;
   $309 = $308;
   $310 = $309 & -8;
   $311 = $310;
   $312 = ((($311)) + 12|0);
   $313 = HEAP32[$312>>2]|0;
   $314 = (($313) + ($306<<2)|0);
   $315 = HEAP32[$314>>2]|0;
   $316 = $j;
   $317 = $off;
   $318 = (($316) + ($317))|0;
   $319 = $318<<1;
   $320 = (($319) + 1)|0;
   $321 = $47;
   $30 = $321;
   $322 = $30;
   $323 = $322;
   $324 = $323 & -8;
   $325 = $324;
   $326 = ((($325)) + 12|0);
   $327 = HEAP32[$326>>2]|0;
   $328 = (($327) + ($320<<2)|0);
   $329 = HEAP32[$328>>2]|0;
   _mu_tbl_insert($301,$315,$329);
  } else {
   $299 = $49;
   $300 = (($299) + 1)|0;
   $49 = $300;
  }
  $330 = $j;
  $331 = (($330) + 1)|0;
  $j = $331;
 }
 $332 = $49;
 $333 = (($332) + 1)|0;
 $334 = $off;
 $335 = (($333) + ($334))|0;
 $336 = $335<<1;
 $337 = $47;
 $32 = $337;
 $338 = $32;
 $339 = $338;
 $340 = $339 & -8;
 $341 = $340;
 $342 = ((($341)) + 12|0);
 $343 = HEAP32[$342>>2]|0;
 $344 = (($343) + ($336<<2)|0);
 $345 = $49;
 $346 = $off;
 $347 = (($345) + ($346))|0;
 $348 = $347<<1;
 $349 = $47;
 $33 = $349;
 $350 = $33;
 $351 = $350;
 $352 = $351 & -8;
 $353 = $352;
 $354 = ((($353)) + 12|0);
 $355 = HEAP32[$354>>2]|0;
 $356 = (($355) + ($348<<2)|0);
 $357 = $47;
 $35 = $357;
 $358 = $35;
 $34 = $358;
 $359 = $34;
 $360 = $359;
 $361 = $360 & -8;
 $362 = $361;
 $363 = ((($362)) + 6|0);
 $364 = HEAP8[$363>>0]|0;
 $365 = $364&255;
 $366 = 1 << $365;
 $367 = $49;
 $368 = (($367) + 1)|0;
 $369 = $off;
 $370 = (($368) + ($369))|0;
 $371 = (($366) - ($370))|0;
 $372 = $371<<1;
 $373 = $372<<2;
 _memmove(($344|0),($356|0),($373|0))|0;
 $374 = $47;
 $375 = $49;
 $36 = $375;
 $376 = $36;
 $377 = (+($376>>>0));
 HEAPF32[$37>>2] = $377;
 $378 = HEAP32[$37>>2]|0;
 $379 = -8 & $378;
 $380 = (1 + ($379))|0;
 $381 = $380;
 $382 = $48;
 _mu_tbl_insert($374,$381,$382);
 $383 = $49;
 $j1 = $383;
 while(1) {
  $384 = $j1;
  $385 = $count;
  $386 = ($384>>>0)<($385>>>0);
  if (!($386)) {
   break;
  }
  $387 = $j1;
  $388 = (($387) + 1)|0;
  $389 = $off;
  $390 = (($388) + ($389))|0;
  $391 = $390<<1;
  $392 = (($391) + 0)|0;
  $393 = $47;
  $39 = $393;
  $394 = $39;
  $395 = $394;
  $396 = $395 & -8;
  $397 = $396;
  $398 = ((($397)) + 12|0);
  $399 = HEAP32[$398>>2]|0;
  $400 = (($399) + ($392<<2)|0);
  $401 = HEAP32[$400>>2]|0;
  $k = $401;
  $402 = $k;
  $41 = $402;
  $403 = $41;
  $40 = $403;
  $404 = $40;
  $405 = $404;
  $406 = 7 & $405;
  $407 = ($406|0)==(1);
  if ($407) {
   $408 = $k;
   $42 = 1;
   $409 = $42;
   $410 = (+($409>>>0));
   HEAPF32[$43>>2] = $410;
   $411 = HEAP32[$43>>2]|0;
   $412 = -8 & $411;
   $413 = (1 + ($412))|0;
   $414 = $413;
   $415 = (_mu_num_add($408,$414)|0);
   $k = $415;
  }
  $416 = $47;
  $417 = $k;
  $418 = $j1;
  $419 = (($418) + 1)|0;
  $420 = $off;
  $421 = (($419) + ($420))|0;
  $422 = $421<<1;
  $423 = (($422) + 1)|0;
  $424 = $47;
  $44 = $424;
  $425 = $44;
  $426 = $425;
  $427 = $426 & -8;
  $428 = $427;
  $429 = ((($428)) + 12|0);
  $430 = HEAP32[$429>>2]|0;
  $431 = (($430) + ($423<<2)|0);
  $432 = HEAP32[$431>>2]|0;
  _mu_tbl_insert($416,$417,$432);
  $433 = $j1;
  $434 = (($433) + 1)|0;
  $j1 = $434;
 }
 STACKTOP = sp;return;
}
function _mu_tbl_pop($t,$i) {
 $t = $t|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0.0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count = 0, $count$i = 0, $j = 0, $j2 = 0, $k = 0, $off = 0, $p = 0, $p1 = 0;
 var $psize$i = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $33 = sp + 56|0;
 $38 = $t;
 $39 = $i;
 $40 = $38;
 $36 = $40;
 $41 = $36;
 $42 = $41;
 $43 = 1 & $42;
 $44 = ($43|0)!=(0);
 if ($44) {
  _mu_errorro(3925);
  // unreachable;
 }
 $45 = $39;
 $46 = ($45|0)>=(0);
 $47 = $39;
 if ($46) {
  $57 = $47;
 } else {
  $48 = $38;
  $35 = $48;
  $49 = $35;
  $50 = $49;
  $51 = $50 & -8;
  $52 = $51;
  $53 = ((($52)) + 2|0);
  $54 = HEAP16[$53>>1]|0;
  $55 = $54&65535;
  $56 = (($47) + ($55))|0;
  $57 = $56;
 }
 $39 = $57;
 $58 = $39;
 $59 = $38;
 $25 = $59;
 $60 = $25;
 $61 = $60;
 $62 = $61 & -8;
 $63 = $62;
 $64 = ((($63)) + 2|0);
 $65 = HEAP16[$64>>1]|0;
 $66 = $65&65535;
 $67 = ($58|0)>($66|0);
 if ($67) {
  $68 = $38;
  $23 = $68;
  $69 = $23;
  $70 = $69;
  $71 = $70 & -8;
  $72 = $71;
  $73 = ((($72)) + 2|0);
  $74 = HEAP16[$73>>1]|0;
  $75 = $74&65535;
  $80 = $75;
 } else {
  $76 = $39;
  $77 = ($76|0)<(0);
  $78 = $39;
  $79 = $77 ? 0 : $78;
  $80 = $79;
 }
 $39 = $80;
 $81 = $38;
 $1 = $81;
 $82 = $1;
 $0 = $82;
 $83 = $0;
 $84 = $83;
 $85 = $84 & -8;
 $86 = $85;
 $87 = ((($86)) + 7|0);
 $88 = HEAP8[$87>>0]|0;
 $89 = $88&255;
 $90 = ($89|0)==(0);
 if ($90) {
  $91 = $39;
  $92 = $38;
  $2 = $92;
  $93 = $2;
  $94 = $93;
  $95 = $94 & -8;
  $96 = $95;
  $97 = ((($96)) + 12|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) + ($91<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $p = $100;
  $101 = $39;
  $102 = $38;
  $3 = $102;
  $103 = $3;
  $104 = $103;
  $105 = $104 & -8;
  $106 = $105;
  $107 = ((($106)) + 12|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (($108) + ($101<<2)|0);
  $110 = $39;
  $111 = (($110) + 1)|0;
  $112 = $38;
  $4 = $112;
  $113 = $4;
  $114 = $113;
  $115 = $114 & -8;
  $116 = $115;
  $117 = ((($116)) + 12|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($118) + ($111<<2)|0);
  $120 = $38;
  $6 = $120;
  $121 = $6;
  $5 = $121;
  $122 = $5;
  $123 = $122;
  $124 = $123 & -8;
  $125 = $124;
  $126 = ((($125)) + 6|0);
  $127 = HEAP8[$126>>0]|0;
  $128 = $127&255;
  $129 = 1 << $128;
  $130 = $39;
  $131 = (($130) + 1)|0;
  $132 = (($129) - ($131))|0;
  $133 = $132<<2;
  _memmove(($109|0),($119|0),($133|0))|0;
  $134 = $p;
  $135 = ($134|0)!=(0|0);
  $136 = $135 ? 1 : 0;
  $137 = $38;
  $7 = $137;
  $138 = $7;
  $139 = $138;
  $140 = $139 & -8;
  $141 = $140;
  $142 = ((($141)) + 2|0);
  $143 = HEAP16[$142>>1]|0;
  $144 = $143&65535;
  $145 = (($144) - ($136))|0;
  $146 = $145&65535;
  HEAP16[$142>>1] = $146;
  $147 = $p;
  $37 = $147;
  $371 = $37;
  STACKTOP = sp;return ($371|0);
 }
 $148 = $38;
 $11 = $148;
 $psize$i = 8;
 $149 = $11;
 $10 = $149;
 $150 = $10;
 $151 = $150;
 $152 = $151 & -8;
 $153 = $152;
 $154 = ((($153)) + 7|0);
 $155 = HEAP8[$154>>0]|0;
 $156 = $155&255;
 $157 = $11;
 $9 = $157;
 $158 = $9;
 $8 = $158;
 $159 = $8;
 $160 = $159;
 $161 = $160 & -8;
 $162 = $161;
 $163 = ((($162)) + 6|0);
 $164 = HEAP8[$163>>0]|0;
 $165 = $164&255;
 $166 = 1 << $165;
 $167 = Math_imul($156, $166)|0;
 $168 = (($167) + 8)|0;
 $169 = (($168) - 1)|0;
 $170 = (($169>>>0) / 8)&-1;
 $off = $170;
 $171 = $38;
 $14 = $171;
 $172 = $14;
 $13 = $172;
 $173 = $13;
 $174 = $173;
 $175 = $174 & -8;
 $176 = $175;
 $177 = ((($176)) + 2|0);
 $178 = HEAP16[$177>>1]|0;
 $179 = $178&65535;
 $180 = $14;
 $12 = $180;
 $181 = $12;
 $182 = $181;
 $183 = $182 & -8;
 $184 = $183;
 $185 = ((($184)) + 4|0);
 $186 = HEAP16[$185>>1]|0;
 $187 = $186&65535;
 $188 = (($179) + ($187))|0;
 $count = $188;
 $189 = $38;
 $15 = $189;
 $190 = $15;
 $191 = $190;
 $192 = $191 & -8;
 $193 = $192;
 $194 = ((($193)) + 2|0);
 HEAP16[$194>>1] = 0;
 $195 = $38;
 $16 = $195;
 $196 = $16;
 $197 = $196;
 $198 = $197 & -8;
 $199 = $198;
 $200 = ((($199)) + 4|0);
 HEAP16[$200>>1] = 0;
 $201 = $38;
 $17 = $201;
 $202 = $17;
 $203 = $202;
 $204 = $203 & -8;
 $205 = $204;
 $206 = ((($205)) + 12|0);
 $207 = HEAP32[$206>>2]|0;
 $208 = $38;
 $19 = $208;
 $209 = $19;
 $18 = $209;
 $210 = $18;
 $211 = $210;
 $212 = $211 & -8;
 $213 = $212;
 $214 = ((($213)) + 6|0);
 $215 = HEAP8[$214>>0]|0;
 $216 = $215&255;
 $217 = 1 << $216;
 _memset(($207|0),0,($217|0))|0;
 $j = 0;
 while(1) {
  $218 = $j;
  $219 = $39;
  $220 = ($218>>>0)<($219>>>0);
  if (!($220)) {
   break;
  }
  $221 = $j;
  $222 = $off;
  $223 = (($221) + ($222))|0;
  $224 = $223<<1;
  $225 = (($224) + 1)|0;
  $226 = $38;
  $20 = $226;
  $227 = $20;
  $228 = $227;
  $229 = $228 & -8;
  $230 = $229;
  $231 = ((($230)) + 12|0);
  $232 = HEAP32[$231>>2]|0;
  $233 = (($232) + ($225<<2)|0);
  $234 = HEAP32[$233>>2]|0;
  $235 = ($234|0)!=(0|0);
  if ($235) {
   $238 = $38;
   $239 = $j;
   $240 = $off;
   $241 = (($239) + ($240))|0;
   $242 = $241<<1;
   $243 = (($242) + 0)|0;
   $244 = $38;
   $21 = $244;
   $245 = $21;
   $246 = $245;
   $247 = $246 & -8;
   $248 = $247;
   $249 = ((($248)) + 12|0);
   $250 = HEAP32[$249>>2]|0;
   $251 = (($250) + ($243<<2)|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = $j;
   $254 = $off;
   $255 = (($253) + ($254))|0;
   $256 = $255<<1;
   $257 = (($256) + 1)|0;
   $258 = $38;
   $22 = $258;
   $259 = $22;
   $260 = $259;
   $261 = $260 & -8;
   $262 = $261;
   $263 = ((($262)) + 12|0);
   $264 = HEAP32[$263>>2]|0;
   $265 = (($264) + ($257<<2)|0);
   $266 = HEAP32[$265>>2]|0;
   _mu_tbl_insert($238,$252,$266);
  } else {
   $236 = $39;
   $237 = (($236) + 1)|0;
   $39 = $237;
  }
  $267 = $j;
  $268 = (($267) + 1)|0;
  $j = $268;
 }
 $269 = $39;
 $270 = $off;
 $271 = (($269) + ($270))|0;
 $272 = $271<<1;
 $273 = (($272) + 0)|0;
 $274 = $38;
 $24 = $274;
 $275 = $24;
 $276 = $275;
 $277 = $276 & -8;
 $278 = $277;
 $279 = ((($278)) + 12|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = (($280) + ($273<<2)|0);
 $282 = HEAP32[$281>>2]|0;
 $27 = $282;
 $283 = $27;
 $26 = $283;
 $284 = $26;
 $285 = $284;
 $286 = 6 & $285;
 $287 = ($286|0)!=(0);
 if ($287) {
  $288 = $27;
  $289 = $288;
  $290 = -8 & $289;
  $291 = $290;
  $ref$i = $291;
  $292 = $ref$i;
  $293 = HEAP16[$292>>1]|0;
  $count$i = $293;
  $294 = $count$i;
  $295 = $294&65535;
  $296 = ($295|0)!=(0);
  if ($296) {
   $297 = $count$i;
   $298 = (($297) + -1)<<16>>16;
   $count$i = $298;
   $299 = $count$i;
   $300 = $ref$i;
   HEAP16[$300>>1] = $299;
   $301 = $count$i;
   $302 = $301&65535;
   $303 = ($302|0)==(0);
   if ($303) {
    $304 = $27;
    _mu_destroy($304);
   }
  }
 }
 $305 = $39;
 $306 = $off;
 $307 = (($305) + ($306))|0;
 $308 = $307<<1;
 $309 = (($308) + 1)|0;
 $310 = $38;
 $28 = $310;
 $311 = $28;
 $312 = $311;
 $313 = $312 & -8;
 $314 = $313;
 $315 = ((($314)) + 12|0);
 $316 = HEAP32[$315>>2]|0;
 $317 = (($316) + ($309<<2)|0);
 $318 = HEAP32[$317>>2]|0;
 $p1 = $318;
 $319 = $39;
 $320 = (($319) + 1)|0;
 $j2 = $320;
 while(1) {
  $321 = $j2;
  $322 = $count;
  $323 = ($321>>>0)<($322>>>0);
  if (!($323)) {
   break;
  }
  $324 = $j2;
  $325 = $off;
  $326 = (($324) + ($325))|0;
  $327 = $326<<1;
  $328 = (($327) + 0)|0;
  $329 = $38;
  $29 = $329;
  $330 = $29;
  $331 = $330;
  $332 = $331 & -8;
  $333 = $332;
  $334 = ((($333)) + 12|0);
  $335 = HEAP32[$334>>2]|0;
  $336 = (($335) + ($328<<2)|0);
  $337 = HEAP32[$336>>2]|0;
  $k = $337;
  $338 = $k;
  $31 = $338;
  $339 = $31;
  $30 = $339;
  $340 = $30;
  $341 = $340;
  $342 = 7 & $341;
  $343 = ($342|0)==(1);
  if ($343) {
   $344 = $k;
   $32 = 1;
   $345 = $32;
   $346 = (+($345>>>0));
   HEAPF32[$33>>2] = $346;
   $347 = HEAP32[$33>>2]|0;
   $348 = -8 & $347;
   $349 = (1 + ($348))|0;
   $350 = $349;
   $351 = (_mu_num_sub($344,$350)|0);
   $k = $351;
  }
  $352 = $38;
  $353 = $k;
  $354 = $j2;
  $355 = $off;
  $356 = (($354) + ($355))|0;
  $357 = $356<<1;
  $358 = (($357) + 1)|0;
  $359 = $38;
  $34 = $359;
  $360 = $34;
  $361 = $360;
  $362 = $361 & -8;
  $363 = $362;
  $364 = ((($363)) + 12|0);
  $365 = HEAP32[$364>>2]|0;
  $366 = (($365) + ($358<<2)|0);
  $367 = HEAP32[$366>>2]|0;
  _mu_tbl_insert($352,$353,$367);
  $368 = $j2;
  $369 = (($368) + 1)|0;
  $j2 = $369;
 }
 $370 = $p1;
 $37 = $370;
 $371 = $37;
 STACKTOP = sp;return ($371|0);
}
function _mu_tbl_concat($a,$b,$offset) {
 $a = $a|0;
 $b = $b|0;
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$i = 0;
 var $d = 0, $i = 0, $i1 = 0, $k = 0, $ref$i = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 80|0;
 $8 = sp + 60|0;
 $10 = sp + 52|0;
 $k = sp + 16|0;
 $v = sp + 12|0;
 $i = sp + 8|0;
 $i1 = sp + 4|0;
 $14 = $a;
 $15 = $b;
 $16 = $offset;
 $17 = $16;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $33 = $16;
  $7 = 0;
  $34 = $7;
  $35 = (+($34>>>0));
  HEAPF32[$8>>2] = $35;
  $36 = HEAP32[$8>>2]|0;
  $37 = -8 & $36;
  $38 = (1 + ($37))|0;
  $39 = $38;
  $40 = (_mu_num_cmp($33,$39)|0);
  $41 = ($40|0)<(0);
  if ($41) {
   $42 = $16;
   $43 = $14;
   $6 = $43;
   $44 = $6;
   $45 = $44;
   $46 = $45 & -8;
   $47 = $46;
   $48 = ((($47)) + 2|0);
   $49 = HEAP16[$48>>1]|0;
   $50 = $49&65535;
   $2 = $50;
   $51 = $2;
   $52 = (+($51>>>0));
   HEAPF32[$3>>2] = $52;
   $53 = HEAP32[$3>>2]|0;
   $54 = -8 & $53;
   $55 = (1 + ($54))|0;
   $56 = $55;
   $57 = (_mu_num_add($42,$56)|0);
   $16 = $57;
  }
 } else {
  $19 = $14;
  $13 = $19;
  $20 = $13;
  $21 = $20;
  $22 = $21 & -8;
  $23 = $22;
  $24 = ((($23)) + 2|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25&65535;
  $9 = $26;
  $27 = $9;
  $28 = (+($27>>>0));
  HEAPF32[$10>>2] = $28;
  $29 = HEAP32[$10>>2]|0;
  $30 = -8 & $29;
  $31 = (1 + ($30))|0;
  $32 = $31;
  $16 = $32;
 }
 $58 = $14;
 $1 = $58;
 $59 = $1;
 $60 = $59;
 $61 = $60 & -8;
 $62 = $61;
 $63 = ((($62)) + 2|0);
 $64 = HEAP16[$63>>1]|0;
 $65 = $64&65535;
 $66 = $15;
 $0 = $66;
 $67 = $0;
 $68 = $67;
 $69 = $68 & -8;
 $70 = $69;
 $71 = ((($70)) + 2|0);
 $72 = HEAP16[$71>>1]|0;
 $73 = $72&65535;
 $74 = (($65) + ($73))|0;
 $75 = (_mu_tbl_create($74)|0);
 $d = $75;
 HEAP32[$i>>2] = 0;
 while(1) {
  $76 = $14;
  $77 = (_mu_tbl_next($76,$i,$k,$v)|0);
  if (!($77)) {
   break;
  }
  $78 = $d;
  $79 = HEAP32[$k>>2]|0;
  $80 = HEAP32[$v>>2]|0;
  _mu_tbl_insert($78,$79,$80);
 }
 HEAP32[$i1>>2] = 0;
 while(1) {
  $81 = $15;
  $82 = (_mu_tbl_next($81,$i1,$k,$v)|0);
  if (!($82)) {
   break;
  }
  $83 = HEAP32[$k>>2]|0;
  $5 = $83;
  $84 = $5;
  $4 = $84;
  $85 = $4;
  $86 = $85;
  $87 = 7 & $86;
  $88 = ($87|0)==(1);
  $89 = $d;
  $90 = HEAP32[$k>>2]|0;
  if ($88) {
   $91 = $16;
   $92 = (_mu_num_add($90,$91)|0);
   $93 = HEAP32[$v>>2]|0;
   _mu_tbl_insert($89,$92,$93);
   continue;
  } else {
   $94 = HEAP32[$v>>2]|0;
   _mu_tbl_insert($89,$90,$94);
   continue;
  }
 }
 $95 = $15;
 $12 = $95;
 $96 = $12;
 $11 = $96;
 $97 = $11;
 $98 = $97;
 $99 = 6 & $98;
 $100 = ($99|0)!=(0);
 if (!($100)) {
  $118 = $d;
  STACKTOP = sp;return ($118|0);
 }
 $101 = $12;
 $102 = $101;
 $103 = -8 & $102;
 $104 = $103;
 $ref$i = $104;
 $105 = $ref$i;
 $106 = HEAP16[$105>>1]|0;
 $count$i = $106;
 $107 = $count$i;
 $108 = $107&65535;
 $109 = ($108|0)!=(0);
 if (!($109)) {
  $118 = $d;
  STACKTOP = sp;return ($118|0);
 }
 $110 = $count$i;
 $111 = (($110) + -1)<<16>>16;
 $count$i = $111;
 $112 = $count$i;
 $113 = $ref$i;
 HEAP16[$113>>1] = $112;
 $114 = $count$i;
 $115 = $114&65535;
 $116 = ($115|0)==(0);
 if (!($116)) {
  $118 = $d;
  STACKTOP = sp;return ($118|0);
 }
 $117 = $12;
 _mu_destroy($117);
 $118 = $d;
 STACKTOP = sp;return ($118|0);
}
function _mu_tbl_subset($t,$lower,$upper) {
 $t = $t|0;
 $lower = $lower|0;
 $upper = $upper|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$i = 0, $d = 0, $i = 0, $j = 0, $j1 = 0, $k = 0, $ref$i = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = sp + 52|0;
 $i = sp + 20|0;
 $k = sp + 8|0;
 $v = sp + 4|0;
 $11 = $t;
 $12 = $lower;
 $13 = $upper;
 $14 = $12;
 $15 = ($14|0)>=(0);
 $16 = $12;
 if ($15) {
  $26 = $16;
 } else {
  $17 = $11;
  $9 = $17;
  $18 = $9;
  $19 = $18;
  $20 = $19 & -8;
  $21 = $20;
  $22 = ((($21)) + 2|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  $25 = (($16) + ($24))|0;
  $26 = $25;
 }
 $12 = $26;
 $27 = $13;
 $28 = ($27|0)>=(0);
 $29 = $13;
 if ($28) {
  $39 = $29;
 } else {
  $30 = $11;
  $8 = $30;
  $31 = $8;
  $32 = $31;
  $33 = $32 & -8;
  $34 = $33;
  $35 = ((($34)) + 2|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36&65535;
  $38 = (($29) + ($37))|0;
  $39 = $38;
 }
 $13 = $39;
 $40 = $12;
 $41 = ($40|0)<(0);
 if ($41) {
  $12 = 0;
 }
 $42 = $13;
 $43 = $11;
 $3 = $43;
 $44 = $3;
 $45 = $44;
 $46 = $45 & -8;
 $47 = $46;
 $48 = ((($47)) + 2|0);
 $49 = HEAP16[$48>>1]|0;
 $50 = $49&65535;
 $51 = ($42|0)>($50|0);
 if ($51) {
  $52 = $11;
  $2 = $52;
  $53 = $2;
  $54 = $53;
  $55 = $54 & -8;
  $56 = $55;
  $57 = ((($56)) + 2|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = $58&65535;
  $13 = $59;
 }
 $60 = $12;
 $61 = $13;
 $62 = ($60|0)>=($61|0);
 if ($62) {
  $63 = $11;
  $1 = $63;
  $64 = $1;
  $0 = $64;
  $65 = $0;
  $66 = $65;
  $67 = 6 & $66;
  $68 = ($67|0)!=(0);
  if ($68) {
   $69 = $1;
   $70 = $69;
   $71 = -8 & $70;
   $72 = $71;
   $ref$i = $72;
   $73 = $ref$i;
   $74 = HEAP16[$73>>1]|0;
   $count$i = $74;
   $75 = $count$i;
   $76 = $75&65535;
   $77 = ($76|0)!=(0);
   if ($77) {
    $78 = $count$i;
    $79 = (($78) + -1)<<16>>16;
    $count$i = $79;
    $80 = $count$i;
    $81 = $ref$i;
    HEAP16[$81>>1] = $80;
    $82 = $count$i;
    $83 = $82&65535;
    $84 = ($83|0)==(0);
    if ($84) {
     $85 = $1;
     _mu_destroy($85);
    }
   }
  }
  $86 = (_mu_tbl_create(0)|0);
  $10 = $86;
  $123 = $10;
  STACKTOP = sp;return ($123|0);
 }
 $87 = $13;
 $88 = $12;
 $89 = (($87) - ($88))|0;
 $90 = (_mu_tbl_create($89)|0);
 $d = $90;
 HEAP32[$i>>2] = 0;
 $j = 0;
 while(1) {
  $91 = $j;
  $92 = $12;
  $93 = ($91>>>0)<($92>>>0);
  if (!($93)) {
   break;
  }
  $94 = $11;
  (_mu_tbl_next($94,$i,0,0)|0);
  $95 = $j;
  $96 = (($95) + 1)|0;
  $j = $96;
 }
 $97 = $12;
 $j1 = $97;
 while(1) {
  $98 = $j1;
  $99 = $13;
  $100 = ($98>>>0)<($99>>>0);
  if (!($100)) {
   break;
  }
  $101 = $11;
  (_mu_tbl_next($101,$i,$k,$v)|0);
  $102 = HEAP32[$k>>2]|0;
  $5 = $102;
  $103 = $5;
  $4 = $103;
  $104 = $4;
  $105 = $104;
  $106 = 7 & $105;
  $107 = ($106|0)==(1);
  if ($107) {
   $108 = HEAP32[$k>>2]|0;
   $109 = $12;
   $6 = $109;
   $110 = $6;
   $111 = (+($110>>>0));
   HEAPF32[$7>>2] = $111;
   $112 = HEAP32[$7>>2]|0;
   $113 = -8 & $112;
   $114 = (1 + ($113))|0;
   $115 = $114;
   $116 = (_mu_num_sub($108,$115)|0);
   HEAP32[$k>>2] = $116;
  }
  $117 = $d;
  $118 = HEAP32[$k>>2]|0;
  $119 = HEAP32[$v>>2]|0;
  _mu_tbl_insert($117,$118,$119);
  $120 = $j1;
  $121 = (($120) + 1)|0;
  $j1 = $121;
 }
 $122 = $d;
 $10 = $122;
 $123 = $10;
 STACKTOP = sp;return ($123|0);
}
function _mu_tbl_and($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alen = 0;
 var $blen = 0, $count$i = 0, $count$i10 = 0, $count$i2 = 0, $count$i5 = 0, $count$i7 = 0, $d = 0, $i = 0, $k = 0, $ref$i = 0, $ref$i1 = 0, $ref$i4 = 0, $ref$i6 = 0, $ref$i9 = 0, $v = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $k = sp + 48|0;
 $v = sp + 44|0;
 $i = sp + 40|0;
 $12 = $a;
 $13 = $b;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = $15;
 $17 = $16 & -8;
 $18 = $17;
 $19 = ((($18)) + 2|0);
 $20 = HEAP16[$19>>1]|0;
 $alen = $20;
 $21 = $13;
 $8 = $21;
 $22 = $8;
 $23 = $22;
 $24 = $23 & -8;
 $25 = $24;
 $26 = ((($25)) + 2|0);
 $27 = HEAP16[$26>>1]|0;
 $blen = $27;
 $28 = $alen;
 $29 = $28&65535;
 $30 = $blen;
 $31 = $30&65535;
 $32 = ($29|0)<($31|0);
 $33 = $alen;
 $34 = $blen;
 $$sink = $32 ? $33 : $34;
 $35 = $$sink&65535;
 $36 = (_mu_tbl_create($35)|0);
 $d = $36;
 HEAP32[$i>>2] = 0;
 while(1) {
  $37 = $12;
  $38 = (_mu_tbl_next($37,$i,$k,$v)|0);
  $39 = $13;
  if (!($38)) {
   break;
  }
  $40 = HEAP32[$k>>2]|0;
  $5 = $40;
  $41 = $5;
  $4 = $41;
  $42 = $4;
  $43 = $42;
  $44 = 6 & $43;
  $45 = ($44|0)!=(0);
  if ($45) {
   $46 = $5;
   $47 = $46;
   $48 = -8 & $47;
   $49 = $48;
   $ref$i4 = $49;
   $50 = $ref$i4;
   $51 = HEAP16[$50>>1]|0;
   $count$i5 = $51;
   $52 = $count$i5;
   $53 = $52&65535;
   $54 = ($53|0)!=(0);
   if ($54) {
    $55 = $count$i5;
    $56 = (($55) + 1)<<16>>16;
    $count$i5 = $56;
    $57 = $count$i5;
    $58 = $ref$i4;
    HEAP16[$58>>1] = $57;
   }
  }
  $59 = $5;
  $60 = (_mu_tbl_lookup($39,$59)|0);
  $w = $60;
  $61 = $w;
  $62 = ($61|0)!=(0|0);
  if ($62) {
   $63 = $w;
   $1 = $63;
   $64 = $1;
   $0 = $64;
   $65 = $0;
   $66 = $65;
   $67 = 6 & $66;
   $68 = ($67|0)!=(0);
   if ($68) {
    $69 = $1;
    $70 = $69;
    $71 = -8 & $70;
    $72 = $71;
    $ref$i9 = $72;
    $73 = $ref$i9;
    $74 = HEAP16[$73>>1]|0;
    $count$i10 = $74;
    $75 = $count$i10;
    $76 = $75&65535;
    $77 = ($76|0)!=(0);
    if ($77) {
     $78 = $count$i10;
     $79 = (($78) + -1)<<16>>16;
     $count$i10 = $79;
     $80 = $count$i10;
     $81 = $ref$i9;
     HEAP16[$81>>1] = $80;
     $82 = $count$i10;
     $83 = $82&65535;
     $84 = ($83|0)==(0);
     if ($84) {
      $85 = $1;
      _mu_destroy($85);
     }
    }
   }
   $86 = $d;
   $87 = HEAP32[$k>>2]|0;
   $88 = HEAP32[$v>>2]|0;
   _mu_tbl_insert($86,$87,$88);
   continue;
  }
  $89 = HEAP32[$k>>2]|0;
  $3 = $89;
  $90 = $3;
  $2 = $90;
  $91 = $2;
  $92 = $91;
  $93 = 6 & $92;
  $94 = ($93|0)!=(0);
  if ($94) {
   $95 = $3;
   $96 = $95;
   $97 = -8 & $96;
   $98 = $97;
   $ref$i6 = $98;
   $99 = $ref$i6;
   $100 = HEAP16[$99>>1]|0;
   $count$i7 = $100;
   $101 = $count$i7;
   $102 = $101&65535;
   $103 = ($102|0)!=(0);
   if ($103) {
    $104 = $count$i7;
    $105 = (($104) + -1)<<16>>16;
    $count$i7 = $105;
    $106 = $count$i7;
    $107 = $ref$i6;
    HEAP16[$107>>1] = $106;
    $108 = $count$i7;
    $109 = $108&65535;
    $110 = ($109|0)==(0);
    if ($110) {
     $111 = $3;
     _mu_destroy($111);
    }
   }
  }
  $112 = HEAP32[$v>>2]|0;
  $7 = $112;
  $113 = $7;
  $6 = $113;
  $114 = $6;
  $115 = $114;
  $116 = 6 & $115;
  $117 = ($116|0)!=(0);
  if (!($117)) {
   continue;
  }
  $118 = $7;
  $119 = $118;
  $120 = -8 & $119;
  $121 = $120;
  $ref$i1 = $121;
  $122 = $ref$i1;
  $123 = HEAP16[$122>>1]|0;
  $count$i2 = $123;
  $124 = $count$i2;
  $125 = $124&65535;
  $126 = ($125|0)!=(0);
  if (!($126)) {
   continue;
  }
  $127 = $count$i2;
  $128 = (($127) + -1)<<16>>16;
  $count$i2 = $128;
  $129 = $count$i2;
  $130 = $ref$i1;
  HEAP16[$130>>1] = $129;
  $131 = $count$i2;
  $132 = $131&65535;
  $133 = ($132|0)==(0);
  if (!($133)) {
   continue;
  }
  $134 = $7;
  _mu_destroy($134);
 }
 $10 = $39;
 $135 = $10;
 $9 = $135;
 $136 = $9;
 $137 = $136;
 $138 = 6 & $137;
 $139 = ($138|0)!=(0);
 if (!($139)) {
  $157 = $d;
  STACKTOP = sp;return ($157|0);
 }
 $140 = $10;
 $141 = $140;
 $142 = -8 & $141;
 $143 = $142;
 $ref$i = $143;
 $144 = $ref$i;
 $145 = HEAP16[$144>>1]|0;
 $count$i = $145;
 $146 = $count$i;
 $147 = $146&65535;
 $148 = ($147|0)!=(0);
 if (!($148)) {
  $157 = $d;
  STACKTOP = sp;return ($157|0);
 }
 $149 = $count$i;
 $150 = (($149) + -1)<<16>>16;
 $count$i = $150;
 $151 = $count$i;
 $152 = $ref$i;
 HEAP16[$152>>1] = $151;
 $153 = $count$i;
 $154 = $153&65535;
 $155 = ($154|0)==(0);
 if (!($155)) {
  $157 = $d;
  STACKTOP = sp;return ($157|0);
 }
 $156 = $10;
 _mu_destroy($156);
 $157 = $d;
 STACKTOP = sp;return ($157|0);
}
function _mu_tbl_or($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $d = 0;
 var $i = 0, $i1 = 0, $k = 0, $ref$i = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $k = sp + 16|0;
 $v = sp + 12|0;
 $i = sp + 8|0;
 $i1 = sp + 4|0;
 $4 = $a;
 $5 = $b;
 $6 = $4;
 $3 = $6;
 $7 = $3;
 $8 = $7;
 $9 = $8 & -8;
 $10 = $9;
 $11 = ((($10)) + 2|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = $5;
 $0 = $14;
 $15 = $0;
 $16 = $15;
 $17 = $16 & -8;
 $18 = $17;
 $19 = ((($18)) + 2|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = (($13) + ($21))|0;
 $23 = (_mu_tbl_create($22)|0);
 $d = $23;
 HEAP32[$i>>2] = 0;
 while(1) {
  $24 = $5;
  $25 = (_mu_tbl_next($24,$i,$k,$v)|0);
  if (!($25)) {
   break;
  }
  $26 = $d;
  $27 = HEAP32[$k>>2]|0;
  $28 = HEAP32[$v>>2]|0;
  _mu_tbl_insert($26,$27,$28);
 }
 HEAP32[$i1>>2] = 0;
 while(1) {
  $29 = $4;
  $30 = (_mu_tbl_next($29,$i1,$k,$v)|0);
  if (!($30)) {
   break;
  }
  $31 = $d;
  $32 = HEAP32[$k>>2]|0;
  $33 = HEAP32[$v>>2]|0;
  _mu_tbl_insert($31,$32,$33);
 }
 $34 = $5;
 $2 = $34;
 $35 = $2;
 $1 = $35;
 $36 = $1;
 $37 = $36;
 $38 = 6 & $37;
 $39 = ($38|0)!=(0);
 if (!($39)) {
  $57 = $d;
  STACKTOP = sp;return ($57|0);
 }
 $40 = $2;
 $41 = $40;
 $42 = -8 & $41;
 $43 = $42;
 $ref$i = $43;
 $44 = $ref$i;
 $45 = HEAP16[$44>>1]|0;
 $count$i = $45;
 $46 = $count$i;
 $47 = $46&65535;
 $48 = ($47|0)!=(0);
 if (!($48)) {
  $57 = $d;
  STACKTOP = sp;return ($57|0);
 }
 $49 = $count$i;
 $50 = (($49) + -1)<<16>>16;
 $count$i = $50;
 $51 = $count$i;
 $52 = $ref$i;
 HEAP16[$52>>1] = $51;
 $53 = $count$i;
 $54 = $53&65535;
 $55 = ($54|0)==(0);
 if (!($55)) {
  $57 = $d;
  STACKTOP = sp;return ($57|0);
 }
 $56 = $2;
 _mu_destroy($56);
 $57 = $d;
 STACKTOP = sp;return ($57|0);
}
function _mu_tbl_xor($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alen = 0, $blen = 0, $count$i = 0, $count$i12 = 0, $count$i15 = 0, $count$i18 = 0, $count$i21 = 0, $count$i24 = 0, $count$i4 = 0, $count$i7 = 0, $count$i9 = 0, $d = 0, $i = 0, $i1 = 0;
 var $k = 0, $ref$i = 0, $ref$i11 = 0, $ref$i14 = 0, $ref$i17 = 0, $ref$i20 = 0, $ref$i23 = 0, $ref$i3 = 0, $ref$i6 = 0, $ref$i8 = 0, $v = 0, $w = 0, $w2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $k = sp + 88|0;
 $v = sp + 84|0;
 $i = sp + 80|0;
 $i1 = sp + 72|0;
 $20 = $a;
 $21 = $b;
 $22 = $20;
 $19 = $22;
 $23 = $19;
 $24 = $23;
 $25 = $24 & -8;
 $26 = $25;
 $27 = ((($26)) + 2|0);
 $28 = HEAP16[$27>>1]|0;
 $alen = $28;
 $29 = $21;
 $16 = $29;
 $30 = $16;
 $31 = $30;
 $32 = $31 & -8;
 $33 = $32;
 $34 = ((($33)) + 2|0);
 $35 = HEAP16[$34>>1]|0;
 $blen = $35;
 $36 = $alen;
 $37 = $36&65535;
 $38 = $blen;
 $39 = $38&65535;
 $40 = ($37|0)>($39|0);
 $41 = $alen;
 $42 = $blen;
 $$sink = $40 ? $41 : $42;
 $43 = $$sink&65535;
 $44 = (_mu_tbl_create($43)|0);
 $d = $44;
 HEAP32[$i>>2] = 0;
 while(1) {
  $45 = $20;
  $46 = (_mu_tbl_next($45,$i,$k,$v)|0);
  if (!($46)) {
   break;
  }
  $47 = $21;
  $48 = HEAP32[$k>>2]|0;
  $13 = $48;
  $49 = $13;
  $12 = $49;
  $50 = $12;
  $51 = $50;
  $52 = 6 & $51;
  $53 = ($52|0)!=(0);
  if ($53) {
   $54 = $13;
   $55 = $54;
   $56 = -8 & $55;
   $57 = $56;
   $ref$i6 = $57;
   $58 = $ref$i6;
   $59 = HEAP16[$58>>1]|0;
   $count$i7 = $59;
   $60 = $count$i7;
   $61 = $60&65535;
   $62 = ($61|0)!=(0);
   if ($62) {
    $63 = $count$i7;
    $64 = (($63) + 1)<<16>>16;
    $count$i7 = $64;
    $65 = $count$i7;
    $66 = $ref$i6;
    HEAP16[$66>>1] = $65;
   }
  }
  $67 = $13;
  $68 = (_mu_tbl_lookup($47,$67)|0);
  $w = $68;
  $69 = $w;
  $70 = ($69|0)!=(0|0);
  if (!($70)) {
   $71 = $d;
   $72 = HEAP32[$k>>2]|0;
   $73 = HEAP32[$v>>2]|0;
   _mu_tbl_insert($71,$72,$73);
   continue;
  }
  $74 = HEAP32[$k>>2]|0;
  $9 = $74;
  $75 = $9;
  $8 = $75;
  $76 = $8;
  $77 = $76;
  $78 = 6 & $77;
  $79 = ($78|0)!=(0);
  if ($79) {
   $80 = $9;
   $81 = $80;
   $82 = -8 & $81;
   $83 = $82;
   $ref$i11 = $83;
   $84 = $ref$i11;
   $85 = HEAP16[$84>>1]|0;
   $count$i12 = $85;
   $86 = $count$i12;
   $87 = $86&65535;
   $88 = ($87|0)!=(0);
   if ($88) {
    $89 = $count$i12;
    $90 = (($89) + -1)<<16>>16;
    $count$i12 = $90;
    $91 = $count$i12;
    $92 = $ref$i11;
    HEAP16[$92>>1] = $91;
    $93 = $count$i12;
    $94 = $93&65535;
    $95 = ($94|0)==(0);
    if ($95) {
     $96 = $9;
     _mu_destroy($96);
    }
   }
  }
  $97 = HEAP32[$v>>2]|0;
  $7 = $97;
  $98 = $7;
  $6 = $98;
  $99 = $6;
  $100 = $99;
  $101 = 6 & $100;
  $102 = ($101|0)!=(0);
  if ($102) {
   $103 = $7;
   $104 = $103;
   $105 = -8 & $104;
   $106 = $105;
   $ref$i14 = $106;
   $107 = $ref$i14;
   $108 = HEAP16[$107>>1]|0;
   $count$i15 = $108;
   $109 = $count$i15;
   $110 = $109&65535;
   $111 = ($110|0)!=(0);
   if ($111) {
    $112 = $count$i15;
    $113 = (($112) + -1)<<16>>16;
    $count$i15 = $113;
    $114 = $count$i15;
    $115 = $ref$i14;
    HEAP16[$115>>1] = $114;
    $116 = $count$i15;
    $117 = $116&65535;
    $118 = ($117|0)==(0);
    if ($118) {
     $119 = $7;
     _mu_destroy($119);
    }
   }
  }
  $120 = $w;
  $5 = $120;
  $121 = $5;
  $4 = $121;
  $122 = $4;
  $123 = $122;
  $124 = 6 & $123;
  $125 = ($124|0)!=(0);
  if (!($125)) {
   continue;
  }
  $126 = $5;
  $127 = $126;
  $128 = -8 & $127;
  $129 = $128;
  $ref$i17 = $129;
  $130 = $ref$i17;
  $131 = HEAP16[$130>>1]|0;
  $count$i18 = $131;
  $132 = $count$i18;
  $133 = $132&65535;
  $134 = ($133|0)!=(0);
  if (!($134)) {
   continue;
  }
  $135 = $count$i18;
  $136 = (($135) + -1)<<16>>16;
  $count$i18 = $136;
  $137 = $count$i18;
  $138 = $ref$i17;
  HEAP16[$138>>1] = $137;
  $139 = $count$i18;
  $140 = $139&65535;
  $141 = ($140|0)==(0);
  if (!($141)) {
   continue;
  }
  $142 = $5;
  _mu_destroy($142);
 }
 HEAP32[$i1>>2] = 0;
 while(1) {
  $143 = $21;
  $144 = (_mu_tbl_next($143,$i1,$k,$v)|0);
  if (!($144)) {
   break;
  }
  $145 = $20;
  $146 = HEAP32[$k>>2]|0;
  $3 = $146;
  $147 = $3;
  $2 = $147;
  $148 = $2;
  $149 = $148;
  $150 = 6 & $149;
  $151 = ($150|0)!=(0);
  if ($151) {
   $152 = $3;
   $153 = $152;
   $154 = -8 & $153;
   $155 = $154;
   $ref$i20 = $155;
   $156 = $ref$i20;
   $157 = HEAP16[$156>>1]|0;
   $count$i21 = $157;
   $158 = $count$i21;
   $159 = $158&65535;
   $160 = ($159|0)!=(0);
   if ($160) {
    $161 = $count$i21;
    $162 = (($161) + 1)<<16>>16;
    $count$i21 = $162;
    $163 = $count$i21;
    $164 = $ref$i20;
    HEAP16[$164>>1] = $163;
   }
  }
  $165 = $3;
  $166 = (_mu_tbl_lookup($145,$165)|0);
  $w2 = $166;
  $167 = $w2;
  $168 = ($167|0)!=(0|0);
  if (!($168)) {
   $169 = $d;
   $170 = HEAP32[$k>>2]|0;
   $171 = HEAP32[$v>>2]|0;
   _mu_tbl_insert($169,$170,$171);
   continue;
  }
  $172 = HEAP32[$k>>2]|0;
  $1 = $172;
  $173 = $1;
  $0 = $173;
  $174 = $0;
  $175 = $174;
  $176 = 6 & $175;
  $177 = ($176|0)!=(0);
  if ($177) {
   $178 = $1;
   $179 = $178;
   $180 = -8 & $179;
   $181 = $180;
   $ref$i23 = $181;
   $182 = $ref$i23;
   $183 = HEAP16[$182>>1]|0;
   $count$i24 = $183;
   $184 = $count$i24;
   $185 = $184&65535;
   $186 = ($185|0)!=(0);
   if ($186) {
    $187 = $count$i24;
    $188 = (($187) + -1)<<16>>16;
    $count$i24 = $188;
    $189 = $count$i24;
    $190 = $ref$i23;
    HEAP16[$190>>1] = $189;
    $191 = $count$i24;
    $192 = $191&65535;
    $193 = ($192|0)==(0);
    if ($193) {
     $194 = $1;
     _mu_destroy($194);
    }
   }
  }
  $195 = HEAP32[$v>>2]|0;
  $11 = $195;
  $196 = $11;
  $10 = $196;
  $197 = $10;
  $198 = $197;
  $199 = 6 & $198;
  $200 = ($199|0)!=(0);
  if ($200) {
   $201 = $11;
   $202 = $201;
   $203 = -8 & $202;
   $204 = $203;
   $ref$i8 = $204;
   $205 = $ref$i8;
   $206 = HEAP16[$205>>1]|0;
   $count$i9 = $206;
   $207 = $count$i9;
   $208 = $207&65535;
   $209 = ($208|0)!=(0);
   if ($209) {
    $210 = $count$i9;
    $211 = (($210) + -1)<<16>>16;
    $count$i9 = $211;
    $212 = $count$i9;
    $213 = $ref$i8;
    HEAP16[$213>>1] = $212;
    $214 = $count$i9;
    $215 = $214&65535;
    $216 = ($215|0)==(0);
    if ($216) {
     $217 = $11;
     _mu_destroy($217);
    }
   }
  }
  $218 = $w2;
  $15 = $218;
  $219 = $15;
  $14 = $219;
  $220 = $14;
  $221 = $220;
  $222 = 6 & $221;
  $223 = ($222|0)!=(0);
  if (!($223)) {
   continue;
  }
  $224 = $15;
  $225 = $224;
  $226 = -8 & $225;
  $227 = $226;
  $ref$i3 = $227;
  $228 = $ref$i3;
  $229 = HEAP16[$228>>1]|0;
  $count$i4 = $229;
  $230 = $count$i4;
  $231 = $230&65535;
  $232 = ($231|0)!=(0);
  if (!($232)) {
   continue;
  }
  $233 = $count$i4;
  $234 = (($233) + -1)<<16>>16;
  $count$i4 = $234;
  $235 = $count$i4;
  $236 = $ref$i3;
  HEAP16[$236>>1] = $235;
  $237 = $count$i4;
  $238 = $237&65535;
  $239 = ($238|0)==(0);
  if (!($239)) {
   continue;
  }
  $240 = $15;
  _mu_destroy($240);
 }
 $241 = $21;
 $18 = $241;
 $242 = $18;
 $17 = $242;
 $243 = $17;
 $244 = $243;
 $245 = 6 & $244;
 $246 = ($245|0)!=(0);
 if (!($246)) {
  $264 = $d;
  STACKTOP = sp;return ($264|0);
 }
 $247 = $18;
 $248 = $247;
 $249 = -8 & $248;
 $250 = $249;
 $ref$i = $250;
 $251 = $ref$i;
 $252 = HEAP16[$251>>1]|0;
 $count$i = $252;
 $253 = $count$i;
 $254 = $253&65535;
 $255 = ($254|0)!=(0);
 if (!($255)) {
  $264 = $d;
  STACKTOP = sp;return ($264|0);
 }
 $256 = $count$i;
 $257 = (($256) + -1)<<16>>16;
 $count$i = $257;
 $258 = $count$i;
 $259 = $ref$i;
 HEAP16[$259>>1] = $258;
 $260 = $count$i;
 $261 = $260&65535;
 $262 = ($261|0)==(0);
 if (!($262)) {
  $264 = $d;
  STACKTOP = sp;return ($264|0);
 }
 $263 = $18;
 _mu_destroy($263);
 $264 = $d;
 STACKTOP = sp;return ($264|0);
}
function _mu_tbl_diff($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $count$i = 0, $count$i10 = 0, $count$i2 = 0, $count$i4 = 0, $count$i7 = 0, $d = 0, $i = 0, $k = 0, $ref$i = 0, $ref$i1 = 0, $ref$i3 = 0, $ref$i6 = 0, $ref$i9 = 0, $v = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $k = sp + 48|0;
 $v = sp + 44|0;
 $i = sp + 40|0;
 $11 = $a;
 $12 = $b;
 $13 = $11;
 $10 = $13;
 $14 = $10;
 $15 = $14;
 $16 = $15 & -8;
 $17 = $16;
 $18 = ((($17)) + 2|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $19&65535;
 $21 = (_mu_tbl_create($20)|0);
 $d = $21;
 HEAP32[$i>>2] = 0;
 while(1) {
  $22 = $11;
  $23 = (_mu_tbl_next($22,$i,$k,$v)|0);
  $24 = $12;
  if (!($23)) {
   break;
  }
  $25 = HEAP32[$k>>2]|0;
  $7 = $25;
  $26 = $7;
  $6 = $26;
  $27 = $6;
  $28 = $27;
  $29 = 6 & $28;
  $30 = ($29|0)!=(0);
  if ($30) {
   $31 = $7;
   $32 = $31;
   $33 = -8 & $32;
   $34 = $33;
   $ref$i1 = $34;
   $35 = $ref$i1;
   $36 = HEAP16[$35>>1]|0;
   $count$i2 = $36;
   $37 = $count$i2;
   $38 = $37&65535;
   $39 = ($38|0)!=(0);
   if ($39) {
    $40 = $count$i2;
    $41 = (($40) + 1)<<16>>16;
    $count$i2 = $41;
    $42 = $count$i2;
    $43 = $ref$i1;
    HEAP16[$43>>1] = $42;
   }
  }
  $44 = $7;
  $45 = (_mu_tbl_lookup($24,$44)|0);
  $w = $45;
  $46 = $w;
  $47 = ($46|0)!=(0|0);
  if (!($47)) {
   $48 = $d;
   $49 = HEAP32[$k>>2]|0;
   $50 = HEAP32[$v>>2]|0;
   _mu_tbl_insert($48,$49,$50);
   continue;
  }
  $51 = HEAP32[$k>>2]|0;
  $3 = $51;
  $52 = $3;
  $2 = $52;
  $53 = $2;
  $54 = $53;
  $55 = 6 & $54;
  $56 = ($55|0)!=(0);
  if ($56) {
   $57 = $3;
   $58 = $57;
   $59 = -8 & $58;
   $60 = $59;
   $ref$i6 = $60;
   $61 = $ref$i6;
   $62 = HEAP16[$61>>1]|0;
   $count$i7 = $62;
   $63 = $count$i7;
   $64 = $63&65535;
   $65 = ($64|0)!=(0);
   if ($65) {
    $66 = $count$i7;
    $67 = (($66) + -1)<<16>>16;
    $count$i7 = $67;
    $68 = $count$i7;
    $69 = $ref$i6;
    HEAP16[$69>>1] = $68;
    $70 = $count$i7;
    $71 = $70&65535;
    $72 = ($71|0)==(0);
    if ($72) {
     $73 = $3;
     _mu_destroy($73);
    }
   }
  }
  $74 = HEAP32[$v>>2]|0;
  $1 = $74;
  $75 = $1;
  $0 = $75;
  $76 = $0;
  $77 = $76;
  $78 = 6 & $77;
  $79 = ($78|0)!=(0);
  if ($79) {
   $80 = $1;
   $81 = $80;
   $82 = -8 & $81;
   $83 = $82;
   $ref$i9 = $83;
   $84 = $ref$i9;
   $85 = HEAP16[$84>>1]|0;
   $count$i10 = $85;
   $86 = $count$i10;
   $87 = $86&65535;
   $88 = ($87|0)!=(0);
   if ($88) {
    $89 = $count$i10;
    $90 = (($89) + -1)<<16>>16;
    $count$i10 = $90;
    $91 = $count$i10;
    $92 = $ref$i9;
    HEAP16[$92>>1] = $91;
    $93 = $count$i10;
    $94 = $93&65535;
    $95 = ($94|0)==(0);
    if ($95) {
     $96 = $1;
     _mu_destroy($96);
    }
   }
  }
  $97 = $w;
  $5 = $97;
  $98 = $5;
  $4 = $98;
  $99 = $4;
  $100 = $99;
  $101 = 6 & $100;
  $102 = ($101|0)!=(0);
  if (!($102)) {
   continue;
  }
  $103 = $5;
  $104 = $103;
  $105 = -8 & $104;
  $106 = $105;
  $ref$i3 = $106;
  $107 = $ref$i3;
  $108 = HEAP16[$107>>1]|0;
  $count$i4 = $108;
  $109 = $count$i4;
  $110 = $109&65535;
  $111 = ($110|0)!=(0);
  if (!($111)) {
   continue;
  }
  $112 = $count$i4;
  $113 = (($112) + -1)<<16>>16;
  $count$i4 = $113;
  $114 = $count$i4;
  $115 = $ref$i3;
  HEAP16[$115>>1] = $114;
  $116 = $count$i4;
  $117 = $116&65535;
  $118 = ($117|0)==(0);
  if (!($118)) {
   continue;
  }
  $119 = $5;
  _mu_destroy($119);
 }
 $9 = $24;
 $120 = $9;
 $8 = $120;
 $121 = $8;
 $122 = $121;
 $123 = 6 & $122;
 $124 = ($123|0)!=(0);
 if (!($124)) {
  $142 = $d;
  STACKTOP = sp;return ($142|0);
 }
 $125 = $9;
 $126 = $125;
 $127 = -8 & $126;
 $128 = $127;
 $ref$i = $128;
 $129 = $ref$i;
 $130 = HEAP16[$129>>1]|0;
 $count$i = $130;
 $131 = $count$i;
 $132 = $131&65535;
 $133 = ($132|0)!=(0);
 if (!($133)) {
  $142 = $d;
  STACKTOP = sp;return ($142|0);
 }
 $134 = $count$i;
 $135 = (($134) + -1)<<16>>16;
 $count$i = $135;
 $136 = $count$i;
 $137 = $ref$i;
 HEAP16[$137>>1] = $136;
 $138 = $count$i;
 $139 = $138&65535;
 $140 = ($139|0)==(0);
 if (!($140)) {
  $142 = $d;
  STACKTOP = sp;return ($142|0);
 }
 $141 = $9;
 _mu_destroy($141);
 $142 = $d;
 STACKTOP = sp;return ($142|0);
}
function _mu_tbl_parsen($ppos,$end) {
 $ppos = $ppos|0;
 $end = $end|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $count$i = 0, $count$i2 = 0, $count$i5 = 0, $count$i8 = 0, $i = 0, $k = 0, $pos = 0, $ref$i = 0, $ref$i1 = 0, $ref$i4 = 0, $ref$i7 = 0, $t = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 116|0;
 $11 = sp + 60|0;
 $pos = sp + 44|0;
 $13 = $ppos;
 $14 = $end;
 $15 = $13;
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$pos>>2] = $16;
 $17 = (_mu_tbl_create(0)|0);
 $t = $17;
 $10 = 0;
 $18 = $10;
 $19 = (+($18>>>0));
 HEAPF32[$11>>2] = $19;
 $20 = HEAP32[$11>>2]|0;
 $21 = -8 & $20;
 $22 = (1 + ($21))|0;
 $23 = $22;
 $i = $23;
 $24 = HEAP32[$pos>>2]|0;
 $25 = ((($24)) + 1|0);
 HEAP32[$pos>>2] = $25;
 $26 = HEAP8[$24>>0]|0;
 $27 = $26&255;
 $28 = ($27|0)!=(91);
 if ($28) {
  $12 = 0;
  $179 = $12;
  STACKTOP = sp;return ($179|0);
 }
 while(1) {
  $29 = HEAP32[$pos>>2]|0;
  $30 = $14;
  $31 = ($29>>>0)<($30>>>0);
  if (!($31)) {
   label = 28;
   break;
  }
  $32 = HEAP32[$pos>>2]|0;
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = ($34|0)!=(93);
  if (!($35)) {
   label = 28;
   break;
  }
  $36 = $14;
  $37 = (_mu_parsen($pos,$36)|0);
  $k = $37;
  $38 = $k;
  $39 = ($38|0)!=(0|0);
  if (!($39)) {
   label = 6;
   break;
  }
  $63 = HEAP32[$pos>>2]|0;
  $64 = $14;
  $65 = ($63>>>0)<($64>>>0);
  if ($65) {
   $66 = HEAP32[$pos>>2]|0;
   $67 = HEAP8[$66>>0]|0;
   $68 = $67&255;
   $69 = ($68|0)==(58);
   if ($69) {
    $70 = HEAP32[$pos>>2]|0;
    $71 = ((($70)) + 1|0);
    HEAP32[$pos>>2] = $71;
    $72 = $14;
    $73 = (_mu_parsen($pos,$72)|0);
    $v = $73;
    $74 = $v;
    $75 = ($74|0)!=(0|0);
    if (!($75)) {
     label = 14;
     break;
    }
    $122 = $t;
    $123 = $k;
    $124 = $v;
    _mu_tbl_insert($122,$123,$124);
   } else {
    label = 24;
   }
  } else {
   label = 24;
  }
  if ((label|0) == 24) {
   label = 0;
   $125 = $t;
   $126 = $i;
   $127 = $k;
   _mu_tbl_insert($125,$126,$127);
   $128 = $i;
   $0 = 1;
   $129 = $0;
   $130 = (+($129>>>0));
   HEAPF32[$1>>2] = $130;
   $131 = HEAP32[$1>>2]|0;
   $132 = -8 & $131;
   $133 = (1 + ($132))|0;
   $134 = $133;
   $135 = (_mu_num_add($128,$134)|0);
   $i = $135;
  }
  $136 = HEAP32[$pos>>2]|0;
  $137 = $14;
  $138 = ($136|0)==($137|0);
  if ($138) {
   label = 28;
   break;
  }
  $139 = HEAP32[$pos>>2]|0;
  $140 = HEAP8[$139>>0]|0;
  $141 = $140&255;
  $142 = ($141|0)!=(44);
  if ($142) {
   label = 28;
   break;
  }
  $143 = HEAP32[$pos>>2]|0;
  $144 = ((($143)) + 1|0);
  HEAP32[$pos>>2] = $144;
 }
 if ((label|0) == 6) {
  $40 = $t;
  $7 = $40;
  $41 = $7;
  $6 = $41;
  $42 = $6;
  $43 = $42;
  $44 = 6 & $43;
  $45 = ($44|0)!=(0);
  if ($45) {
   $46 = $7;
   $47 = $46;
   $48 = -8 & $47;
   $49 = $48;
   $ref$i1 = $49;
   $50 = $ref$i1;
   $51 = HEAP16[$50>>1]|0;
   $count$i2 = $51;
   $52 = $count$i2;
   $53 = $52&65535;
   $54 = ($53|0)!=(0);
   if ($54) {
    $55 = $count$i2;
    $56 = (($55) + -1)<<16>>16;
    $count$i2 = $56;
    $57 = $count$i2;
    $58 = $ref$i1;
    HEAP16[$58>>1] = $57;
    $59 = $count$i2;
    $60 = $59&65535;
    $61 = ($60|0)==(0);
    if ($61) {
     $62 = $7;
     _mu_destroy($62);
    }
   }
  }
  $12 = 0;
  $179 = $12;
  STACKTOP = sp;return ($179|0);
 }
 else if ((label|0) == 14) {
  $76 = $k;
  $5 = $76;
  $77 = $5;
  $4 = $77;
  $78 = $4;
  $79 = $78;
  $80 = 6 & $79;
  $81 = ($80|0)!=(0);
  if ($81) {
   $82 = $5;
   $83 = $82;
   $84 = -8 & $83;
   $85 = $84;
   $ref$i4 = $85;
   $86 = $ref$i4;
   $87 = HEAP16[$86>>1]|0;
   $count$i5 = $87;
   $88 = $count$i5;
   $89 = $88&65535;
   $90 = ($89|0)!=(0);
   if ($90) {
    $91 = $count$i5;
    $92 = (($91) + -1)<<16>>16;
    $count$i5 = $92;
    $93 = $count$i5;
    $94 = $ref$i4;
    HEAP16[$94>>1] = $93;
    $95 = $count$i5;
    $96 = $95&65535;
    $97 = ($96|0)==(0);
    if ($97) {
     $98 = $5;
     _mu_destroy($98);
    }
   }
  }
  $99 = $t;
  $3 = $99;
  $100 = $3;
  $2 = $100;
  $101 = $2;
  $102 = $101;
  $103 = 6 & $102;
  $104 = ($103|0)!=(0);
  if ($104) {
   $105 = $3;
   $106 = $105;
   $107 = -8 & $106;
   $108 = $107;
   $ref$i7 = $108;
   $109 = $ref$i7;
   $110 = HEAP16[$109>>1]|0;
   $count$i8 = $110;
   $111 = $count$i8;
   $112 = $111&65535;
   $113 = ($112|0)!=(0);
   if ($113) {
    $114 = $count$i8;
    $115 = (($114) + -1)<<16>>16;
    $count$i8 = $115;
    $116 = $count$i8;
    $117 = $ref$i7;
    HEAP16[$117>>1] = $116;
    $118 = $count$i8;
    $119 = $118&65535;
    $120 = ($119|0)==(0);
    if ($120) {
     $121 = $3;
     _mu_destroy($121);
    }
   }
  }
  $12 = 0;
  $179 = $12;
  STACKTOP = sp;return ($179|0);
 }
 else if ((label|0) == 28) {
  $145 = HEAP32[$pos>>2]|0;
  $146 = $14;
  $147 = ($145|0)==($146|0);
  if (!($147)) {
   $148 = HEAP32[$pos>>2]|0;
   $149 = ((($148)) + 1|0);
   HEAP32[$pos>>2] = $149;
   $150 = HEAP8[$148>>0]|0;
   $151 = $150&255;
   $152 = ($151|0)!=(93);
   if (!($152)) {
    $176 = HEAP32[$pos>>2]|0;
    $177 = $13;
    HEAP32[$177>>2] = $176;
    $178 = $t;
    $12 = $178;
    $179 = $12;
    STACKTOP = sp;return ($179|0);
   }
  }
  $153 = $t;
  $9 = $153;
  $154 = $9;
  $8 = $154;
  $155 = $8;
  $156 = $155;
  $157 = 6 & $156;
  $158 = ($157|0)!=(0);
  if ($158) {
   $159 = $9;
   $160 = $159;
   $161 = -8 & $160;
   $162 = $161;
   $ref$i = $162;
   $163 = $ref$i;
   $164 = HEAP16[$163>>1]|0;
   $count$i = $164;
   $165 = $count$i;
   $166 = $165&65535;
   $167 = ($166|0)!=(0);
   if ($167) {
    $168 = $count$i;
    $169 = (($168) + -1)<<16>>16;
    $count$i = $169;
    $170 = $count$i;
    $171 = $ref$i;
    HEAP16[$171>>1] = $170;
    $172 = $count$i;
    $173 = $172&65535;
    $174 = ($173|0)==(0);
    if ($174) {
     $175 = $9;
     _mu_destroy($175);
    }
   }
  }
  $12 = 0;
  $179 = $12;
  STACKTOP = sp;return ($179|0);
 }
 return (0)|0;
}
function _mu_tbl_repr($t,$depth) {
 $t = $t|0;
 $depth = $depth|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, $s = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = sp + 32|0;
 $3 = sp + 24|0;
 $s = sp + 8|0;
 $n = sp + 4|0;
 $5 = $t;
 $6 = $depth;
 $7 = $6;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $15 = $6;
  $0 = 0;
  $16 = $0;
  $17 = (+($16>>>0));
  HEAPF32[$1>>2] = $17;
  $18 = HEAP32[$1>>2]|0;
  $19 = -8 & $18;
  $20 = (1 + ($19))|0;
  $21 = $20;
  $22 = ($15|0)==($21|0);
  if ($22) {
   $23 = $5;
   $24 = $23;
   $25 = $24 & -8;
   HEAP32[$vararg_buffer>>2] = $25;
   $26 = (_mu_str_format(3931,$vararg_buffer)|0);
   $4 = $26;
   $33 = $4;
   STACKTOP = sp;return ($33|0);
  }
 } else {
  $2 = 1;
  $9 = $2;
  $10 = (+($9>>>0));
  HEAPF32[$3>>2] = $10;
  $11 = HEAP32[$3>>2]|0;
  $12 = -8 & $11;
  $13 = (1 + ($12))|0;
  $14 = $13;
  $6 = $14;
 }
 $27 = (_mu_buf_create(0)|0);
 HEAP32[$s>>2] = $27;
 HEAP32[$n>>2] = 0;
 $28 = $5;
 $29 = $6;
 _mu_tbl_repr_nested($28,$s,$n,$29);
 $30 = HEAP32[$s>>2]|0;
 $31 = HEAP32[$n>>2]|0;
 $32 = (_mu_str_intern($30,$31)|0);
 $4 = $32;
 $33 = $4;
 STACKTOP = sp;return ($33|0);
}
function _mu_tbl_repr_nested($t,$s,$n,$depth) {
 $t = $t|0;
 $s = $s|0;
 $n = $n|0;
 $depth = $depth|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$i = 0, $count$i3 = 0, $i = 0, $i1 = 0, $k = 0, $linear = 0, $ref$i = 0, $ref$i2 = 0, $v = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 40|0;
 $vararg_buffer6 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $2 = sp + 158|0;
 $7 = sp + 124|0;
 $11 = sp + 157|0;
 $19 = sp + 76|0;
 $k = sp + 52|0;
 $v = sp + 48|0;
 $i1 = sp + 44|0;
 $20 = $t;
 $21 = $s;
 $22 = $n;
 $23 = $depth;
 $24 = $23;
 $18 = 0;
 $25 = $18;
 $26 = (+($25>>>0));
 HEAPF32[$19>>2] = $26;
 $27 = HEAP32[$19>>2]|0;
 $28 = -8 & $27;
 $29 = (1 + ($28))|0;
 $30 = $29;
 $31 = (_mu_num_cmp($24,$30)|0);
 $32 = ($31|0)<=(0);
 if ($32) {
  $33 = $21;
  $34 = $22;
  $35 = $20;
  HEAP32[$vararg_buffer>>2] = $35;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 0;
  _mu_buf_pushf($33,$34,3943,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $36 = $20;
 $17 = $36;
 $37 = $17;
 $16 = $37;
 $38 = $16;
 $39 = $38;
 $40 = $39 & -8;
 $41 = $40;
 $42 = ((($41)) + 7|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = ($44|0)==(0);
 $46 = $45&1;
 $linear = $46;
 $i = 0;
 while(1) {
  $47 = $linear;
  $48 = $47&1;
  if (!($48)) {
   break;
  }
  $49 = $i;
  $50 = $20;
  $12 = $50;
  $51 = $12;
  $52 = $51;
  $53 = $52 & -8;
  $54 = $53;
  $55 = ((($54)) + 2|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = $56&65535;
  $58 = ($49>>>0)<($57>>>0);
  if (!($58)) {
   break;
  }
  $59 = $i;
  $60 = $20;
  $8 = $60;
  $61 = $8;
  $62 = $61;
  $63 = $62 & -8;
  $64 = $63;
  $65 = ((($64)) + 12|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($66) + ($59<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ($68|0)!=(0|0);
  if (!($69)) {
   $linear = 0;
  }
  $70 = $i;
  $71 = (($70) + 1)|0;
  $i = $71;
 }
 $72 = $21;
 $73 = $22;
 $0 = $72;
 $1 = $73;
 HEAP8[$2>>0] = 91;
 $74 = $0;
 $75 = $1;
 _mu_buf_pushdata($74,$75,$2,1);
 HEAP32[$i1>>2] = 0;
 while(1) {
  $76 = $20;
  $77 = (_mu_tbl_next($76,$i1,$k,$v)|0);
  if (!($77)) {
   break;
  }
  $78 = $linear;
  $79 = $78&1;
  if ($79) {
   $83 = HEAP32[$k>>2]|0;
   $4 = $83;
   $84 = $4;
   $3 = $84;
   $85 = $3;
   $86 = $85;
   $87 = 6 & $86;
   $88 = ($87|0)!=(0);
   if ($88) {
    $89 = $4;
    $90 = $89;
    $91 = -8 & $90;
    $92 = $91;
    $ref$i2 = $92;
    $93 = $ref$i2;
    $94 = HEAP16[$93>>1]|0;
    $count$i3 = $94;
    $95 = $count$i3;
    $96 = $95&65535;
    $97 = ($96|0)!=(0);
    if ($97) {
     $98 = $count$i3;
     $99 = (($98) + -1)<<16>>16;
     $count$i3 = $99;
     $100 = $count$i3;
     $101 = $ref$i2;
     HEAP16[$101>>1] = $100;
     $102 = $count$i3;
     $103 = $102&65535;
     $104 = ($103|0)==(0);
     if ($104) {
      $105 = $4;
      _mu_destroy($105);
     }
    }
   }
  } else {
   $80 = $21;
   $81 = $22;
   $82 = HEAP32[$k>>2]|0;
   HEAP32[$vararg_buffer2>>2] = $82;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = 0;
   _mu_buf_pushf($80,$81,3947,$vararg_buffer2);
  }
  $106 = HEAP32[$v>>2]|0;
  $5 = $106;
  $107 = $5;
  $108 = $107;
  $109 = 6 & $108;
  $110 = ($109|0)==(4);
  if (!($110)) {
   $147 = $21;
   $148 = $22;
   $149 = HEAP32[$v>>2]|0;
   HEAP32[$vararg_buffer8>>2] = $149;
   _mu_buf_pushf($147,$148,3956,$vararg_buffer8);
   continue;
  }
  $111 = HEAP32[$v>>2]|0;
  $112 = $21;
  $113 = $22;
  $114 = $23;
  $6 = 1;
  $115 = $6;
  $116 = (+($115>>>0));
  HEAPF32[$7>>2] = $116;
  $117 = HEAP32[$7>>2]|0;
  $118 = -8 & $117;
  $119 = (1 + ($118))|0;
  $120 = $119;
  $121 = (_mu_num_sub($114,$120)|0);
  _mu_tbl_repr_nested($111,$112,$113,$121);
  $122 = HEAP32[$v>>2]|0;
  $14 = $122;
  $123 = $14;
  $13 = $123;
  $124 = $13;
  $125 = $124;
  $126 = 6 & $125;
  $127 = ($126|0)!=(0);
  if ($127) {
   $128 = $14;
   $129 = $128;
   $130 = -8 & $129;
   $131 = $130;
   $ref$i = $131;
   $132 = $ref$i;
   $133 = HEAP16[$132>>1]|0;
   $count$i = $133;
   $134 = $count$i;
   $135 = $134&65535;
   $136 = ($135|0)!=(0);
   if ($136) {
    $137 = $count$i;
    $138 = (($137) + -1)<<16>>16;
    $count$i = $138;
    $139 = $count$i;
    $140 = $ref$i;
    HEAP16[$140>>1] = $139;
    $141 = $count$i;
    $142 = $141&65535;
    $143 = ($142|0)==(0);
    if ($143) {
     $144 = $14;
     _mu_destroy($144);
    }
   }
  }
  $145 = $21;
  $146 = $22;
  _mu_buf_pushf($145,$146,3953,$vararg_buffer6);
 }
 $150 = $20;
 $15 = $150;
 $151 = $15;
 $152 = $151;
 $153 = $152 & -8;
 $154 = $153;
 $155 = ((($154)) + 2|0);
 $156 = HEAP16[$155>>1]|0;
 $157 = $156&65535;
 $158 = ($157|0)>(0);
 if ($158) {
  $159 = $22;
  $160 = HEAP32[$159>>2]|0;
  $161 = (($160) - 2)|0;
  HEAP32[$159>>2] = $161;
 }
 $162 = $21;
 $163 = $22;
 $9 = $162;
 $10 = $163;
 HEAP8[$11>>0] = 93;
 $164 = $9;
 $165 = $10;
 _mu_buf_pushdata($164,$165,$11,1);
 STACKTOP = sp;return;
}
function _mu_tbl_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1352]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1528)|0);
  HEAP32[1352] = $2;
 }
 $3 = HEAP32[1352]|0;
 return ($3|0);
}
function _mu_tbl_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1536) + 7)|0))|0);
}
function _mu_tbl_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf$i = 0, $count$i = 0, $count$i$i = 0, $count$i2 = 0, $count$i4 = 0, $m = 0;
 var $ref$i = 0, $ref$i$i = 0, $ref$i1 = 0, $ref$i3 = 0, $tail = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = $frame;
 $14 = $13;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $tail = $16;
 $17 = $tail;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = $tail;
  $12 = $19;
  $20 = $12;
  $21 = $20;
  $22 = 6 & $21;
  $23 = ($22|0)==(4);
  if (!($23)) {
   $24 = $tail;
   $9 = $24;
   $25 = $9;
   $26 = $25;
   $27 = 3 & $26;
   $28 = ($27|0)==(2);
   if (!($28)) {
    $29 = (_mu_tbl_key_def()|0);
    $30 = $13;
    _mu_errorargs($29,2,$30);
    // unreachable;
   }
  }
 }
 $31 = $13;
 $32 = HEAP32[$31>>2]|0;
 $8 = $32;
 $33 = $8;
 $7 = $33;
 $34 = $7;
 $35 = $34;
 $36 = 6 & $35;
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = $8;
  $39 = $38;
  $40 = -8 & $39;
  $41 = $40;
  $ref$i1 = $41;
  $42 = $ref$i1;
  $43 = HEAP16[$42>>1]|0;
  $count$i2 = $43;
  $44 = $count$i2;
  $45 = $44&65535;
  $46 = ($45|0)!=(0);
  if ($46) {
   $47 = $count$i2;
   $48 = (($47) + 1)<<16>>16;
   $count$i2 = $48;
   $49 = $count$i2;
   $50 = $ref$i1;
   HEAP16[$50>>1] = $49;
  }
 }
 $51 = $8;
 $52 = (_mu_tbl_frommu($51)|0);
 $m = $52;
 $53 = $m;
 $54 = ($53|0)!=(0|0);
 if (!($54)) {
  $55 = (_mu_tbl_key_def()|0);
  $56 = $13;
  _mu_errorargs($55,2,$56);
  // unreachable;
 }
 $57 = $13;
 $58 = HEAP32[$57>>2]|0;
 $2 = $58;
 $59 = $2;
 $1 = $59;
 $60 = $1;
 $61 = $60;
 $62 = 6 & $61;
 $63 = ($62|0)!=(0);
 if ($63) {
  $64 = $2;
  $65 = $64;
  $66 = -8 & $65;
  $67 = $66;
  $ref$i3 = $67;
  $68 = $ref$i3;
  $69 = HEAP16[$68>>1]|0;
  $count$i4 = $69;
  $70 = $count$i4;
  $71 = $70&65535;
  $72 = ($71|0)!=(0);
  if ($72) {
   $73 = $count$i4;
   $74 = (($73) + -1)<<16>>16;
   $count$i4 = $74;
   $75 = $count$i4;
   $76 = $ref$i3;
   HEAP16[$76>>1] = $75;
   $77 = $count$i4;
   $78 = $77&65535;
   $79 = ($78|0)==(0);
   if ($79) {
    $80 = $2;
    _mu_destroy($80);
   }
  }
 }
 $81 = $m;
 $82 = $13;
 HEAP32[$82>>2] = $81;
 $83 = $tail;
 $0 = $83;
 $84 = $0;
 $85 = $84;
 $86 = 6 & $85;
 $87 = ($86|0)==(4);
 $88 = $13;
 $89 = HEAP32[$88>>2]|0;
 $90 = $tail;
 if ($87) {
  _mu_tbl_settail($89,$90);
  STACKTOP = sp;return 1;
 }
 $6 = $90;
 $91 = $6;
 $92 = $91;
 $93 = 4 & $92;
 $94 = ($93|0)!=(0);
 if ($94) {
  $95 = $6;
  $96 = $95;
  $97 = (($96) - 6)|0;
  $98 = $97;
  $buf$i = $98;
  $99 = $buf$i;
  $100 = ((($99)) + 4|0);
  $101 = $buf$i;
  $102 = ((($101)) + 2|0);
  $103 = HEAP16[$102>>1]|0;
  $104 = $103&65535;
  $105 = (($104) + 4)|0;
  $106 = (($105) - 1)|0;
  $107 = $106 & -4;
  $108 = (($100) + ($107)|0);
  $109 = ((($108)) + 4|0);
  $110 = HEAP32[$109>>2]|0;
  $4 = $110;
  $111 = $4;
  $3 = $111;
  $112 = $3;
  $113 = $112;
  $114 = 6 & $113;
  $115 = ($114|0)!=(0);
  if ($115) {
   $116 = $4;
   $117 = $116;
   $118 = -8 & $117;
   $119 = $118;
   $ref$i$i = $119;
   $120 = $ref$i$i;
   $121 = HEAP16[$120>>1]|0;
   $count$i$i = $121;
   $122 = $count$i$i;
   $123 = $122&65535;
   $124 = ($123|0)!=(0);
   if ($124) {
    $125 = $count$i$i;
    $126 = (($125) + 1)<<16>>16;
    $count$i$i = $126;
    $127 = $count$i$i;
    $128 = $ref$i$i;
    HEAP16[$128>>1] = $127;
   }
  }
  $129 = $4;
  $5 = $129;
 } else {
  $5 = 0;
 }
 $130 = $5;
 _mu_tbl_settail($89,$130);
 $131 = $tail;
 $11 = $131;
 $132 = $11;
 $10 = $132;
 $133 = $10;
 $134 = $133;
 $135 = 6 & $134;
 $136 = ($135|0)!=(0);
 if (!($136)) {
  STACKTOP = sp;return 1;
 }
 $137 = $11;
 $138 = $137;
 $139 = -8 & $138;
 $140 = $139;
 $ref$i = $140;
 $141 = $ref$i;
 $142 = HEAP16[$141>>1]|0;
 $count$i = $142;
 $143 = $count$i;
 $144 = $143&65535;
 $145 = ($144|0)!=(0);
 if (!($145)) {
  STACKTOP = sp;return 1;
 }
 $146 = $count$i;
 $147 = (($146) + -1)<<16>>16;
 $count$i = $147;
 $148 = $count$i;
 $149 = $ref$i;
 HEAP16[$149>>1] = $148;
 $150 = $count$i;
 $151 = $150&65535;
 $152 = ($151|0)==(0);
 if (!($152)) {
  STACKTOP = sp;return 1;
 }
 $153 = $11;
 _mu_destroy($153);
 STACKTOP = sp;return 1;
}
function _mu_destroy($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $1;
 $0 = $2;
 $3 = $0;
 $4 = $3;
 $5 = 7 & $4;
 switch ($5|0) {
 case 3:  {
  $6 = $1;
  _mu_str_destroy($6);
  break;
 }
 case 2:  {
  $7 = $1;
  _mu_buf_destroy($7);
  break;
 }
 case 6:  {
  $8 = $1;
  _mu_buf_destroydtor($8);
  break;
 }
 case 4:  {
  $9 = $1;
  _mu_tbl_destroy($9);
  break;
 }
 case 5:  {
  $10 = $1;
  _mu_tbl_destroy($10);
  break;
 }
 case 7:  {
  $11 = $1;
  _mu_fn_destroy($11);
  break;
 }
 default: {
  // unreachable;
 }
 }
 STACKTOP = sp;return;
}
function _mu_frameconvert($sc,$dc,$frame) {
 $sc = $sc|0;
 $dc = $dc|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$i = 0, $count$i6 = 0, $i = 0, $i1 = 0, $i2 = 0, $i4 = 0, $ref$i = 0, $ref$i5 = 0;
 var $t = 0, $t3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 60|0;
 $5 = sp + 52|0;
 $8 = $sc;
 $9 = $dc;
 $10 = $frame;
 $11 = $9;
 $12 = $11&255;
 $13 = ($12|0)!=(15);
 if ($13) {
  $14 = $8;
  $15 = $14&255;
  $16 = ($15|0)!=(15);
  if ($16) {
   $17 = $9;
   $18 = $17&255;
   $i = $18;
   while(1) {
    $19 = $i;
    $20 = $8;
    $21 = $20&255;
    $22 = ($19>>>0)<($21>>>0);
    if (!($22)) {
     break;
    }
    $23 = $i;
    $24 = $10;
    $25 = (($24) + ($23<<2)|0);
    $26 = HEAP32[$25>>2]|0;
    $7 = $26;
    $27 = $7;
    $6 = $27;
    $28 = $6;
    $29 = $28;
    $30 = 6 & $29;
    $31 = ($30|0)!=(0);
    if ($31) {
     $32 = $7;
     $33 = $32;
     $34 = -8 & $33;
     $35 = $34;
     $ref$i = $35;
     $36 = $ref$i;
     $37 = HEAP16[$36>>1]|0;
     $count$i = $37;
     $38 = $count$i;
     $39 = $38&65535;
     $40 = ($39|0)!=(0);
     if ($40) {
      $41 = $count$i;
      $42 = (($41) + -1)<<16>>16;
      $count$i = $42;
      $43 = $count$i;
      $44 = $ref$i;
      HEAP16[$44>>1] = $43;
      $45 = $count$i;
      $46 = $45&65535;
      $47 = ($46|0)==(0);
      if ($47) {
       $48 = $7;
       _mu_destroy($48);
      }
     }
    }
    $49 = $i;
    $50 = (($49) + 1)|0;
    $i = $50;
   }
   $51 = $8;
   $52 = $51&255;
   $i1 = $52;
   while(1) {
    $53 = $i1;
    $54 = $9;
    $55 = $54&255;
    $56 = ($53>>>0)<($55>>>0);
    if (!($56)) {
     break;
    }
    $57 = $i1;
    $58 = $10;
    $59 = (($58) + ($57<<2)|0);
    HEAP32[$59>>2] = 0;
    $60 = $i1;
    $61 = (($60) + 1)|0;
    $i1 = $61;
   }
   STACKTOP = sp;return;
  }
 }
 $62 = $9;
 $63 = $62&255;
 $64 = ($63|0)!=(15);
 if (!($64)) {
  $107 = $8;
  $108 = $107&255;
  $109 = ($108|0)!=(15);
  if (!($109)) {
   STACKTOP = sp;return;
  }
  $110 = $8;
  $111 = $110&255;
  $112 = (_mu_tbl_create($111)|0);
  $t3 = $112;
  $i4 = 0;
  while(1) {
   $113 = $i4;
   $114 = $8;
   $115 = $114&255;
   $116 = ($113>>>0)<($115>>>0);
   $117 = $t3;
   if (!($116)) {
    break;
   }
   $118 = $i4;
   $2 = $118;
   $119 = $2;
   $120 = (+($119>>>0));
   HEAPF32[$3>>2] = $120;
   $121 = HEAP32[$3>>2]|0;
   $122 = -8 & $121;
   $123 = (1 + ($122))|0;
   $124 = $123;
   $125 = $i4;
   $126 = $10;
   $127 = (($126) + ($125<<2)|0);
   $128 = HEAP32[$127>>2]|0;
   _mu_tbl_insert($117,$124,$128);
   $129 = $i4;
   $130 = (($129) + 1)|0;
   $i4 = $130;
  }
  $131 = $10;
  HEAP32[$131>>2] = $117;
  STACKTOP = sp;return;
 }
 $65 = $10;
 $66 = HEAP32[$65>>2]|0;
 $t = $66;
 $i2 = 0;
 while(1) {
  $67 = $i2;
  $68 = $9;
  $69 = $68&255;
  $70 = ($67>>>0)<($69>>>0);
  $71 = $t;
  if (!($70)) {
   break;
  }
  $72 = $i2;
  $4 = $72;
  $73 = $4;
  $74 = (+($73>>>0));
  HEAPF32[$5>>2] = $74;
  $75 = HEAP32[$5>>2]|0;
  $76 = -8 & $75;
  $77 = (1 + ($76))|0;
  $78 = $77;
  $79 = (_mu_tbl_lookup($71,$78)|0);
  $80 = $i2;
  $81 = $10;
  $82 = (($81) + ($80<<2)|0);
  HEAP32[$82>>2] = $79;
  $83 = $i2;
  $84 = (($83) + 1)|0;
  $i2 = $84;
 }
 $1 = $71;
 $85 = $1;
 $0 = $85;
 $86 = $0;
 $87 = $86;
 $88 = 6 & $87;
 $89 = ($88|0)!=(0);
 if (!($89)) {
  STACKTOP = sp;return;
 }
 $90 = $1;
 $91 = $90;
 $92 = -8 & $91;
 $93 = $92;
 $ref$i5 = $93;
 $94 = $ref$i5;
 $95 = HEAP16[$94>>1]|0;
 $count$i6 = $95;
 $96 = $count$i6;
 $97 = $96&65535;
 $98 = ($97|0)!=(0);
 if (!($98)) {
  STACKTOP = sp;return;
 }
 $99 = $count$i6;
 $100 = (($99) + -1)<<16>>16;
 $count$i6 = $100;
 $101 = $count$i6;
 $102 = $ref$i5;
 HEAP16[$102>>1] = $101;
 $103 = $count$i6;
 $104 = $103&65535;
 $105 = ($104|0)==(0);
 if (!($105)) {
  STACKTOP = sp;return;
 }
 $106 = $1;
 _mu_destroy($106);
 STACKTOP = sp;return;
}
function _mu_buf_create($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $n;
 $1 = $0;
 $2 = (_mu_buf_createtail($1,0,0)|0);
 STACKTOP = sp;return ($2|0);
}
function _mu_buf_createtail($n,$dtor,$tail) {
 $n = $n|0;
 $dtor = $dtor|0;
 $tail = $tail|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $b = 0, $b1 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $n;
 $2 = $dtor;
 $3 = $tail;
 $4 = $1;
 $5 = ($4>>>0)<=(65535);
 if (!($5)) {
  _mu_errorlen(3961);
  // unreachable;
 }
 $6 = $2;
 $7 = ($6|0)!=(0|0);
 $8 = $3;
 $9 = ($8|0)!=(0|0);
 $or$cond = $7 | $9;
 $10 = $1;
 if ($or$cond) {
  $22 = (($10) + 4)|0;
  $23 = (($22) - 1)|0;
  $24 = $23 & -4;
  $25 = (4 + ($24))|0;
  $26 = (($25) + 4)|0;
  $27 = (($26) + 4)|0;
  $28 = (_mu_alloc($27)|0);
  $b1 = $28;
  $29 = $b1;
  HEAP16[$29>>1] = 1;
  $30 = $1;
  $31 = $30&65535;
  $32 = $b1;
  $33 = ((($32)) + 2|0);
  HEAP16[$33>>1] = $31;
  $34 = $2;
  $35 = $b1;
  $36 = ((($35)) + 4|0);
  $37 = $b1;
  $38 = ((($37)) + 2|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39&65535;
  $41 = (($40) + 4)|0;
  $42 = (($41) - 1)|0;
  $43 = $42 & -4;
  $44 = (($36) + ($43)|0);
  HEAP32[$44>>2] = $34;
  $45 = $3;
  $46 = $b1;
  $47 = ((($46)) + 4|0);
  $48 = $b1;
  $49 = ((($48)) + 2|0);
  $50 = HEAP16[$49>>1]|0;
  $51 = $50&65535;
  $52 = (($51) + 4)|0;
  $53 = (($52) - 1)|0;
  $54 = $53 & -4;
  $55 = (($47) + ($54)|0);
  $56 = ((($55)) + 4|0);
  HEAP32[$56>>2] = $45;
  $57 = $b1;
  $58 = $57;
  $59 = (($58) + 6)|0;
  $60 = $59;
  $0 = $60;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 } else {
  $11 = (4 + ($10))|0;
  $12 = (_mu_alloc($11)|0);
  $b = $12;
  $13 = $b;
  HEAP16[$13>>1] = 1;
  $14 = $1;
  $15 = $14&65535;
  $16 = $b;
  $17 = ((($16)) + 2|0);
  HEAP16[$17>>1] = $15;
  $18 = $b;
  $19 = $18;
  $20 = (($19) + 2)|0;
  $21 = $20;
  $0 = $21;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 return (0)|0;
}
function _mu_buf_createdtor($n,$dtor) {
 $n = $n|0;
 $dtor = $dtor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $n;
 $1 = $dtor;
 $2 = $0;
 $3 = $1;
 $4 = (_mu_buf_createtail($2,$3,0)|0);
 STACKTOP = sp;return ($4|0);
}
function _mu_buf_destroy($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $b;
 $3 = $2;
 $1 = $3;
 $4 = $1;
 $5 = $4;
 $6 = $5 & -8;
 $7 = $6;
 $8 = $2;
 $0 = $8;
 $9 = $0;
 $10 = $9;
 $11 = $10 & -8;
 $12 = $11;
 $13 = ((($12)) + 2|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = (4 + ($15))|0;
 _mu_dealloc($7,$16);
 STACKTOP = sp;return;
}
function _mu_buf_destroydtor($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$i = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = $b;
 $11 = $10;
 $9 = $11;
 $12 = $9;
 $13 = $12;
 $14 = $13 & -8;
 $15 = $14;
 $16 = ((($15)) + 4|0);
 $17 = $10;
 $4 = $17;
 $18 = $4;
 $19 = $18;
 $20 = $19 & -8;
 $21 = $20;
 $22 = ((($21)) + 2|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23&65535;
 $25 = (($24) + 4)|0;
 $26 = (($25) - 1)|0;
 $27 = $26 & -4;
 $28 = (($16) + ($27)|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0|0);
 if ($30) {
  $31 = $10;
  $1 = $31;
  $32 = $1;
  $33 = $32;
  $34 = $33 & -8;
  $35 = $34;
  $36 = ((($35)) + 4|0);
  $37 = $10;
  $0 = $37;
  $38 = $0;
  $39 = $38;
  $40 = $39 & -8;
  $41 = $40;
  $42 = ((($41)) + 2|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43&65535;
  $45 = (($44) + 4)|0;
  $46 = (($45) - 1)|0;
  $47 = $46 & -4;
  $48 = (($36) + ($47)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $10;
  FUNCTION_TABLE_vi[$49 & 511]($50);
 }
 $51 = $10;
 $2 = $51;
 $52 = $2;
 $53 = $52;
 $54 = $53 & -8;
 $55 = $54;
 $56 = ((($55)) + 4|0);
 $57 = $10;
 $3 = $57;
 $58 = $3;
 $59 = $58;
 $60 = $59 & -8;
 $61 = $60;
 $62 = ((($61)) + 2|0);
 $63 = HEAP16[$62>>1]|0;
 $64 = $63&65535;
 $65 = (($64) + 4)|0;
 $66 = (($65) - 1)|0;
 $67 = $66 & -4;
 $68 = (($56) + ($67)|0);
 $69 = ((($68)) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $6 = $70;
 $71 = $6;
 $5 = $71;
 $72 = $5;
 $73 = $72;
 $74 = 6 & $73;
 $75 = ($74|0)!=(0);
 if ($75) {
  $76 = $6;
  $77 = $76;
  $78 = -8 & $77;
  $79 = $78;
  $ref$i = $79;
  $80 = $ref$i;
  $81 = HEAP16[$80>>1]|0;
  $count$i = $81;
  $82 = $count$i;
  $83 = $82&65535;
  $84 = ($83|0)!=(0);
  if ($84) {
   $85 = $count$i;
   $86 = (($85) + -1)<<16>>16;
   $count$i = $86;
   $87 = $count$i;
   $88 = $ref$i;
   HEAP16[$88>>1] = $87;
   $89 = $count$i;
   $90 = $89&65535;
   $91 = ($90|0)==(0);
   if ($91) {
    $92 = $6;
    _mu_destroy($92);
   }
  }
 }
 $93 = $10;
 $7 = $93;
 $94 = $7;
 $95 = $94;
 $96 = $95 & -8;
 $97 = $96;
 $98 = $10;
 $8 = $98;
 $99 = $8;
 $100 = $99;
 $101 = $100 & -8;
 $102 = $101;
 $103 = ((($102)) + 2|0);
 $104 = HEAP16[$103>>1]|0;
 $105 = $104&65535;
 $106 = (($105) + 4)|0;
 $107 = (($106) - 1)|0;
 $108 = $107 & -4;
 $109 = (4 + ($108))|0;
 $110 = (($109) + 4)|0;
 $111 = (($110) + 4)|0;
 _mu_dealloc($97,$111);
 STACKTOP = sp;return;
}
function _mu_buf_resize($b,$n) {
 $b = $b|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $buf$i = 0, $buf$i1 = 0, $count$i = 0, $count$i$i = 0, $nb = 0, $ref$i = 0, $ref$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $b;
 $13 = $n;
 $14 = $13;
 $15 = ($14>>>0)<=(65535);
 if (!($15)) {
  _mu_errorlen(3961);
  // unreachable;
 }
 $16 = $13;
 $17 = $12;
 $18 = HEAP32[$17>>2]|0;
 $11 = $18;
 $19 = $11;
 $20 = $19;
 $21 = 4 & $20;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $11;
  $24 = $23;
  $25 = (($24) - 6)|0;
  $26 = $25;
  $buf$i = $26;
  $27 = $buf$i;
  $28 = ((($27)) + 4|0);
  $29 = $buf$i;
  $30 = ((($29)) + 2|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = $31&65535;
  $33 = (($32) + 4)|0;
  $34 = (($33) - 1)|0;
  $35 = $34 & -4;
  $36 = (($28) + ($35)|0);
  $37 = HEAP32[$36>>2]|0;
  $10 = $37;
 } else {
  $10 = 0;
 }
 $38 = $10;
 $39 = $12;
 $40 = HEAP32[$39>>2]|0;
 $7 = $40;
 $41 = $7;
 $42 = $41;
 $43 = 4 & $42;
 $44 = ($43|0)!=(0);
 if ($44) {
  $45 = $7;
  $46 = $45;
  $47 = (($46) - 6)|0;
  $48 = $47;
  $buf$i1 = $48;
  $49 = $buf$i1;
  $50 = ((($49)) + 4|0);
  $51 = $buf$i1;
  $52 = ((($51)) + 2|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53&65535;
  $55 = (($54) + 4)|0;
  $56 = (($55) - 1)|0;
  $57 = $56 & -4;
  $58 = (($50) + ($57)|0);
  $59 = ((($58)) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $5 = $60;
  $61 = $5;
  $4 = $61;
  $62 = $4;
  $63 = $62;
  $64 = 6 & $63;
  $65 = ($64|0)!=(0);
  if ($65) {
   $66 = $5;
   $67 = $66;
   $68 = -8 & $67;
   $69 = $68;
   $ref$i$i = $69;
   $70 = $ref$i$i;
   $71 = HEAP16[$70>>1]|0;
   $count$i$i = $71;
   $72 = $count$i$i;
   $73 = $72&65535;
   $74 = ($73|0)!=(0);
   if ($74) {
    $75 = $count$i$i;
    $76 = (($75) + 1)<<16>>16;
    $count$i$i = $76;
    $77 = $count$i$i;
    $78 = $ref$i$i;
    HEAP16[$78>>1] = $77;
   }
  }
  $79 = $5;
  $6 = $79;
 } else {
  $6 = 0;
 }
 $80 = $6;
 $81 = (_mu_buf_createtail($16,$38,$80)|0);
 $nb = $81;
 $82 = $nb;
 $0 = $82;
 $83 = $0;
 $84 = $83;
 $85 = -8 & $84;
 $86 = $85;
 $87 = ((($86)) + 4|0);
 $88 = $12;
 $89 = HEAP32[$88>>2]|0;
 $1 = $89;
 $90 = $1;
 $91 = $90;
 $92 = -8 & $91;
 $93 = $92;
 $94 = ((($93)) + 4|0);
 $95 = $13;
 $96 = $12;
 $97 = HEAP32[$96>>2]|0;
 $2 = $97;
 $98 = $2;
 $99 = $98;
 $100 = -8 & $99;
 $101 = $100;
 $102 = ((($101)) + 2|0);
 $103 = HEAP16[$102>>1]|0;
 $104 = $103&65535;
 $105 = ($95>>>0)<($104>>>0);
 if ($105) {
  $106 = $13;
  $116 = $106;
 } else {
  $107 = $12;
  $108 = HEAP32[$107>>2]|0;
  $3 = $108;
  $109 = $3;
  $110 = $109;
  $111 = -8 & $110;
  $112 = $111;
  $113 = ((($112)) + 2|0);
  $114 = HEAP16[$113>>1]|0;
  $115 = $114&65535;
  $116 = $115;
 }
 _memcpy(($87|0),($94|0),($116|0))|0;
 $117 = $12;
 $118 = HEAP32[$117>>2]|0;
 $9 = $118;
 $119 = $9;
 $8 = $119;
 $120 = $8;
 $121 = $120;
 $122 = 6 & $121;
 $123 = ($122|0)!=(0);
 if (!($123)) {
  $141 = $nb;
  $142 = $12;
  HEAP32[$142>>2] = $141;
  STACKTOP = sp;return;
 }
 $124 = $9;
 $125 = $124;
 $126 = -8 & $125;
 $127 = $126;
 $ref$i = $127;
 $128 = $ref$i;
 $129 = HEAP16[$128>>1]|0;
 $count$i = $129;
 $130 = $count$i;
 $131 = $130&65535;
 $132 = ($131|0)!=(0);
 if (!($132)) {
  $141 = $nb;
  $142 = $12;
  HEAP32[$142>>2] = $141;
  STACKTOP = sp;return;
 }
 $133 = $count$i;
 $134 = (($133) + -1)<<16>>16;
 $count$i = $134;
 $135 = $count$i;
 $136 = $ref$i;
 HEAP16[$136>>1] = $135;
 $137 = $count$i;
 $138 = $137&65535;
 $139 = ($138|0)==(0);
 if (!($139)) {
  $141 = $nb;
  $142 = $12;
  HEAP32[$142>>2] = $141;
  STACKTOP = sp;return;
 }
 $140 = $9;
 _mu_destroy($140);
 $141 = $nb;
 $142 = $12;
 HEAP32[$142>>2] = $141;
 STACKTOP = sp;return;
}
function _mu_buf_expand($b,$n) {
 $b = $b|0;
 $n = $n|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $overhead = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $b;
 $4 = $n;
 $5 = $3;
 $6 = HEAP32[$5>>2]|0;
 $2 = $6;
 $7 = $2;
 $8 = $7;
 $9 = -8 & $8;
 $10 = $9;
 $11 = ((($10)) + 2|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = $4;
 $15 = ($13>>>0)>=($14>>>0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $overhead = 4;
 $16 = $3;
 $17 = HEAP32[$16>>2]|0;
 $1 = $17;
 $18 = $1;
 $19 = $18;
 $20 = 4 & $19;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $overhead;
  $23 = (($22) + 8)|0;
  $overhead = $23;
 }
 $24 = $overhead;
 $25 = $3;
 $26 = HEAP32[$25>>2]|0;
 $0 = $26;
 $27 = $0;
 $28 = $27;
 $29 = -8 & $28;
 $30 = $29;
 $31 = ((($30)) + 2|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32&65535;
 $34 = (($24) + ($33))|0;
 $size = $34;
 $35 = $size;
 $36 = ($35>>>0)<(16);
 $$ = $36 ? 16 : $34;
 $size = $$;
 while(1) {
  $37 = $size;
  $38 = $overhead;
  $39 = $4;
  $40 = (($38) + ($39))|0;
  $41 = ($37>>>0)<($40>>>0);
  if (!($41)) {
   break;
  }
  $42 = $size;
  $43 = $42 << 1;
  $size = $43;
 }
 $44 = $3;
 $45 = $size;
 $46 = $overhead;
 $47 = (($45) - ($46))|0;
 _mu_buf_resize($44,$47);
 STACKTOP = sp;return;
}
function _mu_buf_setdtor($b,$dtor) {
 $b = $b|0;
 $dtor = $dtor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $count$i = 0, $nb = 0, $ref$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = $b;
 $10 = $dtor;
 $11 = $9;
 $12 = HEAP32[$11>>2]|0;
 $8 = $12;
 $13 = $8;
 $14 = $13;
 $15 = 4 & $14;
 $16 = ($15|0)!=(0);
 if ($16) {
  $75 = $10;
  $76 = $9;
  $77 = HEAP32[$76>>2]|0;
  $6 = $77;
  $78 = $6;
  $79 = $78;
  $80 = $79 & -8;
  $81 = $80;
  $82 = ((($81)) + 4|0);
  $83 = $9;
  $84 = HEAP32[$83>>2]|0;
  $7 = $84;
  $85 = $7;
  $86 = $85;
  $87 = $86 & -8;
  $88 = $87;
  $89 = ((($88)) + 2|0);
  $90 = HEAP16[$89>>1]|0;
  $91 = $90&65535;
  $92 = (($91) + 4)|0;
  $93 = (($92) - 1)|0;
  $94 = $93 & -4;
  $95 = (($82) + ($94)|0);
  HEAP32[$95>>2] = $75;
  STACKTOP = sp;return;
 }
 $17 = $9;
 $18 = HEAP32[$17>>2]|0;
 $3 = $18;
 $19 = $3;
 $20 = $19;
 $21 = -8 & $20;
 $22 = $21;
 $23 = ((($22)) + 2|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24&65535;
 $26 = $10;
 $27 = (_mu_buf_createdtor($25,$26)|0);
 $nb = $27;
 $28 = $nb;
 $0 = $28;
 $29 = $0;
 $30 = $29;
 $31 = -8 & $30;
 $32 = $31;
 $33 = ((($32)) + 4|0);
 $34 = $9;
 $35 = HEAP32[$34>>2]|0;
 $1 = $35;
 $36 = $1;
 $37 = $36;
 $38 = -8 & $37;
 $39 = $38;
 $40 = ((($39)) + 4|0);
 $41 = $nb;
 $2 = $41;
 $42 = $2;
 $43 = $42;
 $44 = -8 & $43;
 $45 = $44;
 $46 = ((($45)) + 2|0);
 $47 = HEAP16[$46>>1]|0;
 $48 = $47&65535;
 _memcpy(($33|0),($40|0),($48|0))|0;
 $49 = $9;
 $50 = HEAP32[$49>>2]|0;
 $5 = $50;
 $51 = $5;
 $4 = $51;
 $52 = $4;
 $53 = $52;
 $54 = 6 & $53;
 $55 = ($54|0)!=(0);
 if ($55) {
  $56 = $5;
  $57 = $56;
  $58 = -8 & $57;
  $59 = $58;
  $ref$i = $59;
  $60 = $ref$i;
  $61 = HEAP16[$60>>1]|0;
  $count$i = $61;
  $62 = $count$i;
  $63 = $62&65535;
  $64 = ($63|0)!=(0);
  if ($64) {
   $65 = $count$i;
   $66 = (($65) + -1)<<16>>16;
   $count$i = $66;
   $67 = $count$i;
   $68 = $ref$i;
   HEAP16[$68>>1] = $67;
   $69 = $count$i;
   $70 = $69&65535;
   $71 = ($70|0)==(0);
   if ($71) {
    $72 = $5;
    _mu_destroy($72);
   }
  }
 }
 $73 = $nb;
 $74 = $9;
 HEAP32[$74>>2] = $73;
 STACKTOP = sp;return;
}
function _mu_buf_lookup($b,$k) {
 $b = $b|0;
 $k = $k|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tail = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $b;
 $5 = $k;
 $6 = $4;
 $2 = $6;
 $7 = $2;
 $8 = $7;
 $9 = 4 & $8;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $3 = 0;
  $36 = $3;
  STACKTOP = sp;return ($36|0);
 }
 $11 = $4;
 $0 = $11;
 $12 = $0;
 $13 = $12;
 $14 = $13 & -8;
 $15 = $14;
 $16 = ((($15)) + 4|0);
 $17 = $4;
 $1 = $17;
 $18 = $1;
 $19 = $18;
 $20 = $19 & -8;
 $21 = $20;
 $22 = ((($21)) + 2|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23&65535;
 $25 = (($24) + 4)|0;
 $26 = (($25) - 1)|0;
 $27 = $26 & -4;
 $28 = (($16) + ($27)|0);
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $tail = $30;
 $31 = $tail;
 $32 = ($31|0)!=(0|0);
 if ($32) {
  $33 = $tail;
  $34 = $5;
  $35 = (_mu_tbl_lookup($33,$34)|0);
  $3 = $35;
  $36 = $3;
  STACKTOP = sp;return ($36|0);
 } else {
  $3 = 0;
  $36 = $3;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _mu_buf_vpushf($b,$i,$f,$args) {
 $b = $b|0;
 $i = $i|0;
 $f = $f|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current12 = 0, $arglist_current19 = 0, $arglist_current2 = 0, $arglist_current22 = 0, $arglist_current25 = 0, $arglist_current28 = 0, $arglist_current31 = 0, $arglist_current34 = 0, $arglist_current37 = 0, $arglist_current40 = 0, $arglist_current43 = 0;
 var $arglist_current46 = 0, $arglist_current5 = 0, $arglist_current9 = 0, $arglist_next = 0, $arglist_next10 = 0, $arglist_next13 = 0, $arglist_next20 = 0, $arglist_next23 = 0, $arglist_next26 = 0, $arglist_next29 = 0, $arglist_next3 = 0, $arglist_next32 = 0, $arglist_next35 = 0, $arglist_next38 = 0, $arglist_next41 = 0, $arglist_next44 = 0, $arglist_next47 = 0, $arglist_next6 = 0, $d = 0, $expanded = 0;
 var $expanded101 = 0, $expanded102 = 0, $expanded103 = 0, $expanded105 = 0, $expanded106 = 0, $expanded108 = 0, $expanded109 = 0, $expanded110 = 0, $expanded112 = 0, $expanded113 = 0, $expanded115 = 0, $expanded116 = 0, $expanded117 = 0, $expanded119 = 0, $expanded120 = 0, $expanded122 = 0, $expanded123 = 0, $expanded124 = 0, $expanded126 = 0, $expanded127 = 0;
 var $expanded129 = 0, $expanded130 = 0, $expanded131 = 0, $expanded133 = 0, $expanded134 = 0, $expanded136 = 0, $expanded137 = 0, $expanded138 = 0, $expanded140 = 0, $expanded141 = 0, $expanded143 = 0, $expanded144 = 0, $expanded145 = 0, $expanded147 = 0, $expanded148 = 0, $expanded150 = 0, $expanded151 = 0, $expanded152 = 0, $expanded50 = 0, $expanded52 = 0;
 var $expanded53 = 0, $expanded54 = 0, $expanded56 = 0, $expanded57 = 0, $expanded59 = 0, $expanded60 = 0, $expanded61 = 0, $expanded63 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded68 = 0, $expanded70 = 0, $expanded71 = 0, $expanded73 = 0, $expanded74 = 0, $expanded75 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0;
 var $expanded81 = 0, $expanded82 = 0, $expanded84 = 0, $expanded85 = 0, $expanded87 = 0, $expanded88 = 0, $expanded89 = 0, $expanded91 = 0, $expanded92 = 0, $expanded94 = 0, $expanded95 = 0, $expanded96 = 0, $expanded98 = 0, $expanded99 = 0, $m = 0, $m1 = 0, $n = 0, $n2 = 0, $n3 = 0, $n5 = 0;
 var $s = 0, $size = 0, $u = 0, $u4 = 0, $u6 = 0, $vararg_buffer = 0, $vararg_buffer14 = 0, $vararg_buffer48 = 0, $vararg_ptr17 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer48 = sp + 16|0;
 $vararg_buffer14 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 128|0;
 $3 = sp + 120|0;
 $7 = sp + 138|0;
 $12 = sp + 137|0;
 $15 = sp + 136|0;
 $16 = $b;
 $17 = $i;
 $18 = $f;
 $19 = $args;
 L1: while(1) {
  $20 = $18;
  $21 = HEAP8[$20>>0]|0;
  $22 = ($21<<24>>24)!=(0);
  if (!($22)) {
   label = 55;
   break;
  }
  $23 = $18;
  $24 = HEAP8[$23>>0]|0;
  $25 = $24 << 24 >> 24;
  $26 = ($25|0)!=(37);
  if ($26) {
   $27 = $16;
   $28 = $17;
   $29 = $18;
   $30 = ((($29)) + 1|0);
   $18 = $30;
   $31 = HEAP8[$29>>0]|0;
   $13 = $27;
   $14 = $28;
   HEAP8[$15>>0] = $31;
   $32 = $13;
   $33 = $14;
   _mu_buf_pushdata($32,$33,$15,1);
   continue;
  }
  $34 = $18;
  $35 = ((($34)) + 1|0);
  $18 = $35;
  $size = -1;
  $36 = $18;
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  switch ($38|0) {
  case 110:  {
   $39 = $18;
   $40 = ((($39)) + 1|0);
   $18 = $40;
   $size = -2;
   break;
  }
  case 119:  {
   $41 = $18;
   $42 = ((($41)) + 1|0);
   $18 = $42;
   $size = 4;
   break;
  }
  case 104:  {
   $43 = $18;
   $44 = ((($43)) + 1|0);
   $18 = $44;
   $size = 2;
   break;
  }
  case 113:  {
   $45 = $18;
   $46 = ((($45)) + 1|0);
   $18 = $46;
   $size = 1;
   break;
  }
  case 98:  {
   $47 = $18;
   $48 = ((($47)) + 1|0);
   $18 = $48;
   $size = 1;
   break;
  }
  default: {
  }
  }
  $49 = $18;
  $50 = ((($49)) + 1|0);
  $18 = $50;
  $51 = HEAP8[$49>>0]|0;
  $52 = $51 << 24 >> 24;
  switch ($52|0) {
  case 37:  {
   $53 = $size;
   $54 = ($53|0)==(-2);
   if ($54) {
    $55 = $19;
    $arglist_current = HEAP32[$55>>2]|0;
    $56 = $arglist_current;
    $57 = ((0) + 4|0);
    $expanded50 = $57;
    $expanded = (($expanded50) - 1)|0;
    $58 = (($56) + ($expanded))|0;
    $59 = ((0) + 4|0);
    $expanded54 = $59;
    $expanded53 = (($expanded54) - 1)|0;
    $expanded52 = $expanded53 ^ -1;
    $60 = $58 & $expanded52;
    $61 = $60;
    $arglist_next = ((($61)) + 4|0);
    HEAP32[$55>>2] = $arglist_next;
   } else {
   }
   $62 = $16;
   $63 = $17;
   $10 = $62;
   $11 = $63;
   HEAP8[$12>>0] = 37;
   $64 = $10;
   $65 = $11;
   _mu_buf_pushdata($64,$65,$12,1);
   continue L1;
   break;
  }
  case 109:  {
   $66 = $19;
   $arglist_current2 = HEAP32[$66>>2]|0;
   $67 = $arglist_current2;
   $68 = ((0) + 4|0);
   $expanded57 = $68;
   $expanded56 = (($expanded57) - 1)|0;
   $69 = (($67) + ($expanded56))|0;
   $70 = ((0) + 4|0);
   $expanded61 = $70;
   $expanded60 = (($expanded61) - 1)|0;
   $expanded59 = $expanded60 ^ -1;
   $71 = $69 & $expanded59;
   $72 = $71;
   $73 = HEAP32[$72>>2]|0;
   $arglist_next3 = ((($72)) + 4|0);
   HEAP32[$66>>2] = $arglist_next3;
   $m = $73;
   $74 = $size;
   $75 = ($74|0)==(-2);
   if ($75) {
    $76 = $19;
    $arglist_current5 = HEAP32[$76>>2]|0;
    $77 = $arglist_current5;
    $78 = ((0) + 4|0);
    $expanded64 = $78;
    $expanded63 = (($expanded64) - 1)|0;
    $79 = (($77) + ($expanded63))|0;
    $80 = ((0) + 4|0);
    $expanded68 = $80;
    $expanded67 = (($expanded68) - 1)|0;
    $expanded66 = $expanded67 ^ -1;
    $81 = $79 & $expanded66;
    $82 = $81;
    $83 = HEAP32[$82>>2]|0;
    $arglist_next6 = ((($82)) + 4|0);
    HEAP32[$76>>2] = $arglist_next6;
    $85 = $83;
   } else {
    $84 = $size;
    $85 = $84;
   }
   $n = $85;
   $86 = $m;
   $9 = $86;
   $87 = $9;
   $8 = $87;
   $88 = $8;
   $89 = $88;
   $90 = 7 & $89;
   $91 = ($90|0)==(3);
   if (!($91)) {
    $92 = $m;
    $4 = $92;
    $93 = $4;
    $94 = $93;
    $95 = 3 & $94;
    $96 = ($95|0)==(2);
    if (!($96)) {
     $97 = (_mu_repr_def()|0);
     $98 = $m;
     $99 = $n;
     $100 = ($99|0)<(0);
     if ($100) {
      $108 = 0;
     } else {
      $101 = $n;
      $2 = $101;
      $102 = $2;
      $103 = (+($102>>>0));
      HEAPF32[$3>>2] = $103;
      $104 = HEAP32[$3>>2]|0;
      $105 = -8 & $104;
      $106 = (1 + ($105))|0;
      $107 = $106;
      $108 = $107;
     }
     HEAP32[$vararg_buffer>>2] = $98;
     $vararg_ptr7 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr7>>2] = $108;
     $109 = (_mu_fn_call($97,33,$vararg_buffer)|0);
     $m = $109;
    }
   }
   $110 = $16;
   $111 = $17;
   $112 = $m;
   _mu_buf_pushmu($110,$111,$112);
   continue L1;
   break;
  }
  case 114:  {
   $113 = $19;
   $arglist_current9 = HEAP32[$113>>2]|0;
   $114 = $arglist_current9;
   $115 = ((0) + 4|0);
   $expanded71 = $115;
   $expanded70 = (($expanded71) - 1)|0;
   $116 = (($114) + ($expanded70))|0;
   $117 = ((0) + 4|0);
   $expanded75 = $117;
   $expanded74 = (($expanded75) - 1)|0;
   $expanded73 = $expanded74 ^ -1;
   $118 = $116 & $expanded73;
   $119 = $118;
   $120 = HEAP32[$119>>2]|0;
   $arglist_next10 = ((($119)) + 4|0);
   HEAP32[$113>>2] = $arglist_next10;
   $m1 = $120;
   $121 = $size;
   $122 = ($121|0)==(-2);
   if ($122) {
    $123 = $19;
    $arglist_current12 = HEAP32[$123>>2]|0;
    $124 = $arglist_current12;
    $125 = ((0) + 4|0);
    $expanded78 = $125;
    $expanded77 = (($expanded78) - 1)|0;
    $126 = (($124) + ($expanded77))|0;
    $127 = ((0) + 4|0);
    $expanded82 = $127;
    $expanded81 = (($expanded82) - 1)|0;
    $expanded80 = $expanded81 ^ -1;
    $128 = $126 & $expanded80;
    $129 = $128;
    $130 = HEAP32[$129>>2]|0;
    $arglist_next13 = ((($129)) + 4|0);
    HEAP32[$123>>2] = $arglist_next13;
    $132 = $130;
   } else {
    $131 = $size;
    $132 = $131;
   }
   $n2 = $132;
   $133 = (_mu_repr_def()|0);
   $134 = $m1;
   $135 = $n2;
   $136 = ($135|0)<(0);
   if ($136) {
    $144 = 0;
   } else {
    $137 = $n2;
    $0 = $137;
    $138 = $0;
    $139 = (+($138>>>0));
    HEAPF32[$1>>2] = $139;
    $140 = HEAP32[$1>>2]|0;
    $141 = -8 & $140;
    $142 = (1 + ($141))|0;
    $143 = $142;
    $144 = $143;
   }
   HEAP32[$vararg_buffer14>>2] = $134;
   $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
   HEAP32[$vararg_ptr17>>2] = $144;
   $145 = (_mu_fn_call($133,33,$vararg_buffer14)|0);
   $m1 = $145;
   $146 = $16;
   $147 = $17;
   $148 = $m1;
   _mu_buf_pushmu($146,$147,$148);
   continue L1;
   break;
  }
  case 115:  {
   $149 = $19;
   $arglist_current19 = HEAP32[$149>>2]|0;
   $150 = $arglist_current19;
   $151 = ((0) + 4|0);
   $expanded85 = $151;
   $expanded84 = (($expanded85) - 1)|0;
   $152 = (($150) + ($expanded84))|0;
   $153 = ((0) + 4|0);
   $expanded89 = $153;
   $expanded88 = (($expanded89) - 1)|0;
   $expanded87 = $expanded88 ^ -1;
   $154 = $152 & $expanded87;
   $155 = $154;
   $156 = HEAP32[$155>>2]|0;
   $arglist_next20 = ((($155)) + 4|0);
   HEAP32[$149>>2] = $arglist_next20;
   $s = $156;
   $157 = $size;
   $158 = ($157|0)==(-2);
   if ($158) {
    $159 = $19;
    $arglist_current22 = HEAP32[$159>>2]|0;
    $160 = $arglist_current22;
    $161 = ((0) + 4|0);
    $expanded92 = $161;
    $expanded91 = (($expanded92) - 1)|0;
    $162 = (($160) + ($expanded91))|0;
    $163 = ((0) + 4|0);
    $expanded96 = $163;
    $expanded95 = (($expanded96) - 1)|0;
    $expanded94 = $expanded95 ^ -1;
    $164 = $162 & $expanded94;
    $165 = $164;
    $166 = HEAP32[$165>>2]|0;
    $arglist_next23 = ((($165)) + 4|0);
    HEAP32[$159>>2] = $arglist_next23;
    $168 = $166;
   } else {
    $167 = $size;
    $168 = $167;
   }
   $n3 = $168;
   $169 = $16;
   $170 = $17;
   $171 = $s;
   $172 = $n3;
   $173 = ($172|0)<(0);
   if ($173) {
    $174 = $s;
    $175 = (_strlen($174)|0);
    $177 = $175;
   } else {
    $176 = $n3;
    $177 = $176;
   }
   _mu_buf_pushdata($169,$170,$171,$177);
   continue L1;
   break;
  }
  case 117:  {
   $178 = $19;
   $arglist_current25 = HEAP32[$178>>2]|0;
   $179 = $arglist_current25;
   $180 = ((0) + 4|0);
   $expanded99 = $180;
   $expanded98 = (($expanded99) - 1)|0;
   $181 = (($179) + ($expanded98))|0;
   $182 = ((0) + 4|0);
   $expanded103 = $182;
   $expanded102 = (($expanded103) - 1)|0;
   $expanded101 = $expanded102 ^ -1;
   $183 = $181 & $expanded101;
   $184 = $183;
   $185 = HEAP32[$184>>2]|0;
   $arglist_next26 = ((($184)) + 4|0);
   HEAP32[$178>>2] = $arglist_next26;
   $u = $185;
   $186 = $size;
   $187 = ($186|0)==(-2);
   if ($187) {
    $188 = $19;
    $arglist_current28 = HEAP32[$188>>2]|0;
    $189 = $arglist_current28;
    $190 = ((0) + 4|0);
    $expanded106 = $190;
    $expanded105 = (($expanded106) - 1)|0;
    $191 = (($189) + ($expanded105))|0;
    $192 = ((0) + 4|0);
    $expanded110 = $192;
    $expanded109 = (($expanded110) - 1)|0;
    $expanded108 = $expanded109 ^ -1;
    $193 = $191 & $expanded108;
    $194 = $193;
    $arglist_next29 = ((($194)) + 4|0);
    HEAP32[$188>>2] = $arglist_next29;
   } else {
   }
   $195 = $16;
   $196 = $17;
   $197 = $u;
   _mu_buf_append_unsigned($195,$196,$197);
   continue L1;
   break;
  }
  case 100:  {
   $198 = $19;
   $arglist_current31 = HEAP32[$198>>2]|0;
   $199 = $arglist_current31;
   $200 = ((0) + 4|0);
   $expanded113 = $200;
   $expanded112 = (($expanded113) - 1)|0;
   $201 = (($199) + ($expanded112))|0;
   $202 = ((0) + 4|0);
   $expanded117 = $202;
   $expanded116 = (($expanded117) - 1)|0;
   $expanded115 = $expanded116 ^ -1;
   $203 = $201 & $expanded115;
   $204 = $203;
   $205 = HEAP32[$204>>2]|0;
   $arglist_next32 = ((($204)) + 4|0);
   HEAP32[$198>>2] = $arglist_next32;
   $d = $205;
   $206 = $size;
   $207 = ($206|0)==(-2);
   if ($207) {
    $208 = $19;
    $arglist_current34 = HEAP32[$208>>2]|0;
    $209 = $arglist_current34;
    $210 = ((0) + 4|0);
    $expanded120 = $210;
    $expanded119 = (($expanded120) - 1)|0;
    $211 = (($209) + ($expanded119))|0;
    $212 = ((0) + 4|0);
    $expanded124 = $212;
    $expanded123 = (($expanded124) - 1)|0;
    $expanded122 = $expanded123 ^ -1;
    $213 = $211 & $expanded122;
    $214 = $213;
    $arglist_next35 = ((($214)) + 4|0);
    HEAP32[$208>>2] = $arglist_next35;
   } else {
   }
   $215 = $16;
   $216 = $17;
   $217 = $d;
   _mu_buf_append_signed($215,$216,$217);
   continue L1;
   break;
  }
  case 120:  {
   $218 = $19;
   $arglist_current37 = HEAP32[$218>>2]|0;
   $219 = $arglist_current37;
   $220 = ((0) + 4|0);
   $expanded127 = $220;
   $expanded126 = (($expanded127) - 1)|0;
   $221 = (($219) + ($expanded126))|0;
   $222 = ((0) + 4|0);
   $expanded131 = $222;
   $expanded130 = (($expanded131) - 1)|0;
   $expanded129 = $expanded130 ^ -1;
   $223 = $221 & $expanded129;
   $224 = $223;
   $225 = HEAP32[$224>>2]|0;
   $arglist_next38 = ((($224)) + 4|0);
   HEAP32[$218>>2] = $arglist_next38;
   $u4 = $225;
   $226 = $size;
   $227 = ($226|0)==(-2);
   if ($227) {
    $228 = $19;
    $arglist_current40 = HEAP32[$228>>2]|0;
    $229 = $arglist_current40;
    $230 = ((0) + 4|0);
    $expanded134 = $230;
    $expanded133 = (($expanded134) - 1)|0;
    $231 = (($229) + ($expanded133))|0;
    $232 = ((0) + 4|0);
    $expanded138 = $232;
    $expanded137 = (($expanded138) - 1)|0;
    $expanded136 = $expanded137 ^ -1;
    $233 = $231 & $expanded136;
    $234 = $233;
    $235 = HEAP32[$234>>2]|0;
    $arglist_next41 = ((($234)) + 4|0);
    HEAP32[$228>>2] = $arglist_next41;
    $237 = $235;
   } else {
    $236 = $size;
    $237 = $236;
   }
   $n5 = $237;
   $238 = $16;
   $239 = $17;
   $240 = $u4;
   $241 = $n5;
   $242 = ($241|0)<(0);
   $243 = $n5;
   $244 = $242 ? 4 : $243;
   _mu_buf_append_hex($238,$239,$240,$244);
   continue L1;
   break;
  }
  case 99:  {
   $245 = $19;
   $arglist_current43 = HEAP32[$245>>2]|0;
   $246 = $arglist_current43;
   $247 = ((0) + 4|0);
   $expanded141 = $247;
   $expanded140 = (($expanded141) - 1)|0;
   $248 = (($246) + ($expanded140))|0;
   $249 = ((0) + 4|0);
   $expanded145 = $249;
   $expanded144 = (($expanded145) - 1)|0;
   $expanded143 = $expanded144 ^ -1;
   $250 = $248 & $expanded143;
   $251 = $250;
   $252 = HEAP32[$251>>2]|0;
   $arglist_next44 = ((($251)) + 4|0);
   HEAP32[$245>>2] = $arglist_next44;
   $u6 = $252;
   $253 = $size;
   $254 = ($253|0)==(-2);
   if ($254) {
    $255 = $19;
    $arglist_current46 = HEAP32[$255>>2]|0;
    $256 = $arglist_current46;
    $257 = ((0) + 4|0);
    $expanded148 = $257;
    $expanded147 = (($expanded148) - 1)|0;
    $258 = (($256) + ($expanded147))|0;
    $259 = ((0) + 4|0);
    $expanded152 = $259;
    $expanded151 = (($expanded152) - 1)|0;
    $expanded150 = $expanded151 ^ -1;
    $260 = $258 & $expanded150;
    $261 = $260;
    $arglist_next47 = ((($261)) + 4|0);
    HEAP32[$255>>2] = $arglist_next47;
   } else {
   }
   $262 = $16;
   $263 = $17;
   $264 = $u6;
   $265 = $264&255;
   $5 = $262;
   $6 = $263;
   HEAP8[$7>>0] = $265;
   $266 = $5;
   $267 = $6;
   _mu_buf_pushdata($266,$267,$7,1);
   continue L1;
   break;
  }
  default: {
   label = 54;
   break L1;
  }
  }
 }
 if ((label|0) == 54) {
  _mu_errorf(3968,$vararg_buffer48);
  // unreachable;
 }
 else if ((label|0) == 55) {
  STACKTOP = sp;return;
 }
}
function _mu_buf_pushdata($b,$i,$c,$n) {
 $b = $b|0;
 $i = $i|0;
 $c = $c|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $b;
 $2 = $i;
 $3 = $c;
 $4 = $n;
 $5 = $1;
 $6 = $2;
 $7 = HEAP32[$6>>2]|0;
 $8 = $4;
 $9 = (($7) + ($8))|0;
 _mu_buf_expand($5,$9);
 $10 = $1;
 $11 = HEAP32[$10>>2]|0;
 $0 = $11;
 $12 = $0;
 $13 = $12;
 $14 = -8 & $13;
 $15 = $14;
 $16 = ((($15)) + 4|0);
 $17 = $2;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + ($18)|0);
 $20 = $3;
 $21 = $4;
 _memcpy(($19|0),($20|0),($21|0))|0;
 $22 = $4;
 $23 = $2;
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($22))|0;
 HEAP32[$23>>2] = $25;
 STACKTOP = sp;return;
}
function _mu_buf_pushmu($b,$i,$c) {
 $b = $b|0;
 $i = $i|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cbuf = 0, $count$i = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $b;
 $5 = $i;
 $6 = $c;
 $7 = $6;
 $8 = $7;
 $9 = -2 & $8;
 $10 = $9;
 $cbuf = $10;
 $11 = $4;
 $12 = $5;
 $13 = $cbuf;
 $3 = $13;
 $14 = $3;
 $15 = $14;
 $16 = -8 & $15;
 $17 = $16;
 $18 = ((($17)) + 4|0);
 $19 = $cbuf;
 $0 = $19;
 $20 = $0;
 $21 = $20;
 $22 = -8 & $21;
 $23 = $22;
 $24 = ((($23)) + 2|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25&65535;
 _mu_buf_pushdata($11,$12,$18,$26);
 $27 = $6;
 $2 = $27;
 $28 = $2;
 $1 = $28;
 $29 = $1;
 $30 = $29;
 $31 = 6 & $30;
 $32 = ($31|0)!=(0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $33 = $2;
 $34 = $33;
 $35 = -8 & $34;
 $36 = $35;
 $ref$i = $36;
 $37 = $ref$i;
 $38 = HEAP16[$37>>1]|0;
 $count$i = $38;
 $39 = $count$i;
 $40 = $39&65535;
 $41 = ($40|0)!=(0);
 if (!($41)) {
  STACKTOP = sp;return;
 }
 $42 = $count$i;
 $43 = (($42) + -1)<<16>>16;
 $count$i = $43;
 $44 = $count$i;
 $45 = $ref$i;
 HEAP16[$45>>1] = $44;
 $46 = $count$i;
 $47 = $46&65535;
 $48 = ($47|0)==(0);
 if (!($48)) {
  STACKTOP = sp;return;
 }
 $49 = $2;
 _mu_destroy($49);
 STACKTOP = sp;return;
}
function _mu_buf_append_unsigned($b,$i,$u) {
 $b = $b|0;
 $i = $i|0;
 $u = $u|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $size = 0, $u2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 36|0;
 $4 = $b;
 $5 = $i;
 $6 = $u;
 $7 = $6;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = $4;
  $10 = $5;
  $1 = $9;
  $2 = $10;
  HEAP8[$3>>0] = 48;
  $11 = $1;
  $12 = $2;
  _mu_buf_pushdata($11,$12,$3,1);
  STACKTOP = sp;return;
 }
 $size = 0;
 $13 = $6;
 $u2 = $13;
 while(1) {
  $14 = $u2;
  $15 = ($14>>>0)>(0);
  if (!($15)) {
   break;
  }
  $16 = $size;
  $17 = (($16) + 1)|0;
  $size = $17;
  $18 = $u2;
  $19 = (($18>>>0) / 10)&-1;
  $u2 = $19;
 }
 $20 = $4;
 $21 = $5;
 $22 = HEAP32[$21>>2]|0;
 $23 = $size;
 $24 = (($22) + ($23))|0;
 _mu_buf_expand($20,$24);
 $25 = $size;
 $26 = $5;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + ($25))|0;
 HEAP32[$26>>2] = $28;
 $29 = $4;
 $30 = HEAP32[$29>>2]|0;
 $0 = $30;
 $31 = $0;
 $32 = $31;
 $33 = -8 & $32;
 $34 = $33;
 $35 = ((($34)) + 4|0);
 $36 = $5;
 $37 = HEAP32[$36>>2]|0;
 $38 = (($35) + ($37)|0);
 $39 = ((($38)) + -1|0);
 $c = $39;
 while(1) {
  $40 = $6;
  $41 = ($40>>>0)>(0);
  if (!($41)) {
   break;
  }
  $42 = $6;
  $43 = (($42>>>0) % 10)&-1;
  $44 = (_mu_buf_toascii($43)|0);
  $45 = $c;
  HEAP8[$45>>0] = $44;
  $46 = $6;
  $47 = (($46>>>0) / 10)&-1;
  $6 = $47;
  $48 = $c;
  $49 = ((($48)) + -1|0);
  $c = $49;
 }
 STACKTOP = sp;return;
}
function _mu_buf_toascii($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $0;
 $2 = ($1>>>0)<(10);
 $3 = $0;
 $4 = (48 + ($3))|0;
 $5 = (($3) - 10)|0;
 $6 = (97 + ($5))|0;
 $7 = $2 ? $4 : $6;
 $8 = $7&255;
 STACKTOP = sp;return ($8|0);
}
function _mu_buf_append_signed($b,$i,$d) {
 $b = $b|0;
 $i = $i|0;
 $d = $d|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 20|0;
 $3 = $b;
 $4 = $i;
 $5 = $d;
 $6 = $5;
 $7 = ($6|0)<(0);
 if ($7) {
  $8 = $3;
  $9 = $4;
  $0 = $8;
  $1 = $9;
  HEAP8[$2>>0] = 45;
  $10 = $0;
  $11 = $1;
  _mu_buf_pushdata($10,$11,$2,1);
  $12 = $5;
  $13 = (0 - ($12))|0;
  $5 = $13;
 }
 $14 = $3;
 $15 = $4;
 $16 = $5;
 _mu_buf_append_unsigned($14,$15,$16);
 STACKTOP = sp;return;
}
function _mu_buf_append_hex($b,$i,$x,$n) {
 $b = $b|0;
 $i = $i|0;
 $x = $x|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 28|0;
 $3 = $b;
 $4 = $i;
 $5 = $x;
 $6 = $n;
 $j = 0;
 while(1) {
  $7 = $j;
  $8 = $6;
  $9 = $8<<1;
  $10 = ($7>>>0)<($9>>>0);
  if (!($10)) {
   break;
  }
  $11 = $3;
  $12 = $4;
  $13 = $5;
  $14 = $6;
  $15 = $14<<1;
  $16 = $j;
  $17 = (($15) - ($16))|0;
  $18 = (($17) - 1)|0;
  $19 = $18<<2;
  $20 = $13 >>> $19;
  $21 = $20 & 15;
  $22 = (_mu_buf_toascii($21)|0);
  $0 = $11;
  $1 = $12;
  HEAP8[$2>>0] = $22;
  $23 = $0;
  $24 = $1;
  _mu_buf_pushdata($23,$24,$2,1);
  $25 = $j;
  $26 = (($25) + 1)|0;
  $j = $26;
 }
 STACKTOP = sp;return;
}
function _mu_buf_pushf($b,$i,$fmt,$varargs) {
 $b = $b|0;
 $i = $i|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = $b;
 $1 = $i;
 $2 = $fmt;
 HEAP32[$args>>2] = $varargs;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 _mu_buf_vpushf($3,$4,$5,$args);
 STACKTOP = sp;return;
}
function _mu_kw_let_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1353]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1552)|0);
  HEAP32[1353] = $2;
 }
 $3 = HEAP32[1353]|0;
 return ($3|0);
}
function _mu_kw_else_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1354]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1560)|0);
  HEAP32[1354] = $2;
 }
 $3 = HEAP32[1354]|0;
 return ($3|0);
}
function _mu_kw_and_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1355]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1568)|0);
  HEAP32[1355] = $2;
 }
 $3 = HEAP32[1355]|0;
 return ($3|0);
}
function _mu_kw_or_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1356]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1576)|0);
  HEAP32[1356] = $2;
 }
 $3 = HEAP32[1356]|0;
 return ($3|0);
}
function _mu_kw_continue_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1357]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1584)|0);
  HEAP32[1357] = $2;
 }
 $3 = HEAP32[1357]|0;
 return ($3|0);
}
function _mu_kw_break_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1358]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1600)|0);
  HEAP32[1358] = $2;
 }
 $3 = HEAP32[1358]|0;
 return ($3|0);
}
function _mu_kw_return_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1359]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1616)|0);
  HEAP32[1359] = $2;
 }
 $3 = HEAP32[1359]|0;
 return ($3|0);
}
function _mu_kw_fn_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1360]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1632)|0);
  HEAP32[1360] = $2;
 }
 $3 = HEAP32[1360]|0;
 return ($3|0);
}
function _mu_kw_type_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1361]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1640)|0);
  HEAP32[1361] = $2;
 }
 $3 = HEAP32[1361]|0;
 return ($3|0);
}
function _mu_kw_if_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1362]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1648)|0);
  HEAP32[1362] = $2;
 }
 $3 = HEAP32[1362]|0;
 return ($3|0);
}
function _mu_kw_while_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1363]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1656)|0);
  HEAP32[1363] = $2;
 }
 $3 = HEAP32[1363]|0;
 return ($3|0);
}
function _mu_kw_for_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1364]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1672)|0);
  HEAP32[1364] = $2;
 }
 $3 = HEAP32[1364]|0;
 return ($3|0);
}
function _mu_kw_nil_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1365]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1680)|0);
  HEAP32[1365] = $2;
 }
 $3 = HEAP32[1365]|0;
 return ($3|0);
}
function _mu_kw_nil2_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1366]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1688)|0);
  HEAP32[1366] = $2;
 }
 $3 = HEAP32[1366]|0;
 return ($3|0);
}
function _mu_kw_assign_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1367]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1696)|0);
  HEAP32[1367] = $2;
 }
 $3 = HEAP32[1367]|0;
 return ($3|0);
}
function _mu_kw_pair_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1368]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1704)|0);
  HEAP32[1368] = $2;
 }
 $3 = HEAP32[1368]|0;
 return ($3|0);
}
function _mu_kw_dot_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1369]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1712)|0);
  HEAP32[1369] = $2;
 }
 $3 = HEAP32[1369]|0;
 return ($3|0);
}
function _mu_kw_arrow_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1370]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1720)|0);
  HEAP32[1370] = $2;
 }
 $3 = HEAP32[1370]|0;
 return ($3|0);
}
function _mu_kw_expand_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1371]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1728)|0);
  HEAP32[1371] = $2;
 }
 $3 = HEAP32[1371]|0;
 return ($3|0);
}
function _mu_tok_let_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAPF32[$0>>2] = 16.0;
 $1 = HEAP32[$0>>2]|0;
 $2 = -8 & $1;
 $3 = (1 + ($2))|0;
 $4 = $3;
 STACKTOP = sp;return ($4|0);
}
function _mu_tok_else_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAPF32[$0>>2] = 4096.0;
 $1 = HEAP32[$0>>2]|0;
 $2 = -8 & $1;
 $3 = (1 + ($2))|0;
 $4 = $3;
 STACKTOP = sp;return ($4|0);
}
function _mu_tok_and_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAPF32[$0>>2] = 8192.0;
 $1 = HEAP32[$0>>2]|0;
 $2 = -8 & $1;
 $3 = (1 + ($2))|0;
 $4 = $3;
 STACKTOP = sp;return ($4|0);
}
function _mu_tok_or_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAPF32[$0>>2] = 16384.0;
 $1 = HEAP32[$0>>2]|0;
 $2 = -8 & $1;
 $3 = (1 + ($2))|0;
 $4 = $3;
 STACKTOP = sp;return ($4|0);
}
function _mu_tok_cont_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAPF32[$0>>2] = 32768.0;
 $1 = HEAP32[$0>>2]|0;
 $2 = -8 & $1;
 $3 = (1 + ($2))|0;
 $4 = $3;
 STACKTOP = sp;return ($4|0);
}
function _mu_tok_break_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAPF32[$0>>2] = 65536.0;
 $1 = HEAP32[$0>>2]|0;
 $2 = -8 & $1;
 $3 = (1 + ($2))|0;
 $4 = $3;
 STACKTOP = sp;return ($4|0);
}
function _mu_tok_return_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAPF32[$0>>2] = 131072.0;
 $1 = HEAP32[$0>>2]|0;
 $2 = -8 & $1;
 $3 = (1 + ($2))|0;
 $4 = $3;
 STACKTOP = sp;return ($4|0);
}
function _mu_tok_fn_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAPF32[$0>>2] = 128.0;
 $1 = HEAP32[$0>>2]|0;
 $2 = -8 & $1;
 $3 = (1 + ($2))|0;
 $4 = $3;
 STACKTOP = sp;return ($4|0);
}
function _mu_tok_type_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAPF32[$0>>2] = 256.0;
 $1 = HEAP32[$0>>2]|0;
 $2 = -8 & $1;
 $3 = (1 + ($2))|0;
 $4 = $3;
 STACKTOP = sp;return ($4|0);
}
function _mu_tok_if_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAPF32[$0>>2] = 512.0;
 $1 = HEAP32[$0>>2]|0;
 $2 = -8 & $1;
 $3 = (1 + ($2))|0;
 $4 = $3;
 STACKTOP = sp;return ($4|0);
}
function _mu_tok_while_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAPF32[$0>>2] = 1024.0;
 $1 = HEAP32[$0>>2]|0;
 $2 = -8 & $1;
 $3 = (1 + ($2))|0;
 $4 = $3;
 STACKTOP = sp;return ($4|0);
}
function _mu_tok_for_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAPF32[$0>>2] = 2048.0;
 $1 = HEAP32[$0>>2]|0;
 $2 = -8 & $1;
 $3 = (1 + ($2))|0;
 $4 = $3;
 STACKTOP = sp;return ($4|0);
}
function _mu_tok_nil_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAPF32[$0>>2] = 524288.0;
 $1 = HEAP32[$0>>2]|0;
 $2 = -8 & $1;
 $3 = (1 + ($2))|0;
 $4 = $3;
 STACKTOP = sp;return ($4|0);
}
function _mu_tok_assign_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAPF32[$0>>2] = 4.0;
 $1 = HEAP32[$0>>2]|0;
 $2 = -8 & $1;
 $3 = (1 + ($2))|0;
 $4 = $3;
 STACKTOP = sp;return ($4|0);
}
function _mu_tok_pair_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAPF32[$0>>2] = 8.0;
 $1 = HEAP32[$0>>2]|0;
 $2 = -8 & $1;
 $3 = (1 + ($2))|0;
 $4 = $3;
 STACKTOP = sp;return ($4|0);
}
function _mu_tok_dot_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAPF32[$0>>2] = 32.0;
 $1 = HEAP32[$0>>2]|0;
 $2 = -8 & $1;
 $3 = (1 + ($2))|0;
 $4 = $3;
 STACKTOP = sp;return ($4|0);
}
function _mu_tok_arrow_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAPF32[$0>>2] = 64.0;
 $1 = HEAP32[$0>>2]|0;
 $2 = -8 & $1;
 $3 = (1 + ($2))|0;
 $4 = $3;
 STACKTOP = sp;return ($4|0);
}
function _mu_tok_expand_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAPF32[$0>>2] = 4194304.0;
 $1 = HEAP32[$0>>2]|0;
 $2 = -8 & $1;
 $3 = (1 + ($2))|0;
 $4 = $3;
 STACKTOP = sp;return ($4|0);
}
function _mu_keywords_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1372]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_tbl_initpairs(5120,0,3048,19)|0);
  HEAP32[1372] = $2;
 }
 $3 = HEAP32[1372]|0;
 return ($3|0);
}
function _imm_nil() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1736) + 7)|0))|0);
}
function _mu_cdata_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1373]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1752)|0);
  HEAP32[1373] = $2;
 }
 $3 = HEAP32[1373]|0;
 return ($3|0);
}
function _mu_repr($m,$depth) {
 $m = $m|0;
 $depth = $depth|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $r = 0, $ref$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $4 = $m;
 $5 = $depth;
 $6 = $4;
 $3 = $6;
 $7 = $3;
 $8 = $7;
 $9 = 7 & $8;
 switch ($9|0) {
 case 0:  {
  $10 = (_mu_kw_nil_def()|0);
  $r = $10;
  break;
 }
 case 1:  {
  $11 = $4;
  $12 = (_mu_num_repr($11)|0);
  $r = $12;
  break;
 }
 case 3:  {
  $13 = $4;
  $14 = (_mu_str_repr($13)|0);
  $r = $14;
  break;
 }
 case 5: case 4:  {
  $15 = $4;
  $16 = $5;
  $17 = (_mu_tbl_repr($15,$16)|0);
  $r = $17;
  break;
 }
 default: {
  $18 = $4;
  $0 = $18;
  $19 = $0;
  $20 = $19;
  $21 = 7 & $20;
  $22 = (3200 + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (FUNCTION_TABLE_i[$23 & 511]()|0);
  $25 = $4;
  $26 = $25;
  $27 = $26 & -8;
  HEAP32[$vararg_buffer>>2] = $24;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $27;
  $28 = (_mu_str_format(3992,$vararg_buffer)|0);
  $r = $28;
 }
 }
 $29 = $4;
 $2 = $29;
 $30 = $2;
 $1 = $30;
 $31 = $1;
 $32 = $31;
 $33 = 6 & $32;
 $34 = ($33|0)!=(0);
 if (!($34)) {
  $52 = $r;
  STACKTOP = sp;return ($52|0);
 }
 $35 = $2;
 $36 = $35;
 $37 = -8 & $36;
 $38 = $37;
 $ref$i = $38;
 $39 = $ref$i;
 $40 = HEAP16[$39>>1]|0;
 $count$i = $40;
 $41 = $count$i;
 $42 = $41&65535;
 $43 = ($42|0)!=(0);
 if (!($43)) {
  $52 = $r;
  STACKTOP = sp;return ($52|0);
 }
 $44 = $count$i;
 $45 = (($44) + -1)<<16>>16;
 $count$i = $45;
 $46 = $count$i;
 $47 = $ref$i;
 HEAP16[$47>>1] = $46;
 $48 = $count$i;
 $49 = $48&65535;
 $50 = ($49|0)==(0);
 if (!($50)) {
  $52 = $r;
  STACKTOP = sp;return ($52|0);
 }
 $51 = $2;
 _mu_destroy($51);
 $52 = $r;
 STACKTOP = sp;return ($52|0);
}
function _mu_parsen($ppos,$end) {
 $ppos = $ppos|0;
 $end = $end|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$i = 0, $pos = 0, $ref$i = 0, $start = 0, $sym = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pos = sp + 12|0;
 $3 = $ppos;
 $4 = $end;
 $5 = $3;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$pos>>2] = $6;
 $sym = 0;
 L1: while(1) {
  $7 = HEAP32[$pos>>2]|0;
  $8 = $4;
  $9 = ($7>>>0)<($8>>>0);
  if (!($9)) {
   break;
  }
  $10 = HEAP32[$pos>>2]|0;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = ($12|0)==(35);
  if (!($13)) {
   $23 = HEAP32[$pos>>2]|0;
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = (4003 + ($25)|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = ($28|0)==(3);
   if (!($29)) {
    break;
   }
   $30 = HEAP32[$pos>>2]|0;
   $31 = ((($30)) + 1|0);
   HEAP32[$pos>>2] = $31;
   continue;
  }
  while(1) {
   $14 = HEAP32[$pos>>2]|0;
   $15 = $4;
   $16 = ($14>>>0)<($15>>>0);
   if (!($16)) {
    continue L1;
   }
   $17 = HEAP32[$pos>>2]|0;
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = ($19|0)!=(10);
   if (!($20)) {
    continue L1;
   }
   $21 = HEAP32[$pos>>2]|0;
   $22 = ((($21)) + 1|0);
   HEAP32[$pos>>2] = $22;
  }
 }
 $32 = HEAP32[$pos>>2]|0;
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = (4003 + ($34)|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 switch ($37|0) {
 case 7: case 4:  {
  $38 = $4;
  $39 = (_mu_num_parsen($pos,$38)|0);
  $val = $39;
  break;
 }
 case 6:  {
  $40 = $4;
  $41 = (_mu_str_parsen($pos,$40)|0);
  $val = $41;
  break;
 }
 case 10:  {
  $42 = $4;
  $43 = (_mu_tbl_parsen($pos,$42)|0);
  $val = $43;
  break;
 }
 case 5:  {
  $44 = HEAP32[$pos>>2]|0;
  $45 = ((($44)) + 1|0);
  HEAP32[$pos>>2] = $45;
  $start = $44;
  while(1) {
   $46 = HEAP32[$pos>>2]|0;
   $47 = $4;
   $48 = ($46>>>0)<($47>>>0);
   if (!($48)) {
    break;
   }
   $49 = HEAP32[$pos>>2]|0;
   $50 = HEAP8[$49>>0]|0;
   $51 = $50&255;
   $52 = (4003 + ($51)|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53&255;
   $55 = ($54|0)==(5);
   if (!($55)) {
    $56 = HEAP32[$pos>>2]|0;
    $57 = HEAP8[$56>>0]|0;
    $58 = $57&255;
    $59 = (4003 + ($58)|0);
    $60 = HEAP8[$59>>0]|0;
    $61 = $60&255;
    $62 = ($61|0)==(7);
    if (!($62)) {
     break;
    }
   }
   $63 = HEAP32[$pos>>2]|0;
   $64 = ((($63)) + 1|0);
   HEAP32[$pos>>2] = $64;
  }
  $65 = $start;
  $66 = HEAP32[$pos>>2]|0;
  $67 = $start;
  $68 = $66;
  $69 = $67;
  $70 = (($68) - ($69))|0;
  $71 = (_mu_str_fromdata($65,$70)|0);
  $val = $71;
  $sym = 1;
  break;
 }
 default: {
  $2 = 0;
  $129 = $2;
  STACKTOP = sp;return ($129|0);
 }
 }
 L26: while(1) {
  $72 = HEAP32[$pos>>2]|0;
  $73 = $4;
  $74 = ($72>>>0)<($73>>>0);
  if (!($74)) {
   break;
  }
  $75 = HEAP32[$pos>>2]|0;
  $76 = HEAP8[$75>>0]|0;
  $77 = $76&255;
  $78 = ($77|0)==(35);
  if (!($78)) {
   $88 = HEAP32[$pos>>2]|0;
   $89 = HEAP8[$88>>0]|0;
   $90 = $89&255;
   $91 = (4003 + ($90)|0);
   $92 = HEAP8[$91>>0]|0;
   $93 = $92&255;
   $94 = ($93|0)==(3);
   if (!($94)) {
    break;
   }
   $95 = HEAP32[$pos>>2]|0;
   $96 = ((($95)) + 1|0);
   HEAP32[$pos>>2] = $96;
   continue;
  }
  while(1) {
   $79 = HEAP32[$pos>>2]|0;
   $80 = $4;
   $81 = ($79>>>0)<($80>>>0);
   if (!($81)) {
    continue L26;
   }
   $82 = HEAP32[$pos>>2]|0;
   $83 = HEAP8[$82>>0]|0;
   $84 = $83&255;
   $85 = ($84|0)!=(10);
   if (!($85)) {
    continue L26;
   }
   $86 = HEAP32[$pos>>2]|0;
   $87 = ((($86)) + 1|0);
   HEAP32[$pos>>2] = $87;
  }
 }
 $97 = $sym;
 $98 = $97&1;
 if ($98) {
  $99 = HEAP32[$pos>>2]|0;
  $100 = HEAP8[$99>>0]|0;
  $101 = $100&255;
  $102 = ($101|0)==(58);
  if (!($102)) {
   $103 = $val;
   $1 = $103;
   $104 = $1;
   $0 = $104;
   $105 = $0;
   $106 = $105;
   $107 = 6 & $106;
   $108 = ($107|0)!=(0);
   if ($108) {
    $109 = $1;
    $110 = $109;
    $111 = -8 & $110;
    $112 = $111;
    $ref$i = $112;
    $113 = $ref$i;
    $114 = HEAP16[$113>>1]|0;
    $count$i = $114;
    $115 = $count$i;
    $116 = $115&65535;
    $117 = ($116|0)!=(0);
    if ($117) {
     $118 = $count$i;
     $119 = (($118) + -1)<<16>>16;
     $count$i = $119;
     $120 = $count$i;
     $121 = $ref$i;
     HEAP16[$121>>1] = $120;
     $122 = $count$i;
     $123 = $122&65535;
     $124 = ($123|0)==(0);
     if ($124) {
      $125 = $1;
      _mu_destroy($125);
     }
    }
   }
   $2 = 0;
   $129 = $2;
   STACKTOP = sp;return ($129|0);
  }
 }
 $126 = HEAP32[$pos>>2]|0;
 $127 = $3;
 HEAP32[$127>>2] = $126;
 $128 = $val;
 $2 = $128;
 $129 = $2;
 STACKTOP = sp;return ($129|0);
}
function _mu_parse($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $end = 0;
 var $pos = 0, $ref$i = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pos = sp + 12|0;
 $3 = $s;
 $4 = $n;
 $5 = $3;
 HEAP32[$pos>>2] = $5;
 $6 = HEAP32[$pos>>2]|0;
 $7 = $4;
 $8 = (($6) + ($7)|0);
 $end = $8;
 $9 = $end;
 $10 = (_mu_parsen($pos,$9)|0);
 $v = $10;
 $11 = HEAP32[$pos>>2]|0;
 $12 = $end;
 $13 = ($11|0)!=($12|0);
 $14 = $v;
 if (!($13)) {
  $2 = $14;
  $37 = $2;
  STACKTOP = sp;return ($37|0);
 }
 $1 = $14;
 $15 = $1;
 $0 = $15;
 $16 = $0;
 $17 = $16;
 $18 = 6 & $17;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $1;
  $21 = $20;
  $22 = -8 & $21;
  $23 = $22;
  $ref$i = $23;
  $24 = $ref$i;
  $25 = HEAP16[$24>>1]|0;
  $count$i = $25;
  $26 = $count$i;
  $27 = $26&65535;
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = $count$i;
   $30 = (($29) + -1)<<16>>16;
   $count$i = $30;
   $31 = $count$i;
   $32 = $ref$i;
   HEAP16[$32>>1] = $31;
   $33 = $count$i;
   $34 = $33&65535;
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = $1;
    _mu_destroy($36);
   }
  }
 }
 $2 = 0;
 $37 = $2;
 STACKTOP = sp;return ($37|0);
}
function _lex_init($l,$pos,$end) {
 $l = $l|0;
 $pos = $pos|0;
 $end = $end|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $l;
 $1 = $pos;
 $2 = $end;
 $3 = $1;
 $4 = $0;
 HEAP32[$4>>2] = $3;
 $5 = $1;
 $6 = $0;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = $5;
 $8 = $2;
 $9 = $0;
 $10 = ((($9)) + 8|0);
 HEAP32[$10>>2] = $8;
 $11 = $0;
 _lex_next($11);
 STACKTOP = sp;return;
}
function _lex_next($l) {
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $end = 0, $lclass = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $l;
 $1 = $0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $0;
 $5 = ((($4)) + 23|0);
 HEAP8[$5>>0] = $3;
 $6 = $0;
 $7 = ((($6)) + 26|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $0;
 $10 = ((($9)) + 25|0);
 HEAP8[$10>>0] = $8;
 $11 = $0;
 $12 = ((($11)) + 16|0);
 HEAP32[$12>>2] = 0;
 $13 = $0;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $0;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($15>>>0)>=($18>>>0);
 $20 = $0;
 if ($19) {
  $21 = ((($20)) + 21|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $0;
  $25 = ((($24)) + 23|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = (($27) - ($23))|0;
  $29 = $28&255;
  HEAP8[$25>>0] = $29;
  $30 = $0;
  $31 = ((($30)) + 12|0);
  HEAP32[$31>>2] = 0;
  STACKTOP = sp;return;
 }
 $32 = ((($20)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $36 = (4003 + ($35)|0);
 $37 = HEAP8[$36>>0]|0;
 $lclass = $37;
 $38 = $lclass;
 $39 = $38&255;
 do {
  switch ($39|0) {
  case 0:  {
   $40 = $0;
   _mu_errorchr($40);
   // unreachable;
   break;
  }
  case 3:  {
   $41 = $0;
   _l_indent($41);
   break;
  }
  case 4:  {
   $42 = $0;
   $43 = ((($42)) + 20|0);
   HEAP8[$43>>0] = 0;
   $44 = $0;
   _l_op($44);
   break;
  }
  case 5:  {
   $45 = $0;
   $46 = ((($45)) + 20|0);
   HEAP8[$46>>0] = 1;
   $47 = $0;
   _l_kw($47);
   break;
  }
  case 6:  {
   $48 = $0;
   _l_str($48);
   break;
  }
  case 7:  {
   $49 = $0;
   _l_num($49);
   break;
  }
  case 1:  {
   $50 = $0;
   $51 = ((($50)) + 12|0);
   HEAP32[$51>>2] = 1;
   $52 = $0;
   $53 = ((($52)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($54)) + 1|0);
   HEAP32[$53>>2] = $55;
   break;
  }
  case 2:  {
   $56 = $0;
   $57 = ((($56)) + 12|0);
   HEAP32[$57>>2] = 2;
   $58 = $0;
   $59 = ((($58)) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ((($60)) + 1|0);
   HEAP32[$59>>2] = $61;
   break;
  }
  case 8:  {
   $62 = $0;
   $63 = ((($62)) + 12|0);
   HEAP32[$63>>2] = 134217728;
   $64 = $0;
   $65 = ((($64)) + 24|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = (($66) + 1)<<24>>24;
   HEAP8[$65>>0] = $67;
   $68 = $0;
   $69 = ((($68)) + 4|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ((($70)) + 1|0);
   HEAP32[$69>>2] = $71;
   break;
  }
  case 9:  {
   $72 = $0;
   $73 = ((($72)) + 12|0);
   HEAP32[$73>>2] = 268435456;
   $74 = $0;
   $75 = ((($74)) + 24|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = (($76) + -1)<<24>>24;
   HEAP8[$75>>0] = $77;
   $78 = $0;
   $79 = ((($78)) + 4|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = ((($80)) + 1|0);
   HEAP32[$79>>2] = $81;
   break;
  }
  case 10:  {
   $82 = $0;
   $83 = ((($82)) + 12|0);
   HEAP32[$83>>2] = 33554432;
   $84 = $0;
   $85 = ((($84)) + 26|0);
   $86 = HEAP8[$85>>0]|0;
   $87 = (($86) + 1)<<24>>24;
   HEAP8[$85>>0] = $87;
   $88 = $0;
   $89 = ((($88)) + 4|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = ((($90)) + 1|0);
   HEAP32[$89>>2] = $91;
   break;
  }
  case 11:  {
   $92 = $0;
   $93 = ((($92)) + 12|0);
   HEAP32[$93>>2] = 67108864;
   $94 = $0;
   $95 = ((($94)) + 26|0);
   $96 = HEAP8[$95>>0]|0;
   $97 = (($96) + -1)<<24>>24;
   HEAP8[$95>>0] = $97;
   $98 = $0;
   $99 = ((($98)) + 4|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($100)) + 1|0);
   HEAP32[$99>>2] = $101;
   break;
  }
  case 12:  {
   $102 = $0;
   $103 = ((($102)) + 12|0);
   HEAP32[$103>>2] = 8388608;
   $104 = $0;
   $105 = ((($104)) + 26|0);
   $106 = HEAP8[$105>>0]|0;
   $107 = (($106) + 1)<<24>>24;
   HEAP8[$105>>0] = $107;
   $108 = $0;
   $109 = ((($108)) + 4|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = ((($110)) + 1|0);
   HEAP32[$109>>2] = $111;
   break;
  }
  case 13:  {
   $112 = $0;
   $113 = ((($112)) + 12|0);
   HEAP32[$113>>2] = 16777216;
   $114 = $0;
   $115 = ((($114)) + 26|0);
   $116 = HEAP8[$115>>0]|0;
   $117 = (($116) + -1)<<24>>24;
   HEAP8[$115>>0] = $117;
   $118 = $0;
   $119 = ((($118)) + 4|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = ((($120)) + 1|0);
   HEAP32[$119>>2] = $121;
   break;
  }
  default: {
  }
  }
 } while(0);
 $122 = $0;
 $123 = ((($122)) + 4|0);
 $124 = HEAP32[$123>>2]|0;
 $end = $124;
 L21: while(1) {
  $125 = $0;
  $126 = ((($125)) + 4|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = $0;
  $129 = ((($128)) + 8|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = ($127>>>0)<($130>>>0);
  if (!($131)) {
   break;
  }
  $132 = $0;
  $133 = ((($132)) + 4|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = HEAP8[$134>>0]|0;
  $136 = $135&255;
  $137 = ($136|0)==(35);
  if ($137) {
   while(1) {
    $138 = $0;
    $139 = ((($138)) + 4|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = $0;
    $142 = ((($141)) + 8|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($140>>>0)<($143>>>0);
    if (!($144)) {
     continue L21;
    }
    $145 = $0;
    $146 = ((($145)) + 4|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = HEAP8[$147>>0]|0;
    $149 = $148&255;
    $150 = ($149|0)!=(10);
    if (!($150)) {
     continue L21;
    }
    $151 = $0;
    $152 = ((($151)) + 4|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = ((($153)) + 1|0);
    HEAP32[$152>>2] = $154;
   }
  }
  $155 = $0;
  $156 = ((($155)) + 4|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = HEAP8[$157>>0]|0;
  $159 = $158&255;
  $160 = (4003 + ($159)|0);
  $161 = HEAP8[$160>>0]|0;
  $162 = $161&255;
  $163 = ($162|0)==(3);
  if (!($163)) {
   break;
  }
  $164 = $0;
  $165 = ((($164)) + 26|0);
  $166 = HEAP8[$165>>0]|0;
  $167 = $166&255;
  $168 = ($167|0)!=(0);
  if (!($168)) {
   $169 = $0;
   $170 = ((($169)) + 4|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = HEAP8[$171>>0]|0;
   $173 = $172&255;
   $174 = ($173|0)!=(10);
   if (!($174)) {
    break;
   }
  }
  $175 = $0;
  $176 = ((($175)) + 4|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = ((($177)) + 1|0);
  HEAP32[$176>>2] = $178;
 }
 $179 = $0;
 $180 = ((($179)) + 4|0);
 $181 = HEAP32[$180>>2]|0;
 $182 = $end;
 $183 = $181;
 $184 = $182;
 $185 = (($183) - ($184))|0;
 $186 = $185<<1;
 $187 = $0;
 $188 = ((($187)) + 20|0);
 $189 = HEAP8[$188>>0]|0;
 $190 = $189&255;
 $191 = (($190) + ($186))|0;
 $192 = $191&255;
 HEAP8[$188>>0] = $192;
 STACKTOP = sp;return;
}
function _mu_errorchr($l) {
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $l;
 $1 = $0;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$vararg_buffer>>2] = $4;
 _mu_errorparse($1,4259,$vararg_buffer);
 // unreachable;
}
function _mu_errorparse($l,$f,$varargs) {
 $l = $l|0;
 $f = $f|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $b = 0, $lines = 0;
 var $n = 0, $nlines = 0, $p = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $args = sp + 24|0;
 $b = sp + 20|0;
 $n = sp + 16|0;
 $1 = $l;
 $2 = $f;
 HEAP32[$args>>2] = $varargs;
 $3 = (_mu_buf_create(0)|0);
 HEAP32[$b>>2] = $3;
 HEAP32[$n>>2] = 0;
 $4 = $2;
 _mu_buf_vpushf($b,$n,$4,$args);
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $p = $6;
 $lines = 1;
 $nlines = 1;
 L1: while(1) {
  $7 = $p;
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7>>>0)<($10>>>0);
  if (!($11)) {
   break;
  }
  $12 = $p;
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = ($14|0)==(35);
  if ($15) {
   while(1) {
    $16 = $p;
    $17 = $1;
    $18 = ((($17)) + 8|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($16>>>0)<($19>>>0);
    if (!($20)) {
     continue L1;
    }
    $21 = $p;
    $22 = HEAP8[$21>>0]|0;
    $23 = $22&255;
    $24 = ($23|0)!=(10);
    if (!($24)) {
     continue L1;
    }
    $25 = $p;
    $26 = ((($25)) + 1|0);
    $p = $26;
   }
  }
  $27 = $p;
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = ($29|0)==(10);
  if ($30) {
   $31 = $nlines;
   $32 = (($31) + 1)|0;
   $nlines = $32;
   $33 = $p;
   $34 = ((($33)) + 1|0);
   $p = $34;
   continue;
  }
  $35 = $p;
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = (4003 + ($37)|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $41 = ($40|0)==(3);
  if ($41) {
   $42 = $p;
   $43 = ((($42)) + 1|0);
   $p = $43;
   continue;
  } else {
   $44 = $nlines;
   $lines = $44;
   $45 = $p;
   $46 = ((($45)) + 1|0);
   $p = $46;
   continue;
  }
 }
 $47 = $lines;
 $48 = ($47|0)!=(1);
 if (!($48)) {
  $50 = HEAP32[$b>>2]|0;
  $0 = $50;
  $51 = $0;
  $52 = $51;
  $53 = -8 & $52;
  $54 = $53;
  $55 = ((($54)) + 4|0);
  $56 = HEAP32[$n>>2]|0;
  _mu_error($55,$56);
  // unreachable;
 }
 $49 = $lines;
 HEAP32[$vararg_buffer>>2] = $49;
 _mu_buf_pushf($b,$n,4273,$vararg_buffer);
 $50 = HEAP32[$b>>2]|0;
 $0 = $50;
 $51 = $0;
 $52 = $51;
 $53 = -8 & $52;
 $54 = $53;
 $55 = ((($54)) + 4|0);
 $56 = HEAP32[$n>>2]|0;
 _mu_error($55,$56);
 // unreachable;
}
function _l_indent($l) {
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $nindent = 0, $nl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $l;
 $nl = 0;
 $nindent = 0;
 L1: while(1) {
  $1 = $0;
  $2 = ((($1)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $0;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3>>>0)<($6>>>0);
  if (!($7)) {
   break;
  }
  $8 = $0;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = ($12|0)==(35);
  if ($13) {
   while(1) {
    $14 = $0;
    $15 = ((($14)) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $0;
    $18 = ((($17)) + 8|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($16>>>0)<($19>>>0);
    if (!($20)) {
     continue L1;
    }
    $21 = $0;
    $22 = ((($21)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $26 = ($25|0)!=(10);
    if (!($26)) {
     continue L1;
    }
    $27 = $0;
    $28 = ((($27)) + 4|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ((($29)) + 1|0);
    HEAP32[$28>>2] = $30;
   }
  }
  $31 = $0;
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = ($35|0)==(10);
  $37 = $0;
  $38 = ((($37)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  if ($36) {
   $40 = ((($39)) + 1|0);
   HEAP32[$38>>2] = $40;
   $nl = $39;
   $nindent = 0;
   continue;
  }
  $41 = HEAP8[$39>>0]|0;
  $42 = $41&255;
  $43 = (4003 + ($42)|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = ($45|0)==(3);
  if (!($46)) {
   break;
  }
  $47 = $0;
  $48 = ((($47)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 1|0);
  HEAP32[$48>>2] = $50;
  $51 = $nindent;
  $52 = (($51) + 1)<<24>>24;
  $nindent = $52;
 }
 $53 = $nindent;
 $54 = $53&255;
 $55 = $0;
 $56 = ((($55)) + 21|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = $57&255;
 $59 = ($54|0)!=($58|0);
 if (!($59)) {
  $91 = $0;
  $92 = ((($91)) + 12|0);
  HEAP32[$92>>2] = 1;
  STACKTOP = sp;return;
 }
 $60 = $nindent;
 $61 = $60&255;
 $62 = $0;
 $63 = ((($62)) + 21|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = ($61|0)>($65|0);
 $67 = $66 ? 134217728 : 268435456;
 $68 = $0;
 $69 = ((($68)) + 12|0);
 HEAP32[$69>>2] = $67;
 $70 = $nindent;
 $71 = $70&255;
 $72 = $0;
 $73 = ((($72)) + 21|0);
 $74 = HEAP8[$73>>0]|0;
 $75 = $74&255;
 $76 = (($71) - ($75))|0;
 $77 = $0;
 $78 = ((($77)) + 24|0);
 $79 = HEAP8[$78>>0]|0;
 $80 = $79&255;
 $81 = (($80) + ($76))|0;
 $82 = $81&255;
 HEAP8[$78>>0] = $82;
 $83 = $nindent;
 $84 = $0;
 $85 = ((($84)) + 21|0);
 HEAP8[$85>>0] = $83;
 $86 = $nl;
 $87 = ($86|0)!=(0|0);
 if (!($87)) {
  STACKTOP = sp;return;
 }
 $88 = $nl;
 $89 = $0;
 $90 = ((($89)) + 4|0);
 HEAP32[$90>>2] = $88;
 STACKTOP = sp;return;
}
function _l_op($l) {
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $begin = 0, $count$i = 0, $ref$i = 0;
 var $tok = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 32|0;
 $5 = $l;
 $6 = $5;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 1|0);
 HEAP32[$7>>2] = $9;
 $begin = $8;
 while(1) {
  $10 = $5;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $5;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($12>>>0)<($15>>>0);
  if (!($16)) {
   break;
  }
  $17 = $5;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = (4003 + ($21)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = ($24|0)==(4);
  if (!($25)) {
   break;
  }
  $26 = $5;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($28)) + 1|0);
  HEAP32[$27>>2] = $29;
 }
 $30 = $begin;
 $31 = $5;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $begin;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (_mu_str_fromdata($30,$37)|0);
 $39 = $5;
 $40 = ((($39)) + 16|0);
 HEAP32[$40>>2] = $38;
 $41 = (_mu_keywords_def()|0);
 $42 = $5;
 $43 = ((($42)) + 16|0);
 $44 = HEAP32[$43>>2]|0;
 $4 = $44;
 $45 = $4;
 $3 = $45;
 $46 = $3;
 $47 = $46;
 $48 = 6 & $47;
 $49 = ($48|0)!=(0);
 if ($49) {
  $50 = $4;
  $51 = $50;
  $52 = -8 & $51;
  $53 = $52;
  $ref$i = $53;
  $54 = $ref$i;
  $55 = HEAP16[$54>>1]|0;
  $count$i = $55;
  $56 = $count$i;
  $57 = $56&65535;
  $58 = ($57|0)!=(0);
  if ($58) {
   $59 = $count$i;
   $60 = (($59) + 1)<<16>>16;
   $count$i = $60;
   $61 = $count$i;
   $62 = $ref$i;
   HEAP16[$62>>1] = $61;
  }
 }
 $63 = $4;
 $64 = (_mu_tbl_lookup($41,$63)|0);
 $tok = $64;
 $65 = $tok;
 $66 = ($65|0)!=(0|0);
 if (!($66)) {
  $76 = 2097152;
  $74 = $5;
  $75 = ((($74)) + 12|0);
  HEAP32[$75>>2] = $76;
  STACKTOP = sp;return;
 }
 $67 = $tok;
 $2 = $67;
 $68 = $2;
 $0 = $68;
 $69 = $0;
 $70 = $69;
 $71 = (($70) - 1)|0;
 HEAP32[$1>>2] = $71;
 $72 = +HEAPF32[$1>>2];
 $73 = (~~(($72))>>>0);
 $76 = $73;
 $74 = $5;
 $75 = ((($74)) + 12|0);
 HEAP32[$75>>2] = $76;
 STACKTOP = sp;return;
}
function _l_kw($l) {
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $begin = 0, $count$i = 0, $ref$i = 0, $tok = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 32|0;
 $5 = $l;
 $6 = $5;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 1|0);
 HEAP32[$7>>2] = $9;
 $begin = $8;
 while(1) {
  $10 = $5;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $5;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($12>>>0)<($15>>>0);
  if (!($16)) {
   break;
  }
  $17 = $5;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = (4003 + ($21)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = ($24|0)==(5);
  if (!($25)) {
   $26 = $5;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&255;
   $31 = (4003 + ($30)|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $34 = ($33|0)==(7);
   if (!($34)) {
    break;
   }
  }
  $35 = $5;
  $36 = ((($35)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37)) + 1|0);
  HEAP32[$36>>2] = $38;
 }
 $39 = $begin;
 $40 = $5;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $begin;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (_mu_str_fromdata($39,$46)|0);
 $48 = $5;
 $49 = ((($48)) + 16|0);
 HEAP32[$49>>2] = $47;
 $50 = (_mu_keywords_def()|0);
 $51 = $5;
 $52 = ((($51)) + 16|0);
 $53 = HEAP32[$52>>2]|0;
 $4 = $53;
 $54 = $4;
 $3 = $54;
 $55 = $3;
 $56 = $55;
 $57 = 6 & $56;
 $58 = ($57|0)!=(0);
 if ($58) {
  $59 = $4;
  $60 = $59;
  $61 = -8 & $60;
  $62 = $61;
  $ref$i = $62;
  $63 = $ref$i;
  $64 = HEAP16[$63>>1]|0;
  $count$i = $64;
  $65 = $count$i;
  $66 = $65&65535;
  $67 = ($66|0)!=(0);
  if ($67) {
   $68 = $count$i;
   $69 = (($68) + 1)<<16>>16;
   $count$i = $69;
   $70 = $count$i;
   $71 = $ref$i;
   HEAP16[$71>>1] = $70;
  }
 }
 $72 = $4;
 $73 = (_mu_tbl_lookup($50,$72)|0);
 $tok = $73;
 $74 = $tok;
 $75 = ($74|0)!=(0|0);
 if (!($75)) {
  $85 = 262144;
  $83 = $5;
  $84 = ((($83)) + 12|0);
  HEAP32[$84>>2] = $85;
  STACKTOP = sp;return;
 }
 $76 = $tok;
 $2 = $76;
 $77 = $2;
 $0 = $77;
 $78 = $0;
 $79 = $78;
 $80 = (($79) - 1)|0;
 HEAP32[$1>>2] = $80;
 $81 = +HEAPF32[$1>>2];
 $82 = (~~(($81))>>>0);
 $85 = $82;
 $83 = $5;
 $84 = ((($83)) + 12|0);
 HEAP32[$84>>2] = $85;
 STACKTOP = sp;return;
}
function _l_str($l) {
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $l;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_mu_str_parsen($2,$5)|0);
 $7 = $0;
 $8 = ((($7)) + 16|0);
 HEAP32[$8>>2] = $6;
 $9 = $0;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 $13 = $0;
 if ($12) {
  $14 = ((($13)) + 12|0);
  HEAP32[$14>>2] = 1048576;
  STACKTOP = sp;return;
 } else {
  _mu_errorparse($13,4286,$vararg_buffer);
  // unreachable;
 }
}
function _l_num($l) {
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $l;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_mu_num_parsen($2,$5)|0);
 $7 = $0;
 $8 = ((($7)) + 16|0);
 HEAP32[$8>>2] = $6;
 $9 = $0;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 $13 = $0;
 if ($12) {
  $14 = ((($13)) + 12|0);
  HEAP32[$14>>2] = 1048576;
  STACKTOP = sp;return;
 } else {
  _mu_errorparse($13,4314,$vararg_buffer);
  // unreachable;
 }
}
function _p_block($p,$root) {
 $p = $p|0;
 $root = $root|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $block = 0, $depth = 0, $paren = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $2 = $root&1;
 $1 = $2;
 $3 = $0;
 $4 = ((($3)) + 24|0);
 $5 = ((($4)) + 23|0);
 $6 = HEAP8[$5>>0]|0;
 $block = $6;
 $7 = $0;
 $8 = ((($7)) + 24|0);
 $9 = ((($8)) + 25|0);
 $10 = HEAP8[$9>>0]|0;
 $paren = $10;
 $11 = $0;
 $12 = ((($11)) + 24|0);
 $13 = ((($12)) + 25|0);
 HEAP8[$13>>0] = 0;
 $14 = $0;
 $15 = ((($14)) + 24|0);
 $16 = ((($15)) + 22|0);
 $17 = HEAP8[$16>>0]|0;
 $depth = $17;
 $18 = $0;
 $19 = ((($18)) + 24|0);
 $20 = ((($19)) + 22|0);
 HEAP8[$20>>0] = -1;
 while(1) {
  $21 = $0;
  $22 = (_match($21,134217728)|0);
  if (!($22)) {
   break;
  }
 }
 while(1) {
  $23 = $0;
  _p_stmt($23);
  $24 = $1;
  $25 = $24&1;
  if (!($25)) {
   $26 = $0;
   $27 = ((($26)) + 24|0);
   $28 = ((($27)) + 23|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&255;
   $31 = $block;
   $32 = $31&255;
   $33 = ($30|0)>($32|0);
   if (!($33)) {
    break;
   }
  }
  $34 = $0;
  $35 = (_match($34,402653185)|0);
  if (!($35)) {
   break;
  }
 }
 $36 = $0;
 $37 = ((($36)) + 24|0);
 $38 = ((($37)) + 23|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 $41 = $block;
 $42 = $41&255;
 $43 = ($40|0)>($42|0);
 if (!($43)) {
  $45 = $paren;
  $46 = $0;
  $47 = ((($46)) + 24|0);
  $48 = ((($47)) + 25|0);
  HEAP8[$48>>0] = $45;
  $49 = $depth;
  $50 = $0;
  $51 = ((($50)) + 24|0);
  $52 = ((($51)) + 22|0);
  HEAP8[$52>>0] = $49;
  STACKTOP = sp;return;
 }
 $44 = $0;
 _expect($44,268435456);
 $45 = $paren;
 $46 = $0;
 $47 = ((($46)) + 24|0);
 $48 = ((($47)) + 25|0);
 HEAP8[$48>>0] = $45;
 $49 = $depth;
 $50 = $0;
 $51 = ((($50)) + 24|0);
 $52 = ((($51)) + 22|0);
 HEAP8[$52>>0] = $49;
 STACKTOP = sp;return;
}
function _match($p,$tok) {
 $p = $p|0;
 $tok = $tok|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 24|0;
 $3 = $p;
 $4 = $tok;
 $5 = $3;
 $6 = $4;
 $7 = (_next($5,$6)|0);
 if (!($7)) {
  $$expand_i1_val2 = 0;
  HEAP8[$2>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$2>>0]|0;
  $48 = $$pre_trunc&1;
  STACKTOP = sp;return ($48|0);
 }
 $8 = $3;
 $9 = ((($8)) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $1 = $10;
 $11 = $1;
 $0 = $11;
 $12 = $0;
 $13 = $12;
 $14 = 6 & $13;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $1;
  $17 = $16;
  $18 = -8 & $17;
  $19 = $18;
  $ref$i = $19;
  $20 = $ref$i;
  $21 = HEAP16[$20>>1]|0;
  $count$i = $21;
  $22 = $count$i;
  $23 = $22&65535;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $count$i;
   $26 = (($25) + -1)<<16>>16;
   $count$i = $26;
   $27 = $count$i;
   $28 = $ref$i;
   HEAP16[$28>>1] = $27;
   $29 = $count$i;
   $30 = $29&65535;
   $31 = ($30|0)==(0);
   if ($31) {
    $32 = $1;
    _mu_destroy($32);
   }
  }
 }
 $33 = $3;
 $34 = ((($33)) + 24|0);
 $35 = ((($34)) + 16|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $3;
 $38 = ((($37)) + 52|0);
 HEAP32[$38>>2] = $36;
 $39 = $3;
 $40 = ((($39)) + 24|0);
 $41 = ((($40)) + 20|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $3;
 $44 = ((($43)) + 52|0);
 $45 = ((($44)) + 4|0);
 HEAP8[$45>>0] = $42;
 $46 = $3;
 $47 = ((($46)) + 24|0);
 _lex_next($47);
 $$expand_i1_val = 1;
 HEAP8[$2>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$2>>0]|0;
 $48 = $$pre_trunc&1;
 STACKTOP = sp;return ($48|0);
}
function _next($p,$tok) {
 $p = $p|0;
 $tok = $tok|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $tok;
 $2 = $0;
 $3 = ((($2)) + 24|0);
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = $5 & $6;
 $8 = ($7|0)!=(0);
 STACKTOP = sp;return ($8|0);
}
function _p_stmt($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$i = 0, $offset = 0, $offset1 = 0, $ref$i = 0, $sym = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $2 = $p;
 $3 = $2;
 $4 = (_next($3,134217728)|0);
 $5 = $2;
 if ($4) {
  _p_block($5,0);
  STACKTOP = sp;return;
 }
 $6 = (_lookahead($5,128,7339920)|0);
 $7 = $2;
 if ($6) {
  _expect($7,7339920);
  $8 = $2;
  $9 = ((($8)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $1 = $10;
  $11 = $1;
  $0 = $11;
  $12 = $0;
  $13 = $12;
  $14 = 6 & $13;
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = $1;
   $17 = $16;
   $18 = -8 & $17;
   $19 = $18;
   $ref$i = $19;
   $20 = $ref$i;
   $21 = HEAP16[$20>>1]|0;
   $count$i = $21;
   $22 = $count$i;
   $23 = $22&65535;
   $24 = ($23|0)!=(0);
   if ($24) {
    $25 = $count$i;
    $26 = (($25) + 1)<<16>>16;
    $count$i = $26;
    $27 = $count$i;
    $28 = $ref$i;
    HEAP16[$28>>1] = $27;
   }
  }
  $29 = $1;
  $sym = $29;
  $30 = $2;
  $31 = $sym;
  _scopecheck($30,$31,1);
  $32 = $2;
  _p_fn($32,1);
  $33 = $2;
  $34 = $2;
  $35 = ((($34)) + 20|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = (($37) + 1)|0;
  $39 = $38&65535;
  $40 = $2;
  $41 = $sym;
  $42 = (_imm($40,$41)|0);
  $43 = $42&65535;
  _encode($33,6,$39,$43,0,1);
  $44 = $2;
  $45 = $2;
  $46 = ((($45)) + 20|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = (($48) - 1)|0;
  $50 = $49&65535;
  $51 = $2;
  $52 = ((($51)) + 20|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  _encode($44,11,$50,0,$54,-2);
  STACKTOP = sp;return;
 }
 $55 = (_match($7,512)|0);
 $56 = $2;
 if ($55) {
  _p_if($56,0);
  STACKTOP = sp;return;
 }
 $57 = (_match($56,1024)|0);
 $58 = $2;
 if ($57) {
  _p_while($58);
  STACKTOP = sp;return;
 }
 $59 = (_match($58,2048)|0);
 $60 = $2;
 if ($59) {
  _p_for($60);
  STACKTOP = sp;return;
 }
 $61 = (_match($60,65536)|0);
 $62 = $2;
 if ($61) {
  $63 = ((($62)) + 14|0);
  $64 = HEAP16[$63>>1]|0;
  $65 = $64&65535;
  $66 = ($65|0)!=(65535);
  $67 = $2;
  if (!($66)) {
   $68 = ((($67)) + 24|0);
   _mu_errorparse($68,4440,$vararg_buffer);
   // unreachable;
  }
  $69 = ((($67)) + 12|0);
  $70 = HEAP16[$69>>1]|0;
  $offset = $70;
  $71 = $2;
  $72 = $2;
  $73 = ((($72)) + 14|0);
  $74 = HEAP16[$73>>1]|0;
  $75 = $74&65535;
  $76 = ($75|0)!=(0);
  if ($76) {
   $77 = $2;
   $78 = ((($77)) + 14|0);
   $79 = HEAP16[$78>>1]|0;
   $80 = $79&65535;
   $81 = $2;
   $82 = ((($81)) + 12|0);
   $83 = HEAP16[$82>>1]|0;
   $84 = $83&65535;
   $85 = (($80) - ($84))|0;
   $87 = $85;
  } else {
   $87 = 0;
  }
  $86 = $87&65535;
  _encode($71,15,0,$86,0,0);
  $88 = $offset;
  $89 = $2;
  $90 = ((($89)) + 14|0);
  HEAP16[$90>>1] = $88;
  STACKTOP = sp;return;
 }
 $91 = (_match($62,32768)|0);
 $92 = $2;
 if ($91) {
  $93 = ((($92)) + 14|0);
  $94 = HEAP16[$93>>1]|0;
  $95 = $94&65535;
  $96 = ($95|0)!=(65535);
  $97 = $2;
  if (!($96)) {
   $98 = ((($97)) + 24|0);
   _mu_errorparse($98,4462,$vararg_buffer1);
   // unreachable;
  }
  $99 = ((($97)) + 12|0);
  $100 = HEAP16[$99>>1]|0;
  $offset1 = $100;
  $101 = $2;
  $102 = $2;
  $103 = ((($102)) + 16|0);
  $104 = HEAP16[$103>>1]|0;
  $105 = $104&65535;
  $106 = ($105|0)!=(0);
  if ($106) {
   $107 = $2;
   $108 = ((($107)) + 16|0);
   $109 = HEAP16[$108>>1]|0;
   $110 = $109&65535;
   $111 = $2;
   $112 = ((($111)) + 12|0);
   $113 = HEAP16[$112>>1]|0;
   $114 = $113&65535;
   $115 = (($110) - ($114))|0;
   $117 = $115;
  } else {
   $117 = 0;
  }
  $116 = $117&65535;
  _encode($101,15,0,$116,0,0);
  $118 = $offset1;
  $119 = $2;
  $120 = ((($119)) + 16|0);
  HEAP16[$120>>1] = $118;
  STACKTOP = sp;return;
 }
 $121 = (_match($92,131136)|0);
 $122 = $2;
 if ($121) {
  _p_return($122);
  STACKTOP = sp;return;
 }
 $123 = (_match($122,16)|0);
 $124 = $2;
 if ($123) {
  _p_assign($124,1);
  STACKTOP = sp;return;
 } else {
  _p_assign($124,0);
  STACKTOP = sp;return;
 }
}
function _lookahead($p,$a,$b) {
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $count$i$i = 0, $count$i$i2 = 0, $count$i$i5 = 0, $l = 0, $l3 = 0, $ref$i$i = 0, $ref$i$i1 = 0, $ref$i$i4 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $l3 = sp + 80|0;
 $4 = sp + 40|0;
 $7 = sp;
 $8 = sp + 192|0;
 $l = sp + 116|0;
 $9 = $p;
 $10 = $a;
 $11 = $b;
 $12 = $9;
 $13 = $10;
 $14 = (_next($12,$13)|0);
 if (!($14)) {
  $$expand_i1_val = 0;
  HEAP8[$8>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$8>>0]|0;
  $95 = $$pre_trunc&1;
  STACKTOP = sp;return ($95|0);
 }
 $15 = $9;
 $16 = ((($15)) + 24|0);
 dest=$7; src=$16; stop=dest+28|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $17 = ((($7)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $6 = $18;
 $19 = $6;
 $5 = $19;
 $20 = $5;
 $21 = $20;
 $22 = 6 & $21;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $6;
  $25 = $24;
  $26 = -8 & $25;
  $27 = $26;
  $ref$i$i = $27;
  $28 = $ref$i$i;
  $29 = HEAP16[$28>>1]|0;
  $count$i$i = $29;
  $30 = $count$i$i;
  $31 = $30&65535;
  $32 = ($31|0)!=(0);
  if ($32) {
   $33 = $count$i$i;
   $34 = (($33) + 1)<<16>>16;
   $count$i$i = $34;
   $35 = $count$i$i;
   $36 = $ref$i$i;
   HEAP16[$36>>1] = $35;
  }
 }
 ;HEAP32[$l>>2]=HEAP32[$7>>2]|0;HEAP32[$l+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$l+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$l+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$l+16>>2]=HEAP32[$7+16>>2]|0;HEAP32[$l+20>>2]=HEAP32[$7+20>>2]|0;HEAP32[$l+24>>2]=HEAP32[$7+24>>2]|0;
 $37 = $9;
 $38 = $10;
 $39 = (_match($37,$38)|0);
 if ($39) {
  $40 = $9;
  $41 = $11;
  $42 = (_next($40,$41)|0);
  if ($42) {
   dest=$l3; src=$l; stop=dest+28|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $43 = ((($l3)) + 16|0);
   $44 = HEAP32[$43>>2]|0;
   $1 = $44;
   $45 = $1;
   $0 = $45;
   $46 = $0;
   $47 = $46;
   $48 = 6 & $47;
   $49 = ($48|0)!=(0);
   if ($49) {
    $50 = $1;
    $51 = $50;
    $52 = -8 & $51;
    $53 = $52;
    $ref$i$i4 = $53;
    $54 = $ref$i$i4;
    $55 = HEAP16[$54>>1]|0;
    $count$i$i5 = $55;
    $56 = $count$i$i5;
    $57 = $56&65535;
    $58 = ($57|0)!=(0);
    if ($58) {
     $59 = $count$i$i5;
     $60 = (($59) + -1)<<16>>16;
     $count$i$i5 = $60;
     $61 = $count$i$i5;
     $62 = $ref$i$i4;
     HEAP16[$62>>1] = $61;
     $63 = $count$i$i5;
     $64 = $63&65535;
     $65 = ($64|0)==(0);
     if ($65) {
      $66 = $1;
      _mu_destroy($66);
     }
    }
   }
   $$expand_i1_val2 = 1;
   HEAP8[$8>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$8>>0]|0;
   $95 = $$pre_trunc&1;
   STACKTOP = sp;return ($95|0);
  }
 }
 $67 = $9;
 $68 = ((($67)) + 24|0);
 dest=$4; src=$68; stop=dest+28|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $69 = ((($4)) + 16|0);
 $70 = HEAP32[$69>>2]|0;
 $3 = $70;
 $71 = $3;
 $2 = $71;
 $72 = $2;
 $73 = $72;
 $74 = 6 & $73;
 $75 = ($74|0)!=(0);
 if ($75) {
  $76 = $3;
  $77 = $76;
  $78 = -8 & $77;
  $79 = $78;
  $ref$i$i1 = $79;
  $80 = $ref$i$i1;
  $81 = HEAP16[$80>>1]|0;
  $count$i$i2 = $81;
  $82 = $count$i$i2;
  $83 = $82&65535;
  $84 = ($83|0)!=(0);
  if ($84) {
   $85 = $count$i$i2;
   $86 = (($85) + -1)<<16>>16;
   $count$i$i2 = $86;
   $87 = $count$i$i2;
   $88 = $ref$i$i1;
   HEAP16[$88>>1] = $87;
   $89 = $count$i$i2;
   $90 = $89&65535;
   $91 = ($90|0)==(0);
   if ($91) {
    $92 = $3;
    _mu_destroy($92);
   }
  }
 }
 $93 = $9;
 $94 = ((($93)) + 24|0);
 ;HEAP32[$94>>2]=HEAP32[$l>>2]|0;HEAP32[$94+4>>2]=HEAP32[$l+4>>2]|0;HEAP32[$94+8>>2]=HEAP32[$l+8>>2]|0;HEAP32[$94+12>>2]=HEAP32[$l+12>>2]|0;HEAP32[$94+16>>2]=HEAP32[$l+16>>2]|0;HEAP32[$94+20>>2]=HEAP32[$l+20>>2]|0;HEAP32[$94+24>>2]=HEAP32[$l+24>>2]|0;
 $$expand_i1_val4 = 0;
 HEAP8[$8>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$8>>0]|0;
 $95 = $$pre_trunc&1;
 STACKTOP = sp;return ($95|0);
}
function _expect($p,$tok) {
 $p = $p|0;
 $tok = $tok|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $tok;
 $2 = $0;
 $3 = $1;
 $4 = (_match($2,$3)|0);
 if ($4) {
  STACKTOP = sp;return;
 } else {
  $5 = $0;
  _unexpected($5);
  // unreachable;
 }
}
function _unexpected($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = ((($1)) + 24|0);
 _mu_errortoken($2);
 // unreachable;
}
function _mu_errortoken($l) {
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $count$i = 0, $ref$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $2 = $l;
 $3 = $2;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 8388604;
 $7 = ($6|0)!=(0);
 $8 = $2;
 $9 = $2;
 if ($7) {
  $10 = ((($9)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $1 = $11;
  $12 = $1;
  $0 = $12;
  $13 = $0;
  $14 = $13;
  $15 = 6 & $14;
  $16 = ($15|0)!=(0);
  if (!($16)) {
   $30 = $1;
   HEAP32[$vararg_buffer>>2] = $30;
   _mu_errorparse($8,4337,$vararg_buffer);
   // unreachable;
  }
  $17 = $1;
  $18 = $17;
  $19 = -8 & $18;
  $20 = $19;
  $ref$i = $20;
  $21 = $ref$i;
  $22 = HEAP16[$21>>1]|0;
  $count$i = $22;
  $23 = $count$i;
  $24 = $23&65535;
  $25 = ($24|0)!=(0);
  if (!($25)) {
   $30 = $1;
   HEAP32[$vararg_buffer>>2] = $30;
   _mu_errorparse($8,4337,$vararg_buffer);
   // unreachable;
  }
  $26 = $count$i;
  $27 = (($26) + 1)<<16>>16;
  $count$i = $27;
  $28 = $count$i;
  $29 = $ref$i;
  HEAP16[$29>>1] = $28;
  $30 = $1;
  HEAP32[$vararg_buffer>>2] = $30;
  _mu_errorparse($8,4337,$vararg_buffer);
  // unreachable;
 }
 $31 = ((($9)) + 12|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 & 1;
 $34 = ($33|0)!=(0);
 if ($34) {
  $71 = 4383;
 } else {
  $35 = $2;
  $36 = ((($35)) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $37 & 2;
  $39 = ($38|0)!=(0);
  if ($39) {
   $71 = 4379;
  } else {
   $40 = $2;
   $41 = ((($40)) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $42 & 8388608;
   $44 = ($43|0)!=(0);
   if ($44) {
    $71 = 4375;
   } else {
    $45 = $2;
    $46 = ((($45)) + 12|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = $47 & 16777216;
    $49 = ($48|0)!=(0);
    if ($49) {
     $71 = 4371;
    } else {
     $50 = $2;
     $51 = ((($50)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = $52 & 33554432;
     $54 = ($53|0)!=(0);
     if ($54) {
      $71 = 4367;
     } else {
      $55 = $2;
      $56 = ((($55)) + 12|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = $57 & 67108864;
      $59 = ($58|0)!=(0);
      if ($59) {
       $71 = 4363;
      } else {
       $60 = $2;
       $61 = ((($60)) + 12|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = $62 & 134217728;
       $64 = ($63|0)!=(0);
       if ($64) {
        $71 = 4359;
       } else {
        $65 = $2;
        $66 = ((($65)) + 12|0);
        $67 = HEAP32[$66>>2]|0;
        $68 = $67 & 268435456;
        $69 = ($68|0)!=(0);
        $70 = $69 ? 4351 : 4355;
        $71 = $70;
       }
      }
     }
    }
   }
  }
 }
 HEAP32[$vararg_buffer1>>2] = $71;
 _mu_errorparse($8,4394,$vararg_buffer1);
 // unreachable;
}
function _scopecheck($p,$m,$insert) {
 $p = $p|0;
 $m = $m|0;
 $insert = $insert|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $count$i = 0, $count$i2 = 0, $count$i4 = 0, $ref$i = 0, $ref$i1 = 0, $ref$i3 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $p;
 $7 = $m;
 $9 = $insert&1;
 $8 = $9;
 $10 = $8;
 $11 = $10&1;
 $12 = $6;
 $13 = HEAP32[$12>>2]|0;
 $14 = $7;
 if ($11) {
  $5 = $14;
  $15 = $5;
  $4 = $15;
  $16 = $4;
  $17 = $16;
  $18 = 6 & $17;
  $19 = ($18|0)!=(0);
  if ($19) {
   $20 = $5;
   $21 = $20;
   $22 = -8 & $21;
   $23 = $22;
   $ref$i = $23;
   $24 = $ref$i;
   $25 = HEAP16[$24>>1]|0;
   $count$i = $25;
   $26 = $count$i;
   $27 = $26&65535;
   $28 = ($27|0)!=(0);
   if ($28) {
    $29 = $count$i;
    $30 = (($29) + 1)<<16>>16;
    $count$i = $30;
    $31 = $count$i;
    $32 = $ref$i;
    HEAP16[$32>>1] = $31;
   }
  }
  $33 = $5;
  $34 = (_imm_nil()|0);
  _mu_tbl_insert($13,$33,$34);
  STACKTOP = sp;return;
 }
 $1 = $14;
 $35 = $1;
 $0 = $35;
 $36 = $0;
 $37 = $36;
 $38 = 6 & $37;
 $39 = ($38|0)!=(0);
 if ($39) {
  $40 = $1;
  $41 = $40;
  $42 = -8 & $41;
  $43 = $42;
  $ref$i3 = $43;
  $44 = $ref$i3;
  $45 = HEAP16[$44>>1]|0;
  $count$i4 = $45;
  $46 = $count$i4;
  $47 = $46&65535;
  $48 = ($47|0)!=(0);
  if ($48) {
   $49 = $count$i4;
   $50 = (($49) + 1)<<16>>16;
   $count$i4 = $50;
   $51 = $count$i4;
   $52 = $ref$i3;
   HEAP16[$52>>1] = $51;
  }
 }
 $53 = $1;
 $54 = (_mu_tbl_lookup($13,$53)|0);
 $s = $54;
 $55 = $s;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  $57 = $6;
  $58 = ((($57)) + 24|0);
  $59 = $7;
  _mu_errorscope($58,$59);
 }
 $60 = $s;
 $3 = $60;
 $61 = $3;
 $2 = $61;
 $62 = $2;
 $63 = $62;
 $64 = 6 & $63;
 $65 = ($64|0)!=(0);
 if (!($65)) {
  STACKTOP = sp;return;
 }
 $66 = $3;
 $67 = $66;
 $68 = -8 & $67;
 $69 = $68;
 $ref$i1 = $69;
 $70 = $ref$i1;
 $71 = HEAP16[$70>>1]|0;
 $count$i2 = $71;
 $72 = $count$i2;
 $73 = $72&65535;
 $74 = ($73|0)!=(0);
 if (!($74)) {
  STACKTOP = sp;return;
 }
 $75 = $count$i2;
 $76 = (($75) + -1)<<16>>16;
 $count$i2 = $76;
 $77 = $count$i2;
 $78 = $ref$i1;
 HEAP16[$78>>1] = $77;
 $79 = $count$i2;
 $80 = $79&65535;
 $81 = ($80|0)==(0);
 if (!($81)) {
  STACKTOP = sp;return;
 }
 $82 = $3;
 _mu_destroy($82);
 STACKTOP = sp;return;
}
function _mu_errorscope($l,$m) {
 $l = $l|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $l;
 $1 = $m;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $3;
 _mu_errorparse($2,4408,$vararg_buffer);
 // unreachable;
}
function _p_fn($p,$weak) {
 $p = $p|0;
 $weak = $weak|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $c = 0, $count$i = 0, $f = 0, $q = 0, $ref$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $q = sp + 8|0;
 $f = sp + 88|0;
 $2 = $p;
 $4 = $weak&1;
 $3 = $4;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $1 = $6;
 $7 = $1;
 $0 = $7;
 $8 = $0;
 $9 = $8;
 $10 = 6 & $9;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $1;
  $13 = $12;
  $14 = -8 & $13;
  $15 = $14;
  $ref$i = $15;
  $16 = $ref$i;
  $17 = HEAP16[$16>>1]|0;
  $count$i = $17;
  $18 = $count$i;
  $19 = $18&65535;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $count$i;
   $22 = (($21) + 1)<<16>>16;
   $count$i = $22;
   $23 = $count$i;
   $24 = $ref$i;
   HEAP16[$24>>1] = $23;
  }
 }
 $25 = $1;
 $26 = (_mu_tbl_createtail(0,$25)|0);
 HEAP32[$q>>2] = $26;
 $27 = ((($q)) + 4|0);
 $28 = (_mu_tbl_create(0)|0);
 HEAP32[$27>>2] = $28;
 $29 = ((($q)) + 8|0);
 $30 = (_mu_buf_create(0)|0);
 HEAP32[$29>>2] = $30;
 $31 = ((($q)) + 12|0);
 HEAP16[$31>>1] = 0;
 $32 = ((($q)) + 14|0);
 HEAP16[$32>>1] = -1;
 $33 = ((($q)) + 16|0);
 HEAP16[$33>>1] = -1;
 $34 = ((($q)) + 18|0);
 HEAP8[$34>>0] = 0;
 $35 = ((($q)) + 19|0);
 HEAP8[$35>>0] = 1;
 $36 = ((($q)) + 20|0);
 HEAP8[$36>>0] = 0;
 $37 = ((($q)) + 21|0);
 HEAP8[$37>>0] = 0;
 $38 = ((($q)) + 24|0);
 $39 = $2;
 $40 = ((($39)) + 24|0);
 ;HEAP32[$38>>2]=HEAP32[$40>>2]|0;HEAP32[$38+4>>2]=HEAP32[$40+4>>2]|0;HEAP32[$38+8>>2]=HEAP32[$40+8>>2]|0;HEAP32[$38+12>>2]=HEAP32[$40+12>>2]|0;HEAP32[$38+16>>2]=HEAP32[$40+16>>2]|0;HEAP32[$38+20>>2]=HEAP32[$40+20>>2]|0;HEAP32[$38+24>>2]=HEAP32[$40+24>>2]|0;
 $41 = ((($q)) + 52|0);
 ;HEAP32[$41>>2]=0|0;HEAP32[$41+4>>2]=0|0;
 _expect($q,8388608);
 ;HEAP16[$f>>1]=HEAP16[3412>>1]|0;HEAP16[$f+2>>1]=HEAP16[3412+2>>1]|0;HEAP16[$f+4>>1]=HEAP16[3412+4>>1]|0;HEAP16[$f+6>>1]=HEAP16[3412+6>>1]|0;
 _s_frame($q,$f,0);
 $42 = ((($f)) + 7|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = ($43&255) >>> 2;
 $45 = $44 & 1;
 $46 = $45&255;
 $47 = ($46|0)!=(0);
 if ($47) {
  $52 = 1;
 } else {
  $48 = ((($f)) + 2|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = $49&65535;
  $52 = $50;
 }
 $51 = $52&255;
 $53 = ((($q)) + 20|0);
 HEAP8[$53>>0] = $51;
 $54 = ((($f)) + 7|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = ($55&255) >>> 2;
 $57 = $56 & 1;
 $58 = $57&255;
 $59 = ($58|0)!=(0);
 if ($59) {
  $64 = 15;
 } else {
  $60 = ((($f)) + 2|0);
  $61 = HEAP16[$60>>1]|0;
  $62 = $61&65535;
  $64 = $62;
 }
 $63 = $64&255;
 $65 = ((($q)) + 18|0);
 HEAP8[$65>>0] = $63;
 _p_frame($q,$f);
 _expect($q,16777216);
 _p_stmt($q);
 _encode($q,0,0,0,0,0);
 $66 = $2;
 $67 = ((($66)) + 24|0);
 $68 = ((($q)) + 24|0);
 ;HEAP32[$67>>2]=HEAP32[$68>>2]|0;HEAP32[$67+4>>2]=HEAP32[$68+4>>2]|0;HEAP32[$67+8>>2]=HEAP32[$68+8>>2]|0;HEAP32[$67+12>>2]=HEAP32[$68+12>>2]|0;HEAP32[$67+16>>2]=HEAP32[$68+16>>2]|0;HEAP32[$67+20>>2]=HEAP32[$68+20>>2]|0;HEAP32[$67+24>>2]=HEAP32[$68+24>>2]|0;
 $69 = $3;
 $70 = $69&1;
 $71 = (_compile($q,$70)|0);
 $c = $71;
 $72 = $2;
 $73 = $2;
 $74 = ((($73)) + 20|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = $75&255;
 $77 = (($76) + 1)|0;
 $78 = $77&65535;
 $79 = $2;
 $80 = $c;
 $81 = (_imm($79,$80)|0);
 $82 = $81&65535;
 _encode($72,7,$78,$82,0,1);
 STACKTOP = sp;return;
}
function _s_frame($p,$f,$update) {
 $p = $p|0;
 $f = $f|0;
 $update = $update|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$i$i = 0, $count$i$i3 = 0, $count$i$i5 = 0, $l = 0, $l1 = 0, $ref$i$i = 0, $ref$i$i2 = 0, $ref$i$i4 = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 80|0;
 $l1 = sp + 40|0;
 $7 = sp;
 $l = sp + 116|0;
 $8 = $p;
 $9 = $f;
 $11 = $update&1;
 $10 = $11;
 $12 = $8;
 $13 = ((($12)) + 24|0);
 dest=$7; src=$13; stop=dest+28|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $14 = ((($7)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $6 = $15;
 $16 = $6;
 $5 = $16;
 $17 = $5;
 $18 = $17;
 $19 = 6 & $18;
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = $6;
  $22 = $21;
  $23 = -8 & $22;
  $24 = $23;
  $ref$i$i = $24;
  $25 = $ref$i$i;
  $26 = HEAP16[$25>>1]|0;
  $count$i$i = $26;
  $27 = $count$i$i;
  $28 = $27&65535;
  $29 = ($28|0)!=(0);
  if ($29) {
   $30 = $count$i$i;
   $31 = (($30) + 1)<<16>>16;
   $count$i$i = $31;
   $32 = $count$i$i;
   $33 = $ref$i$i;
   HEAP16[$33>>1] = $32;
  }
 }
 ;HEAP32[$l>>2]=HEAP32[$7>>2]|0;HEAP32[$l+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$l+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$l+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$l+16>>2]=HEAP32[$7+16>>2]|0;HEAP32[$l+20>>2]=HEAP32[$7+20>>2]|0;HEAP32[$l+24>>2]=HEAP32[$7+24>>2]|0;
 $34 = $8;
 $35 = ((($34)) + 24|0);
 $36 = ((($35)) + 22|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $9;
 $39 = ((($38)) + 6|0);
 HEAP8[$39>>0] = $37;
 $40 = $8;
 $41 = ((($40)) + 24|0);
 $42 = ((($41)) + 25|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $8;
 $45 = ((($44)) + 24|0);
 $46 = ((($45)) + 22|0);
 HEAP8[$46>>0] = $43;
 while(1) {
  $47 = $9;
  $48 = ((($47)) + 7|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49 & -33;
  HEAP8[$48>>0] = $50;
  $51 = $8;
  $52 = (_next($51,45879168)|0);
  if (!($52)) {
   break;
  }
  $53 = $8;
  $54 = $9;
  _s_expr($53,$54,-1);
  $55 = $8;
  $56 = (_match($55,8)|0);
  if ($56) {
   $57 = $9;
   $58 = ((($57)) + 7|0);
   $59 = HEAP8[$58>>0]|0;
   $60 = $59 & -5;
   $61 = $60 | 4;
   HEAP8[$58>>0] = $61;
   $62 = $8;
   $63 = $9;
   _s_expr($62,$63,-1);
  }
  $64 = $9;
  $65 = ((($64)) + 2|0);
  $66 = HEAP16[$65>>1]|0;
  $67 = (($66) + 1)<<16>>16;
  HEAP16[$65>>1] = $67;
  $68 = $8;
  $69 = ((($68)) + 24|0);
  $70 = ((($69)) + 25|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $71&255;
  $73 = $9;
  $74 = ((($73)) + 6|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75&255;
  $77 = ($72|0)!=($76|0);
  if (!($77)) {
   break;
  }
  $78 = $8;
  $79 = (_match($78,2)|0);
  if (!($79)) {
   break;
  }
 }
 $80 = $8;
 $81 = (_match($80,4194304)|0);
 if ($81) {
  $82 = $9;
  $83 = ((($82)) + 7|0);
  $84 = HEAP8[$83>>0]|0;
  $85 = $84 & -65;
  $86 = $85 | 64;
  HEAP8[$83>>0] = $86;
  $87 = $8;
  $88 = $9;
  _s_expr($87,$88,-1);
 }
 $89 = $9;
 $90 = ((($89)) + 6|0);
 $91 = HEAP8[$90>>0]|0;
 $92 = $8;
 $93 = ((($92)) + 24|0);
 $94 = ((($93)) + 22|0);
 HEAP8[$94>>0] = $91;
 $95 = $10;
 $96 = $95&1;
 if ($96) {
  dest=$l1; src=$l; stop=dest+28|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $125 = ((($l1)) + 16|0);
  $126 = HEAP32[$125>>2]|0;
  $4 = $126;
  $127 = $4;
  $3 = $127;
  $128 = $3;
  $129 = $128;
  $130 = 6 & $129;
  $131 = ($130|0)!=(0);
  if ($131) {
   $132 = $4;
   $133 = $132;
   $134 = -8 & $133;
   $135 = $134;
   $ref$i$i2 = $135;
   $136 = $ref$i$i2;
   $137 = HEAP16[$136>>1]|0;
   $count$i$i3 = $137;
   $138 = $count$i$i3;
   $139 = $138&65535;
   $140 = ($139|0)!=(0);
   if ($140) {
    $141 = $count$i$i3;
    $142 = (($141) + -1)<<16>>16;
    $count$i$i3 = $142;
    $143 = $count$i$i3;
    $144 = $ref$i$i2;
    HEAP16[$144>>1] = $143;
    $145 = $count$i$i3;
    $146 = $145&65535;
    $147 = ($146|0)==(0);
    if ($147) {
     $148 = $4;
     _mu_destroy($148);
    }
   }
  }
 } else {
  $97 = $8;
  $98 = ((($97)) + 24|0);
  dest=$2; src=$98; stop=dest+28|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $99 = ((($2)) + 16|0);
  $100 = HEAP32[$99>>2]|0;
  $1 = $100;
  $101 = $1;
  $0 = $101;
  $102 = $0;
  $103 = $102;
  $104 = 6 & $103;
  $105 = ($104|0)!=(0);
  if ($105) {
   $106 = $1;
   $107 = $106;
   $108 = -8 & $107;
   $109 = $108;
   $ref$i$i4 = $109;
   $110 = $ref$i$i4;
   $111 = HEAP16[$110>>1]|0;
   $count$i$i5 = $111;
   $112 = $count$i$i5;
   $113 = $112&65535;
   $114 = ($113|0)!=(0);
   if ($114) {
    $115 = $count$i$i5;
    $116 = (($115) + -1)<<16>>16;
    $count$i$i5 = $116;
    $117 = $count$i$i5;
    $118 = $ref$i$i4;
    HEAP16[$118>>1] = $117;
    $119 = $count$i$i5;
    $120 = $119&65535;
    $121 = ($120|0)==(0);
    if ($121) {
     $122 = $1;
     _mu_destroy($122);
    }
   }
  }
  $123 = $8;
  $124 = ((($123)) + 24|0);
  ;HEAP32[$124>>2]=HEAP32[$l>>2]|0;HEAP32[$124+4>>2]=HEAP32[$l+4>>2]|0;HEAP32[$124+8>>2]=HEAP32[$l+8>>2]|0;HEAP32[$124+12>>2]=HEAP32[$l+12>>2]|0;HEAP32[$124+16>>2]=HEAP32[$l+16>>2]|0;HEAP32[$124+20>>2]=HEAP32[$l+20>>2]|0;HEAP32[$124+24>>2]=HEAP32[$l+24>>2]|0;
 }
 $149 = $9;
 $150 = ((($149)) + 7|0);
 $151 = HEAP8[$150>>0]|0;
 $152 = ($151&255) >>> 2;
 $153 = $152 & 1;
 $154 = $153&255;
 $155 = ($154|0)!=(0);
 if ($155) {
  $169 = 1;
 } else {
  $156 = $9;
  $157 = ((($156)) + 7|0);
  $158 = HEAP8[$157>>0]|0;
  $159 = ($158&255) >>> 6;
  $160 = $159 & 1;
  $161 = $160&255;
  $162 = ($161|0)!=(0);
  if ($162) {
   $169 = 1;
  } else {
   $163 = $9;
   $164 = ((($163)) + 2|0);
   $165 = HEAP16[$164>>1]|0;
   $166 = $165&65535;
   $167 = ($166|0)>(4);
   $169 = $167;
  }
 }
 $168 = $169&1;
 $170 = $168&255;
 $171 = $9;
 $172 = ((($171)) + 7|0);
 $173 = HEAP8[$172>>0]|0;
 $174 = $170 & 1;
 $175 = ($174 << 2)&255;
 $176 = $173 & -5;
 $177 = $176 | $175;
 HEAP8[$172>>0] = $177;
 $178 = $9;
 $179 = ((($178)) + 2|0);
 $180 = HEAP16[$179>>1]|0;
 $181 = $9;
 HEAP16[$181>>1] = $180;
 $182 = $9;
 $183 = ((($182)) + 7|0);
 $184 = HEAP8[$183>>0]|0;
 $185 = ($184&255) >>> 5;
 $186 = $185 & 1;
 $187 = $186&255;
 $188 = ($187|0)!=(0);
 if (!($188)) {
  $202 = 0;
  $201 = $202&1;
  $203 = $201&255;
  $204 = $9;
  $205 = ((($204)) + 7|0);
  $206 = HEAP8[$205>>0]|0;
  $207 = $203 & 1;
  $208 = ($207 << 5)&255;
  $209 = $206 & -33;
  $210 = $209 | $208;
  HEAP8[$205>>0] = $210;
  STACKTOP = sp;return;
 }
 $189 = $9;
 $190 = ((($189)) + 2|0);
 $191 = HEAP16[$190>>1]|0;
 $192 = $191&65535;
 $193 = ($192|0)==(1);
 if (!($193)) {
  $202 = 0;
  $201 = $202&1;
  $203 = $201&255;
  $204 = $9;
  $205 = ((($204)) + 7|0);
  $206 = HEAP8[$205>>0]|0;
  $207 = $203 & 1;
  $208 = ($207 << 5)&255;
  $209 = $206 & -33;
  $210 = $209 | $208;
  HEAP8[$205>>0] = $210;
  STACKTOP = sp;return;
 }
 $194 = $9;
 $195 = ((($194)) + 7|0);
 $196 = HEAP8[$195>>0]|0;
 $197 = ($196&255) >>> 2;
 $198 = $197 & 1;
 $199 = ($198<<24>>24)!=(0);
 $200 = $199 ^ 1;
 $202 = $200;
 $201 = $202&1;
 $203 = $201&255;
 $204 = $9;
 $205 = ((($204)) + 7|0);
 $206 = HEAP8[$205>>0]|0;
 $207 = $203 & 1;
 $208 = ($207 << 5)&255;
 $209 = $206 & -33;
 $210 = $209 | $208;
 HEAP8[$205>>0] = $210;
 STACKTOP = sp;return;
}
function _s_expr($p,$f,$prec) {
 $p = $p|0;
 $f = $f|0;
 $prec = $prec|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $call = 0, $depth = 0, $depth1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $f;
 $2 = $prec;
 while(1) {
  $3 = $0;
  $4 = (_match($3,8388608)|0);
  if (!($4)) {
   break;
  }
 }
 while(1) {
  $5 = $0;
  $6 = (_match($5,8388608)|0);
  $7 = $0;
  if ($6) {
   $8 = ((($7)) + 24|0);
   $9 = ((($8)) + 25|0);
   $10 = HEAP8[$9>>0]|0;
   $depth = $10;
   while(1) {
    $11 = $0;
    $12 = ((($11)) + 24|0);
    $13 = ((($12)) + 25|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = $14&255;
    $16 = $depth;
    $17 = $16&255;
    $18 = ($15|0)>=($17|0);
    if (!($18)) {
     break;
    }
    $19 = $0;
    $20 = (_match($19,-1)|0);
    if (!($20)) {
     break;
    }
   }
   $21 = $1;
   $22 = ((($21)) + 7|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 & -33;
   $25 = $24 | 32;
   HEAP8[$22>>0] = $25;
   continue;
  }
  $26 = (_match($7,33554432)|0);
  $27 = $0;
  if ($26) {
   $28 = ((($27)) + 24|0);
   $29 = ((($28)) + 25|0);
   $30 = HEAP8[$29>>0]|0;
   $depth1 = $30;
   while(1) {
    $31 = $0;
    $32 = ((($31)) + 24|0);
    $33 = ((($32)) + 25|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = $34&255;
    $36 = $depth1;
    $37 = $36&255;
    $38 = ($35|0)>=($37|0);
    if (!($38)) {
     break;
    }
    $39 = $0;
    $40 = (_match($39,-1)|0);
    if (!($40)) {
     break;
    }
   }
   $41 = $1;
   $42 = ((($41)) + 7|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = $43 & -33;
   HEAP8[$42>>0] = $44;
   continue;
  }
  $45 = (_match($27,8064)|0);
  $46 = $0;
  if ($45) {
   $47 = $1;
   _s_block($46,$47);
   $48 = $1;
   $49 = ((($48)) + 7|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $50 & -33;
   HEAP8[$49>>0] = $51;
   continue;
  }
  $52 = (_match($46,1835104)|0);
  if ($52) {
   $53 = $1;
   $54 = ((($53)) + 7|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55 & -33;
   HEAP8[$54>>0] = $56;
   continue;
  }
  $57 = $2;
  $58 = $57&255;
  $59 = $0;
  $60 = ((($59)) + 24|0);
  $61 = ((($60)) + 20|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = ($58|0)>($63|0);
  if ($64) {
   $65 = $0;
   $66 = (_match($65,6291456)|0);
   if ($66) {
    $67 = $0;
    $68 = (_next($67,50073472)|0);
    $69 = $68&1;
    $call = $69;
    $70 = $0;
    $71 = $1;
    $72 = $0;
    $73 = ((($72)) + 52|0);
    $74 = ((($73)) + 4|0);
    $75 = HEAP8[$74>>0]|0;
    _s_expr($70,$71,$75);
    $76 = $call;
    $77 = $76&1;
    $78 = $77&1;
    $79 = $1;
    $80 = ((($79)) + 7|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = $78 & 1;
    $83 = ($82 << 5)&255;
    $84 = $81 & -33;
    $85 = $84 | $83;
    HEAP8[$80>>0] = $85;
    continue;
   }
  }
  $86 = $2;
  $87 = $86&255;
  $88 = $0;
  $89 = ((($88)) + 24|0);
  $90 = ((($89)) + 20|0);
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = ($87|0)>($92|0);
  if ($93) {
   $94 = $0;
   $95 = (_match($94,24576)|0);
   if ($95) {
    $96 = $0;
    $97 = $1;
    $98 = $0;
    $99 = ((($98)) + 52|0);
    $100 = ((($99)) + 4|0);
    $101 = HEAP8[$100>>0]|0;
    _s_expr($96,$97,$101);
    $102 = $1;
    $103 = ((($102)) + 7|0);
    $104 = HEAP8[$103>>0]|0;
    $105 = $104 & -33;
    HEAP8[$103>>0] = $105;
    continue;
   }
  }
  $106 = $1;
  $107 = ((($106)) + 2|0);
  $108 = HEAP16[$107>>1]|0;
  $109 = $108&65535;
  $110 = ($109|0)==(0);
  if (!($110)) {
   label = 26;
   break;
  }
  $111 = $0;
  $112 = ((($111)) + 24|0);
  $113 = ((($112)) + 25|0);
  $114 = HEAP8[$113>>0]|0;
  $115 = $114&255;
  $116 = $0;
  $117 = ((($116)) + 24|0);
  $118 = ((($117)) + 22|0);
  $119 = HEAP8[$118>>0]|0;
  $120 = $119&255;
  $121 = ($115|0)>($120|0);
  if (!($121)) {
   label = 26;
   break;
  }
  $122 = $0;
  $123 = (_match($122,16777216)|0);
  if (!($123)) {
   label = 26;
   break;
  }
 }
 if ((label|0) == 26) {
  STACKTOP = sp;return;
 }
}
function _s_block($p,$f) {
 $p = $p|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $block = 0, $depth = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $f;
 $2 = $0;
 $3 = ((($2)) + 24|0);
 $4 = ((($3)) + 25|0);
 $5 = HEAP8[$4>>0]|0;
 $depth = $5;
 while(1) {
  $6 = $0;
  $7 = (_match($6,50302964)|0);
  if ($7) {
   continue;
  }
  $8 = $0;
  $9 = ((($8)) + 24|0);
  $10 = ((($9)) + 25|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $0;
  $14 = ((($13)) + 24|0);
  $15 = ((($14)) + 22|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = ($12|0)>($17|0);
  if ($18) {
   $19 = $0;
   $20 = (_match($19,2)|0);
   if ($20) {
    continue;
   }
  }
  $21 = $0;
  $22 = ((($21)) + 24|0);
  $23 = ((($22)) + 25|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = $depth;
  $27 = $26&255;
  $28 = ($25|0)>($27|0);
  if (!($28)) {
   break;
  }
  $29 = $0;
  $30 = (_match($29,83886080)|0);
  if (!($30)) {
   break;
  }
 }
 $31 = $0;
 $32 = (_match($31,134217728)|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $33 = $0;
 $34 = ((($33)) + 24|0);
 $35 = ((($34)) + 23|0);
 $36 = HEAP8[$35>>0]|0;
 $block = $36;
 while(1) {
  $37 = $0;
  $38 = ((($37)) + 24|0);
  $39 = ((($38)) + 23|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = $block;
  $43 = $42&255;
  $44 = ($41|0)>=($43|0);
  if (!($44)) {
   label = 11;
   break;
  }
  $45 = $0;
  $46 = (_match($45,-1)|0);
  if (!($46)) {
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
}
function _p_frame($p,$f) {
 $p = $p|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0.0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $e = 0, $e1 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 16|0;
 $3 = sp + 8|0;
 $e = sp + 32|0;
 $e1 = sp + 28|0;
 $4 = $p;
 $5 = $f;
 $6 = $5;
 $7 = ((($6)) + 7|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8 & 1;
 $10 = ($9<<24>>24)!=(0);
 if (!($10)) {
  $11 = $5;
  $12 = ((($11)) + 7|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = ($13&255) >>> 5;
  $15 = $14 & 1;
  $16 = $15&255;
  $17 = ($16|0)!=(0);
  if ($17) {
   HEAP8[$e>>0] = -1;
   $18 = ((($e)) + 1|0);
   HEAP8[$18>>0] = 0;
   $19 = ((($e)) + 2|0);
   HEAP8[$19>>0] = 0;
   $20 = ((($e)) + 3|0);
   $21 = $5;
   $22 = ((($21)) + 7|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = ($23&255) >>> 1;
   $25 = $24 & 1;
   $26 = HEAP8[$20>>0]|0;
   $27 = $25 & 1;
   $28 = $26 & -2;
   $29 = $28 | $27;
   HEAP8[$20>>0] = $29;
   $30 = $4;
   _p_subexpr($30,$e);
   $31 = $4;
   $32 = $4;
   $33 = ((($32)) + 20|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = ((($e)) + 1|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==(15);
   if ($39) {
    $44 = 1;
   } else {
    $40 = ((($e)) + 1|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = $41&255;
    $44 = $42;
   }
   $43 = (($35) - ($44))|0;
   $45 = $43&65535;
   $46 = ((($e)) + 1|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $47&255;
   $49 = $48 << 4;
   $50 = $5;
   $51 = ((($50)) + 7|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = ($52&255) >>> 2;
   $54 = $53 & 1;
   $55 = $54&255;
   $56 = ($55|0)!=(0);
   if ($56) {
    $61 = 15;
   } else {
    $57 = $5;
    $58 = HEAP16[$57>>1]|0;
    $59 = $58&65535;
    $61 = $59;
   }
   $60 = $49 | $61;
   $62 = $60&65535;
   $63 = $5;
   $64 = ((($63)) + 7|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = ($65&255) >>> 2;
   $67 = $66 & 1;
   $68 = $67&255;
   $69 = ($68|0)!=(0);
   if ($69) {
    $82 = 1;
   } else {
    $70 = $5;
    $71 = HEAP16[$70>>1]|0;
    $72 = $71&65535;
    $82 = $72;
   }
   $73 = ((($e)) + 1|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $74&255;
   $76 = ($75|0)==(15);
   if ($76) {
    $81 = 1;
   } else {
    $77 = ((($e)) + 1|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = $78&255;
    $81 = $79;
   }
   $80 = (($82) - ($81))|0;
   $83 = (($80) - 1)|0;
   _encode($31,2,$45,$62,0,$83);
   STACKTOP = sp;return;
  }
 }
 $84 = $5;
 $85 = ((($84)) + 7|0);
 $86 = HEAP8[$85>>0]|0;
 $87 = $86 & 1;
 $88 = ($87<<24>>24)!=(0);
 do {
  if (!($88)) {
   $89 = $5;
   $90 = ((($89)) + 7|0);
   $91 = HEAP8[$90>>0]|0;
   $92 = ($91&255) >>> 2;
   $93 = $92 & 1;
   $94 = $93&255;
   $95 = ($94|0)!=(0);
   if ($95) {
    $96 = $5;
    $97 = ((($96)) + 7|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = ($98&255) >>> 5;
    $100 = $99 & 1;
    $101 = ($100<<24>>24)!=(0);
    if (!($101)) {
     $102 = $5;
     $103 = ((($102)) + 7|0);
     $104 = HEAP8[$103>>0]|0;
     $105 = ($104&255) >>> 6;
     $106 = $105 & 1;
     $107 = $106&255;
     $108 = ($107|0)!=(0);
     if ($108) {
      $109 = $5;
      $110 = HEAP16[$109>>1]|0;
      $111 = $110&65535;
      $112 = ($111|0)==(0);
      if ($112) {
       break;
      }
     }
     $113 = $4;
     $114 = $4;
     $115 = ((($114)) + 20|0);
     $116 = HEAP8[$115>>0]|0;
     $117 = $116&255;
     $118 = (($117) + 1)|0;
     $119 = $118&65535;
     $120 = $5;
     $121 = ((($120)) + 2|0);
     $122 = HEAP16[$121>>1]|0;
     _encode($113,8,$119,$122,0,1);
    }
   }
  }
 } while(0);
 $123 = $5;
 $124 = ((($123)) + 2|0);
 HEAP16[$124>>1] = 0;
 $125 = $5;
 $126 = ((($125)) + 4|0);
 HEAP16[$126>>1] = 0;
 $127 = $4;
 $128 = ((($127)) + 24|0);
 $129 = ((($128)) + 22|0);
 $130 = HEAP8[$129>>0]|0;
 $131 = $5;
 $132 = ((($131)) + 6|0);
 HEAP8[$132>>0] = $130;
 $133 = $4;
 $134 = ((($133)) + 24|0);
 $135 = ((($134)) + 25|0);
 $136 = HEAP8[$135>>0]|0;
 $137 = $4;
 $138 = ((($137)) + 24|0);
 $139 = ((($138)) + 22|0);
 HEAP8[$139>>0] = $136;
 while(1) {
  $140 = $4;
  $141 = (_match($140,8388608)|0);
  if (!($141)) {
   break;
  }
 }
 while(1) {
  $142 = $4;
  $143 = (_next($142,50073472)|0);
  if (!($143)) {
   break;
  }
  $144 = $4;
  $145 = (_match($144,4194304)|0);
  if ($145) {
   break;
  }
  $146 = $4;
  $147 = $5;
  _p_entry($146,$147);
  $148 = $5;
  $149 = ((($148)) + 7|0);
  $150 = HEAP8[$149>>0]|0;
  $151 = ($150&255) >>> 4;
  $152 = $151 & 1;
  $153 = ($152<<24>>24)!=(0);
  $154 = $153 ^ 1;
  $155 = $154&1;
  $156 = $5;
  $157 = ((($156)) + 4|0);
  $158 = HEAP16[$157>>1]|0;
  $159 = $158&65535;
  $160 = (($159) + ($155))|0;
  $161 = $160&65535;
  HEAP16[$157>>1] = $161;
  $162 = $5;
  $163 = ((($162)) + 2|0);
  $164 = HEAP16[$163>>1]|0;
  $165 = $164&65535;
  $166 = (($165) + 1)|0;
  $167 = $166&65535;
  HEAP16[$163>>1] = $167;
  $168 = $4;
  $169 = ((($168)) + 24|0);
  $170 = ((($169)) + 25|0);
  $171 = HEAP8[$170>>0]|0;
  $172 = $171&255;
  $173 = $5;
  $174 = ((($173)) + 6|0);
  $175 = HEAP8[$174>>0]|0;
  $176 = $175&255;
  $177 = ($172|0)!=($176|0);
  if (!($177)) {
   break;
  }
  $178 = $4;
  $179 = (_match($178,2)|0);
  if (!($179)) {
   break;
  }
 }
 $180 = $5;
 $181 = ((($180)) + 7|0);
 $182 = HEAP8[$181>>0]|0;
 $183 = ($182&255) >>> 6;
 $184 = $183 & 1;
 $185 = ($184<<24>>24)!=(0);
 do {
  if ($185) {
   $186 = $5;
   $187 = ((($186)) + 7|0);
   $188 = HEAP8[$187>>0]|0;
   $189 = $188 & 1;
   $190 = ($189<<24>>24)!=(0);
   if ($190) {
    HEAP8[$e1>>0] = -1;
    $191 = ((($e1)) + 1|0);
    HEAP8[$191>>0] = 0;
    $192 = ((($e1)) + 2|0);
    HEAP8[$192>>0] = 0;
    $193 = ((($e1)) + 3|0);
    $194 = $5;
    $195 = ((($194)) + 7|0);
    $196 = HEAP8[$195>>0]|0;
    $197 = ($196&255) >>> 1;
    $198 = $197 & 1;
    $199 = HEAP8[$193>>0]|0;
    $200 = $198 & 1;
    $201 = $199 & -2;
    $202 = $201 | $200;
    HEAP8[$193>>0] = $202;
    $203 = $4;
    _p_subexpr($203,$e1);
    $204 = $4;
    $205 = $5;
    $206 = ((($205)) + 7|0);
    $207 = HEAP8[$206>>0]|0;
    $208 = ($207&255) >>> 1;
    $209 = $208 & 1;
    $210 = ($209<<24>>24)!=(0);
    _encstore($204,$e1,$210,0);
    $211 = $4;
    $212 = ((($211)) + 20|0);
    $213 = HEAP8[$212>>0]|0;
    $214 = $213&255;
    $215 = (($214) - 1)|0;
    $216 = $215&255;
    HEAP8[$212>>0] = $216;
    break;
   }
   $217 = $5;
   $218 = ((($217)) + 2|0);
   $219 = HEAP16[$218>>1]|0;
   $220 = $219&65535;
   $221 = ($220|0)>(0);
   $222 = $4;
   if ($221) {
    $223 = $4;
    $224 = ((($223)) + 20|0);
    $225 = HEAP8[$224>>0]|0;
    $226 = $225&255;
    $227 = (($226) + 1)|0;
    $228 = $227&65535;
    $229 = $4;
    $230 = ((($229)) + 20|0);
    $231 = HEAP8[$230>>0]|0;
    $232 = $231&255;
    _encode($222,3,$228,$232,0,1);
    $233 = $4;
    $234 = $4;
    $235 = ((($234)) + 20|0);
    $236 = HEAP8[$235>>0]|0;
    $237 = $236&255;
    $238 = (($237) - 1)|0;
    $239 = $238&65535;
    $240 = $4;
    $241 = (_mu_concat_key_def()|0);
    $242 = (_imm($240,$241)|0);
    $243 = $242&65535;
    _encode($233,6,$239,$243,0,0);
    $244 = $4;
    $245 = $4;
    $246 = ((($245)) + 20|0);
    $247 = HEAP8[$246>>0]|0;
    $248 = $247&255;
    $249 = (($248) - 1)|0;
    $250 = $249&65535;
    $251 = $4;
    $252 = ((($251)) + 20|0);
    $253 = HEAP8[$252>>0]|0;
    $254 = $253&255;
    $255 = (($254) - 1)|0;
    $256 = $255&65535;
    _encode($244,10,$250,0,$256,0);
    $257 = $4;
    _p_expr($257);
    $258 = $4;
    $259 = $4;
    $260 = ((($259)) + 20|0);
    $261 = HEAP8[$260>>0]|0;
    $262 = $261&255;
    $263 = (($262) + 1)|0;
    $264 = $263&65535;
    $265 = $4;
    $266 = $5;
    $267 = ((($266)) + 4|0);
    $268 = HEAP16[$267>>1]|0;
    $269 = $268&65535;
    $0 = $269;
    $270 = $0;
    $271 = (+($270>>>0));
    HEAPF32[$1>>2] = $271;
    $272 = HEAP32[$1>>2]|0;
    $273 = -8 & $272;
    $274 = (1 + ($273))|0;
    $275 = $274;
    $276 = (_imm($265,$275)|0);
    $277 = $276&65535;
    _encode($258,6,$264,$277,0,1);
    $278 = $4;
    $279 = $4;
    $280 = ((($279)) + 20|0);
    $281 = HEAP8[$280>>0]|0;
    $282 = $281&255;
    $283 = (($282) - 3)|0;
    $284 = $283&65535;
    _encode($278,2,$284,49,0,-3);
    break;
   } else {
    _p_expr($222);
    break;
   }
  }
 } while(0);
 $285 = $5;
 $286 = ((($285)) + 7|0);
 $287 = HEAP8[$286>>0]|0;
 $288 = $287 & 1;
 $289 = $288&255;
 $290 = ($289|0)!=(0);
 if ($290) {
  $291 = $5;
  $292 = ((($291)) + 7|0);
  $293 = HEAP8[$292>>0]|0;
  $294 = ($293&255) >>> 2;
  $295 = $294 & 1;
  $296 = ($295<<24>>24)!=(0);
  if ($296) {
   label = 33;
  } else {
   $297 = $5;
   $298 = ((($297)) + 2|0);
   $299 = HEAP16[$298>>1]|0;
   $300 = $299&65535;
   $301 = $4;
   $302 = ((($301)) + 20|0);
   $303 = HEAP8[$302>>0]|0;
   $304 = $303&255;
   $305 = (($304) - ($300))|0;
   $306 = $305&255;
   HEAP8[$302>>0] = $306;
  }
 } else {
  label = 33;
 }
 L46: do {
  if ((label|0) == 33) {
   $307 = $5;
   $308 = ((($307)) + 7|0);
   $309 = HEAP8[$308>>0]|0;
   $310 = $309 & 1;
   $311 = ($310<<24>>24)!=(0);
   if (!($311)) {
    $312 = $5;
    $313 = ((($312)) + 7|0);
    $314 = HEAP8[$313>>0]|0;
    $315 = ($314&255) >>> 2;
    $316 = $315 & 1;
    $317 = $316&255;
    $318 = ($317|0)!=(0);
    if ($318) {
     $319 = $5;
     $320 = ((($319)) + 7|0);
     $321 = HEAP8[$320>>0]|0;
     $322 = ($321&255) >>> 3;
     $323 = $322 & 1;
     $324 = $323&255;
     $325 = ($324|0)!=(0);
     if ($325) {
      $326 = $4;
      $327 = $4;
      $328 = ((($327)) + 20|0);
      $329 = HEAP8[$328>>0]|0;
      $330 = $329&255;
      $331 = $5;
      $332 = HEAP16[$331>>1]|0;
      $333 = $332&65535;
      $334 = (($330) + ($333))|0;
      $335 = $334&65535;
      $336 = $4;
      $337 = ((($336)) + 20|0);
      $338 = HEAP8[$337>>0]|0;
      $339 = $338&255;
      $340 = $5;
      $341 = HEAP16[$340>>1]|0;
      $342 = $341&65535;
      _encode($326,3,$335,$339,0,$342);
      $i = 0;
      while(1) {
       $343 = $i;
       $344 = $343&65535;
       $345 = $5;
       $346 = HEAP16[$345>>1]|0;
       $347 = $346&65535;
       $348 = ($344|0)<($347|0);
       if (!($348)) {
        break L46;
       }
       $349 = $4;
       $350 = $4;
       $351 = ((($350)) + 20|0);
       $352 = HEAP8[$351>>0]|0;
       $353 = $352&255;
       $354 = (($353) - 1)|0;
       $355 = $5;
       $356 = HEAP16[$355>>1]|0;
       $357 = $356&65535;
       $358 = (($357) - 1)|0;
       $359 = $i;
       $360 = $359&65535;
       $361 = (($358) - ($360))|0;
       $362 = (($354) - ($361))|0;
       $363 = $362&65535;
       $364 = $4;
       $365 = $i;
       $366 = $365&65535;
       $2 = $366;
       $367 = $2;
       $368 = (+($367>>>0));
       HEAPF32[$3>>2] = $368;
       $369 = HEAP32[$3>>2]|0;
       $370 = -8 & $369;
       $371 = (1 + ($370))|0;
       $372 = $371;
       $373 = (_imm($364,$372)|0);
       $374 = $373&65535;
       _encode($349,6,$363,$374,0,0);
       $375 = $4;
       $376 = $i;
       $377 = $376&65535;
       $378 = $5;
       $379 = HEAP16[$378>>1]|0;
       $380 = $379&65535;
       $381 = (($380) - 1)|0;
       $382 = ($377|0)==($381|0);
       $383 = $382 ? 9 : 10;
       $384 = $4;
       $385 = ((($384)) + 20|0);
       $386 = HEAP8[$385>>0]|0;
       $387 = $386&255;
       $388 = (($387) - 1)|0;
       $389 = $5;
       $390 = HEAP16[$389>>1]|0;
       $391 = $390&65535;
       $392 = (($391) - 1)|0;
       $393 = $i;
       $394 = $393&65535;
       $395 = (($392) - ($394))|0;
       $396 = (($388) - ($395))|0;
       $397 = $396&65535;
       $398 = $4;
       $399 = ((($398)) + 20|0);
       $400 = HEAP8[$399>>0]|0;
       $401 = $400&255;
       $402 = $4;
       $403 = ((($402)) + 20|0);
       $404 = HEAP8[$403>>0]|0;
       $405 = $404&255;
       $406 = (($405) - 1)|0;
       $407 = $5;
       $408 = HEAP16[$407>>1]|0;
       $409 = $408&65535;
       $410 = (($409) - 1)|0;
       $411 = $i;
       $412 = $411&65535;
       $413 = (($410) - ($412))|0;
       $414 = (($406) - ($413))|0;
       $415 = $414&65535;
       $416 = $5;
       $417 = HEAP16[$416>>1]|0;
       $418 = $417&65535;
       $419 = (($418) - 1)|0;
       $420 = $i;
       $421 = $420&65535;
       $422 = ($419|0)==($421|0);
       $423 = $422&1;
       $424 = (0 - ($423))|0;
       _encode($375,$383,$397,$401,$415,$424);
       $425 = $i;
       $426 = (($425) + 1)<<16>>16;
       $i = $426;
      }
     }
    }
   }
   $427 = $5;
   $428 = ((($427)) + 7|0);
   $429 = HEAP8[$428>>0]|0;
   $430 = $429 & 1;
   $431 = ($430<<24>>24)!=(0);
   if (!($431)) {
    $432 = $5;
    $433 = ((($432)) + 7|0);
    $434 = HEAP8[$433>>0]|0;
    $435 = ($434&255) >>> 2;
    $436 = $435 & 1;
    $437 = ($436<<24>>24)!=(0);
    if (!($437)) {
     while(1) {
      $438 = $5;
      $439 = HEAP16[$438>>1]|0;
      $440 = $439&65535;
      $441 = $5;
      $442 = ((($441)) + 2|0);
      $443 = HEAP16[$442>>1]|0;
      $444 = $443&65535;
      $445 = ($440|0)>($444|0);
      if (!($445)) {
       break L46;
      }
      $446 = $4;
      $447 = $4;
      $448 = ((($447)) + 20|0);
      $449 = HEAP8[$448>>0]|0;
      $450 = $449&255;
      $451 = (($450) + 1)|0;
      $452 = $451&65535;
      $453 = $4;
      $454 = (_imm($453,0)|0);
      $455 = $454&65535;
      _encode($446,6,$452,$455,0,1);
      $456 = $5;
      $457 = ((($456)) + 2|0);
      $458 = HEAP16[$457>>1]|0;
      $459 = (($458) + 1)<<16>>16;
      HEAP16[$457>>1] = $459;
     }
    }
   }
  }
 } while(0);
 while(1) {
  $460 = $4;
  $461 = ((($460)) + 24|0);
  $462 = ((($461)) + 25|0);
  $463 = HEAP8[$462>>0]|0;
  $464 = $463&255;
  $465 = $4;
  $466 = ((($465)) + 24|0);
  $467 = ((($466)) + 22|0);
  $468 = HEAP8[$467>>0]|0;
  $469 = $468&255;
  $470 = ($464|0)>($469|0);
  $471 = $4;
  if (!($470)) {
   break;
  }
  _expect($471,16777216);
 }
 $472 = (_next($471,50073472)|0);
 if ($472) {
  $473 = $4;
  _unexpected($473);
  // unreachable;
 }
 $474 = $5;
 $475 = ((($474)) + 6|0);
 $476 = HEAP8[$475>>0]|0;
 $477 = $4;
 $478 = ((($477)) + 24|0);
 $479 = ((($478)) + 22|0);
 HEAP8[$479>>0] = $476;
 STACKTOP = sp;return;
}
function _p_subexpr($p,$e) {
 $p = $p|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $count$i = 0, $count$i3 = 0, $count$i6 = 0, $f = 0, $prec = 0, $prec1 = 0, $ref$i = 0, $ref$i2 = 0, $ref$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp + 64|0;
 $6 = $p;
 $7 = $e;
 $8 = $6;
 $9 = (_match($8,8388608)|0);
 if ($9) {
  $10 = $7;
  $11 = HEAP8[$10>>0]|0;
  $prec = $11;
  $12 = $7;
  HEAP8[$12>>0] = -1;
  $13 = $6;
  $14 = $7;
  _p_subexpr($13,$14);
  $15 = $prec;
  $16 = $7;
  HEAP8[$16>>0] = $15;
  $17 = $6;
  _expect($17,16777216);
  $18 = $6;
  $19 = $7;
  _p_postexpr($18,$19);
  STACKTOP = sp;return;
 }
 $20 = $6;
 $21 = (_match($20,33554432)|0);
 if ($21) {
  ;HEAP16[$f>>1]=0|0;HEAP16[$f+2>>1]=0|0;HEAP16[$f+4>>1]=0|0;HEAP16[$f+6>>1]=0|0;
  $22 = $6;
  _s_frame($22,$f,0);
  $23 = ((($f)) + 7|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24 & -5;
  $26 = $25 | 4;
  HEAP8[$23>>0] = $26;
  $27 = $6;
  _p_frame($27,$f);
  $28 = $6;
  _expect($28,67108864);
  $29 = $7;
  $30 = ((($29)) + 2|0);
  HEAP8[$30>>0] = 0;
  $31 = $6;
  $32 = $7;
  _p_postexpr($31,$32);
  STACKTOP = sp;return;
 }
 $33 = $6;
 $34 = (_lookahead($33,6291456,50073472)|0);
 $35 = $6;
 if ($34) {
  $36 = $6;
  $37 = ((($36)) + 52|0);
  $38 = HEAP32[$37>>2]|0;
  _scopecheck($35,$38,0);
  $39 = $6;
  $40 = $6;
  $41 = ((($40)) + 20|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = (($43) + 1)|0;
  $45 = $44&65535;
  $46 = $6;
  $47 = $6;
  $48 = ((($47)) + 52|0);
  $49 = HEAP32[$48>>2]|0;
  $5 = $49;
  $50 = $5;
  $4 = $50;
  $51 = $4;
  $52 = $51;
  $53 = 6 & $52;
  $54 = ($53|0)!=(0);
  if ($54) {
   $55 = $5;
   $56 = $55;
   $57 = -8 & $56;
   $58 = $57;
   $ref$i = $58;
   $59 = $ref$i;
   $60 = HEAP16[$59>>1]|0;
   $count$i = $60;
   $61 = $count$i;
   $62 = $61&65535;
   $63 = ($62|0)!=(0);
   if ($63) {
    $64 = $count$i;
    $65 = (($64) + 1)<<16>>16;
    $count$i = $65;
    $66 = $count$i;
    $67 = $ref$i;
    HEAP16[$67>>1] = $66;
   }
  }
  $68 = $5;
  $69 = (_imm($46,$68)|0);
  $70 = $69&65535;
  _encode($39,6,$45,$70,0,1);
  $71 = $6;
  $72 = $6;
  $73 = ((($72)) + 20|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = $74&255;
  $76 = $6;
  $77 = ((($76)) + 20|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  _encode($71,10,$75,0,$79,0);
  $80 = $7;
  $81 = HEAP8[$80>>0]|0;
  $prec1 = $81;
  $82 = $6;
  $83 = ((($82)) + 52|0);
  $84 = ((($83)) + 4|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $7;
  HEAP8[$86>>0] = $85;
  $87 = $6;
  $88 = $7;
  _p_subexpr($87,$88);
  $89 = $prec1;
  $90 = $7;
  HEAP8[$90>>0] = $89;
  $91 = $6;
  $92 = $7;
  _encload($91,$92,0);
  $93 = $7;
  $94 = ((($93)) + 2|0);
  HEAP8[$94>>0] = 3;
  $95 = $7;
  $96 = ((($95)) + 1|0);
  HEAP8[$96>>0] = 1;
  $97 = $6;
  $98 = $7;
  _p_postexpr($97,$98);
  STACKTOP = sp;return;
 }
 $99 = (_match($35,128)|0);
 $100 = $6;
 if ($99) {
  _p_fn($100,0);
  $101 = $7;
  $102 = ((($101)) + 2|0);
  HEAP8[$102>>0] = 0;
  $103 = $6;
  $104 = $7;
  _p_postexpr($103,$104);
  STACKTOP = sp;return;
 }
 $105 = (_match($100,512)|0);
 $106 = $6;
 if ($105) {
  _p_if($106,1);
  $107 = $7;
  $108 = ((($107)) + 2|0);
  HEAP8[$108>>0] = 0;
  $109 = $6;
  $110 = $7;
  _p_postexpr($109,$110);
  STACKTOP = sp;return;
 }
 $111 = (_match($106,1048576)|0);
 $112 = $6;
 if ($111) {
  $113 = $6;
  $114 = ((($113)) + 20|0);
  $115 = HEAP8[$114>>0]|0;
  $116 = $115&255;
  $117 = (($116) + 1)|0;
  $118 = $117&65535;
  $119 = $6;
  $120 = $6;
  $121 = ((($120)) + 52|0);
  $122 = HEAP32[$121>>2]|0;
  $3 = $122;
  $123 = $3;
  $2 = $123;
  $124 = $2;
  $125 = $124;
  $126 = 6 & $125;
  $127 = ($126|0)!=(0);
  if ($127) {
   $128 = $3;
   $129 = $128;
   $130 = -8 & $129;
   $131 = $130;
   $ref$i2 = $131;
   $132 = $ref$i2;
   $133 = HEAP16[$132>>1]|0;
   $count$i3 = $133;
   $134 = $count$i3;
   $135 = $134&65535;
   $136 = ($135|0)!=(0);
   if ($136) {
    $137 = $count$i3;
    $138 = (($137) + 1)<<16>>16;
    $count$i3 = $138;
    $139 = $count$i3;
    $140 = $ref$i2;
    HEAP16[$140>>1] = $139;
   }
  }
  $141 = $3;
  $142 = (_imm($119,$141)|0);
  $143 = $142&65535;
  _encode($112,6,$118,$143,0,1);
  $144 = $7;
  $145 = ((($144)) + 2|0);
  HEAP8[$145>>0] = 0;
  $146 = $6;
  $147 = $7;
  _p_postexpr($146,$147);
  STACKTOP = sp;return;
 }
 $148 = (_match($112,524288)|0);
 if ($148) {
  $149 = $7;
  $150 = ((($149)) + 2|0);
  HEAP8[$150>>0] = 4;
  $151 = $6;
  $152 = $7;
  _p_postexpr($151,$152);
  STACKTOP = sp;return;
 }
 $153 = $6;
 $154 = (_match($153,6553600)|0);
 $155 = $6;
 if (!($154)) {
  _unexpected($155);
  // unreachable;
 }
 $156 = $6;
 $157 = ((($156)) + 52|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = $7;
 $160 = ((($159)) + 3|0);
 $161 = HEAP8[$160>>0]|0;
 $162 = $161 & 1;
 $163 = ($162<<24>>24)!=(0);
 _scopecheck($155,$158,$163);
 $164 = $6;
 $165 = $6;
 $166 = ((($165)) + 20|0);
 $167 = HEAP8[$166>>0]|0;
 $168 = $167&255;
 $169 = (($168) + 1)|0;
 $170 = $169&65535;
 $171 = $6;
 $172 = $6;
 $173 = ((($172)) + 52|0);
 $174 = HEAP32[$173>>2]|0;
 $1 = $174;
 $175 = $1;
 $0 = $175;
 $176 = $0;
 $177 = $176;
 $178 = 6 & $177;
 $179 = ($178|0)!=(0);
 if ($179) {
  $180 = $1;
  $181 = $180;
  $182 = -8 & $181;
  $183 = $182;
  $ref$i5 = $183;
  $184 = $ref$i5;
  $185 = HEAP16[$184>>1]|0;
  $count$i6 = $185;
  $186 = $count$i6;
  $187 = $186&65535;
  $188 = ($187|0)!=(0);
  if ($188) {
   $189 = $count$i6;
   $190 = (($189) + 1)<<16>>16;
   $count$i6 = $190;
   $191 = $count$i6;
   $192 = $ref$i5;
   HEAP16[$192>>1] = $191;
  }
 }
 $193 = $1;
 $194 = (_imm($171,$193)|0);
 $195 = $194&65535;
 _encode($164,6,$170,$195,0,1);
 $196 = $7;
 $197 = ((($196)) + 2|0);
 HEAP8[$197>>0] = 2;
 $198 = $6;
 $199 = $7;
 _p_postexpr($198,$199);
 STACKTOP = sp;return;
}
function _p_postexpr($p,$e) {
 $p = $p|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$i = 0, $count$i$i = 0, $count$i$i9 = 0, $count$i11 = 0, $count$i6 = 0, $f = 0, $f1 = 0, $l = 0, $offset = 0, $offset3 = 0, $prec = 0;
 var $prec2 = 0, $prec4 = 0, $ref$i = 0, $ref$i$i = 0, $ref$i$i8 = 0, $ref$i10 = 0, $ref$i5 = 0, $sym = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 56|0;
 $7 = sp + 16|0;
 $f = sp + 216|0;
 $l = sp + 100|0;
 $f1 = sp + 208|0;
 $12 = $p;
 $13 = $e;
 $14 = $12;
 $15 = (_match($14,8388608)|0);
 $16 = $12;
 if ($15) {
  $17 = $13;
  _encload($16,$17,0);
  ;HEAP16[$f>>1]=0|0;HEAP16[$f+2>>1]=0|0;HEAP16[$f+4>>1]=0|0;HEAP16[$f+6>>1]=0|0;
  $18 = $12;
  _s_frame($18,$f,0);
  $19 = ((($f)) + 7|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = ($20&255) >>> 2;
  $22 = $21 & 1;
  $23 = $22&255;
  $24 = ($23|0)!=(0);
  if ($24) {
   $32 = 1;
  } else {
   $25 = ((($f)) + 7|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = ($26&255) >>> 5;
   $28 = $27 & 1;
   $29 = $28&255;
   $30 = ($29|0)!=(0);
   $32 = $30;
  }
  $31 = $32&1;
  $33 = $31&255;
  $34 = ((($f)) + 7|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $33 & 1;
  $37 = ($36 << 2)&255;
  $38 = $35 & -5;
  $39 = $38 | $37;
  HEAP8[$34>>0] = $39;
  $40 = $12;
  _p_frame($40,$f);
  $41 = $12;
  _expect($41,16777216);
  $42 = $13;
  $43 = ((($42)) + 2|0);
  HEAP8[$43>>0] = 3;
  $44 = ((($f)) + 7|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = ($45&255) >>> 2;
  $47 = $46 & 1;
  $48 = $47&255;
  $49 = ($48|0)!=(0);
  if ($49) {
   $54 = 15;
  } else {
   $50 = ((($f)) + 2|0);
   $51 = HEAP16[$50>>1]|0;
   $52 = $51&65535;
   $54 = $52;
  }
  $53 = $54&255;
  $55 = $13;
  $56 = ((($55)) + 1|0);
  HEAP8[$56>>0] = $53;
  $57 = $12;
  $58 = $13;
  _p_postexpr($57,$58);
  STACKTOP = sp;return;
 }
 $59 = (_match($16,33554432)|0);
 $60 = $12;
 if ($59) {
  $61 = $13;
  _encload($60,$61,0);
  $62 = $12;
  _p_expr($62);
  $63 = $12;
  _expect($63,67108864);
  $64 = $13;
  $65 = ((($64)) + 2|0);
  HEAP8[$65>>0] = 1;
  $66 = $12;
  $67 = $13;
  _p_postexpr($66,$67);
  STACKTOP = sp;return;
 }
 $68 = (_match($60,32)|0);
 $69 = $12;
 if ($68) {
  _expect($69,1048464);
  $70 = $12;
  $71 = $13;
  _encload($70,$71,0);
  $72 = $12;
  $73 = $12;
  $74 = ((($73)) + 20|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75&255;
  $77 = (($76) + 1)|0;
  $78 = $77&65535;
  $79 = $12;
  $80 = $12;
  $81 = ((($80)) + 52|0);
  $82 = HEAP32[$81>>2]|0;
  $11 = $82;
  $83 = $11;
  $10 = $83;
  $84 = $10;
  $85 = $84;
  $86 = 6 & $85;
  $87 = ($86|0)!=(0);
  if ($87) {
   $88 = $11;
   $89 = $88;
   $90 = -8 & $89;
   $91 = $90;
   $ref$i = $91;
   $92 = $ref$i;
   $93 = HEAP16[$92>>1]|0;
   $count$i = $93;
   $94 = $count$i;
   $95 = $94&65535;
   $96 = ($95|0)!=(0);
   if ($96) {
    $97 = $count$i;
    $98 = (($97) + 1)<<16>>16;
    $count$i = $98;
    $99 = $count$i;
    $100 = $ref$i;
    HEAP16[$100>>1] = $99;
   }
  }
  $101 = $11;
  $102 = (_imm($79,$101)|0);
  $103 = $102&65535;
  _encode($72,6,$78,$103,0,1);
  $104 = $13;
  $105 = ((($104)) + 2|0);
  HEAP8[$105>>0] = 1;
  $106 = $12;
  $107 = $13;
  _p_postexpr($106,$107);
  STACKTOP = sp;return;
 }
 $108 = (_match($69,64)|0);
 if (!($108)) {
  $307 = $13;
  $308 = HEAP8[$307>>0]|0;
  $309 = $308&255;
  $310 = $12;
  $311 = ((($310)) + 24|0);
  $312 = ((($311)) + 20|0);
  $313 = HEAP8[$312>>0]|0;
  $314 = $313&255;
  $315 = ($309|0)>($314|0);
  if ($315) {
   $316 = $12;
   $317 = (_match($316,6291456)|0);
   if ($317) {
    $318 = $12;
    $319 = $13;
    _encload($318,$319,1);
    $320 = $12;
    $321 = $12;
    $322 = ((($321)) + 52|0);
    $323 = HEAP32[$322>>2]|0;
    _scopecheck($320,$323,0);
    $324 = $12;
    $325 = $12;
    $326 = ((($325)) + 20|0);
    $327 = HEAP8[$326>>0]|0;
    $328 = $327&255;
    $329 = (($328) - 1)|0;
    $330 = $329&65535;
    $331 = $12;
    $332 = $12;
    $333 = ((($332)) + 52|0);
    $334 = HEAP32[$333>>2]|0;
    $1 = $334;
    $335 = $1;
    $0 = $335;
    $336 = $0;
    $337 = $336;
    $338 = 6 & $337;
    $339 = ($338|0)!=(0);
    if ($339) {
     $340 = $1;
     $341 = $340;
     $342 = -8 & $341;
     $343 = $342;
     $ref$i10 = $343;
     $344 = $ref$i10;
     $345 = HEAP16[$344>>1]|0;
     $count$i11 = $345;
     $346 = $count$i11;
     $347 = $346&65535;
     $348 = ($347|0)!=(0);
     if ($348) {
      $349 = $count$i11;
      $350 = (($349) + 1)<<16>>16;
      $count$i11 = $350;
      $351 = $count$i11;
      $352 = $ref$i10;
      HEAP16[$352>>1] = $351;
     }
    }
    $353 = $1;
    $354 = (_imm($331,$353)|0);
    $355 = $354&65535;
    _encode($324,6,$330,$355,0,0);
    $356 = $12;
    $357 = $12;
    $358 = ((($357)) + 20|0);
    $359 = HEAP8[$358>>0]|0;
    $360 = $359&255;
    $361 = (($360) - 1)|0;
    $362 = $361&65535;
    $363 = $12;
    $364 = ((($363)) + 20|0);
    $365 = HEAP8[$364>>0]|0;
    $366 = $365&255;
    $367 = (($366) - 1)|0;
    $368 = $367&65535;
    _encode($356,10,$362,0,$368,0);
    $369 = $13;
    $370 = HEAP8[$369>>0]|0;
    $prec = $370;
    $371 = $12;
    $372 = ((($371)) + 52|0);
    $373 = ((($372)) + 4|0);
    $374 = HEAP8[$373>>0]|0;
    $375 = $13;
    HEAP8[$375>>0] = $374;
    $376 = $12;
    $377 = $13;
    _p_subexpr($376,$377);
    $378 = $12;
    $379 = $13;
    _encload($378,$379,0);
    $380 = $prec;
    $381 = $13;
    HEAP8[$381>>0] = $380;
    $382 = $13;
    $383 = ((($382)) + 2|0);
    HEAP8[$383>>0] = 3;
    $384 = $13;
    $385 = ((($384)) + 1|0);
    HEAP8[$385>>0] = 2;
    $386 = $12;
    $387 = $13;
    _p_postexpr($386,$387);
    STACKTOP = sp;return;
   }
  }
  $388 = $13;
  $389 = HEAP8[$388>>0]|0;
  $390 = $389&255;
  $391 = $12;
  $392 = ((($391)) + 24|0);
  $393 = ((($392)) + 20|0);
  $394 = HEAP8[$393>>0]|0;
  $395 = $394&255;
  $396 = ($390|0)>($395|0);
  if ($396) {
   $397 = $12;
   $398 = (_match($397,8192)|0);
   if ($398) {
    $399 = $12;
    $400 = $13;
    _encload($399,$400,0);
    $401 = $12;
    $402 = ((($401)) + 12|0);
    $403 = HEAP16[$402>>1]|0;
    $offset = $403;
    $404 = $12;
    $405 = $12;
    $406 = ((($405)) + 20|0);
    $407 = HEAP8[$406>>0]|0;
    $408 = $407&255;
    _encode($404,13,$408,0,0,0);
    $409 = $12;
    $410 = $12;
    $411 = ((($410)) + 20|0);
    $412 = HEAP8[$411>>0]|0;
    $413 = $412&255;
    _encode($409,5,$413,0,0,-1);
    $414 = $13;
    $415 = HEAP8[$414>>0]|0;
    $prec2 = $415;
    $416 = $12;
    $417 = ((($416)) + 52|0);
    $418 = ((($417)) + 4|0);
    $419 = HEAP8[$418>>0]|0;
    $420 = $13;
    HEAP8[$420>>0] = $419;
    $421 = $12;
    $422 = $13;
    _p_subexpr($421,$422);
    $423 = $12;
    $424 = $13;
    _encload($423,$424,0);
    $425 = $prec2;
    $426 = $13;
    HEAP8[$426>>0] = $425;
    $427 = $12;
    $428 = $offset;
    $429 = $12;
    $430 = ((($429)) + 12|0);
    $431 = HEAP16[$430>>1]|0;
    $432 = $431&65535;
    $433 = $offset;
    $434 = $433&65535;
    $435 = (($432) - ($434))|0;
    $436 = $435&65535;
    _patch($427,$428,$436);
    $437 = $13;
    $438 = ((($437)) + 2|0);
    HEAP8[$438>>0] = 0;
    $439 = $12;
    $440 = $13;
    _p_postexpr($439,$440);
    STACKTOP = sp;return;
   }
  }
  $441 = $13;
  $442 = HEAP8[$441>>0]|0;
  $443 = $442&255;
  $444 = $12;
  $445 = ((($444)) + 24|0);
  $446 = ((($445)) + 20|0);
  $447 = HEAP8[$446>>0]|0;
  $448 = $447&255;
  $449 = ($443|0)>($448|0);
  if (!($449)) {
   STACKTOP = sp;return;
  }
  $450 = $12;
  $451 = (_match($450,16384)|0);
  if (!($451)) {
   STACKTOP = sp;return;
  }
  $452 = $12;
  $453 = $13;
  _encload($452,$453,0);
  $454 = $12;
  $455 = ((($454)) + 12|0);
  $456 = HEAP16[$455>>1]|0;
  $offset3 = $456;
  $457 = $12;
  $458 = $12;
  $459 = ((($458)) + 20|0);
  $460 = HEAP8[$459>>0]|0;
  $461 = $460&255;
  _encode($457,14,$461,0,0,-1);
  $462 = $13;
  $463 = HEAP8[$462>>0]|0;
  $prec4 = $463;
  $464 = $12;
  $465 = ((($464)) + 52|0);
  $466 = ((($465)) + 4|0);
  $467 = HEAP8[$466>>0]|0;
  $468 = $13;
  HEAP8[$468>>0] = $467;
  $469 = $12;
  $470 = $13;
  _p_subexpr($469,$470);
  $471 = $12;
  $472 = $13;
  _encload($471,$472,0);
  $473 = $prec4;
  $474 = $13;
  HEAP8[$474>>0] = $473;
  $475 = $12;
  $476 = $offset3;
  $477 = $12;
  $478 = ((($477)) + 12|0);
  $479 = HEAP16[$478>>1]|0;
  $480 = $479&65535;
  $481 = $offset3;
  $482 = $481&65535;
  $483 = (($480) - ($482))|0;
  $484 = $483&65535;
  _patch($475,$476,$484);
  $485 = $13;
  $486 = ((($485)) + 2|0);
  HEAP8[$486>>0] = 0;
  $487 = $12;
  $488 = $13;
  _p_postexpr($487,$488);
  STACKTOP = sp;return;
 }
 $109 = $12;
 _expect($109,1048464);
 $110 = $12;
 $111 = ((($110)) + 52|0);
 $112 = HEAP32[$111>>2]|0;
 $9 = $112;
 $113 = $9;
 $8 = $113;
 $114 = $8;
 $115 = $114;
 $116 = 6 & $115;
 $117 = ($116|0)!=(0);
 if ($117) {
  $118 = $9;
  $119 = $118;
  $120 = -8 & $119;
  $121 = $120;
  $ref$i5 = $121;
  $122 = $ref$i5;
  $123 = HEAP16[$122>>1]|0;
  $count$i6 = $123;
  $124 = $count$i6;
  $125 = $124&65535;
  $126 = ($125|0)!=(0);
  if ($126) {
   $127 = $count$i6;
   $128 = (($127) + 1)<<16>>16;
   $count$i6 = $128;
   $129 = $count$i6;
   $130 = $ref$i5;
   HEAP16[$130>>1] = $129;
  }
 }
 $131 = $9;
 $sym = $131;
 $132 = $12;
 $133 = (_next($132,8388608)|0);
 if ($133) {
  $134 = $12;
  $135 = ((($134)) + 24|0);
  dest=$7; src=$135; stop=dest+28|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $136 = ((($7)) + 16|0);
  $137 = HEAP32[$136>>2]|0;
  $6 = $137;
  $138 = $6;
  $5 = $138;
  $139 = $5;
  $140 = $139;
  $141 = 6 & $140;
  $142 = ($141|0)!=(0);
  if ($142) {
   $143 = $6;
   $144 = $143;
   $145 = -8 & $144;
   $146 = $145;
   $ref$i$i = $146;
   $147 = $ref$i$i;
   $148 = HEAP16[$147>>1]|0;
   $count$i$i = $148;
   $149 = $count$i$i;
   $150 = $149&65535;
   $151 = ($150|0)!=(0);
   if ($151) {
    $152 = $count$i$i;
    $153 = (($152) + 1)<<16>>16;
    $count$i$i = $153;
    $154 = $count$i$i;
    $155 = $ref$i$i;
    HEAP16[$155>>1] = $154;
   }
  }
  ;HEAP32[$l>>2]=HEAP32[$7>>2]|0;HEAP32[$l+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$l+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$l+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$l+16>>2]=HEAP32[$7+16>>2]|0;HEAP32[$l+20>>2]=HEAP32[$7+20>>2]|0;HEAP32[$l+24>>2]=HEAP32[$7+24>>2]|0;
  $156 = $12;
  _expect($156,8388608);
  ;HEAP16[$f1>>1]=0|0;HEAP16[$f1+2>>1]=0|0;HEAP16[$f1+4>>1]=0|0;HEAP16[$f1+6>>1]=0|0;
  $157 = $12;
  _s_frame($157,$f1,0);
  $158 = ((($f1)) + 7|0);
  $159 = HEAP8[$158>>0]|0;
  $160 = ($159&255) >>> 2;
  $161 = $160 & 1;
  $162 = ($161<<24>>24)!=(0);
  if (!($162)) {
   $163 = ((($f1)) + 7|0);
   $164 = HEAP8[$163>>0]|0;
   $165 = ($164&255) >>> 5;
   $166 = $165 & 1;
   $167 = ($166<<24>>24)!=(0);
   if (!($167)) {
    $168 = HEAP16[$f1>>1]|0;
    $169 = $168&65535;
    $170 = ($169|0)!=(4);
    if ($170) {
     $171 = $12;
     $172 = $13;
     _encload($171,$172,1);
     $173 = $12;
     $174 = $12;
     $175 = ((($174)) + 20|0);
     $176 = HEAP8[$175>>0]|0;
     $177 = $176&255;
     $178 = (($177) - 1)|0;
     $179 = $178&65535;
     $180 = $12;
     $181 = $sym;
     $182 = (_imm($180,$181)|0);
     $183 = $182&65535;
     _encode($173,6,$179,$183,0,0);
     $184 = $12;
     $185 = $12;
     $186 = ((($185)) + 20|0);
     $187 = HEAP8[$186>>0]|0;
     $188 = $187&255;
     $189 = (($188) - 1)|0;
     $190 = $189&65535;
     $191 = $12;
     $192 = ((($191)) + 20|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = $193&255;
     $195 = $12;
     $196 = ((($195)) + 20|0);
     $197 = HEAP8[$196>>0]|0;
     $198 = $197&255;
     $199 = (($198) - 1)|0;
     $200 = $199&65535;
     _encode($184,10,$190,$194,$200,0);
     $201 = $12;
     _p_frame($201,$f1);
     $202 = $12;
     _expect($202,16777216);
     $203 = $13;
     $204 = ((($203)) + 2|0);
     HEAP8[$204>>0] = 3;
     $205 = ((($f1)) + 2|0);
     $206 = HEAP16[$205>>1]|0;
     $207 = $206&65535;
     $208 = (($207) + 1)|0;
     $209 = $208&255;
     $210 = $13;
     $211 = ((($210)) + 1|0);
     HEAP8[$211>>0] = $209;
     $212 = $12;
     $213 = $13;
     _p_postexpr($212,$213);
     STACKTOP = sp;return;
    }
   }
  }
  $214 = $12;
  $215 = ((($214)) + 24|0);
  dest=$4; src=$215; stop=dest+28|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $216 = ((($4)) + 16|0);
  $217 = HEAP32[$216>>2]|0;
  $3 = $217;
  $218 = $3;
  $2 = $218;
  $219 = $2;
  $220 = $219;
  $221 = 6 & $220;
  $222 = ($221|0)!=(0);
  if ($222) {
   $223 = $3;
   $224 = $223;
   $225 = -8 & $224;
   $226 = $225;
   $ref$i$i8 = $226;
   $227 = $ref$i$i8;
   $228 = HEAP16[$227>>1]|0;
   $count$i$i9 = $228;
   $229 = $count$i$i9;
   $230 = $229&65535;
   $231 = ($230|0)!=(0);
   if ($231) {
    $232 = $count$i$i9;
    $233 = (($232) + -1)<<16>>16;
    $count$i$i9 = $233;
    $234 = $count$i$i9;
    $235 = $ref$i$i8;
    HEAP16[$235>>1] = $234;
    $236 = $count$i$i9;
    $237 = $236&65535;
    $238 = ($237|0)==(0);
    if ($238) {
     $239 = $3;
     _mu_destroy($239);
    }
   }
  }
  $240 = $12;
  $241 = ((($240)) + 24|0);
  ;HEAP32[$241>>2]=HEAP32[$l>>2]|0;HEAP32[$241+4>>2]=HEAP32[$l+4>>2]|0;HEAP32[$241+8>>2]=HEAP32[$l+8>>2]|0;HEAP32[$241+12>>2]=HEAP32[$l+12>>2]|0;HEAP32[$241+16>>2]=HEAP32[$l+16>>2]|0;HEAP32[$241+20>>2]=HEAP32[$l+20>>2]|0;HEAP32[$241+24>>2]=HEAP32[$l+24>>2]|0;
 }
 $242 = $12;
 $243 = $13;
 _encload($242,$243,2);
 $244 = $12;
 $245 = $12;
 $246 = ((($245)) + 20|0);
 $247 = HEAP8[$246>>0]|0;
 $248 = $247&255;
 $249 = (($248) - 1)|0;
 $250 = $249&65535;
 $251 = $12;
 $252 = $sym;
 $253 = (_imm($251,$252)|0);
 $254 = $253&65535;
 _encode($244,6,$250,$254,0,0);
 $255 = $12;
 $256 = $12;
 $257 = ((($256)) + 20|0);
 $258 = HEAP8[$257>>0]|0;
 $259 = $258&255;
 $260 = (($259) - 1)|0;
 $261 = $260&65535;
 $262 = $12;
 $263 = ((($262)) + 20|0);
 $264 = HEAP8[$263>>0]|0;
 $265 = $264&255;
 $266 = $12;
 $267 = ((($266)) + 20|0);
 $268 = HEAP8[$267>>0]|0;
 $269 = $268&255;
 $270 = (($269) - 1)|0;
 $271 = $270&65535;
 _encode($255,10,$261,$265,$271,0);
 $272 = $12;
 $273 = $12;
 $274 = ((($273)) + 20|0);
 $275 = HEAP8[$274>>0]|0;
 $276 = $275&255;
 $277 = (($276) - 2)|0;
 $278 = $277&65535;
 $279 = $12;
 $280 = (_mu_bind_key_def()|0);
 $281 = (_imm($279,$280)|0);
 $282 = $281&65535;
 _encode($272,6,$278,$282,0,0);
 $283 = $12;
 $284 = $12;
 $285 = ((($284)) + 20|0);
 $286 = HEAP8[$285>>0]|0;
 $287 = $286&255;
 $288 = (($287) - 2)|0;
 $289 = $288&65535;
 $290 = $12;
 $291 = ((($290)) + 20|0);
 $292 = HEAP8[$291>>0]|0;
 $293 = $292&255;
 $294 = (($293) - 2)|0;
 $295 = $294&65535;
 _encode($283,10,$289,0,$295,0);
 $296 = $12;
 $297 = $12;
 $298 = ((($297)) + 20|0);
 $299 = HEAP8[$298>>0]|0;
 $300 = $299&255;
 $301 = (($300) - 2)|0;
 $302 = $301&65535;
 _encode($296,2,$302,33,0,-2);
 $303 = $13;
 $304 = ((($303)) + 2|0);
 HEAP8[$304>>0] = 0;
 $305 = $12;
 $306 = $13;
 _p_postexpr($305,$306);
 STACKTOP = sp;return;
}
function _encload($p,$e,$offset) {
 $p = $p|0;
 $e = $e|0;
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $e;
 $2 = $offset;
 $3 = $1;
 $4 = ((($3)) + 2|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)==(2);
 if ($7) {
  $8 = $0;
  $9 = $0;
  $10 = ((($9)) + 20|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $2;
  $14 = (($12) + ($13))|0;
  $15 = $14&65535;
  $16 = $0;
  $17 = ((($16)) + 20|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = $2;
  _encode($8,10,$15,0,$19,$20);
  STACKTOP = sp;return;
 }
 $21 = $1;
 $22 = ((($21)) + 2|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = ($24|0)==(1);
 if ($25) {
  $26 = $0;
  $27 = $0;
  $28 = ((($27)) + 20|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $2;
  $32 = (($30) + ($31))|0;
  $33 = (($32) - 1)|0;
  $34 = $33&65535;
  $35 = $0;
  $36 = ((($35)) + 20|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = (($38) - 1)|0;
  $40 = $39&65535;
  $41 = $0;
  $42 = ((($41)) + 20|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = $2;
  $46 = (($45) - 1)|0;
  _encode($26,9,$34,$40,$44,$46);
  STACKTOP = sp;return;
 }
 $47 = $1;
 $48 = ((($47)) + 2|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = $49&255;
 $51 = ($50|0)==(4);
 if ($51) {
  $52 = $0;
  $53 = $0;
  $54 = ((($53)) + 20|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $57 = $2;
  $58 = (($56) + ($57))|0;
  $59 = (($58) + 1)|0;
  $60 = $59&65535;
  $61 = $0;
  $62 = (_imm($61,0)|0);
  $63 = $62&65535;
  $64 = $2;
  $65 = (($64) + 1)|0;
  _encode($52,6,$60,$63,0,$65);
  STACKTOP = sp;return;
 }
 $66 = $1;
 $67 = ((($66)) + 2|0);
 $68 = HEAP8[$67>>0]|0;
 $69 = $68&255;
 $70 = ($69|0)==(3);
 if ($70) {
  $71 = $0;
  $72 = $0;
  $73 = ((($72)) + 20|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = $74&255;
  $76 = $1;
  $77 = ((($76)) + 1|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $80 = ($79|0)==(15);
  if ($80) {
   $86 = 1;
  } else {
   $81 = $1;
   $82 = ((($81)) + 1|0);
   $83 = HEAP8[$82>>0]|0;
   $84 = $83&255;
   $86 = $84;
  }
  $85 = (($75) - ($86))|0;
  $87 = $85&65535;
  $88 = $1;
  $89 = ((($88)) + 1|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = $90&255;
  $92 = $91 << 4;
  $93 = $92 | 1;
  $94 = $93&65535;
  $95 = $1;
  $96 = ((($95)) + 1|0);
  $97 = HEAP8[$96>>0]|0;
  $98 = $97&255;
  $99 = ($98|0)==(15);
  if ($99) {
   $105 = 1;
  } else {
   $100 = $1;
   $101 = ((($100)) + 1|0);
   $102 = HEAP8[$101>>0]|0;
   $103 = $102&255;
   $105 = $103;
  }
  $104 = (0 - ($105))|0;
  _encode($71,2,$87,$94,0,$104);
 }
 $106 = $2;
 $107 = ($106|0)!=(0);
 if (!($107)) {
  STACKTOP = sp;return;
 }
 $108 = $0;
 $109 = $0;
 $110 = ((($109)) + 20|0);
 $111 = HEAP8[$110>>0]|0;
 $112 = $111&255;
 $113 = $2;
 $114 = (($112) + ($113))|0;
 $115 = $114&65535;
 $116 = $0;
 $117 = ((($116)) + 20|0);
 $118 = HEAP8[$117>>0]|0;
 $119 = $118&255;
 $120 = $2;
 _encode($108,3,$115,$119,0,$120);
 STACKTOP = sp;return;
}
function _encode($p,$op,$d,$a,$b,$sdiff) {
 $p = $p|0;
 $op = $op|0;
 $d = $d|0;
 $a = $a|0;
 $b = $b|0;
 $sdiff = $sdiff|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $op;
 $2 = $d;
 $3 = $a;
 $4 = $b;
 $5 = $sdiff;
 $6 = $5;
 $7 = $0;
 $8 = ((($7)) + 20|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = (($10) + ($6))|0;
 $12 = $11&255;
 HEAP8[$8>>0] = $12;
 $13 = $0;
 $14 = ((($13)) + 20|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = (($16) + 1)|0;
 $18 = $0;
 $19 = ((($18)) + 19|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = ($17|0)>($21|0);
 if ($22) {
  $23 = $0;
  $24 = ((($23)) + 20|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = (($26) + 1)|0;
  $28 = $27&255;
  $29 = $0;
  $30 = ((($29)) + 19|0);
  HEAP8[$30>>0] = $28;
 }
 $31 = $0;
 $32 = $1;
 $33 = $2;
 $34 = $33 << 16 >> 16;
 $35 = $3;
 $36 = $35 << 16 >> 16;
 $37 = $4;
 $38 = $37 << 16 >> 16;
 _mu_encode(312,$31,$32,$34,$36,$38);
 STACKTOP = sp;return;
}
function _emit($p,$byte) {
 $p = $p|0;
 $byte = $byte|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bcount = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 17|0;
 $bcount = sp;
 $3 = $p;
 $4 = $byte;
 $5 = $3;
 $6 = ((($5)) + 12|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 HEAP32[$bcount>>2] = $8;
 $9 = $3;
 $10 = ((($9)) + 8|0);
 $11 = $4;
 $0 = $10;
 $1 = $bcount;
 HEAP8[$2>>0] = $11;
 $12 = $0;
 $13 = $1;
 _mu_buf_pushdata($12,$13,$2,1);
 $14 = HEAP32[$bcount>>2]|0;
 $15 = $14&65535;
 $16 = $3;
 $17 = ((($16)) + 12|0);
 HEAP16[$17>>1] = $15;
 STACKTOP = sp;return;
}
function _imm($p,$m) {
 $p = $p|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $count$i = 0, $count$i2 = 0, $index = 0, $mindex = 0, $ref$i = 0;
 var $ref$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 60|0;
 $7 = sp + 44|0;
 $11 = $p;
 $12 = $m;
 $13 = $12;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  $15 = (_imm_nil()|0);
  $12 = $15;
 }
 $16 = $11;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $12;
 $9 = $19;
 $20 = $9;
 $8 = $20;
 $21 = $8;
 $22 = $21;
 $23 = 6 & $22;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $9;
  $26 = $25;
  $27 = -8 & $26;
  $28 = $27;
  $ref$i = $28;
  $29 = $ref$i;
  $30 = HEAP16[$29>>1]|0;
  $count$i = $30;
  $31 = $count$i;
  $32 = $31&65535;
  $33 = ($32|0)!=(0);
  if ($33) {
   $34 = $count$i;
   $35 = (($34) + 1)<<16>>16;
   $count$i = $35;
   $36 = $count$i;
   $37 = $ref$i;
   HEAP16[$37>>1] = $36;
  }
 }
 $38 = $9;
 $39 = (_mu_tbl_lookup($18,$38)|0);
 $mindex = $39;
 $40 = $mindex;
 $41 = ($40|0)!=(0|0);
 if (!($41)) {
  $72 = $11;
  $73 = ((($72)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $5 = $74;
  $75 = $5;
  $76 = $75;
  $77 = $76 & -8;
  $78 = $77;
  $79 = ((($78)) + 2|0);
  $80 = HEAP16[$79>>1]|0;
  $81 = $80&65535;
  $index = $81;
  $82 = $11;
  $83 = ((($82)) + 4|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $12;
  $86 = $index;
  $6 = $86;
  $87 = $6;
  $88 = (+($87>>>0));
  HEAPF32[$7>>2] = $88;
  $89 = HEAP32[$7>>2]|0;
  $90 = -8 & $89;
  $91 = (1 + ($90))|0;
  $92 = $91;
  _mu_tbl_insert($84,$85,$92);
  $93 = $index;
  $10 = $93;
  $94 = $10;
  STACKTOP = sp;return ($94|0);
 }
 $42 = $12;
 $1 = $42;
 $43 = $1;
 $0 = $43;
 $44 = $0;
 $45 = $44;
 $46 = 6 & $45;
 $47 = ($46|0)!=(0);
 if ($47) {
  $48 = $1;
  $49 = $48;
  $50 = -8 & $49;
  $51 = $50;
  $ref$i1 = $51;
  $52 = $ref$i1;
  $53 = HEAP16[$52>>1]|0;
  $count$i2 = $53;
  $54 = $count$i2;
  $55 = $54&65535;
  $56 = ($55|0)!=(0);
  if ($56) {
   $57 = $count$i2;
   $58 = (($57) + -1)<<16>>16;
   $count$i2 = $58;
   $59 = $count$i2;
   $60 = $ref$i1;
   HEAP16[$60>>1] = $59;
   $61 = $count$i2;
   $62 = $61&65535;
   $63 = ($62|0)==(0);
   if ($63) {
    $64 = $1;
    _mu_destroy($64);
   }
  }
 }
 $65 = $mindex;
 $4 = $65;
 $66 = $4;
 $2 = $66;
 $67 = $2;
 $68 = $67;
 $69 = (($68) - 1)|0;
 HEAP32[$3>>2] = $69;
 $70 = +HEAPF32[$3>>2];
 $71 = (~~(($70))>>>0);
 $10 = $71;
 $94 = $10;
 STACKTOP = sp;return ($94|0);
}
function _p_expr($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $depth = 0, $e = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $e = sp + 4|0;
 $0 = $p;
 $1 = $0;
 $2 = ((($1)) + 24|0);
 $3 = ((($2)) + 22|0);
 $4 = HEAP8[$3>>0]|0;
 $depth = $4;
 $5 = $0;
 $6 = ((($5)) + 24|0);
 $7 = ((($6)) + 25|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $0;
 $10 = ((($9)) + 24|0);
 $11 = ((($10)) + 22|0);
 HEAP8[$11>>0] = $8;
 ;HEAP8[$e>>0]=HEAP8[4487>>0]|0;HEAP8[$e+1>>0]=HEAP8[4487+1>>0]|0;HEAP8[$e+2>>0]=HEAP8[4487+2>>0]|0;HEAP8[$e+3>>0]=HEAP8[4487+3>>0]|0;
 $12 = $0;
 _p_subexpr($12,$e);
 $13 = $0;
 _encload($13,$e,0);
 $14 = $depth;
 $15 = $0;
 $16 = ((($15)) + 24|0);
 $17 = ((($16)) + 22|0);
 HEAP8[$17>>0] = $14;
 STACKTOP = sp;return;
}
function _patch($p,$offset,$j) {
 $p = $p|0;
 $offset = $offset|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bcode = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $2 = $offset;
 $3 = $j;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $0 = $6;
 $7 = $0;
 $8 = $7;
 $9 = -8 & $8;
 $10 = $9;
 $11 = ((($10)) + 4|0);
 $bcode = $11;
 $12 = $2;
 $13 = $12&65535;
 $14 = $bcode;
 $15 = (($14) + ($13)|0);
 $16 = $3;
 $17 = $16 << 16 >> 16;
 (_mu_patch($15,$17)|0);
 STACKTOP = sp;return;
}
function _p_if($p,$expr) {
 $p = $p|0;
 $expr = $expr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $cond_offset = 0, $else_offset = 0, $exit_offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $2 = $expr&1;
 $1 = $2;
 $3 = $0;
 _expect($3,8388608);
 $4 = $0;
 _p_expr($4);
 $5 = $0;
 _expect($5,16777216);
 $6 = $0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP16[$7>>1]|0;
 $cond_offset = $8;
 $9 = $0;
 $10 = $0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 _encode($9,13,$13,0,0,0);
 $14 = $0;
 $15 = $0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 _encode($14,5,$18,0,0,-1);
 $19 = $1;
 $20 = $19&1;
 $21 = $0;
 if ($20) {
  _p_expr($21);
 } else {
  _p_stmt($21);
 }
 $22 = $0;
 $23 = (_next($22,4096)|0);
 do {
  if (!($23)) {
   $24 = $1;
   $25 = $24&1;
   if (!($25)) {
    $26 = $0;
    $27 = (_lookahead($26,1,4096)|0);
    if ($27) {
     break;
    }
   }
   $61 = $1;
   $62 = $61&1;
   $63 = $0;
   if ($62) {
    _unexpected($63);
    // unreachable;
   }
   $64 = $cond_offset;
   $65 = $0;
   $66 = ((($65)) + 12|0);
   $67 = HEAP16[$66>>1]|0;
   $68 = $67&65535;
   $69 = $cond_offset;
   $70 = $69&65535;
   $71 = (($68) - ($70))|0;
   $72 = $71&65535;
   _patch($63,$64,$72);
   STACKTOP = sp;return;
  }
 } while(0);
 $28 = $0;
 _expect($28,4096);
 $29 = $0;
 $30 = ((($29)) + 12|0);
 $31 = HEAP16[$30>>1]|0;
 $exit_offset = $31;
 $32 = $0;
 $33 = $1;
 $34 = $33&1;
 $35 = $34&1;
 $36 = (0 - ($35))|0;
 _encode($32,15,0,0,0,$36);
 $37 = $0;
 $38 = ((($37)) + 12|0);
 $39 = HEAP16[$38>>1]|0;
 $else_offset = $39;
 $40 = $1;
 $41 = $40&1;
 $42 = $0;
 if ($41) {
  _p_expr($42);
 } else {
  _p_stmt($42);
 }
 $43 = $0;
 $44 = $cond_offset;
 $45 = $else_offset;
 $46 = $45&65535;
 $47 = $cond_offset;
 $48 = $47&65535;
 $49 = (($46) - ($48))|0;
 $50 = $49&65535;
 _patch($43,$44,$50);
 $51 = $0;
 $52 = $exit_offset;
 $53 = $0;
 $54 = ((($53)) + 12|0);
 $55 = HEAP16[$54>>1]|0;
 $56 = $55&65535;
 $57 = $exit_offset;
 $58 = $57&65535;
 $59 = (($56) - ($58))|0;
 $60 = $59&65535;
 _patch($51,$52,$60);
 STACKTOP = sp;return;
}
function _p_entry($p,$f) {
 $p = $p|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0.0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0.0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$i = 0, $count$i2 = 0, $e = 0;
 var $nf = 0, $ref$i = 0, $ref$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 60|0;
 $3 = sp + 52|0;
 $5 = sp + 44|0;
 $e = sp + 80|0;
 $nf = sp + 72|0;
 $10 = $p;
 $11 = $f;
 HEAP8[$e>>0] = -1;
 $12 = ((($e)) + 1|0);
 HEAP8[$12>>0] = 0;
 $13 = ((($e)) + 2|0);
 HEAP8[$13>>0] = 0;
 $14 = ((($e)) + 3|0);
 $15 = $11;
 $16 = ((($15)) + 7|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = ($17&255) >>> 1;
 $19 = $18 & 1;
 $20 = HEAP8[$14>>0]|0;
 $21 = $19 & 1;
 $22 = $20 & -2;
 $23 = $22 | $21;
 HEAP8[$14>>0] = $23;
 $24 = $11;
 $25 = ((($24)) + 7|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26 & -17;
 HEAP8[$25>>0] = $27;
 $28 = $10;
 $29 = (_lookahead($28,1048464,8)|0);
 L1: do {
  if ($29) {
   $30 = $10;
   $31 = $10;
   $32 = ((($31)) + 20|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = (($34) + 1)|0;
   $36 = $35&65535;
   $37 = $10;
   $38 = $10;
   $39 = ((($38)) + 52|0);
   $40 = HEAP32[$39>>2]|0;
   $9 = $40;
   $41 = $9;
   $8 = $41;
   $42 = $8;
   $43 = $42;
   $44 = 6 & $43;
   $45 = ($44|0)!=(0);
   if ($45) {
    $46 = $9;
    $47 = $46;
    $48 = -8 & $47;
    $49 = $48;
    $ref$i = $49;
    $50 = $ref$i;
    $51 = HEAP16[$50>>1]|0;
    $count$i = $51;
    $52 = $count$i;
    $53 = $52&65535;
    $54 = ($53|0)!=(0);
    if ($54) {
     $55 = $count$i;
     $56 = (($55) + 1)<<16>>16;
     $count$i = $56;
     $57 = $count$i;
     $58 = $ref$i;
     HEAP16[$58>>1] = $57;
    }
   }
   $59 = $9;
   $60 = (_imm($37,$59)|0);
   $61 = $60&65535;
   _encode($30,6,$36,$61,0,1);
   $62 = ((($e)) + 2|0);
   HEAP8[$62>>0] = 0;
   $63 = $11;
   $64 = ((($63)) + 7|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65 & -17;
   $67 = $66 | 16;
   HEAP8[$64>>0] = $67;
  } else {
   $68 = $11;
   $69 = ((($68)) + 7|0);
   $70 = HEAP8[$69>>0]|0;
   $71 = $70 & 1;
   $72 = $71&255;
   $73 = ($72|0)!=(0);
   if ($73) {
    $74 = $10;
    $75 = (_next($74,33554432)|0);
    if ($75) {
     break;
    }
   }
   $76 = $10;
   _p_subexpr($76,$e);
   while(1) {
    $77 = $11;
    $78 = ((($77)) + 2|0);
    $79 = HEAP16[$78>>1]|0;
    $80 = $79&65535;
    $81 = ($80|0)==(0);
    if (!($81)) {
     break L1;
    }
    $82 = $10;
    $83 = ((($82)) + 24|0);
    $84 = ((($83)) + 25|0);
    $85 = HEAP8[$84>>0]|0;
    $86 = $85&255;
    $87 = $10;
    $88 = ((($87)) + 24|0);
    $89 = ((($88)) + 22|0);
    $90 = HEAP8[$89>>0]|0;
    $91 = $90&255;
    $92 = ($86|0)>($91|0);
    if (!($92)) {
     break L1;
    }
    $93 = $10;
    $94 = (_match($93,16777216)|0);
    if (!($94)) {
     break L1;
    }
    HEAP8[$e>>0] = -1;
    $95 = $10;
    _p_postexpr($95,$e);
   }
  }
 } while(0);
 $96 = $10;
 $97 = (_match($96,8)|0);
 $98 = $11;
 $99 = ((($98)) + 7|0);
 $100 = HEAP8[$99>>0]|0;
 do {
  if ($97) {
   $101 = $100 & 1;
   $102 = $101&255;
   $103 = ($102|0)!=(0);
   if ($103) {
    $104 = $11;
    $105 = ((($104)) + 7|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = ($106&255) >>> 6;
    $108 = $107 & 1;
    $109 = $108&255;
    $110 = ($109|0)!=(0);
    if ($110) {
     $111 = $10;
     _encload($111,$e,1);
     $112 = $10;
     $113 = $10;
     $114 = ((($113)) + 20|0);
     $115 = HEAP8[$114>>0]|0;
     $116 = $115&255;
     $117 = (($116) + 1)|0;
     $118 = $117&65535;
     $119 = $10;
     $120 = (_imm($119,0)|0);
     $121 = $120&65535;
     _encode($112,6,$118,$121,0,1);
     $122 = $10;
     $123 = $10;
     $124 = ((($123)) + 20|0);
     $125 = HEAP8[$124>>0]|0;
     $126 = $125&255;
     $127 = (($126) - 2)|0;
     $128 = $127&65535;
     $129 = $10;
     $130 = ((($129)) + 20|0);
     $131 = HEAP8[$130>>0]|0;
     $132 = $131&255;
     $133 = (($132) - 3)|0;
     $134 = $133&65535;
     $135 = $10;
     $136 = ((($135)) + 20|0);
     $137 = HEAP8[$136>>0]|0;
     $138 = $137&255;
     $139 = (($138) - 1)|0;
     $140 = $139&65535;
     _encode($122,10,$128,$134,$140,0);
     $141 = $10;
     $142 = $10;
     $143 = ((($142)) + 20|0);
     $144 = HEAP8[$143>>0]|0;
     $145 = $144&255;
     $146 = $10;
     $147 = ((($146)) + 20|0);
     $148 = HEAP8[$147>>0]|0;
     $149 = $148&255;
     $150 = (($149) - 3)|0;
     $151 = $150&65535;
     $152 = $10;
     $153 = ((($152)) + 20|0);
     $154 = HEAP8[$153>>0]|0;
     $155 = $154&255;
     $156 = (($155) - 1)|0;
     $157 = $156&65535;
     _encode($141,11,$145,$151,$157,-2);
    } else {
     label = 17;
    }
   } else {
    label = 17;
   }
   if ((label|0) == 17) {
    $158 = $11;
    $159 = ((($158)) + 7|0);
    $160 = HEAP8[$159>>0]|0;
    $161 = $160 & 1;
    $162 = ($161<<24>>24)!=(0);
    $163 = $10;
    _encload($163,$e,0);
    if ($162) {
     $164 = $10;
     $165 = $11;
     $166 = ((($165)) + 2|0);
     $167 = HEAP16[$166>>1]|0;
     $168 = $167&65535;
     $169 = $11;
     $170 = HEAP16[$169>>1]|0;
     $171 = $170&65535;
     $172 = (($171) - 1)|0;
     $173 = ($168|0)==($172|0);
     $174 = $173 ? 9 : 10;
     $175 = $10;
     $176 = ((($175)) + 20|0);
     $177 = HEAP8[$176>>0]|0;
     $178 = $177&255;
     $179 = $10;
     $180 = ((($179)) + 20|0);
     $181 = HEAP8[$180>>0]|0;
     $182 = $181&255;
     $183 = (($182) - 1)|0;
     $184 = $183&65535;
     $185 = $10;
     $186 = ((($185)) + 20|0);
     $187 = HEAP8[$186>>0]|0;
     $188 = $187&255;
     $189 = $11;
     $190 = ((($189)) + 2|0);
     $191 = HEAP16[$190>>1]|0;
     $192 = $191&65535;
     $193 = $11;
     $194 = HEAP16[$193>>1]|0;
     $195 = $194&65535;
     $196 = (($195) - 1)|0;
     $197 = ($192|0)==($196|0);
     $198 = $197 ? -1 : 0;
     _encode($164,$174,$178,$184,$188,$198);
    }
   }
   $199 = $11;
   $200 = ((($199)) + 7|0);
   $201 = HEAP8[$200>>0]|0;
   $202 = ($201&255) >>> 4;
   $203 = $202 & 1;
   $204 = $203&255;
   $205 = ($204|0)!=(0);
   if ($205) {
    $206 = $10;
    $207 = (_next($206,50073472)|0);
    if ($207) {
     label = 25;
    } else {
     $208 = $10;
     $209 = $10;
     $210 = ((($209)) + 20|0);
     $211 = HEAP8[$210>>0]|0;
     $212 = $211&255;
     $213 = (($212) + 1)|0;
     $214 = $213&65535;
     $215 = $10;
     $216 = $10;
     $217 = ((($216)) + 52|0);
     $218 = HEAP32[$217>>2]|0;
     $7 = $218;
     $219 = $7;
     $6 = $219;
     $220 = $6;
     $221 = $220;
     $222 = 6 & $221;
     $223 = ($222|0)!=(0);
     if ($223) {
      $224 = $7;
      $225 = $224;
      $226 = -8 & $225;
      $227 = $226;
      $ref$i1 = $227;
      $228 = $ref$i1;
      $229 = HEAP16[$228>>1]|0;
      $count$i2 = $229;
      $230 = $count$i2;
      $231 = $230&65535;
      $232 = ($231|0)!=(0);
      if ($232) {
       $233 = $count$i2;
       $234 = (($233) + 1)<<16>>16;
       $count$i2 = $234;
       $235 = $count$i2;
       $236 = $ref$i1;
       HEAP16[$236>>1] = $235;
      }
     }
     $237 = $7;
     $238 = (_imm($215,$237)|0);
     $239 = $238&65535;
     _encode($208,6,$214,$239,0,1);
     $240 = ((($e)) + 2|0);
     HEAP8[$240>>0] = 2;
    }
   } else {
    label = 25;
   }
   do {
    if ((label|0) == 25) {
     $241 = $11;
     $242 = ((($241)) + 7|0);
     $243 = HEAP8[$242>>0]|0;
     $244 = $243 & 1;
     $245 = $244&255;
     $246 = ($245|0)!=(0);
     if ($246) {
      $247 = $10;
      $248 = (_next($247,33554432)|0);
      if ($248) {
       break;
      }
     }
     $249 = $10;
     _p_subexpr($249,$e);
    }
   } while(0);
   $250 = $11;
   $251 = ((($250)) + 7|0);
   $252 = HEAP8[$251>>0]|0;
   $253 = $252 & -17;
   $254 = $253 | 16;
   HEAP8[$251>>0] = $254;
  } else {
   $255 = ($100&255) >>> 2;
   $256 = $255 & 1;
   $257 = ($256<<24>>24)!=(0);
   $258 = $11;
   $259 = ((($258)) + 7|0);
   $260 = HEAP8[$259>>0]|0;
   $261 = $260 & 1;
   $262 = $261&255;
   $263 = ($262|0)!=(0);
   if (!($257)) {
    if (!($263)) {
     break;
    }
    $385 = $10;
    $386 = (_next($385,33554432)|0);
    if (!($386)) {
     break;
    }
    $387 = $11;
    $388 = ((($387)) + 2|0);
    $389 = HEAP16[$388>>1]|0;
    $390 = $389&65535;
    $391 = $11;
    $392 = HEAP16[$391>>1]|0;
    $393 = $392&65535;
    $394 = (($393) - 1)|0;
    $395 = ($390|0)<($394|0);
    if (!($395)) {
     break;
    }
    $396 = $10;
    $397 = $10;
    $398 = ((($397)) + 20|0);
    $399 = HEAP8[$398>>0]|0;
    $400 = $399&255;
    $401 = (($400) + 1)|0;
    $402 = $401&65535;
    $403 = $10;
    $404 = ((($403)) + 20|0);
    $405 = HEAP8[$404>>0]|0;
    $406 = $405&255;
    $407 = $11;
    $408 = HEAP16[$407>>1]|0;
    $409 = $408&65535;
    $410 = (($409) - 1)|0;
    $411 = $11;
    $412 = ((($411)) + 2|0);
    $413 = HEAP16[$412>>1]|0;
    $414 = $413&65535;
    $415 = (($410) - ($414))|0;
    $416 = (($406) - ($415))|0;
    $417 = $416&65535;
    _encode($396,3,$402,$417,0,1);
    break;
   }
   if ($263) {
    $264 = $11;
    $265 = ((($264)) + 7|0);
    $266 = HEAP8[$265>>0]|0;
    $267 = ($266&255) >>> 6;
    $268 = $267 & 1;
    $269 = $268&255;
    $270 = ($269|0)!=(0);
    if ($270) {
     $271 = $10;
     $272 = $10;
     $273 = ((($272)) + 20|0);
     $274 = HEAP8[$273>>0]|0;
     $275 = $274&255;
     $276 = (($275) + 1)|0;
     $277 = $276&65535;
     $278 = $10;
     $279 = (_mu_pop_key_def()|0);
     $280 = (_imm($278,$279)|0);
     $281 = $280&65535;
     _encode($271,6,$277,$281,0,1);
     $282 = $10;
     $283 = $10;
     $284 = ((($283)) + 20|0);
     $285 = HEAP8[$284>>0]|0;
     $286 = $285&255;
     $287 = $10;
     $288 = ((($287)) + 20|0);
     $289 = HEAP8[$288>>0]|0;
     $290 = $289&255;
     _encode($282,10,$286,0,$290,0);
     $291 = $10;
     $292 = $10;
     $293 = ((($292)) + 20|0);
     $294 = HEAP8[$293>>0]|0;
     $295 = $294&255;
     $296 = (($295) + 1)|0;
     $297 = $296&65535;
     $298 = $10;
     $299 = ((($298)) + 20|0);
     $300 = HEAP8[$299>>0]|0;
     $301 = $300&255;
     $302 = (($301) - 1)|0;
     $303 = (_offset($e)|0);
     $304 = (($302) - ($303))|0;
     $305 = $304&65535;
     _encode($291,4,$297,$305,0,1);
     $306 = $10;
     $307 = $10;
     $308 = ((($307)) + 20|0);
     $309 = HEAP8[$308>>0]|0;
     $310 = $309&255;
     $311 = (($310) + 1)|0;
     $312 = $311&65535;
     $313 = $10;
     $314 = $11;
     $315 = ((($314)) + 4|0);
     $316 = HEAP16[$315>>1]|0;
     $317 = $316&65535;
     $4 = $317;
     $318 = $4;
     $319 = (+($318>>>0));
     HEAPF32[$5>>2] = $319;
     $320 = HEAP32[$5>>2]|0;
     $321 = -8 & $320;
     $322 = (1 + ($321))|0;
     $323 = $322;
     $324 = (_imm($313,$323)|0);
     $325 = $324&65535;
     _encode($306,6,$312,$325,0,1);
     $326 = $10;
     $327 = $10;
     $328 = ((($327)) + 20|0);
     $329 = HEAP8[$328>>0]|0;
     $330 = $329&255;
     $331 = (($330) - 2)|0;
     $332 = $331&65535;
     _encode($326,2,$332,33,0,-2);
     break;
    }
   }
   $333 = $11;
   $334 = ((($333)) + 7|0);
   $335 = HEAP8[$334>>0]|0;
   $336 = $335 & 1;
   $337 = ($336<<24>>24)!=(0);
   if ($337) {
    $338 = $10;
    $339 = $10;
    $340 = ((($339)) + 20|0);
    $341 = HEAP8[$340>>0]|0;
    $342 = $341&255;
    $343 = (($342) + 1)|0;
    $344 = $343&65535;
    $345 = $10;
    $346 = $11;
    $347 = ((($346)) + 4|0);
    $348 = HEAP16[$347>>1]|0;
    $349 = $348&65535;
    $2 = $349;
    $350 = $2;
    $351 = (+($350>>>0));
    HEAPF32[$3>>2] = $351;
    $352 = HEAP32[$3>>2]|0;
    $353 = -8 & $352;
    $354 = (1 + ($353))|0;
    $355 = $354;
    $356 = (_imm($345,$355)|0);
    $357 = $356&65535;
    _encode($338,6,$344,$357,0,1);
    $358 = $10;
    $359 = $11;
    $360 = ((($359)) + 2|0);
    $361 = HEAP16[$360>>1]|0;
    $362 = $361&65535;
    $363 = $11;
    $364 = HEAP16[$363>>1]|0;
    $365 = $364&65535;
    $366 = (($365) - 1)|0;
    $367 = ($362|0)==($366|0);
    $368 = $367 ? 9 : 10;
    $369 = $10;
    $370 = ((($369)) + 20|0);
    $371 = HEAP8[$370>>0]|0;
    $372 = $371&255;
    $373 = $10;
    $374 = ((($373)) + 20|0);
    $375 = HEAP8[$374>>0]|0;
    $376 = $375&255;
    $377 = (($376) - 1)|0;
    $378 = (_offset($e)|0);
    $379 = (($377) - ($378))|0;
    $380 = $379&65535;
    $381 = $10;
    $382 = ((($381)) + 20|0);
    $383 = HEAP8[$382>>0]|0;
    $384 = $383&255;
    _encode($358,$368,$372,$380,$384,0);
   }
  }
 } while(0);
 $418 = $11;
 $419 = ((($418)) + 7|0);
 $420 = HEAP8[$419>>0]|0;
 $421 = $420 & 1;
 $422 = $421&255;
 $423 = ($422|0)!=(0);
 if ($423) {
  $424 = $10;
  $425 = (_match($424,33554432)|0);
  if ($425) {
   HEAP16[$nf>>1] = 0;
   $426 = ((($nf)) + 2|0);
   HEAP16[$426>>1] = 0;
   $427 = ((($nf)) + 4|0);
   HEAP16[$427>>1] = 0;
   $428 = ((($nf)) + 6|0);
   HEAP8[$428>>0] = 0;
   $429 = ((($nf)) + 7|0);
   $430 = HEAP8[$429>>0]|0;
   $431 = $430 & -2;
   $432 = $431 | 1;
   HEAP8[$429>>0] = $432;
   $433 = ((($nf)) + 7|0);
   $434 = $11;
   $435 = ((($434)) + 7|0);
   $436 = HEAP8[$435>>0]|0;
   $437 = ($436&255) >>> 1;
   $438 = $437 & 1;
   $439 = HEAP8[$433>>0]|0;
   $440 = $438 & 1;
   $441 = ($440 << 1)&255;
   $442 = $439 & -3;
   $443 = $442 | $441;
   HEAP8[$433>>0] = $443;
   $444 = ((($nf)) + 7|0);
   $445 = HEAP8[$444>>0]|0;
   $446 = $445 & -5;
   HEAP8[$444>>0] = $446;
   $447 = ((($nf)) + 7|0);
   $448 = HEAP8[$447>>0]|0;
   $449 = $448 & -9;
   HEAP8[$447>>0] = $449;
   $450 = ((($nf)) + 7|0);
   $451 = HEAP8[$450>>0]|0;
   $452 = $451 & -17;
   HEAP8[$450>>0] = $452;
   $453 = ((($nf)) + 7|0);
   $454 = HEAP8[$453>>0]|0;
   $455 = $454 & -33;
   HEAP8[$453>>0] = $455;
   $456 = ((($nf)) + 7|0);
   $457 = HEAP8[$456>>0]|0;
   $458 = $457 & -65;
   HEAP8[$456>>0] = $458;
   $459 = $10;
   _s_frame($459,$nf,0);
   $460 = ((($nf)) + 7|0);
   $461 = HEAP8[$460>>0]|0;
   $462 = $461 & -5;
   $463 = $462 | 4;
   HEAP8[$460>>0] = $463;
   $464 = $10;
   _p_frame($464,$nf);
   $465 = $11;
   $466 = ((($465)) + 7|0);
   $467 = HEAP8[$466>>0]|0;
   $468 = ($467&255) >>> 2;
   $469 = $468 & 1;
   $470 = $469&255;
   $471 = ($470|0)!=(0);
   if ($471) {
    $482 = 1;
   } else {
    $472 = $11;
    $473 = ((($472)) + 2|0);
    $474 = HEAP16[$473>>1]|0;
    $475 = $474&65535;
    $476 = $11;
    $477 = HEAP16[$476>>1]|0;
    $478 = $477&65535;
    $479 = (($478) - 1)|0;
    $480 = ($475|0)<($479|0);
    $482 = $480;
   }
   $481 = $482&1;
   $483 = $10;
   $484 = ((($483)) + 20|0);
   $485 = HEAP8[$484>>0]|0;
   $486 = $485&255;
   $487 = (($486) - ($481))|0;
   $488 = $487&255;
   HEAP8[$484>>0] = $488;
   $489 = $11;
   $490 = ((($489)) + 2|0);
   $491 = HEAP16[$490>>1]|0;
   $492 = $491&65535;
   $493 = (($492) - 1)|0;
   $494 = $493&65535;
   HEAP16[$490>>1] = $494;
   $495 = $10;
   _expect($495,67108864);
   STACKTOP = sp;return;
  }
 }
 $496 = $11;
 $497 = ((($496)) + 7|0);
 $498 = HEAP8[$497>>0]|0;
 $499 = $498 & 1;
 $500 = ($499<<24>>24)!=(0);
 if ($500) {
  $501 = $11;
  $502 = ((($501)) + 7|0);
  $503 = HEAP8[$502>>0]|0;
  $504 = ($503&255) >>> 4;
  $505 = $504 & 1;
  $506 = ($505<<24>>24)!=(0);
  if ($506) {
   $507 = $10;
   $508 = $11;
   $509 = ((($508)) + 7|0);
   $510 = HEAP8[$509>>0]|0;
   $511 = ($510&255) >>> 1;
   $512 = $511 & 1;
   $513 = ($512<<24>>24)!=(0);
   _encstore($507,$e,$513,0);
   $514 = $10;
   $515 = ((($514)) + 20|0);
   $516 = HEAP8[$515>>0]|0;
   $517 = $516&255;
   $518 = (($517) - 1)|0;
   $519 = $518&255;
   HEAP8[$515>>0] = $519;
   STACKTOP = sp;return;
  }
  $520 = $11;
  $521 = ((($520)) + 7|0);
  $522 = HEAP8[$521>>0]|0;
  $523 = ($522&255) >>> 2;
  $524 = $523 & 1;
  $525 = ($524<<24>>24)!=(0);
  $526 = $10;
  if ($525) {
   $527 = ((($526)) + 20|0);
   $528 = HEAP8[$527>>0]|0;
   $529 = $528&255;
   $530 = (($529) - 1)|0;
   $531 = $530&255;
   HEAP8[$527>>0] = $531;
   $532 = $10;
   $533 = $11;
   $534 = ((($533)) + 7|0);
   $535 = HEAP8[$534>>0]|0;
   $536 = ($535&255) >>> 1;
   $537 = $536 & 1;
   $538 = ($537<<24>>24)!=(0);
   $539 = (_offset($e)|0);
   $540 = (($539) + 1)|0;
   $541 = (0 - ($540))|0;
   _encstore($532,$e,$538,$541);
   STACKTOP = sp;return;
  } else {
   $542 = $11;
   $543 = ((($542)) + 7|0);
   $544 = HEAP8[$543>>0]|0;
   $545 = ($544&255) >>> 1;
   $546 = $545 & 1;
   $547 = ($546<<24>>24)!=(0);
   $548 = $11;
   $549 = HEAP16[$548>>1]|0;
   $550 = $549&65535;
   $551 = (($550) - 1)|0;
   $552 = $11;
   $553 = ((($552)) + 2|0);
   $554 = HEAP16[$553>>1]|0;
   $555 = $554&65535;
   $556 = (($551) - ($555))|0;
   _encstore($526,$e,$547,$556);
   STACKTOP = sp;return;
  }
 }
 $557 = $10;
 _encload($557,$e,0);
 $558 = $11;
 $559 = ((($558)) + 7|0);
 $560 = HEAP8[$559>>0]|0;
 $561 = ($560&255) >>> 4;
 $562 = $561 & 1;
 $563 = ($562<<24>>24)!=(0);
 if ($563) {
  $564 = $10;
  $565 = $10;
  $566 = ((($565)) + 20|0);
  $567 = HEAP8[$566>>0]|0;
  $568 = $567&255;
  $569 = $10;
  $570 = ((($569)) + 20|0);
  $571 = HEAP8[$570>>0]|0;
  $572 = $571&255;
  $573 = (($572) - 2)|0;
  $574 = $573&65535;
  $575 = $10;
  $576 = ((($575)) + 20|0);
  $577 = HEAP8[$576>>0]|0;
  $578 = $577&255;
  $579 = (($578) - 1)|0;
  $580 = $579&65535;
  _encode($564,11,$568,$574,$580,-2);
  STACKTOP = sp;return;
 }
 $581 = $11;
 $582 = ((($581)) + 7|0);
 $583 = HEAP8[$582>>0]|0;
 $584 = ($583&255) >>> 2;
 $585 = $584 & 1;
 $586 = ($585<<24>>24)!=(0);
 if ($586) {
  $587 = $10;
  $588 = $10;
  $589 = ((($588)) + 20|0);
  $590 = HEAP8[$589>>0]|0;
  $591 = $590&255;
  $592 = (($591) + 1)|0;
  $593 = $592&65535;
  $594 = $10;
  $595 = $11;
  $596 = ((($595)) + 4|0);
  $597 = HEAP16[$596>>1]|0;
  $598 = $597&65535;
  $0 = $598;
  $599 = $0;
  $600 = (+($599>>>0));
  HEAPF32[$1>>2] = $600;
  $601 = HEAP32[$1>>2]|0;
  $602 = -8 & $601;
  $603 = (1 + ($602))|0;
  $604 = $603;
  $605 = (_imm($594,$604)|0);
  $606 = $605&65535;
  _encode($587,6,$593,$606,0,1);
  $607 = $10;
  $608 = $10;
  $609 = ((($608)) + 20|0);
  $610 = HEAP8[$609>>0]|0;
  $611 = $610&255;
  $612 = (($611) - 1)|0;
  $613 = $612&65535;
  $614 = $10;
  $615 = ((($614)) + 20|0);
  $616 = HEAP8[$615>>0]|0;
  $617 = $616&255;
  $618 = (($617) - 2)|0;
  $619 = $618&65535;
  $620 = $10;
  $621 = ((($620)) + 20|0);
  $622 = HEAP8[$621>>0]|0;
  $623 = $622&255;
  _encode($607,11,$613,$619,$623,-2);
  STACKTOP = sp;return;
 }
 $624 = $11;
 $625 = ((($624)) + 2|0);
 $626 = HEAP16[$625>>1]|0;
 $627 = $626&65535;
 $628 = $11;
 $629 = HEAP16[$628>>1]|0;
 $630 = $629&65535;
 $631 = ($627|0)>=($630|0);
 if (!($631)) {
  STACKTOP = sp;return;
 }
 $632 = $10;
 $633 = $10;
 $634 = ((($633)) + 20|0);
 $635 = HEAP8[$634>>0]|0;
 $636 = $635&255;
 _encode($632,5,$636,0,0,-1);
 STACKTOP = sp;return;
}
function _offset($e) {
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $e;
 $2 = $1;
 $3 = ((($2)) + 2|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(1);
 do {
  if ($6) {
   $0 = 2;
  } else {
   $7 = $1;
   $8 = ((($7)) + 2|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = $9&255;
   $11 = ($10|0)==(2);
   if ($11) {
    $0 = 1;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _encstore($p,$e,$insert,$offset) {
 $p = $p|0;
 $e = $e|0;
 $insert = $insert|0;
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $e;
 $4 = $insert&1;
 $2 = $4;
 $3 = $offset;
 $5 = $1;
 $6 = ((($5)) + 2|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)==(4);
 if ($9) {
  $10 = $0;
  $11 = $0;
  $12 = ((($11)) + 20|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $3;
  $16 = (($14) - ($15))|0;
  $17 = $16&65535;
  _encode($10,5,$17,0,0,0);
  STACKTOP = sp;return;
 }
 $18 = $1;
 $19 = ((($18)) + 2|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = ($21|0)==(2);
 if ($22) {
  $23 = $0;
  $24 = $2;
  $25 = $24&1;
  $26 = $25 ? 11 : 12;
  $27 = $0;
  $28 = ((($27)) + 20|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $3;
  $32 = (($30) - ($31))|0;
  $33 = (($32) - 1)|0;
  $34 = $33&65535;
  $35 = $0;
  $36 = ((($35)) + 20|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  _encode($23,$26,$34,0,$38,-1);
  STACKTOP = sp;return;
 }
 $39 = $1;
 $40 = ((($39)) + 2|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = ($42|0)==(1);
 $44 = $0;
 if ($43) {
  $45 = $2;
  $46 = $45&1;
  $47 = $46 ? 11 : 12;
  $48 = $0;
  $49 = ((($48)) + 20|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = $3;
  $53 = (($51) - ($52))|0;
  $54 = (($53) - 2)|0;
  $55 = $54&65535;
  $56 = $0;
  $57 = ((($56)) + 20|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = (($59) - 1)|0;
  $61 = $60&65535;
  $62 = $0;
  $63 = ((($62)) + 20|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  _encode($44,$47,$55,$61,$65,0);
  $66 = $0;
  $67 = $0;
  $68 = ((($67)) + 20|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = (($70) - 1)|0;
  $72 = $71&65535;
  _encode($66,5,$72,0,0,-2);
  STACKTOP = sp;return;
 } else {
  $73 = ((($44)) + 24|0);
  _mu_errorassign($73);
  STACKTOP = sp;return;
 }
}
function _mu_errorassign($l) {
 $l = $l|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $l;
 $1 = $0;
 _mu_errorparse($1,4421,$vararg_buffer);
 // unreachable;
}
function _compile($p,$weak) {
 $p = $p|0;
 $weak = $weak|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $bcode = 0, $code = 0, $count$i = 0, $count$i2 = 0, $count$i5 = 0, $count$i8 = 0, $i = 0;
 var $imms = 0, $k = 0, $ref$i = 0, $ref$i1 = 0, $ref$i4 = 0, $ref$i7 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 160|0;
 $k = sp + 40|0;
 $v = sp + 36|0;
 $i = sp + 32|0;
 $23 = $p;
 $25 = $weak&1;
 $24 = $25;
 $26 = $23;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $22 = $28;
 $29 = $22;
 $30 = $29;
 $31 = $30 & -8;
 $32 = $31;
 $33 = ((($32)) + 2|0);
 $34 = HEAP16[$33>>1]|0;
 $35 = $34&65535;
 $36 = $35<<2;
 $37 = (8 + ($36))|0;
 $38 = $23;
 $39 = ((($38)) + 12|0);
 $40 = HEAP16[$39>>1]|0;
 $41 = $40&65535;
 $42 = (($37) + ($41))|0;
 $43 = (_mu_buf_createdtor($42,313)|0);
 $b = $43;
 $44 = $b;
 $19 = $44;
 $45 = $19;
 $46 = $45;
 $47 = -8 & $46;
 $48 = $47;
 $49 = ((($48)) + 4|0);
 $code = $49;
 $50 = $23;
 $51 = ((($50)) + 18|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = $code;
 HEAP8[$53>>0] = $52;
 $54 = $24;
 $55 = $54&1;
 $56 = $55 ? 4 : 0;
 $57 = 2 | $56;
 $58 = $57&255;
 $59 = $code;
 $60 = ((($59)) + 1|0);
 HEAP8[$60>>0] = $58;
 $61 = $23;
 $62 = ((($61)) + 19|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $code;
 $65 = ((($64)) + 2|0);
 HEAP8[$65>>0] = $63;
 $66 = $23;
 $67 = HEAP32[$66>>2]|0;
 $16 = $67;
 $68 = $16;
 $69 = $68;
 $70 = $69 & -8;
 $71 = $70;
 $72 = ((($71)) + 2|0);
 $73 = HEAP16[$72>>1]|0;
 $74 = $73&255;
 $75 = $code;
 $76 = ((($75)) + 3|0);
 HEAP8[$76>>0] = $74;
 $77 = $23;
 $78 = ((($77)) + 4|0);
 $79 = HEAP32[$78>>2]|0;
 $13 = $79;
 $80 = $13;
 $81 = $80;
 $82 = $81 & -8;
 $83 = $82;
 $84 = ((($83)) + 2|0);
 $85 = HEAP16[$84>>1]|0;
 $86 = $code;
 $87 = ((($86)) + 4|0);
 HEAP16[$87>>1] = $85;
 $88 = $23;
 $89 = ((($88)) + 12|0);
 $90 = HEAP16[$89>>1]|0;
 $91 = $code;
 $92 = ((($91)) + 6|0);
 HEAP16[$92>>1] = $90;
 $93 = $b;
 $10 = $93;
 $94 = $10;
 $9 = $94;
 $95 = $9;
 $96 = $95;
 $97 = -8 & $96;
 $98 = $97;
 $99 = ((($98)) + 4|0);
 $100 = ((($99)) + 8|0);
 $imms = $100;
 HEAP32[$i>>2] = 0;
 while(1) {
  $101 = $23;
  $102 = ((($101)) + 4|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = (_mu_tbl_next($103,$i,$k,$v)|0);
  if (!($104)) {
   break;
  }
  $105 = HEAP32[$k>>2]|0;
  $106 = (_imm_nil()|0);
  $107 = ($105|0)==($106|0);
  $108 = HEAP32[$k>>2]|0;
  $109 = $107 ? 0 : $108;
  $110 = HEAP32[$v>>2]|0;
  $2 = $110;
  $111 = $2;
  $0 = $111;
  $112 = $0;
  $113 = $112;
  $114 = (($113) - 1)|0;
  HEAP32[$1>>2] = $114;
  $115 = +HEAPF32[$1>>2];
  $116 = (~~(($115))>>>0);
  $117 = $imms;
  $118 = (($117) + ($116<<2)|0);
  HEAP32[$118>>2] = $109;
 }
 $119 = $b;
 $7 = $119;
 $120 = $7;
 $6 = $120;
 $121 = $6;
 $5 = $121;
 $122 = $5;
 $123 = $122;
 $124 = -8 & $123;
 $125 = $124;
 $126 = ((($125)) + 4|0);
 $127 = ((($126)) + 8|0);
 $128 = $7;
 $4 = $128;
 $129 = $4;
 $3 = $129;
 $130 = $3;
 $131 = $130;
 $132 = -8 & $131;
 $133 = $132;
 $134 = ((($133)) + 4|0);
 $135 = ((($134)) + 4|0);
 $136 = HEAP16[$135>>1]|0;
 $137 = $136&65535;
 $138 = (($127) + ($137<<2)|0);
 $bcode = $138;
 $139 = $bcode;
 $140 = $23;
 $141 = ((($140)) + 8|0);
 $142 = HEAP32[$141>>2]|0;
 $8 = $142;
 $143 = $8;
 $144 = $143;
 $145 = -8 & $144;
 $146 = $145;
 $147 = ((($146)) + 4|0);
 $148 = $23;
 $149 = ((($148)) + 12|0);
 $150 = HEAP16[$149>>1]|0;
 $151 = $150&65535;
 _memcpy(($139|0),($147|0),($151|0))|0;
 $152 = $23;
 $153 = ((($152)) + 4|0);
 $154 = HEAP32[$153>>2]|0;
 $12 = $154;
 $155 = $12;
 $11 = $155;
 $156 = $11;
 $157 = $156;
 $158 = 6 & $157;
 $159 = ($158|0)!=(0);
 if ($159) {
  $160 = $12;
  $161 = $160;
  $162 = -8 & $161;
  $163 = $162;
  $ref$i7 = $163;
  $164 = $ref$i7;
  $165 = HEAP16[$164>>1]|0;
  $count$i8 = $165;
  $166 = $count$i8;
  $167 = $166&65535;
  $168 = ($167|0)!=(0);
  if ($168) {
   $169 = $count$i8;
   $170 = (($169) + -1)<<16>>16;
   $count$i8 = $170;
   $171 = $count$i8;
   $172 = $ref$i7;
   HEAP16[$172>>1] = $171;
   $173 = $count$i8;
   $174 = $173&65535;
   $175 = ($174|0)==(0);
   if ($175) {
    $176 = $12;
    _mu_destroy($176);
   }
  }
 }
 $177 = $23;
 $178 = ((($177)) + 8|0);
 $179 = HEAP32[$178>>2]|0;
 $15 = $179;
 $180 = $15;
 $14 = $180;
 $181 = $14;
 $182 = $181;
 $183 = 6 & $182;
 $184 = ($183|0)!=(0);
 if ($184) {
  $185 = $15;
  $186 = $185;
  $187 = -8 & $186;
  $188 = $187;
  $ref$i4 = $188;
  $189 = $ref$i4;
  $190 = HEAP16[$189>>1]|0;
  $count$i5 = $190;
  $191 = $count$i5;
  $192 = $191&65535;
  $193 = ($192|0)!=(0);
  if ($193) {
   $194 = $count$i5;
   $195 = (($194) + -1)<<16>>16;
   $count$i5 = $195;
   $196 = $count$i5;
   $197 = $ref$i4;
   HEAP16[$197>>1] = $196;
   $198 = $count$i5;
   $199 = $198&65535;
   $200 = ($199|0)==(0);
   if ($200) {
    $201 = $15;
    _mu_destroy($201);
   }
  }
 }
 $202 = $23;
 $203 = HEAP32[$202>>2]|0;
 $18 = $203;
 $204 = $18;
 $17 = $204;
 $205 = $17;
 $206 = $205;
 $207 = 6 & $206;
 $208 = ($207|0)!=(0);
 if ($208) {
  $209 = $18;
  $210 = $209;
  $211 = -8 & $210;
  $212 = $211;
  $ref$i1 = $212;
  $213 = $ref$i1;
  $214 = HEAP16[$213>>1]|0;
  $count$i2 = $214;
  $215 = $count$i2;
  $216 = $215&65535;
  $217 = ($216|0)!=(0);
  if ($217) {
   $218 = $count$i2;
   $219 = (($218) + -1)<<16>>16;
   $count$i2 = $219;
   $220 = $count$i2;
   $221 = $ref$i1;
   HEAP16[$221>>1] = $220;
   $222 = $count$i2;
   $223 = $222&65535;
   $224 = ($223|0)==(0);
   if ($224) {
    $225 = $18;
    _mu_destroy($225);
   }
  }
 }
 $226 = $23;
 $227 = ((($226)) + 52|0);
 $228 = HEAP32[$227>>2]|0;
 $21 = $228;
 $229 = $21;
 $20 = $229;
 $230 = $20;
 $231 = $230;
 $232 = 6 & $231;
 $233 = ($232|0)!=(0);
 if (!($233)) {
  $251 = $b;
  STACKTOP = sp;return ($251|0);
 }
 $234 = $21;
 $235 = $234;
 $236 = -8 & $235;
 $237 = $236;
 $ref$i = $237;
 $238 = $ref$i;
 $239 = HEAP16[$238>>1]|0;
 $count$i = $239;
 $240 = $count$i;
 $241 = $240&65535;
 $242 = ($241|0)!=(0);
 if (!($242)) {
  $251 = $b;
  STACKTOP = sp;return ($251|0);
 }
 $243 = $count$i;
 $244 = (($243) + -1)<<16>>16;
 $count$i = $244;
 $245 = $count$i;
 $246 = $ref$i;
 HEAP16[$246>>1] = $245;
 $247 = $count$i;
 $248 = $247&65535;
 $249 = ($248|0)==(0);
 if (!($249)) {
  $251 = $b;
  STACKTOP = sp;return ($251|0);
 }
 $250 = $21;
 _mu_destroy($250);
 $251 = $b;
 STACKTOP = sp;return ($251|0);
}
function _p_while($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $bchain = 0, $cchain = 0, $cond_offset = 0, $while_offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP16[$2>>1]|0;
 $while_offset = $3;
 $4 = $0;
 _expect($4,8388608);
 $5 = $0;
 _p_expr($5);
 $6 = $0;
 _expect($6,16777216);
 $7 = $0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP16[$8>>1]|0;
 $cond_offset = $9;
 $10 = $0;
 $11 = $0;
 $12 = ((($11)) + 20|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 _encode($10,13,$14,0,0,0);
 $15 = $0;
 $16 = $0;
 $17 = ((($16)) + 20|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 _encode($15,5,$19,0,0,-1);
 $20 = $0;
 $21 = ((($20)) + 14|0);
 $22 = HEAP16[$21>>1]|0;
 $bchain = $22;
 $23 = $0;
 $24 = ((($23)) + 14|0);
 HEAP16[$24>>1] = 0;
 $25 = $0;
 $26 = ((($25)) + 16|0);
 $27 = HEAP16[$26>>1]|0;
 $cchain = $27;
 $28 = $0;
 $29 = ((($28)) + 16|0);
 HEAP16[$29>>1] = 0;
 $30 = $0;
 _p_stmt($30);
 $31 = $0;
 $32 = $while_offset;
 $33 = $32&65535;
 $34 = $0;
 $35 = ((($34)) + 12|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = $36&65535;
 $38 = (($33) - ($37))|0;
 $39 = $38&65535;
 _encode($31,15,0,$39,0,0);
 $40 = $0;
 $41 = $cond_offset;
 $42 = $0;
 $43 = ((($42)) + 12|0);
 $44 = HEAP16[$43>>1]|0;
 $45 = $44&65535;
 $46 = $cond_offset;
 $47 = $46&65535;
 $48 = (($45) - ($47))|0;
 $49 = $48&65535;
 _patch($40,$41,$49);
 $50 = $0;
 $51 = $0;
 $52 = ((($51)) + 14|0);
 $53 = HEAP16[$52>>1]|0;
 $54 = $0;
 $55 = ((($54)) + 12|0);
 $56 = HEAP16[$55>>1]|0;
 _patch_all($50,$53,$56);
 $57 = $0;
 $58 = $0;
 $59 = ((($58)) + 16|0);
 $60 = HEAP16[$59>>1]|0;
 $61 = $while_offset;
 _patch_all($57,$60,$61);
 $62 = $bchain;
 $63 = $0;
 $64 = ((($63)) + 14|0);
 HEAP16[$64>>1] = $62;
 $65 = $cchain;
 $66 = $0;
 $67 = ((($66)) + 16|0);
 HEAP16[$67>>1] = $65;
 STACKTOP = sp;return;
}
function _patch_all($p,$chain,$offset) {
 $p = $p|0;
 $chain = $chain|0;
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bcode = 0, $current = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $2 = $chain;
 $3 = $offset;
 $current = 0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $0 = $6;
 $7 = $0;
 $8 = $7;
 $9 = -8 & $8;
 $10 = $9;
 $11 = ((($10)) + 4|0);
 $bcode = $11;
 while(1) {
  $12 = $2;
  $13 = ($12<<16>>16)!=(0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $14&65535;
  $16 = $current;
  $17 = (($16) + ($15))|0;
  $current = $17;
  $18 = $current;
  $19 = $bcode;
  $20 = (($19) + ($18)|0);
  $21 = $3;
  $22 = $21 << 16 >> 16;
  $23 = $current;
  $24 = (($22) - ($23))|0;
  $25 = (_mu_patch($20,$24)|0);
  $26 = $25&65535;
  $2 = $26;
 }
 STACKTOP = sp;return;
}
function _p_for($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bchain = 0, $cchain = 0, $cond_offset = 0;
 var $count = 0, $count$i$i = 0, $count$i$i2 = 0, $f = 0, $for_offset = 0, $i = 0, $ll = 0, $lr = 0, $ref$i$i = 0, $ref$i$i1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 40|0;
 $4 = sp + 152|0;
 $7 = sp;
 $ll = sp + 108|0;
 $f = sp + 184|0;
 $lr = sp + 80|0;
 $8 = $p;
 $9 = $8;
 _expect($9,8388608);
 $10 = $8;
 $11 = ((($10)) + 24|0);
 dest=$7; src=$11; stop=dest+28|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $12 = ((($7)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $6 = $13;
 $14 = $6;
 $5 = $14;
 $15 = $5;
 $16 = $15;
 $17 = 6 & $16;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $6;
  $20 = $19;
  $21 = -8 & $20;
  $22 = $21;
  $ref$i$i = $22;
  $23 = $ref$i$i;
  $24 = HEAP16[$23>>1]|0;
  $count$i$i = $24;
  $25 = $count$i$i;
  $26 = $25&65535;
  $27 = ($26|0)!=(0);
  if ($27) {
   $28 = $count$i$i;
   $29 = (($28) + 1)<<16>>16;
   $count$i$i = $29;
   $30 = $count$i$i;
   $31 = $ref$i$i;
   HEAP16[$31>>1] = $30;
  }
 }
 ;HEAP32[$ll>>2]=HEAP32[$7>>2]|0;HEAP32[$ll+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$ll+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$ll+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$ll+16>>2]=HEAP32[$7+16>>2]|0;HEAP32[$ll+20>>2]=HEAP32[$7+20>>2]|0;HEAP32[$ll+24>>2]=HEAP32[$7+24>>2]|0;
 ;HEAP16[$f>>1]=HEAP16[3412>>1]|0;HEAP16[$f+2>>1]=HEAP16[3412+2>>1]|0;HEAP16[$f+4>>1]=HEAP16[3412+4>>1]|0;HEAP16[$f+6>>1]=HEAP16[3412+6>>1]|0;
 $32 = $8;
 _s_frame($32,$f,1);
 $33 = $8;
 _expect($33,4);
 $34 = ((($f)) + 2|0);
 $35 = HEAP16[$34>>1]|0;
 $36 = $35&65535;
 $37 = ($36|0)!=(0);
 if (!($37)) {
  $38 = ((($f)) + 7|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = ($39&255) >>> 2;
  $41 = $40 & 1;
  $42 = $41&255;
  $43 = ($42|0)!=(0);
  if (!($43)) {
   $44 = $8;
   $45 = ((($44)) + 24|0);
   _mu_errorassign($45);
  }
 }
 $46 = $8;
 $47 = $8;
 $48 = ((($47)) + 20|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = $49&255;
 $51 = (($50) + 1)|0;
 $52 = $51&65535;
 $53 = $8;
 $54 = (_mu_iter_key_def()|0);
 $55 = (_imm($53,$54)|0);
 $56 = $55&65535;
 _encode($46,6,$52,$56,0,1);
 $57 = $8;
 $58 = $8;
 $59 = ((($58)) + 20|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&255;
 $62 = $8;
 $63 = ((($62)) + 20|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 _encode($57,10,$61,0,$65,0);
 $66 = $8;
 _p_expr($66);
 $67 = $8;
 $68 = $8;
 $69 = ((($68)) + 20|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = $70&255;
 $72 = (($71) - 1)|0;
 $73 = $72&65535;
 _encode($67,2,$73,17,0,-1);
 $74 = $8;
 $75 = ((($74)) + 12|0);
 $76 = HEAP16[$75>>1]|0;
 $for_offset = $76;
 $77 = $8;
 $78 = $8;
 $79 = ((($78)) + 20|0);
 $80 = HEAP8[$79>>0]|0;
 $81 = $80&255;
 $82 = (($81) + 1)|0;
 $83 = $82&65535;
 $84 = $8;
 $85 = ((($84)) + 20|0);
 $86 = HEAP8[$85>>0]|0;
 $87 = $86&255;
 _encode($77,4,$83,$87,0,1);
 $88 = ((($f)) + 7|0);
 $89 = HEAP8[$88>>0]|0;
 $90 = ($89&255) >>> 2;
 $91 = $90 & 1;
 $92 = ($91<<24>>24)!=(0);
 $93 = $8;
 $94 = $8;
 $95 = ((($94)) + 20|0);
 $96 = HEAP8[$95>>0]|0;
 $97 = $96&255;
 if ($92) {
  _encode($93,2,$97,15,0,0);
  $98 = $8;
  $99 = $8;
  $100 = ((($99)) + 20|0);
  $101 = HEAP8[$100>>0]|0;
  $102 = $101&255;
  $103 = (($102) + 1)|0;
  $104 = $103&65535;
  $105 = $8;
  $3 = 0;
  $106 = $3;
  $107 = (+($106>>>0));
  HEAPF32[$4>>2] = $107;
  $108 = HEAP32[$4>>2]|0;
  $109 = -8 & $108;
  $110 = (1 + ($109))|0;
  $111 = $110;
  $112 = (_imm($105,$111)|0);
  $113 = $112&65535;
  _encode($98,6,$104,$113,0,1);
  $114 = $8;
  $115 = $8;
  $116 = ((($115)) + 20|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = $117&255;
  $119 = $8;
  $120 = ((($119)) + 20|0);
  $121 = HEAP8[$120>>0]|0;
  $122 = $121&255;
  $123 = (($122) - 1)|0;
  $124 = $123&65535;
  $125 = $8;
  $126 = ((($125)) + 20|0);
  $127 = HEAP8[$126>>0]|0;
  $128 = $127&255;
  _encode($114,10,$118,$124,$128,0);
  $129 = $8;
  $130 = ((($129)) + 12|0);
  $131 = HEAP16[$130>>1]|0;
  $cond_offset = $131;
  $132 = $8;
  $133 = $8;
  $134 = ((($133)) + 20|0);
  $135 = HEAP8[$134>>0]|0;
  $136 = $135&255;
  _encode($132,13,$136,0,0,0);
  $137 = $8;
  $138 = $8;
  $139 = ((($138)) + 20|0);
  $140 = HEAP8[$139>>0]|0;
  $141 = $140&255;
  _encode($137,5,$141,0,0,-1);
 } else {
  $142 = ((($f)) + 2|0);
  $143 = HEAP16[$142>>1]|0;
  $144 = $143&65535;
  $145 = 0 | $144;
  $146 = $145&65535;
  $147 = ((($f)) + 2|0);
  $148 = HEAP16[$147>>1]|0;
  $149 = $148&65535;
  $150 = (($149) - 1)|0;
  _encode($93,2,$97,$146,0,$150);
  $151 = $8;
  $152 = ((($151)) + 12|0);
  $153 = HEAP16[$152>>1]|0;
  $cond_offset = $153;
  $154 = $8;
  $155 = $8;
  $156 = ((($155)) + 20|0);
  $157 = HEAP8[$156>>0]|0;
  $158 = $157&255;
  $159 = ((($f)) + 2|0);
  $160 = HEAP16[$159>>1]|0;
  $161 = $160&65535;
  $162 = (($158) - ($161))|0;
  $163 = (($162) + 1)|0;
  $164 = $163&65535;
  _encode($154,13,$164,0,0,0);
 }
 $165 = ((($f)) + 7|0);
 $166 = HEAP8[$165>>0]|0;
 $167 = ($166&255) >>> 2;
 $168 = $167 & 1;
 $169 = $168&255;
 $170 = ($169|0)!=(0);
 if ($170) {
  $175 = 1;
 } else {
  $171 = ((($f)) + 2|0);
  $172 = HEAP16[$171>>1]|0;
  $173 = $172&65535;
  $175 = $173;
 }
 $174 = $175&65535;
 $count = $174;
 $176 = $8;
 $177 = ((($176)) + 24|0);
 ;HEAP32[$lr>>2]=HEAP32[$177>>2]|0;HEAP32[$lr+4>>2]=HEAP32[$177+4>>2]|0;HEAP32[$lr+8>>2]=HEAP32[$177+8>>2]|0;HEAP32[$lr+12>>2]=HEAP32[$177+12>>2]|0;HEAP32[$lr+16>>2]=HEAP32[$177+16>>2]|0;HEAP32[$lr+20>>2]=HEAP32[$177+20>>2]|0;HEAP32[$lr+24>>2]=HEAP32[$177+24>>2]|0;
 $178 = $8;
 $179 = ((($178)) + 24|0);
 ;HEAP32[$179>>2]=HEAP32[$ll>>2]|0;HEAP32[$179+4>>2]=HEAP32[$ll+4>>2]|0;HEAP32[$179+8>>2]=HEAP32[$ll+8>>2]|0;HEAP32[$179+12>>2]=HEAP32[$ll+12>>2]|0;HEAP32[$179+16>>2]=HEAP32[$ll+16>>2]|0;HEAP32[$179+20>>2]=HEAP32[$ll+20>>2]|0;HEAP32[$179+24>>2]=HEAP32[$ll+24>>2]|0;
 $180 = $8;
 _p_frame($180,$f);
 $181 = $8;
 _expect($181,4);
 $182 = $8;
 $183 = ((($182)) + 24|0);
 dest=$2; src=$183; stop=dest+28|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $184 = ((($2)) + 16|0);
 $185 = HEAP32[$184>>2]|0;
 $1 = $185;
 $186 = $1;
 $0 = $186;
 $187 = $0;
 $188 = $187;
 $189 = 6 & $188;
 $190 = ($189|0)!=(0);
 if ($190) {
  $191 = $1;
  $192 = $191;
  $193 = -8 & $192;
  $194 = $193;
  $ref$i$i1 = $194;
  $195 = $ref$i$i1;
  $196 = HEAP16[$195>>1]|0;
  $count$i$i2 = $196;
  $197 = $count$i$i2;
  $198 = $197&65535;
  $199 = ($198|0)!=(0);
  if ($199) {
   $200 = $count$i$i2;
   $201 = (($200) + -1)<<16>>16;
   $count$i$i2 = $201;
   $202 = $count$i$i2;
   $203 = $ref$i$i1;
   HEAP16[$203>>1] = $202;
   $204 = $count$i$i2;
   $205 = $204&65535;
   $206 = ($205|0)==(0);
   if ($206) {
    $207 = $1;
    _mu_destroy($207);
   }
  }
 }
 $208 = $8;
 $209 = ((($208)) + 24|0);
 ;HEAP32[$209>>2]=HEAP32[$lr>>2]|0;HEAP32[$209+4>>2]=HEAP32[$lr+4>>2]|0;HEAP32[$209+8>>2]=HEAP32[$lr+8>>2]|0;HEAP32[$209+12>>2]=HEAP32[$lr+12>>2]|0;HEAP32[$209+16>>2]=HEAP32[$lr+16>>2]|0;HEAP32[$209+20>>2]=HEAP32[$lr+20>>2]|0;HEAP32[$209+24>>2]=HEAP32[$lr+24>>2]|0;
 $210 = $8;
 _expect($210,16777216);
 $211 = $8;
 $212 = ((($211)) + 14|0);
 $213 = HEAP16[$212>>1]|0;
 $bchain = $213;
 $214 = $8;
 $215 = ((($214)) + 14|0);
 HEAP16[$215>>1] = 0;
 $216 = $8;
 $217 = ((($216)) + 16|0);
 $218 = HEAP16[$217>>1]|0;
 $cchain = $218;
 $219 = $8;
 $220 = ((($219)) + 16|0);
 HEAP16[$220>>1] = 0;
 $221 = $8;
 _p_stmt($221);
 $222 = $8;
 $223 = $for_offset;
 $224 = $223&65535;
 $225 = $8;
 $226 = ((($225)) + 12|0);
 $227 = HEAP16[$226>>1]|0;
 $228 = $227&65535;
 $229 = (($224) - ($228))|0;
 $230 = $229&65535;
 _encode($222,15,0,$230,0,0);
 $231 = $8;
 $232 = $cond_offset;
 $233 = $8;
 $234 = ((($233)) + 12|0);
 $235 = HEAP16[$234>>1]|0;
 $236 = $235&65535;
 $237 = $cond_offset;
 $238 = $237&65535;
 $239 = (($236) - ($238))|0;
 $240 = $239&65535;
 _patch($231,$232,$240);
 $i = 0;
 while(1) {
  $241 = $i;
  $242 = $count;
  $243 = $242&65535;
  $244 = ($241>>>0)<($243>>>0);
  $245 = $8;
  $246 = $8;
  if (!($244)) {
   break;
  }
  $247 = ((($246)) + 20|0);
  $248 = HEAP8[$247>>0]|0;
  $249 = $248&255;
  $250 = (($249) + 1)|0;
  $251 = $i;
  $252 = (($250) + ($251))|0;
  $253 = $252&65535;
  _encode($245,5,$253,0,0,0);
  $254 = $i;
  $255 = (($254) + 1)|0;
  $i = $255;
 }
 $256 = ((($246)) + 14|0);
 $257 = HEAP16[$256>>1]|0;
 $258 = $8;
 $259 = ((($258)) + 12|0);
 $260 = HEAP16[$259>>1]|0;
 _patch_all($245,$257,$260);
 $261 = $8;
 $262 = $8;
 $263 = ((($262)) + 16|0);
 $264 = HEAP16[$263>>1]|0;
 $265 = $for_offset;
 _patch_all($261,$264,$265);
 $266 = $bchain;
 $267 = $8;
 $268 = ((($267)) + 14|0);
 HEAP16[$268>>1] = $266;
 $269 = $cchain;
 $270 = $8;
 $271 = ((($270)) + 16|0);
 HEAP16[$271>>1] = $269;
 $272 = $8;
 $273 = $8;
 $274 = ((($273)) + 20|0);
 $275 = HEAP8[$274>>0]|0;
 $276 = $275&255;
 _encode($272,5,$276,0,0,-1);
 STACKTOP = sp;return;
}
function _p_return($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $e = 0, $f = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp + 8|0;
 $e = sp + 16|0;
 $0 = $p;
 $1 = $0;
 $2 = ((($1)) + 20|0);
 $3 = HEAP8[$2>>0]|0;
 $sp = $3;
 while(1) {
  $4 = $0;
  $5 = ((($4)) + 20|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = ($7|0)!=(0);
  if (!($8)) {
   break;
  }
  $9 = $0;
  $10 = $0;
  $11 = ((($10)) + 20|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  _encode($9,5,$13,0,0,-1);
 }
 ;HEAP16[$f>>1]=0|0;HEAP16[$f+2>>1]=0|0;HEAP16[$f+4>>1]=0|0;HEAP16[$f+6>>1]=0|0;
 $14 = $0;
 _s_frame($14,$f,0);
 $15 = ((($f)) + 7|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16&255) >>> 5;
 $18 = $17 & 1;
 $19 = ($18<<24>>24)!=(0);
 if ($19) {
  ;HEAP8[$e>>0]=HEAP8[4487>>0]|0;HEAP8[$e+1>>0]=HEAP8[4487+1>>0]|0;HEAP8[$e+2>>0]=HEAP8[4487+2>>0]|0;HEAP8[$e+3>>0]=HEAP8[4487+3>>0]|0;
  $20 = $0;
  _p_subexpr($20,$e);
  $21 = $0;
  $22 = $0;
  $23 = ((($22)) + 20|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = ((($e)) + 1|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = ($28|0)==(15);
  if ($29) {
   $34 = 1;
  } else {
   $30 = ((($e)) + 1|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $34 = $32;
  }
  $33 = (($25) - ($34))|0;
  $35 = $33&65535;
  $36 = ((($e)) + 1|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = ((($e)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = ($41|0)==(15);
  if ($42) {
   $47 = 1;
  } else {
   $43 = ((($e)) + 1|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $47 = $45;
  }
  $46 = (0 - ($47))|0;
  $48 = (($46) - 1)|0;
  _encode($21,1,$35,$38,0,$48);
  $90 = $sp;
  $91 = $0;
  $92 = ((($91)) + 20|0);
  HEAP8[$92>>0] = $90;
  STACKTOP = sp;return;
 }
 $49 = $0;
 _p_frame($49,$f);
 $50 = $0;
 $51 = $0;
 $52 = ((($51)) + 20|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = $53&255;
 $55 = ((($f)) + 7|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = ($56&255) >>> 2;
 $58 = $57 & 1;
 $59 = $58&255;
 $60 = ($59|0)!=(0);
 if ($60) {
  $66 = 0;
 } else {
  $61 = ((($f)) + 2|0);
  $62 = HEAP16[$61>>1]|0;
  $63 = $62&65535;
  $64 = (($63) - 1)|0;
  $66 = $64;
 }
 $65 = (($54) - ($66))|0;
 $67 = $65&65535;
 $68 = ((($f)) + 7|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = ($69&255) >>> 2;
 $71 = $70 & 1;
 $72 = $71&255;
 $73 = ($72|0)!=(0);
 if ($73) {
  $78 = 15;
 } else {
  $74 = ((($f)) + 2|0);
  $75 = HEAP16[$74>>1]|0;
  $76 = $75&65535;
  $78 = $76;
 }
 $77 = $78&65535;
 $79 = ((($f)) + 7|0);
 $80 = HEAP8[$79>>0]|0;
 $81 = ($80&255) >>> 2;
 $82 = $81 & 1;
 $83 = $82&255;
 $84 = ($83|0)!=(0);
 if ($84) {
  $89 = 1;
 } else {
  $85 = ((($f)) + 2|0);
  $86 = HEAP16[$85>>1]|0;
  $87 = $86&65535;
  $89 = $87;
 }
 $88 = (0 - ($89))|0;
 _encode($50,0,$67,$77,0,$88);
 $90 = $sp;
 $91 = $0;
 $92 = ((($91)) + 20|0);
 HEAP8[$92>>0] = $90;
 STACKTOP = sp;return;
}
function _p_assign($p,$insert) {
 $p = $p|0;
 $insert = $insert|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $count$i$i = 0, $count$i$i2 = 0, $count$i$i4 = 0, $fl = 0, $fr = 0, $ll = 0, $lr = 0, $ref$i$i = 0, $ref$i$i1 = 0, $ref$i$i3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 80|0;
 $5 = sp + 40|0;
 $8 = sp;
 $ll = sp + 144|0;
 $fl = sp + 224|0;
 $fr = sp + 216|0;
 $lr = sp + 116|0;
 $9 = $p;
 $11 = $insert&1;
 $10 = $11;
 $12 = $9;
 $13 = ((($12)) + 24|0);
 dest=$8; src=$13; stop=dest+28|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $14 = ((($8)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $7 = $15;
 $16 = $7;
 $6 = $16;
 $17 = $6;
 $18 = $17;
 $19 = 6 & $18;
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = $7;
  $22 = $21;
  $23 = -8 & $22;
  $24 = $23;
  $ref$i$i = $24;
  $25 = $ref$i$i;
  $26 = HEAP16[$25>>1]|0;
  $count$i$i = $26;
  $27 = $count$i$i;
  $28 = $27&65535;
  $29 = ($28|0)!=(0);
  if ($29) {
   $30 = $count$i$i;
   $31 = (($30) + 1)<<16>>16;
   $count$i$i = $31;
   $32 = $count$i$i;
   $33 = $ref$i$i;
   HEAP16[$33>>1] = $32;
  }
 }
 ;HEAP32[$ll>>2]=HEAP32[$8>>2]|0;HEAP32[$ll+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$ll+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$ll+12>>2]=HEAP32[$8+12>>2]|0;HEAP32[$ll+16>>2]=HEAP32[$8+16>>2]|0;HEAP32[$ll+20>>2]=HEAP32[$8+20>>2]|0;HEAP32[$ll+24>>2]=HEAP32[$8+24>>2]|0;
 HEAP16[$fl>>1] = 0;
 $34 = ((($fl)) + 2|0);
 HEAP16[$34>>1] = 0;
 $35 = ((($fl)) + 4|0);
 HEAP16[$35>>1] = 0;
 $36 = ((($fl)) + 6|0);
 HEAP8[$36>>0] = 0;
 $37 = ((($fl)) + 7|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38 & -2;
 HEAP8[$37>>0] = $39;
 $40 = ((($fl)) + 7|0);
 $41 = $10;
 $42 = $41&1;
 $43 = $42&1;
 $44 = HEAP8[$40>>0]|0;
 $45 = $43 & 1;
 $46 = ($45 << 1)&255;
 $47 = $44 & -3;
 $48 = $47 | $46;
 HEAP8[$40>>0] = $48;
 $49 = ((($fl)) + 7|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50 & -5;
 HEAP8[$49>>0] = $51;
 $52 = ((($fl)) + 7|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = $53 & -9;
 HEAP8[$52>>0] = $54;
 $55 = ((($fl)) + 7|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = $56 & -17;
 HEAP8[$55>>0] = $57;
 $58 = ((($fl)) + 7|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59 & -33;
 HEAP8[$58>>0] = $60;
 $61 = ((($fl)) + 7|0);
 $62 = HEAP8[$61>>0]|0;
 $63 = $62 & -65;
 HEAP8[$61>>0] = $63;
 $64 = $9;
 _s_frame($64,$fl,1);
 $65 = $9;
 $66 = (_match($65,4)|0);
 if (!($66)) {
  $166 = $10;
  $167 = $166&1;
  $168 = $9;
  if ($167) {
   _unexpected($168);
   // unreachable;
  }
  $169 = ((($168)) + 24|0);
  dest=$2; src=$169; stop=dest+28|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $170 = ((($2)) + 16|0);
  $171 = HEAP32[$170>>2]|0;
  $1 = $171;
  $172 = $1;
  $0 = $172;
  $173 = $0;
  $174 = $173;
  $175 = 6 & $174;
  $176 = ($175|0)!=(0);
  if ($176) {
   $177 = $1;
   $178 = $177;
   $179 = -8 & $178;
   $180 = $179;
   $ref$i$i3 = $180;
   $181 = $ref$i$i3;
   $182 = HEAP16[$181>>1]|0;
   $count$i$i4 = $182;
   $183 = $count$i$i4;
   $184 = $183&65535;
   $185 = ($184|0)!=(0);
   if ($185) {
    $186 = $count$i$i4;
    $187 = (($186) + -1)<<16>>16;
    $count$i$i4 = $187;
    $188 = $count$i$i4;
    $189 = $ref$i$i3;
    HEAP16[$189>>1] = $188;
    $190 = $count$i$i4;
    $191 = $190&65535;
    $192 = ($191|0)==(0);
    if ($192) {
     $193 = $1;
     _mu_destroy($193);
    }
   }
  }
  $194 = $9;
  $195 = ((($194)) + 24|0);
  ;HEAP32[$195>>2]=HEAP32[$ll>>2]|0;HEAP32[$195+4>>2]=HEAP32[$ll+4>>2]|0;HEAP32[$195+8>>2]=HEAP32[$ll+8>>2]|0;HEAP32[$195+12>>2]=HEAP32[$ll+12>>2]|0;HEAP32[$195+16>>2]=HEAP32[$ll+16>>2]|0;HEAP32[$195+20>>2]=HEAP32[$ll+20>>2]|0;HEAP32[$195+24>>2]=HEAP32[$ll+24>>2]|0;
  $196 = ((($fl)) + 7|0);
  $197 = HEAP8[$196>>0]|0;
  $198 = $197 & -2;
  HEAP8[$196>>0] = $198;
  $199 = ((($fl)) + 7|0);
  $200 = HEAP8[$199>>0]|0;
  $201 = $200 & -5;
  HEAP8[$199>>0] = $201;
  HEAP16[$fl>>1] = 0;
  $202 = $9;
  _p_frame($202,$fl);
  STACKTOP = sp;return;
 }
 ;HEAP16[$fr>>1]=0|0;HEAP16[$fr+2>>1]=0|0;HEAP16[$fr+4>>1]=0|0;HEAP16[$fr+6>>1]=0|0;
 $67 = $9;
 _s_frame($67,$fr,0);
 $68 = ((($fr)) + 2|0);
 $69 = HEAP16[$68>>1]|0;
 $70 = $69&65535;
 $71 = ($70|0)!=(0);
 if ($71) {
  label = 7;
 } else {
  $72 = ((($fr)) + 7|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = ($73&255) >>> 2;
  $75 = $74 & 1;
  $76 = $75&255;
  $77 = ($76|0)!=(0);
  if ($77) {
   label = 7;
  } else {
   label = 9;
  }
 }
 if ((label|0) == 7) {
  $78 = ((($fl)) + 2|0);
  $79 = HEAP16[$78>>1]|0;
  $80 = $79&65535;
  $81 = ($80|0)!=(0);
  if (!($81)) {
   $82 = ((($fl)) + 7|0);
   $83 = HEAP8[$82>>0]|0;
   $84 = ($83&255) >>> 2;
   $85 = $84 & 1;
   $86 = $85&255;
   $87 = ($86|0)!=(0);
   if (!($87)) {
    label = 9;
   }
  }
 }
 if ((label|0) == 9) {
  $88 = $9;
  $89 = ((($88)) + 24|0);
  _mu_errorassign($89);
 }
 $90 = ((($fr)) + 7|0);
 $91 = HEAP8[$90>>0]|0;
 $92 = ($91&255) >>> 2;
 $93 = $92 & 1;
 $94 = $93&255;
 $95 = ($94|0)!=(0);
 if ($95) {
  $103 = 1;
 } else {
  $96 = ((($fl)) + 7|0);
  $97 = HEAP8[$96>>0]|0;
  $98 = ($97&255) >>> 2;
  $99 = $98 & 1;
  $100 = $99&255;
  $101 = ($100|0)!=(0);
  $103 = $101;
 }
 $102 = $103&1;
 $104 = $102&255;
 $105 = ((($fr)) + 7|0);
 $106 = HEAP8[$105>>0]|0;
 $107 = $104 & 1;
 $108 = ($107 << 2)&255;
 $109 = $106 & -5;
 $110 = $109 | $108;
 HEAP8[$105>>0] = $110;
 $111 = ((($fl)) + 2|0);
 $112 = HEAP16[$111>>1]|0;
 HEAP16[$fr>>1] = $112;
 $113 = ((($fl)) + 7|0);
 $114 = HEAP8[$113>>0]|0;
 $115 = ($114&255) >>> 2;
 $116 = $115 & 1;
 $117 = ($116<<24>>24)!=(0);
 $118 = $117 ^ 1;
 $119 = $118&1;
 $120 = $119&255;
 $121 = ((($fr)) + 7|0);
 $122 = HEAP8[$121>>0]|0;
 $123 = $120 & 1;
 $124 = ($123 << 3)&255;
 $125 = $122 & -9;
 $126 = $125 | $124;
 HEAP8[$121>>0] = $126;
 $127 = $9;
 _p_frame($127,$fr);
 $128 = $9;
 $129 = ((($128)) + 24|0);
 ;HEAP32[$lr>>2]=HEAP32[$129>>2]|0;HEAP32[$lr+4>>2]=HEAP32[$129+4>>2]|0;HEAP32[$lr+8>>2]=HEAP32[$129+8>>2]|0;HEAP32[$lr+12>>2]=HEAP32[$129+12>>2]|0;HEAP32[$lr+16>>2]=HEAP32[$129+16>>2]|0;HEAP32[$lr+20>>2]=HEAP32[$129+20>>2]|0;HEAP32[$lr+24>>2]=HEAP32[$129+24>>2]|0;
 $130 = $9;
 $131 = ((($130)) + 24|0);
 ;HEAP32[$131>>2]=HEAP32[$ll>>2]|0;HEAP32[$131+4>>2]=HEAP32[$ll+4>>2]|0;HEAP32[$131+8>>2]=HEAP32[$ll+8>>2]|0;HEAP32[$131+12>>2]=HEAP32[$ll+12>>2]|0;HEAP32[$131+16>>2]=HEAP32[$ll+16>>2]|0;HEAP32[$131+20>>2]=HEAP32[$ll+20>>2]|0;HEAP32[$131+24>>2]=HEAP32[$ll+24>>2]|0;
 $132 = ((($fl)) + 7|0);
 $133 = HEAP8[$132>>0]|0;
 $134 = $133 & -2;
 $135 = $134 | 1;
 HEAP8[$132>>0] = $135;
 $136 = $9;
 _p_frame($136,$fl);
 $137 = $9;
 _expect($137,4);
 $138 = $9;
 $139 = ((($138)) + 24|0);
 dest=$5; src=$139; stop=dest+28|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $140 = ((($5)) + 16|0);
 $141 = HEAP32[$140>>2]|0;
 $4 = $141;
 $142 = $4;
 $3 = $142;
 $143 = $3;
 $144 = $143;
 $145 = 6 & $144;
 $146 = ($145|0)!=(0);
 if ($146) {
  $147 = $4;
  $148 = $147;
  $149 = -8 & $148;
  $150 = $149;
  $ref$i$i1 = $150;
  $151 = $ref$i$i1;
  $152 = HEAP16[$151>>1]|0;
  $count$i$i2 = $152;
  $153 = $count$i$i2;
  $154 = $153&65535;
  $155 = ($154|0)!=(0);
  if ($155) {
   $156 = $count$i$i2;
   $157 = (($156) + -1)<<16>>16;
   $count$i$i2 = $157;
   $158 = $count$i$i2;
   $159 = $ref$i$i1;
   HEAP16[$159>>1] = $158;
   $160 = $count$i$i2;
   $161 = $160&65535;
   $162 = ($161|0)==(0);
   if ($162) {
    $163 = $4;
    _mu_destroy($163);
   }
  }
 }
 $164 = $9;
 $165 = ((($164)) + 24|0);
 ;HEAP32[$165>>2]=HEAP32[$lr>>2]|0;HEAP32[$165+4>>2]=HEAP32[$lr+4>>2]|0;HEAP32[$165+8>>2]=HEAP32[$lr+8>>2]|0;HEAP32[$165+12>>2]=HEAP32[$lr+12>>2]|0;HEAP32[$165+16>>2]=HEAP32[$lr+16>>2]|0;HEAP32[$165+20>>2]=HEAP32[$lr+20>>2]|0;HEAP32[$165+24>>2]=HEAP32[$lr+24>>2]|0;
 STACKTOP = sp;return;
}
function _mu_compile($s,$n,$scope) {
 $s = $s|0;
 $n = $n|0;
 $scope = $scope|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i$i = 0, $p = 0, $ref$i$i = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $p = sp + 36|0;
 $3 = $s;
 $4 = $n;
 $5 = $scope;
 $6 = $5;
 $7 = (_mu_tbl_createtail(0,$6)|0);
 HEAP32[$p>>2] = $7;
 $8 = ((($p)) + 4|0);
 $9 = (_mu_tbl_create(0)|0);
 HEAP32[$8>>2] = $9;
 $10 = ((($p)) + 8|0);
 $11 = (_mu_buf_create(0)|0);
 HEAP32[$10>>2] = $11;
 $12 = ((($p)) + 12|0);
 HEAP16[$12>>1] = 0;
 $13 = ((($p)) + 14|0);
 HEAP16[$13>>1] = -1;
 $14 = ((($p)) + 16|0);
 HEAP16[$14>>1] = -1;
 $15 = ((($p)) + 18|0);
 HEAP8[$15>>0] = 0;
 $16 = ((($p)) + 19|0);
 HEAP8[$16>>0] = 1;
 $17 = ((($p)) + 20|0);
 HEAP8[$17>>0] = 0;
 $18 = ((($p)) + 21|0);
 HEAP8[$18>>0] = 0;
 $19 = ((($p)) + 24|0);
 ;HEAP32[$19>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;HEAP32[$19+12>>2]=0|0;HEAP32[$19+16>>2]=0|0;HEAP32[$19+20>>2]=0|0;HEAP32[$19+24>>2]=0|0;
 $20 = ((($p)) + 52|0);
 ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;
 $21 = ((($p)) + 24|0);
 $22 = $3;
 $23 = $3;
 $24 = $4;
 $25 = (($23) + ($24)|0);
 _lex_init($21,$22,$25);
 _p_block($p,1);
 $26 = ((($p)) + 24|0);
 $27 = ((($26)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0);
 if ($29) {
  _unexpected($p);
  // unreachable;
 }
 _encode($p,0,0,0,0,0);
 $30 = ((($p)) + 24|0);
 dest=$2; src=$30; stop=dest+28|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $31 = ((($2)) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $1 = $32;
 $33 = $1;
 $0 = $33;
 $34 = $0;
 $35 = $34;
 $36 = 6 & $35;
 $37 = ($36|0)!=(0);
 if (!($37)) {
  $55 = (_compile($p,0)|0);
  STACKTOP = sp;return ($55|0);
 }
 $38 = $1;
 $39 = $38;
 $40 = -8 & $39;
 $41 = $40;
 $ref$i$i = $41;
 $42 = $ref$i$i;
 $43 = HEAP16[$42>>1]|0;
 $count$i$i = $43;
 $44 = $count$i$i;
 $45 = $44&65535;
 $46 = ($45|0)!=(0);
 if (!($46)) {
  $55 = (_compile($p,0)|0);
  STACKTOP = sp;return ($55|0);
 }
 $47 = $count$i$i;
 $48 = (($47) + -1)<<16>>16;
 $count$i$i = $48;
 $49 = $count$i$i;
 $50 = $ref$i$i;
 HEAP16[$50>>1] = $49;
 $51 = $count$i$i;
 $52 = $51&65535;
 $53 = ($52|0)==(0);
 if (!($53)) {
  $55 = (_compile($p,0)|0);
  STACKTOP = sp;return ($55|0);
 }
 $54 = $1;
 _mu_destroy($54);
 $55 = (_compile($p,0)|0);
 STACKTOP = sp;return ($55|0);
}
function _mu_encode($emit,$p,$op,$d,$a,$b) {
 $emit = $emit|0;
 $p = $p|0;
 $op = $op|0;
 $d = $d|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $ins = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ins = sp + 24|0;
 $0 = $emit;
 $1 = $p;
 $2 = $op;
 $3 = $d;
 $4 = $a;
 $5 = $b;
 $6 = $2;
 $7 = ($6>>>0)<=(15);
 $8 = $3;
 $9 = ($8|0)<=(15);
 $or$cond = $7 & $9;
 if (!($or$cond)) {
  _mu_errorbcode();
  // unreachable;
 }
 $10 = $2;
 $11 = $10 << 12;
 $12 = 61440 & $11;
 $13 = $12&65535;
 HEAP16[$ins>>1] = $13;
 $14 = $3;
 $15 = $14 << 8;
 $16 = 3840 & $15;
 $17 = HEAP16[$ins>>1]|0;
 $18 = $17&65535;
 $19 = $18 | $16;
 $20 = $19&65535;
 HEAP16[$ins>>1] = $20;
 $21 = $2;
 $22 = ($21>>>0)>=(0);
 $23 = $2;
 $24 = ($23>>>0)<=(5);
 $or$cond3 = $22 & $24;
 if ($or$cond3) {
  $25 = $4;
  $26 = ($25|0)<=(255);
  if (!($26)) {
   _mu_errorbcode();
   // unreachable;
  }
  $27 = $4;
  $28 = 255 & $27;
  $29 = HEAP16[$ins>>1]|0;
  $30 = $29&65535;
  $31 = $30 | $28;
  $32 = $31&65535;
  HEAP16[$ins>>1] = $32;
  $33 = $0;
  $34 = $1;
  $35 = HEAP8[$ins>>0]|0;
  FUNCTION_TABLE_vii[$33 & 511]($34,$35);
  $36 = $0;
  $37 = $1;
  $38 = ((($ins)) + 1|0);
  $39 = HEAP8[$38>>0]|0;
  FUNCTION_TABLE_vii[$36 & 511]($37,$39);
  STACKTOP = sp;return;
 }
 $40 = $2;
 $41 = ($40>>>0)>=(9);
 $42 = $2;
 $43 = ($42>>>0)<=(12);
 $or$cond5 = $41 & $43;
 if ($or$cond5) {
  $44 = $4;
  $45 = ($44|0)<=(15);
  $46 = $5;
  $47 = ($46|0)<=(15);
  $or$cond7 = $45 & $47;
  if (!($or$cond7)) {
   _mu_errorbcode();
   // unreachable;
  }
  $48 = $4;
  $49 = $48 << 4;
  $50 = 240 & $49;
  $51 = HEAP16[$ins>>1]|0;
  $52 = $51&65535;
  $53 = $52 | $50;
  $54 = $53&65535;
  HEAP16[$ins>>1] = $54;
  $55 = $5;
  $56 = 15 & $55;
  $57 = HEAP16[$ins>>1]|0;
  $58 = $57&65535;
  $59 = $58 | $56;
  $60 = $59&65535;
  HEAP16[$ins>>1] = $60;
  $61 = $0;
  $62 = $1;
  $63 = HEAP8[$ins>>0]|0;
  FUNCTION_TABLE_vii[$61 & 511]($62,$63);
  $64 = $0;
  $65 = $1;
  $66 = ((($ins)) + 1|0);
  $67 = HEAP8[$66>>0]|0;
  FUNCTION_TABLE_vii[$64 & 511]($65,$67);
  STACKTOP = sp;return;
 }
 $68 = $2;
 $69 = ($68>>>0)>=(6);
 $70 = $2;
 $71 = ($70>>>0)<=(8);
 $or$cond9 = $69 & $71;
 if (!($or$cond9)) {
  $109 = $2;
  $110 = ($109>>>0)>=(13);
  $111 = $2;
  $112 = ($111>>>0)<=(15);
  $or$cond11 = $110 & $112;
  if (!($or$cond11)) {
   STACKTOP = sp;return;
  }
  $113 = $4;
  $114 = (($113|0) / 2)&-1;
  $115 = (($114) - 2)|0;
  $4 = $115;
  $116 = $4;
  $117 = ($116|0)<=(32767);
  $118 = $4;
  $119 = ($118|0)>=(-32768);
  $or$cond13 = $117 & $119;
  if (!($or$cond13)) {
   _mu_errorbcode();
   // unreachable;
  }
  $120 = HEAP16[$ins>>1]|0;
  $121 = $120&65535;
  $122 = $121 | 255;
  $123 = $122&65535;
  HEAP16[$ins>>1] = $123;
  $124 = $0;
  $125 = $1;
  $126 = HEAP8[$ins>>0]|0;
  FUNCTION_TABLE_vii[$124 & 511]($125,$126);
  $127 = $0;
  $128 = $1;
  $129 = ((($ins)) + 1|0);
  $130 = HEAP8[$129>>0]|0;
  FUNCTION_TABLE_vii[$127 & 511]($128,$130);
  $131 = $4;
  $132 = $131&65535;
  HEAP16[$ins>>1] = $132;
  $133 = $0;
  $134 = $1;
  $135 = HEAP8[$ins>>0]|0;
  FUNCTION_TABLE_vii[$133 & 511]($134,$135);
  $136 = $0;
  $137 = $1;
  $138 = ((($ins)) + 1|0);
  $139 = HEAP8[$138>>0]|0;
  FUNCTION_TABLE_vii[$136 & 511]($137,$139);
  STACKTOP = sp;return;
 }
 $72 = $4;
 $73 = ($72|0)<=(65535);
 if (!($73)) {
  _mu_errorbcode();
  // unreachable;
 }
 $74 = $4;
 $75 = ($74|0)>(254);
 if ($75) {
  $76 = HEAP16[$ins>>1]|0;
  $77 = $76&65535;
  $78 = $77 | 255;
  $79 = $78&65535;
  HEAP16[$ins>>1] = $79;
  $80 = $0;
  $81 = $1;
  $82 = HEAP8[$ins>>0]|0;
  FUNCTION_TABLE_vii[$80 & 511]($81,$82);
  $83 = $0;
  $84 = $1;
  $85 = ((($ins)) + 1|0);
  $86 = HEAP8[$85>>0]|0;
  FUNCTION_TABLE_vii[$83 & 511]($84,$86);
  $87 = $4;
  $88 = $87&65535;
  HEAP16[$ins>>1] = $88;
  $89 = $0;
  $90 = $1;
  $91 = HEAP8[$ins>>0]|0;
  FUNCTION_TABLE_vii[$89 & 511]($90,$91);
  $92 = $0;
  $93 = $1;
  $94 = ((($ins)) + 1|0);
  $95 = HEAP8[$94>>0]|0;
  FUNCTION_TABLE_vii[$92 & 511]($93,$95);
  STACKTOP = sp;return;
 } else {
  $96 = $4;
  $97 = 255 & $96;
  $98 = HEAP16[$ins>>1]|0;
  $99 = $98&65535;
  $100 = $99 | $97;
  $101 = $100&65535;
  HEAP16[$ins>>1] = $101;
  $102 = $0;
  $103 = $1;
  $104 = HEAP8[$ins>>0]|0;
  FUNCTION_TABLE_vii[$102 & 511]($103,$104);
  $105 = $0;
  $106 = $1;
  $107 = ((($ins)) + 1|0);
  $108 = HEAP8[$107>>0]|0;
  FUNCTION_TABLE_vii[$105 & 511]($106,$108);
  STACKTOP = sp;return;
 }
}
function _mu_errorbcode() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _mu_errorf(4491,$vararg_buffer);
 // unreachable;
}
function _mu_patch($p,$nj) {
 $p = $p|0;
 $nj = $nj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $pj = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $nj;
 $2 = $0;
 $c = $2;
 $3 = $c;
 $4 = ((($3)) + 2|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $pj = $6;
 $7 = $1;
 $8 = (($7|0) / 2)&-1;
 $9 = (($8) - 2)|0;
 $10 = $9&65535;
 $11 = $c;
 $12 = ((($11)) + 2|0);
 HEAP16[$12>>1] = $10;
 $13 = $pj;
 STACKTOP = sp;return ($13|0);
}
function _mu_dis($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$i = 0, $count$i2 = 0, $count$i5 = 0, $end = 0, $i = 0, $imms = 0, $op = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $pc = 0, $ref$i = 0;
 var $ref$i1 = 0, $ref$i4 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer31 = 0, $vararg_buffer38 = 0, $vararg_buffer46 = 0, $vararg_buffer56 = 0, $vararg_buffer64 = 0, $vararg_buffer73 = 0, $vararg_buffer80 = 0, $vararg_buffer89 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr22 = 0, $vararg_ptr28 = 0;
 var $vararg_ptr29 = 0, $vararg_ptr30 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr36 = 0, $vararg_ptr37 = 0, $vararg_ptr41 = 0, $vararg_ptr42 = 0, $vararg_ptr43 = 0, $vararg_ptr44 = 0, $vararg_ptr45 = 0, $vararg_ptr49 = 0, $vararg_ptr50 = 0, $vararg_ptr51 = 0, $vararg_ptr52 = 0, $vararg_ptr53 = 0, $vararg_ptr54 = 0, $vararg_ptr55 = 0, $vararg_ptr59 = 0, $vararg_ptr60 = 0;
 var $vararg_ptr61 = 0, $vararg_ptr62 = 0, $vararg_ptr63 = 0, $vararg_ptr67 = 0, $vararg_ptr68 = 0, $vararg_ptr69 = 0, $vararg_ptr70 = 0, $vararg_ptr71 = 0, $vararg_ptr72 = 0, $vararg_ptr76 = 0, $vararg_ptr77 = 0, $vararg_ptr78 = 0, $vararg_ptr79 = 0, $vararg_ptr83 = 0, $vararg_ptr84 = 0, $vararg_ptr85 = 0, $vararg_ptr86 = 0, $vararg_ptr87 = 0, $vararg_ptr88 = 0, $vararg_ptr92 = 0;
 var $vararg_ptr93 = 0, $vararg_ptr94 = 0, $vararg_ptr95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer89 = sp + 280|0;
 $vararg_buffer80 = sp + 248|0;
 $vararg_buffer73 = sp + 224|0;
 $vararg_buffer64 = sp + 192|0;
 $vararg_buffer56 = sp + 168|0;
 $vararg_buffer46 = sp + 136|0;
 $vararg_buffer38 = sp + 112|0;
 $vararg_buffer31 = sp + 88|0;
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer23 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer = sp + 24|0;
 $25 = $c;
 $26 = $25;
 $24 = $26;
 $27 = $24;
 $23 = $27;
 $28 = $23;
 $29 = $28;
 $30 = -8 & $29;
 $31 = $30;
 $32 = ((($31)) + 4|0);
 $33 = ((($32)) + 8|0);
 $imms = $33;
 $34 = $25;
 $4 = $34;
 $35 = $4;
 $3 = $35;
 $36 = $3;
 $2 = $36;
 $37 = $2;
 $38 = $37;
 $39 = -8 & $38;
 $40 = $39;
 $41 = ((($40)) + 4|0);
 $42 = ((($41)) + 8|0);
 $43 = $4;
 $1 = $43;
 $44 = $1;
 $0 = $44;
 $45 = $0;
 $46 = $45;
 $47 = -8 & $46;
 $48 = $47;
 $49 = ((($48)) + 4|0);
 $50 = ((($49)) + 4|0);
 $51 = HEAP16[$50>>1]|0;
 $52 = $51&65535;
 $53 = (($42) + ($52<<2)|0);
 $pc = $53;
 $54 = $pc;
 $55 = $25;
 $6 = $55;
 $56 = $6;
 $5 = $56;
 $57 = $5;
 $58 = $57;
 $59 = -8 & $58;
 $60 = $59;
 $61 = ((($60)) + 4|0);
 $62 = ((($61)) + 6|0);
 $63 = HEAP16[$62>>1]|0;
 $64 = $63&65535;
 $65 = (($64|0) / 2)&-1;
 $66 = (($54) + ($65<<1)|0);
 $end = $66;
 $67 = $25;
 HEAP32[$vararg_buffer>>2] = $67;
 _mu_printf(4516,$vararg_buffer);
 $68 = $25;
 $8 = $68;
 $69 = $8;
 $7 = $69;
 $70 = $7;
 $71 = $70;
 $72 = -8 & $71;
 $73 = $72;
 $74 = ((($73)) + 4|0);
 $75 = ((($74)) + 2|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76&255;
 $78 = $25;
 $10 = $78;
 $79 = $10;
 $9 = $79;
 $80 = $9;
 $81 = $80;
 $82 = -8 & $81;
 $83 = $82;
 $84 = ((($83)) + 4|0);
 $85 = ((($84)) + 3|0);
 $86 = HEAP8[$85>>0]|0;
 $87 = $86&255;
 $88 = $25;
 $12 = $88;
 $89 = $12;
 $11 = $89;
 $90 = $11;
 $91 = $90;
 $92 = -8 & $91;
 $93 = $92;
 $94 = ((($93)) + 4|0);
 $95 = HEAP8[$94>>0]|0;
 $96 = $95&255;
 HEAP32[$vararg_buffer12>>2] = $77;
 $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
 HEAP32[$vararg_ptr15>>2] = $87;
 $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
 HEAP32[$vararg_ptr16>>2] = $96;
 _mu_printf(4532,$vararg_buffer12);
 $97 = $25;
 $14 = $97;
 $98 = $14;
 $13 = $98;
 $99 = $13;
 $100 = $99;
 $101 = -8 & $100;
 $102 = $101;
 $103 = ((($102)) + 4|0);
 $104 = ((($103)) + 4|0);
 $105 = HEAP16[$104>>1]|0;
 $106 = $105&65535;
 $107 = ($106|0)>(0);
 L1: do {
  if ($107) {
   _mu_printf(4568,$vararg_buffer17);
   $i = 0;
   while(1) {
    $108 = $i;
    $109 = $25;
    $16 = $109;
    $110 = $16;
    $15 = $110;
    $111 = $15;
    $112 = $111;
    $113 = -8 & $112;
    $114 = $113;
    $115 = ((($114)) + 4|0);
    $116 = ((($115)) + 4|0);
    $117 = HEAP16[$116>>1]|0;
    $118 = $117&65535;
    $119 = ($108>>>0)<($118>>>0);
    if (!($119)) {
     break L1;
    }
    $120 = $i;
    $121 = $imms;
    $122 = (($121) + ($120<<2)|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = $i;
    $125 = $imms;
    $126 = (($125) + ($124<<2)|0);
    $127 = HEAP32[$126>>2]|0;
    $18 = $127;
    $128 = $18;
    $17 = $128;
    $129 = $17;
    $130 = $129;
    $131 = 6 & $130;
    $132 = ($131|0)!=(0);
    if ($132) {
     $133 = $18;
     $134 = $133;
     $135 = -8 & $134;
     $136 = $135;
     $ref$i4 = $136;
     $137 = $ref$i4;
     $138 = HEAP16[$137>>1]|0;
     $count$i5 = $138;
     $139 = $count$i5;
     $140 = $139&65535;
     $141 = ($140|0)!=(0);
     if ($141) {
      $142 = $count$i5;
      $143 = (($142) + 1)<<16>>16;
      $count$i5 = $143;
      $144 = $count$i5;
      $145 = $ref$i4;
      HEAP16[$145>>1] = $144;
     }
    }
    $146 = $18;
    HEAP32[$vararg_buffer19>>2] = $123;
    $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
    HEAP32[$vararg_ptr22>>2] = $146;
    _mu_printf(4574,$vararg_buffer19);
    $147 = $i;
    $148 = (($147) + 1)|0;
    $i = $148;
   }
  }
 } while(0);
 _mu_printf(4583,$vararg_buffer23);
 while(1) {
  $149 = $pc;
  $150 = $end;
  $151 = ($149>>>0)<($150>>>0);
  if (!($151)) {
   break;
  }
  $152 = $pc;
  $153 = HEAP16[$152>>1]|0;
  $154 = $153&65535;
  $155 = $154 >> 12;
  $op = $155;
  $156 = $op;
  $157 = ($156|0)==(5);
  if ($157) {
   $158 = $pc;
   $159 = HEAP16[$158>>1]|0;
   $160 = $159&65535;
   $161 = $160 >> 8;
   $162 = $pc;
   $163 = HEAP16[$162>>1]|0;
   $164 = $163&65535;
   $165 = 255 & $164;
   $166 = $op;
   $167 = (3232 + ($166<<2)|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = $pc;
   $170 = HEAP16[$169>>1]|0;
   $171 = $170&65535;
   $172 = $171 >> 8;
   $173 = 15 & $172;
   HEAP32[$vararg_buffer25>>2] = $161;
   $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
   HEAP32[$vararg_ptr28>>2] = $165;
   $vararg_ptr29 = ((($vararg_buffer25)) + 8|0);
   HEAP32[$vararg_ptr29>>2] = $168;
   $vararg_ptr30 = ((($vararg_buffer25)) + 12|0);
   HEAP32[$vararg_ptr30>>2] = $173;
   _mu_printf(4676,$vararg_buffer25);
   $174 = $pc;
   $175 = ((($174)) + 2|0);
   $pc = $175;
   continue;
  }
  $176 = $op;
  $177 = ($176>>>0)>=(0);
  $178 = $op;
  $179 = ($178>>>0)<=(5);
  $or$cond = $177 & $179;
  if ($or$cond) {
   $180 = $pc;
   $181 = HEAP16[$180>>1]|0;
   $182 = $181&65535;
   $183 = $182 >> 8;
   $184 = $pc;
   $185 = HEAP16[$184>>1]|0;
   $186 = $185&65535;
   $187 = 255 & $186;
   $188 = $op;
   $189 = (3232 + ($188<<2)|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = $pc;
   $192 = HEAP16[$191>>1]|0;
   $193 = $192&65535;
   $194 = $193 >> 8;
   $195 = 15 & $194;
   $196 = $pc;
   $197 = HEAP16[$196>>1]|0;
   $198 = $197&65535;
   $199 = 255 & $198;
   HEAP32[$vararg_buffer31>>2] = $183;
   $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
   HEAP32[$vararg_ptr34>>2] = $187;
   $vararg_ptr35 = ((($vararg_buffer31)) + 8|0);
   HEAP32[$vararg_ptr35>>2] = $190;
   $vararg_ptr36 = ((($vararg_buffer31)) + 12|0);
   HEAP32[$vararg_ptr36>>2] = $195;
   $vararg_ptr37 = ((($vararg_buffer31)) + 16|0);
   HEAP32[$vararg_ptr37>>2] = $199;
   _mu_printf(4695,$vararg_buffer31);
   $200 = $pc;
   $201 = ((($200)) + 2|0);
   $pc = $201;
   continue;
  }
  $202 = $op;
  $203 = ($202>>>0)>=(9);
  $204 = $op;
  $205 = ($204>>>0)<=(12);
  $or$cond3 = $203 & $205;
  if ($or$cond3) {
   $206 = $pc;
   $207 = HEAP16[$206>>1]|0;
   $208 = $207&65535;
   $209 = $208 >> 8;
   $210 = $pc;
   $211 = HEAP16[$210>>1]|0;
   $212 = $211&65535;
   $213 = 255 & $212;
   $214 = $op;
   $215 = (3232 + ($214<<2)|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = $pc;
   $218 = HEAP16[$217>>1]|0;
   $219 = $218&65535;
   $220 = $219 >> 8;
   $221 = 15 & $220;
   $222 = $pc;
   $223 = HEAP16[$222>>1]|0;
   $224 = $223&65535;
   $225 = $224 >> 4;
   $226 = 15 & $225;
   $227 = $pc;
   $228 = HEAP16[$227>>1]|0;
   $229 = $228&65535;
   $230 = 15 & $229;
   HEAP32[$vararg_buffer38>>2] = $209;
   $vararg_ptr41 = ((($vararg_buffer38)) + 4|0);
   HEAP32[$vararg_ptr41>>2] = $213;
   $vararg_ptr42 = ((($vararg_buffer38)) + 8|0);
   HEAP32[$vararg_ptr42>>2] = $216;
   $vararg_ptr43 = ((($vararg_buffer38)) + 12|0);
   HEAP32[$vararg_ptr43>>2] = $221;
   $vararg_ptr44 = ((($vararg_buffer38)) + 16|0);
   HEAP32[$vararg_ptr44>>2] = $226;
   $vararg_ptr45 = ((($vararg_buffer38)) + 20|0);
   HEAP32[$vararg_ptr45>>2] = $230;
   _mu_printf(4721,$vararg_buffer38);
   $231 = $pc;
   $232 = ((($231)) + 2|0);
   $pc = $232;
   continue;
  }
  $233 = $op;
  $234 = ($233|0)==(6);
  if ($234) {
   $235 = $pc;
   $236 = HEAP16[$235>>1]|0;
   $237 = $236&65535;
   $238 = 255 & $237;
   $239 = ($238|0)==(255);
   if ($239) {
    $240 = $pc;
    $241 = HEAP16[$240>>1]|0;
    $242 = $241&65535;
    $243 = $242 >> 8;
    $244 = $pc;
    $245 = HEAP16[$244>>1]|0;
    $246 = $245&65535;
    $247 = 255 & $246;
    $248 = $pc;
    $249 = ((($248)) + 2|0);
    $250 = HEAP16[$249>>1]|0;
    $251 = $250&65535;
    $252 = $251 >> 8;
    $253 = $pc;
    $254 = ((($253)) + 2|0);
    $255 = HEAP16[$254>>1]|0;
    $256 = $255&65535;
    $257 = 255 & $256;
    $258 = $op;
    $259 = (3232 + ($258<<2)|0);
    $260 = HEAP32[$259>>2]|0;
    $261 = $pc;
    $262 = HEAP16[$261>>1]|0;
    $263 = $262&65535;
    $264 = $263 >> 8;
    $265 = 15 & $264;
    $266 = $pc;
    $267 = ((($266)) + 2|0);
    $268 = HEAP16[$267>>1]|0;
    $269 = $268&65535;
    $270 = $pc;
    $271 = ((($270)) + 2|0);
    $272 = HEAP16[$271>>1]|0;
    $273 = $272&65535;
    $274 = $imms;
    $275 = (($274) + ($273<<2)|0);
    $276 = HEAP32[$275>>2]|0;
    $20 = $276;
    $277 = $20;
    $19 = $277;
    $278 = $19;
    $279 = $278;
    $280 = 6 & $279;
    $281 = ($280|0)!=(0);
    if ($281) {
     $282 = $20;
     $283 = $282;
     $284 = -8 & $283;
     $285 = $284;
     $ref$i1 = $285;
     $286 = $ref$i1;
     $287 = HEAP16[$286>>1]|0;
     $count$i2 = $287;
     $288 = $count$i2;
     $289 = $288&65535;
     $290 = ($289|0)!=(0);
     if ($290) {
      $291 = $count$i2;
      $292 = (($291) + 1)<<16>>16;
      $count$i2 = $292;
      $293 = $count$i2;
      $294 = $ref$i1;
      HEAP16[$294>>1] = $293;
     }
    }
    $295 = $20;
    HEAP32[$vararg_buffer46>>2] = $243;
    $vararg_ptr49 = ((($vararg_buffer46)) + 4|0);
    HEAP32[$vararg_ptr49>>2] = $247;
    $vararg_ptr50 = ((($vararg_buffer46)) + 8|0);
    HEAP32[$vararg_ptr50>>2] = $252;
    $vararg_ptr51 = ((($vararg_buffer46)) + 12|0);
    HEAP32[$vararg_ptr51>>2] = $257;
    $vararg_ptr52 = ((($vararg_buffer46)) + 16|0);
    HEAP32[$vararg_ptr52>>2] = $260;
    $vararg_ptr53 = ((($vararg_buffer46)) + 20|0);
    HEAP32[$vararg_ptr53>>2] = $265;
    $vararg_ptr54 = ((($vararg_buffer46)) + 24|0);
    HEAP32[$vararg_ptr54>>2] = $269;
    $vararg_ptr55 = ((($vararg_buffer46)) + 28|0);
    HEAP32[$vararg_ptr55>>2] = $295;
    _mu_printf(4750,$vararg_buffer46);
    $296 = $pc;
    $297 = ((($296)) + 4|0);
    $pc = $297;
    continue;
   }
  }
  $298 = $op;
  $299 = ($298|0)==(6);
  if ($299) {
   $300 = $pc;
   $301 = HEAP16[$300>>1]|0;
   $302 = $301&65535;
   $303 = $302 >> 8;
   $304 = $pc;
   $305 = HEAP16[$304>>1]|0;
   $306 = $305&65535;
   $307 = 255 & $306;
   $308 = $op;
   $309 = (3232 + ($308<<2)|0);
   $310 = HEAP32[$309>>2]|0;
   $311 = $pc;
   $312 = HEAP16[$311>>1]|0;
   $313 = $312&65535;
   $314 = $313 >> 8;
   $315 = 15 & $314;
   $316 = $pc;
   $317 = HEAP16[$316>>1]|0;
   $318 = $317&65535;
   $319 = 127 & $318;
   $320 = $pc;
   $321 = HEAP16[$320>>1]|0;
   $322 = $321&65535;
   $323 = 127 & $322;
   $324 = $imms;
   $325 = (($324) + ($323<<2)|0);
   $326 = HEAP32[$325>>2]|0;
   $22 = $326;
   $327 = $22;
   $21 = $327;
   $328 = $21;
   $329 = $328;
   $330 = 6 & $329;
   $331 = ($330|0)!=(0);
   if ($331) {
    $332 = $22;
    $333 = $332;
    $334 = -8 & $333;
    $335 = $334;
    $ref$i = $335;
    $336 = $ref$i;
    $337 = HEAP16[$336>>1]|0;
    $count$i = $337;
    $338 = $count$i;
    $339 = $338&65535;
    $340 = ($339|0)!=(0);
    if ($340) {
     $341 = $count$i;
     $342 = (($341) + 1)<<16>>16;
     $count$i = $342;
     $343 = $count$i;
     $344 = $ref$i;
     HEAP16[$344>>1] = $343;
    }
   }
   $345 = $22;
   HEAP32[$vararg_buffer56>>2] = $303;
   $vararg_ptr59 = ((($vararg_buffer56)) + 4|0);
   HEAP32[$vararg_ptr59>>2] = $307;
   $vararg_ptr60 = ((($vararg_buffer56)) + 8|0);
   HEAP32[$vararg_ptr60>>2] = $310;
   $vararg_ptr61 = ((($vararg_buffer56)) + 12|0);
   HEAP32[$vararg_ptr61>>2] = $315;
   $vararg_ptr62 = ((($vararg_buffer56)) + 16|0);
   HEAP32[$vararg_ptr62>>2] = $319;
   $vararg_ptr63 = ((($vararg_buffer56)) + 20|0);
   HEAP32[$vararg_ptr63>>2] = $345;
   _mu_printf(4780,$vararg_buffer56);
   $346 = $pc;
   $347 = ((($346)) + 2|0);
   $pc = $347;
   continue;
  }
  $348 = $op;
  $349 = ($348>>>0)>=(6);
  $350 = $op;
  $351 = ($350>>>0)<=(8);
  $or$cond5 = $349 & $351;
  if ($or$cond5) {
   $352 = $pc;
   $353 = HEAP16[$352>>1]|0;
   $354 = $353&65535;
   $355 = 255 & $354;
   $356 = ($355|0)==(255);
   if ($356) {
    $357 = $pc;
    $358 = HEAP16[$357>>1]|0;
    $359 = $358&65535;
    $360 = $359 >> 8;
    $361 = $pc;
    $362 = HEAP16[$361>>1]|0;
    $363 = $362&65535;
    $364 = 255 & $363;
    $365 = $pc;
    $366 = ((($365)) + 2|0);
    $367 = HEAP16[$366>>1]|0;
    $368 = $367&65535;
    $369 = $368 >> 8;
    $370 = $pc;
    $371 = ((($370)) + 2|0);
    $372 = HEAP16[$371>>1]|0;
    $373 = $372&65535;
    $374 = 255 & $373;
    $375 = $op;
    $376 = (3232 + ($375<<2)|0);
    $377 = HEAP32[$376>>2]|0;
    $378 = $pc;
    $379 = HEAP16[$378>>1]|0;
    $380 = $379&65535;
    $381 = $380 >> 8;
    $382 = 15 & $381;
    $383 = $pc;
    $384 = ((($383)) + 2|0);
    $385 = HEAP16[$384>>1]|0;
    $386 = $385&65535;
    HEAP32[$vararg_buffer64>>2] = $360;
    $vararg_ptr67 = ((($vararg_buffer64)) + 4|0);
    HEAP32[$vararg_ptr67>>2] = $364;
    $vararg_ptr68 = ((($vararg_buffer64)) + 8|0);
    HEAP32[$vararg_ptr68>>2] = $369;
    $vararg_ptr69 = ((($vararg_buffer64)) + 12|0);
    HEAP32[$vararg_ptr69>>2] = $374;
    $vararg_ptr70 = ((($vararg_buffer64)) + 16|0);
    HEAP32[$vararg_ptr70>>2] = $377;
    $vararg_ptr71 = ((($vararg_buffer64)) + 20|0);
    HEAP32[$vararg_ptr71>>2] = $382;
    $vararg_ptr72 = ((($vararg_buffer64)) + 24|0);
    HEAP32[$vararg_ptr72>>2] = $386;
    _mu_printf(4808,$vararg_buffer64);
    $387 = $pc;
    $388 = ((($387)) + 4|0);
    $pc = $388;
    continue;
   }
  }
  $389 = $op;
  $390 = ($389>>>0)>=(6);
  $391 = $op;
  $392 = ($391>>>0)<=(8);
  $or$cond7 = $390 & $392;
  if ($or$cond7) {
   $393 = $pc;
   $394 = HEAP16[$393>>1]|0;
   $395 = $394&65535;
   $396 = $395 >> 8;
   $397 = $pc;
   $398 = HEAP16[$397>>1]|0;
   $399 = $398&65535;
   $400 = 255 & $399;
   $401 = $op;
   $402 = (3232 + ($401<<2)|0);
   $403 = HEAP32[$402>>2]|0;
   $404 = $pc;
   $405 = HEAP16[$404>>1]|0;
   $406 = $405&65535;
   $407 = $406 >> 8;
   $408 = 15 & $407;
   $409 = $pc;
   $410 = HEAP16[$409>>1]|0;
   $411 = $410&65535;
   $412 = 127 & $411;
   HEAP32[$vararg_buffer73>>2] = $396;
   $vararg_ptr76 = ((($vararg_buffer73)) + 4|0);
   HEAP32[$vararg_ptr76>>2] = $400;
   $vararg_ptr77 = ((($vararg_buffer73)) + 8|0);
   HEAP32[$vararg_ptr77>>2] = $403;
   $vararg_ptr78 = ((($vararg_buffer73)) + 12|0);
   HEAP32[$vararg_ptr78>>2] = $408;
   $vararg_ptr79 = ((($vararg_buffer73)) + 16|0);
   HEAP32[$vararg_ptr79>>2] = $412;
   _mu_printf(4833,$vararg_buffer73);
   $413 = $pc;
   $414 = ((($413)) + 2|0);
   $pc = $414;
   continue;
  }
  $415 = $op;
  $416 = ($415>>>0)>=(13);
  $417 = $op;
  $418 = ($417>>>0)<=(15);
  $or$cond9 = $416 & $418;
  if ($or$cond9) {
   $419 = $pc;
   $420 = HEAP16[$419>>1]|0;
   $421 = $420&65535;
   $422 = 255 & $421;
   $423 = ($422|0)==(255);
   if ($423) {
    $424 = $pc;
    $425 = HEAP16[$424>>1]|0;
    $426 = $425&65535;
    $427 = $426 >> 8;
    $428 = $pc;
    $429 = HEAP16[$428>>1]|0;
    $430 = $429&65535;
    $431 = 255 & $430;
    $432 = $pc;
    $433 = ((($432)) + 2|0);
    $434 = HEAP16[$433>>1]|0;
    $435 = $434&65535;
    $436 = $435 >> 8;
    $437 = $pc;
    $438 = ((($437)) + 2|0);
    $439 = HEAP16[$438>>1]|0;
    $440 = $439&65535;
    $441 = 255 & $440;
    $442 = $op;
    $443 = (3232 + ($442<<2)|0);
    $444 = HEAP32[$443>>2]|0;
    $445 = $pc;
    $446 = HEAP16[$445>>1]|0;
    $447 = $446&65535;
    $448 = $447 >> 8;
    $449 = 15 & $448;
    $450 = $pc;
    $451 = ((($450)) + 2|0);
    $452 = HEAP16[$451>>1]|0;
    $453 = $452 << 16 >> 16;
    HEAP32[$vararg_buffer80>>2] = $427;
    $vararg_ptr83 = ((($vararg_buffer80)) + 4|0);
    HEAP32[$vararg_ptr83>>2] = $431;
    $vararg_ptr84 = ((($vararg_buffer80)) + 8|0);
    HEAP32[$vararg_ptr84>>2] = $436;
    $vararg_ptr85 = ((($vararg_buffer80)) + 12|0);
    HEAP32[$vararg_ptr85>>2] = $441;
    $vararg_ptr86 = ((($vararg_buffer80)) + 16|0);
    HEAP32[$vararg_ptr86>>2] = $444;
    $vararg_ptr87 = ((($vararg_buffer80)) + 20|0);
    HEAP32[$vararg_ptr87>>2] = $449;
    $vararg_ptr88 = ((($vararg_buffer80)) + 24|0);
    HEAP32[$vararg_ptr88>>2] = $453;
    _mu_printf(4856,$vararg_buffer80);
    $454 = $pc;
    $455 = ((($454)) + 4|0);
    $pc = $455;
    continue;
   }
  }
  $456 = $op;
  $457 = ($456>>>0)>=(13);
  $458 = $op;
  $459 = ($458>>>0)<=(15);
  $or$cond11 = $457 & $459;
  if (!($or$cond11)) {
   continue;
  }
  $460 = $pc;
  $461 = HEAP16[$460>>1]|0;
  $462 = $461&65535;
  $463 = $462 >> 8;
  $464 = $pc;
  $465 = HEAP16[$464>>1]|0;
  $466 = $465&65535;
  $467 = 255 & $466;
  $468 = $op;
  $469 = (3232 + ($468<<2)|0);
  $470 = HEAP32[$469>>2]|0;
  $471 = $pc;
  $472 = HEAP16[$471>>1]|0;
  $473 = $472&65535;
  $474 = $473 >> 8;
  $475 = 15 & $474;
  $476 = $pc;
  $477 = HEAP16[$476>>1]|0;
  $478 = $477&65535;
  $479 = $478 << 8;
  $480 = $479&65535;
  $481 = $480 << 16 >> 16;
  $482 = $481 >> 8;
  HEAP32[$vararg_buffer89>>2] = $463;
  $vararg_ptr92 = ((($vararg_buffer89)) + 4|0);
  HEAP32[$vararg_ptr92>>2] = $467;
  $vararg_ptr93 = ((($vararg_buffer89)) + 8|0);
  HEAP32[$vararg_ptr93>>2] = $470;
  $vararg_ptr94 = ((($vararg_buffer89)) + 12|0);
  HEAP32[$vararg_ptr94>>2] = $475;
  $vararg_ptr95 = ((($vararg_buffer89)) + 16|0);
  HEAP32[$vararg_ptr95>>2] = $482;
  _mu_printf(4881,$vararg_buffer89);
  $483 = $pc;
  $484 = ((($483)) + 2|0);
  $pc = $484;
 }
 STACKTOP = sp;return;
}
function _mu_exec($c,$scope,$frame) {
 $c = $c|0;
 $scope = $scope|0;
 $frame = $frame|0;
 var $$alloca_mul = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0;
 var $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0;
 var $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0;
 var $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0;
 var $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0;
 var $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0;
 var $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $a11 = 0, $a13 = 0, $a16 = 0, $a19 = 0, $a27 = 0, $a29 = 0;
 var $a31 = 0, $a7 = 0, $a9 = 0, $b = 0, $b14 = 0, $b17 = 0, $b20 = 0, $cleanup$dest = 0, $cleanup$dest$off = 0, $count$i = 0, $count$i$i = 0, $count$i$i34 = 0, $count$i36 = 0, $count$i39 = 0, $count$i43 = 0, $count$i46 = 0, $count$i49 = 0, $count$i53 = 0, $count$i56 = 0, $count$i60 = 0;
 var $count$i63 = 0, $count$i66 = 0, $count$i69 = 0, $d = 0, $d1 = 0, $d10 = 0, $d12 = 0, $d15 = 0, $d18 = 0, $d21 = 0, $d22 = 0, $d24 = 0, $d26 = 0, $d28 = 0, $d3 = 0, $d30 = 0, $d5 = 0, $d6 = 0, $d8 = 0, $i = 0;
 var $i2 = 0, $i4 = 0, $imms = 0, $ins = 0, $j = 0, $j23 = 0, $j25 = 0, $pc = 0, $ref$i = 0, $ref$i$i = 0, $ref$i$i33 = 0, $ref$i35 = 0, $ref$i38 = 0, $ref$i42 = 0, $ref$i45 = 0, $ref$i48 = 0, $ref$i52 = 0, $ref$i55 = 0, $ref$i59 = 0, $ref$i62 = 0;
 var $ref$i65 = 0, $ref$i68 = 0, $scratch = 0, $scratch32 = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 688|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer19 = sp + 168|0;
 $vararg_buffer16 = sp + 160|0;
 $vararg_buffer11 = sp + 144|0;
 $vararg_buffer6 = sp + 128|0;
 $vararg_buffer2 = sp + 120|0;
 $vararg_buffer = sp + 112|0;
 $77 = $c;
 $78 = $scope;
 $79 = $frame;
 L1: while(1) {
  $82 = $77;
  $75 = $82;
  $83 = $75;
  $74 = $83;
  $84 = $74;
  $85 = $84;
  $86 = -8 & $85;
  $87 = $86;
  $88 = ((($87)) + 4|0);
  $89 = ((($88)) + 2|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = $90&255;
  $92 = (_llvm_stacksave()|0);
  $80 = $92;
  $$alloca_mul = $91<<2;
  $93 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
  $94 = $78;
  HEAP32[$93>>2] = $94;
  $95 = $77;
  $71 = $95;
  $96 = $71;
  $70 = $96;
  $97 = $70;
  $98 = $97;
  $99 = -8 & $98;
  $100 = $99;
  $101 = ((($100)) + 4|0);
  $102 = HEAP8[$101>>0]|0;
  $103 = ((($93)) + 4|0);
  $104 = $79;
  $52 = $102;
  $53 = $103;
  $54 = $104;
  $105 = $53;
  $106 = $54;
  $107 = $52;
  $51 = $107;
  $108 = $51;
  $109 = $108&255;
  $110 = ($109|0)>(4);
  $111 = $51;
  $112 = $111&255;
  $113 = $110 ? 1 : $112;
  $114 = $113&65535;
  $115 = $114&65535;
  $116 = $115<<2;
  _memcpy(($105|0),($106|0),($116|0))|0;
  $117 = $77;
  $48 = $117;
  $118 = $48;
  $47 = $118;
  $119 = $47;
  $120 = $119;
  $121 = -8 & $120;
  $122 = $121;
  $123 = ((($122)) + 4|0);
  $124 = ((($123)) + 8|0);
  $imms = $124;
  $125 = $77;
  $40 = $125;
  $126 = $40;
  $39 = $126;
  $127 = $39;
  $38 = $127;
  $128 = $38;
  $129 = $128;
  $130 = -8 & $129;
  $131 = $130;
  $132 = ((($131)) + 4|0);
  $133 = ((($132)) + 8|0);
  $134 = $40;
  $37 = $134;
  $135 = $37;
  $36 = $135;
  $136 = $36;
  $137 = $136;
  $138 = -8 & $137;
  $139 = $138;
  $140 = ((($139)) + 4|0);
  $141 = ((($140)) + 4|0);
  $142 = HEAP16[$141>>1]|0;
  $143 = $142&65535;
  $144 = (($133) + ($143<<2)|0);
  $pc = $144;
  L3: while(1) {
   $145 = $pc;
   $146 = ((($145)) + 2|0);
   $pc = $146;
   $147 = HEAP16[$145>>1]|0;
   $ins = $147;
   $148 = $ins;
   $149 = $148&65535;
   $150 = $149 >> 12;
   do {
    switch ($150|0) {
    case 0:  {
     label = 70;
     break L3;
     break;
    }
    case 1:  {
     label = 79;
     break L3;
     break;
    }
    case 6:  {
     $151 = $ins;
     $152 = $151&65535;
     $153 = $152 >> 8;
     $154 = 15 & $153;
     $d = $154;
     $155 = $ins;
     $156 = $155&65535;
     $157 = 255 & $156;
     $i = $157;
     $158 = $i;
     $159 = ($158|0)==(255);
     if ($159) {
      $160 = $pc;
      $161 = ((($160)) + 2|0);
      $pc = $161;
      $162 = HEAP16[$160>>1]|0;
      $163 = $162&65535;
      $i = $163;
     }
     $164 = $i;
     $165 = $imms;
     $166 = (($165) + ($164<<2)|0);
     $167 = HEAP32[$166>>2]|0;
     $33 = $167;
     $168 = $33;
     $32 = $168;
     $169 = $32;
     $170 = $169;
     $171 = 6 & $170;
     $172 = ($171|0)!=(0);
     if ($172) {
      $173 = $33;
      $174 = $173;
      $175 = -8 & $174;
      $176 = $175;
      $ref$i48 = $176;
      $177 = $ref$i48;
      $178 = HEAP16[$177>>1]|0;
      $count$i49 = $178;
      $179 = $count$i49;
      $180 = $179&65535;
      $181 = ($180|0)!=(0);
      if ($181) {
       $182 = $count$i49;
       $183 = (($182) + 1)<<16>>16;
       $count$i49 = $183;
       $184 = $count$i49;
       $185 = $ref$i48;
       HEAP16[$185>>1] = $184;
      }
     }
     $186 = $33;
     $187 = $d;
     $188 = (($93) + ($187<<2)|0);
     HEAP32[$188>>2] = $186;
     continue L3;
     break;
    }
    case 7:  {
     $189 = $ins;
     $190 = $189&65535;
     $191 = $190 >> 8;
     $192 = 15 & $191;
     $d1 = $192;
     $193 = $ins;
     $194 = $193&65535;
     $195 = 255 & $194;
     $i2 = $195;
     $196 = $i2;
     $197 = ($196|0)==(255);
     if ($197) {
      $198 = $pc;
      $199 = ((($198)) + 2|0);
      $pc = $199;
      $200 = HEAP16[$198>>1]|0;
      $201 = $200&65535;
      $i2 = $201;
     }
     $202 = $i2;
     $203 = $imms;
     $204 = (($203) + ($202<<2)|0);
     $205 = HEAP32[$204>>2]|0;
     $21 = $205;
     $206 = $21;
     $20 = $206;
     $207 = $20;
     $208 = $207;
     $209 = 6 & $208;
     $210 = ($209|0)!=(0);
     if ($210) {
      $211 = $21;
      $212 = $211;
      $213 = -8 & $212;
      $214 = $213;
      $ref$i55 = $214;
      $215 = $ref$i55;
      $216 = HEAP16[$215>>1]|0;
      $count$i56 = $216;
      $217 = $count$i56;
      $218 = $217&65535;
      $219 = ($218|0)!=(0);
      if ($219) {
       $220 = $count$i56;
       $221 = (($220) + 1)<<16>>16;
       $count$i56 = $221;
       $222 = $count$i56;
       $223 = $ref$i55;
       HEAP16[$223>>1] = $222;
      }
     }
     $224 = $21;
     $225 = HEAP32[$93>>2]|0;
     $9 = $225;
     $226 = $9;
     $8 = $226;
     $227 = $8;
     $228 = $227;
     $229 = 6 & $228;
     $230 = ($229|0)!=(0);
     if ($230) {
      $231 = $9;
      $232 = $231;
      $233 = -8 & $232;
      $234 = $233;
      $ref$i62 = $234;
      $235 = $ref$i62;
      $236 = HEAP16[$235>>1]|0;
      $count$i63 = $236;
      $237 = $count$i63;
      $238 = $237&65535;
      $239 = ($238|0)!=(0);
      if ($239) {
       $240 = $count$i63;
       $241 = (($240) + 1)<<16>>16;
       $count$i63 = $241;
       $242 = $count$i63;
       $243 = $ref$i62;
       HEAP16[$243>>1] = $242;
      }
     }
     $244 = $9;
     $245 = (_mu_fn_fromcode($224,$244)|0);
     $246 = $d1;
     $247 = (($93) + ($246<<2)|0);
     HEAP32[$247>>2] = $245;
     continue L3;
     break;
    }
    case 8:  {
     $248 = $ins;
     $249 = $248&65535;
     $250 = $249 >> 8;
     $251 = 15 & $250;
     $d3 = $251;
     $252 = $ins;
     $253 = $252&65535;
     $254 = 255 & $253;
     $i4 = $254;
     $255 = $i4;
     $256 = ($255|0)==(255);
     if ($256) {
      $257 = $pc;
      $258 = ((($257)) + 2|0);
      $pc = $258;
      $259 = HEAP16[$257>>1]|0;
      $260 = $259&65535;
      $i4 = $260;
     }
     $261 = $i4;
     $262 = (_mu_tbl_create($261)|0);
     $263 = $d3;
     $264 = (($93) + ($263<<2)|0);
     HEAP32[$264>>2] = $262;
     continue L3;
     break;
    }
    case 3:  {
     $265 = $ins;
     $266 = $265&65535;
     $267 = $266 >> 8;
     $268 = 15 & $267;
     $d5 = $268;
     $269 = $ins;
     $270 = $269&65535;
     $271 = 255 & $270;
     $a = $271;
     $272 = $a;
     $273 = (($93) + ($272<<2)|0);
     $274 = HEAP32[$273>>2]|0;
     $275 = $d5;
     $276 = (($93) + ($275<<2)|0);
     HEAP32[$276>>2] = $274;
     continue L3;
     break;
    }
    case 4:  {
     $277 = $ins;
     $278 = $277&65535;
     $279 = $278 >> 8;
     $280 = 15 & $279;
     $d6 = $280;
     $281 = $ins;
     $282 = $281&65535;
     $283 = 255 & $282;
     $a7 = $283;
     $284 = $a7;
     $285 = (($93) + ($284<<2)|0);
     $286 = HEAP32[$285>>2]|0;
     $1 = $286;
     $287 = $1;
     $0 = $287;
     $288 = $0;
     $289 = $288;
     $290 = 6 & $289;
     $291 = ($290|0)!=(0);
     if ($291) {
      $292 = $1;
      $293 = $292;
      $294 = -8 & $293;
      $295 = $294;
      $ref$i68 = $295;
      $296 = $ref$i68;
      $297 = HEAP16[$296>>1]|0;
      $count$i69 = $297;
      $298 = $count$i69;
      $299 = $298&65535;
      $300 = ($299|0)!=(0);
      if ($300) {
       $301 = $count$i69;
       $302 = (($301) + 1)<<16>>16;
       $count$i69 = $302;
       $303 = $count$i69;
       $304 = $ref$i68;
       HEAP16[$304>>1] = $303;
      }
     }
     $305 = $1;
     $306 = $d6;
     $307 = (($93) + ($306<<2)|0);
     HEAP32[$307>>2] = $305;
     continue L3;
     break;
    }
    case 5:  {
     $308 = $ins;
     $309 = $308&65535;
     $310 = $309 >> 8;
     $311 = 15 & $310;
     $d8 = $311;
     $312 = $ins;
     $313 = $312&65535;
     $314 = 255 & $313;
     $a9 = $314;
     $315 = $d8;
     $316 = (($93) + ($315<<2)|0);
     $317 = HEAP32[$316>>2]|0;
     $3 = $317;
     $318 = $3;
     $2 = $318;
     $319 = $2;
     $320 = $319;
     $321 = 6 & $320;
     $322 = ($321|0)!=(0);
     if (!($322)) {
      continue L3;
     }
     $323 = $3;
     $324 = $323;
     $325 = -8 & $324;
     $326 = $325;
     $ref$i65 = $326;
     $327 = $ref$i65;
     $328 = HEAP16[$327>>1]|0;
     $count$i66 = $328;
     $329 = $count$i66;
     $330 = $329&65535;
     $331 = ($330|0)!=(0);
     if (!($331)) {
      continue L3;
     }
     $332 = $count$i66;
     $333 = (($332) + -1)<<16>>16;
     $count$i66 = $333;
     $334 = $count$i66;
     $335 = $ref$i65;
     HEAP16[$335>>1] = $334;
     $336 = $count$i66;
     $337 = $336&65535;
     $338 = ($337|0)==(0);
     if (!($338)) {
      continue L3;
     }
     $339 = $3;
     _mu_destroy($339);
     continue L3;
     break;
    }
    case 10:  {
     $340 = $ins;
     $341 = $340&65535;
     $342 = $341 >> 8;
     $343 = 15 & $342;
     $d10 = $343;
     $344 = $ins;
     $345 = $344&65535;
     $346 = $345 >> 4;
     $347 = 15 & $346;
     $a11 = $347;
     $348 = $ins;
     $349 = $348&65535;
     $350 = $349 >> 0;
     $351 = 15 & $350;
     $b = $351;
     $352 = $a11;
     $353 = (($93) + ($352<<2)|0);
     $354 = HEAP32[$353>>2]|0;
     $4 = $354;
     $355 = $4;
     $356 = $355;
     $357 = 6 & $356;
     $358 = ($357|0)==(4);
     $359 = $a11;
     $360 = (($93) + ($359<<2)|0);
     $361 = HEAP32[$360>>2]|0;
     if ($358) {
      $362 = $b;
      $363 = (($93) + ($362<<2)|0);
      $364 = HEAP32[$363>>2]|0;
      $365 = (_mu_tbl_lookup($361,$364)|0);
      $366 = $d10;
      $367 = (($93) + ($366<<2)|0);
      HEAP32[$367>>2] = $365;
      continue L3;
     }
     $5 = $361;
     $368 = $5;
     $369 = $368;
     $370 = 3 & $369;
     $371 = ($370|0)==(2);
     if (!($371)) {
      label = 35;
      break L1;
     }
     $372 = $a11;
     $373 = (($93) + ($372<<2)|0);
     $374 = HEAP32[$373>>2]|0;
     $375 = $b;
     $376 = (($93) + ($375<<2)|0);
     $377 = HEAP32[$376>>2]|0;
     $378 = (_mu_buf_lookup($374,$377)|0);
     $379 = $d10;
     $380 = (($93) + ($379<<2)|0);
     HEAP32[$380>>2] = $378;
     continue L3;
     break;
    }
    case 9:  {
     $387 = $ins;
     $388 = $387&65535;
     $389 = $388 >> 8;
     $390 = 15 & $389;
     $d12 = $390;
     $391 = $ins;
     $392 = $391&65535;
     $393 = $392 >> 4;
     $394 = 15 & $393;
     $a13 = $394;
     $395 = $ins;
     $396 = $395&65535;
     $397 = $396 >> 0;
     $398 = 15 & $397;
     $b14 = $398;
     $399 = $a13;
     $400 = (($93) + ($399<<2)|0);
     $401 = HEAP32[$400>>2]|0;
     $6 = $401;
     $402 = $6;
     $403 = $402;
     $404 = 6 & $403;
     $405 = ($404|0)==(4);
     $406 = $a13;
     $407 = (($93) + ($406<<2)|0);
     $408 = HEAP32[$407>>2]|0;
     if ($405) {
      $409 = $b14;
      $410 = (($93) + ($409<<2)|0);
      $411 = HEAP32[$410>>2]|0;
      $412 = (_mu_tbl_lookup($408,$411)|0);
      $scratch = $412;
     } else {
      $7 = $408;
      $413 = $7;
      $414 = $413;
      $415 = 3 & $414;
      $416 = ($415|0)==(2);
      if (!($416)) {
       label = 40;
       break L1;
      }
      $417 = $a13;
      $418 = (($93) + ($417<<2)|0);
      $419 = HEAP32[$418>>2]|0;
      $420 = $b14;
      $421 = (($93) + ($420<<2)|0);
      $422 = HEAP32[$421>>2]|0;
      $423 = (_mu_buf_lookup($419,$422)|0);
      $scratch = $423;
     }
     $430 = $a13;
     $431 = (($93) + ($430<<2)|0);
     $432 = HEAP32[$431>>2]|0;
     $11 = $432;
     $433 = $11;
     $10 = $433;
     $434 = $10;
     $435 = $434;
     $436 = 6 & $435;
     $437 = ($436|0)!=(0);
     if ($437) {
      $438 = $11;
      $439 = $438;
      $440 = -8 & $439;
      $441 = $440;
      $ref$i59 = $441;
      $442 = $ref$i59;
      $443 = HEAP16[$442>>1]|0;
      $count$i60 = $443;
      $444 = $count$i60;
      $445 = $444&65535;
      $446 = ($445|0)!=(0);
      if ($446) {
       $447 = $count$i60;
       $448 = (($447) + -1)<<16>>16;
       $count$i60 = $448;
       $449 = $count$i60;
       $450 = $ref$i59;
       HEAP16[$450>>1] = $449;
       $451 = $count$i60;
       $452 = $451&65535;
       $453 = ($452|0)==(0);
       if ($453) {
        $454 = $11;
        _mu_destroy($454);
       }
      }
     }
     $455 = $scratch;
     $456 = $d12;
     $457 = (($93) + ($456<<2)|0);
     HEAP32[$457>>2] = $455;
     continue L3;
     break;
    }
    case 11:  {
     $458 = $ins;
     $459 = $458&65535;
     $460 = $459 >> 8;
     $461 = 15 & $460;
     $d15 = $461;
     $462 = $ins;
     $463 = $462&65535;
     $464 = $463 >> 4;
     $465 = 15 & $464;
     $a16 = $465;
     $466 = $ins;
     $467 = $466&65535;
     $468 = $467 >> 0;
     $469 = 15 & $468;
     $b17 = $469;
     $470 = $a16;
     $471 = (($93) + ($470<<2)|0);
     $472 = HEAP32[$471>>2]|0;
     $12 = $472;
     $473 = $12;
     $474 = $473;
     $475 = 6 & $474;
     $476 = ($475|0)==(4);
     if (!($476)) {
      label = 47;
      break L1;
     }
     $486 = $a16;
     $487 = (($93) + ($486<<2)|0);
     $488 = HEAP32[$487>>2]|0;
     $489 = $b17;
     $490 = (($93) + ($489<<2)|0);
     $491 = HEAP32[$490>>2]|0;
     $492 = $d15;
     $493 = (($93) + ($492<<2)|0);
     $494 = HEAP32[$493>>2]|0;
     _mu_tbl_insert($488,$491,$494);
     continue L3;
     break;
    }
    case 12:  {
     $495 = $ins;
     $496 = $495&65535;
     $497 = $496 >> 8;
     $498 = 15 & $497;
     $d18 = $498;
     $499 = $ins;
     $500 = $499&65535;
     $501 = $500 >> 4;
     $502 = 15 & $501;
     $a19 = $502;
     $503 = $ins;
     $504 = $503&65535;
     $505 = $504 >> 0;
     $506 = 15 & $505;
     $b20 = $506;
     $507 = $a19;
     $508 = (($93) + ($507<<2)|0);
     $509 = HEAP32[$508>>2]|0;
     $13 = $509;
     $510 = $13;
     $511 = $510;
     $512 = 6 & $511;
     $513 = ($512|0)==(4);
     if (!($513)) {
      label = 50;
      break L1;
     }
     $523 = $a19;
     $524 = (($93) + ($523<<2)|0);
     $525 = HEAP32[$524>>2]|0;
     $526 = $b20;
     $527 = (($93) + ($526<<2)|0);
     $528 = HEAP32[$527>>2]|0;
     $529 = $d18;
     $530 = (($93) + ($529<<2)|0);
     $531 = HEAP32[$530>>2]|0;
     _mu_tbl_assign($525,$528,$531);
     continue L3;
     break;
    }
    case 15:  {
     $532 = $ins;
     $533 = $532&65535;
     $534 = $533 >> 8;
     $535 = 15 & $534;
     $d21 = $535;
     $536 = $ins;
     $537 = $536&65535;
     $538 = $537 << 8;
     $539 = $538&65535;
     $540 = $539 << 16 >> 16;
     $541 = $540 >> 8;
     $j = $541;
     $542 = $j;
     $543 = ($542|0)==(-1);
     if ($543) {
      $544 = $pc;
      $545 = ((($544)) + 2|0);
      $pc = $545;
      $546 = HEAP16[$544>>1]|0;
      $547 = $546 << 16 >> 16;
      $j = $547;
     }
     $548 = $j;
     $549 = $pc;
     $550 = (($549) + ($548<<1)|0);
     $pc = $550;
     continue L3;
     break;
    }
    case 14:  {
     $551 = $ins;
     $552 = $551&65535;
     $553 = $552 >> 8;
     $554 = 15 & $553;
     $d22 = $554;
     $555 = $ins;
     $556 = $555&65535;
     $557 = $556 << 8;
     $558 = $557&65535;
     $559 = $558 << 16 >> 16;
     $560 = $559 >> 8;
     $j23 = $560;
     $561 = $j23;
     $562 = ($561|0)==(-1);
     if ($562) {
      $563 = $pc;
      $564 = ((($563)) + 2|0);
      $pc = $564;
      $565 = HEAP16[$563>>1]|0;
      $566 = $565 << 16 >> 16;
      $j23 = $566;
     }
     $567 = $d22;
     $568 = (($93) + ($567<<2)|0);
     $569 = HEAP32[$568>>2]|0;
     $570 = ($569|0)!=(0|0);
     if (!($570)) {
      continue L3;
     }
     $571 = $j23;
     $572 = $pc;
     $573 = (($572) + ($571<<1)|0);
     $pc = $573;
     continue L3;
     break;
    }
    case 13:  {
     $574 = $ins;
     $575 = $574&65535;
     $576 = $575 >> 8;
     $577 = 15 & $576;
     $d24 = $577;
     $578 = $ins;
     $579 = $578&65535;
     $580 = $579 << 8;
     $581 = $580&65535;
     $582 = $581 << 16 >> 16;
     $583 = $582 >> 8;
     $j25 = $583;
     $584 = $j25;
     $585 = ($584|0)==(-1);
     if ($585) {
      $586 = $pc;
      $587 = ((($586)) + 2|0);
      $pc = $587;
      $588 = HEAP16[$586>>1]|0;
      $589 = $588 << 16 >> 16;
      $j25 = $589;
     }
     $590 = $d24;
     $591 = (($93) + ($590<<2)|0);
     $592 = HEAP32[$591>>2]|0;
     $593 = ($592|0)!=(0|0);
     if ($593) {
      continue L3;
     }
     $594 = $j25;
     $595 = $pc;
     $596 = (($595) + ($594<<1)|0);
     $pc = $596;
     continue L3;
     break;
    }
    case 2:  {
     $597 = $ins;
     $598 = $597&65535;
     $599 = $598 >> 8;
     $600 = 15 & $599;
     $d26 = $600;
     $601 = $ins;
     $602 = $601&65535;
     $603 = 255 & $602;
     $a27 = $603;
     $604 = $d26;
     $605 = (($93) + ($604<<2)|0);
     $606 = HEAP32[$605>>2]|0;
     $15 = $606;
     $607 = $15;
     $14 = $607;
     $608 = $14;
     $609 = $608;
     $610 = 7 & $609;
     $611 = ($610|0)==(7);
     if (!($611)) {
      label = 64;
      break L1;
     }
     $615 = $a27;
     $616 = $615 >>> 4;
     $617 = $616&255;
     $618 = $79;
     $619 = $d26;
     $620 = (($619) + 1)|0;
     $621 = (($93) + ($620<<2)|0);
     $17 = $617;
     $18 = $618;
     $19 = $621;
     $622 = $18;
     $623 = $19;
     $624 = $17;
     $16 = $624;
     $625 = $16;
     $626 = $625&255;
     $627 = ($626|0)>(4);
     $628 = $16;
     $629 = $628&255;
     $630 = $627 ? 1 : $629;
     $631 = $630&65535;
     $632 = $631&65535;
     $633 = $632<<2;
     _memcpy(($622|0),($623|0),($633|0))|0;
     $634 = $d26;
     $635 = (($93) + ($634<<2)|0);
     $636 = HEAP32[$635>>2]|0;
     $637 = $a27;
     $638 = $637&255;
     $639 = $79;
     _mu_fn_fcall($636,$638,$639);
     $640 = $d26;
     $641 = (($93) + ($640<<2)|0);
     $642 = HEAP32[$641>>2]|0;
     $23 = $642;
     $643 = $23;
     $22 = $643;
     $644 = $22;
     $645 = $644;
     $646 = 6 & $645;
     $647 = ($646|0)!=(0);
     if ($647) {
      $648 = $23;
      $649 = $648;
      $650 = -8 & $649;
      $651 = $650;
      $ref$i52 = $651;
      $652 = $ref$i52;
      $653 = HEAP16[$652>>1]|0;
      $count$i53 = $653;
      $654 = $count$i53;
      $655 = $654&65535;
      $656 = ($655|0)!=(0);
      if ($656) {
       $657 = $count$i53;
       $658 = (($657) + -1)<<16>>16;
       $count$i53 = $658;
       $659 = $count$i53;
       $660 = $ref$i52;
       HEAP16[$660>>1] = $659;
       $661 = $count$i53;
       $662 = $661&65535;
       $663 = ($662|0)==(0);
       if ($663) {
        $664 = $23;
        _mu_destroy($664);
       }
      }
     }
     $665 = $a27;
     $666 = 15 & $665;
     $667 = $666&255;
     $668 = $d26;
     $669 = (($93) + ($668<<2)|0);
     $670 = $79;
     $25 = $667;
     $26 = $669;
     $27 = $670;
     $671 = $26;
     $672 = $27;
     $673 = $25;
     $24 = $673;
     $674 = $24;
     $675 = $674&255;
     $676 = ($675|0)>(4);
     $677 = $24;
     $678 = $677&255;
     $679 = $676 ? 1 : $678;
     $680 = $679&65535;
     $681 = $680&65535;
     $682 = $681<<2;
     _memcpy(($671|0),($672|0),($682|0))|0;
     continue L3;
     break;
    }
    default: {
     label = 105;
     break L1;
    }
    }
   } while(0);
  }
  do {
   if ((label|0) == 70) {
    label = 0;
    $683 = $ins;
    $684 = $683&65535;
    $685 = $684 >> 8;
    $686 = 15 & $685;
    $d28 = $686;
    $687 = $ins;
    $688 = $687&65535;
    $689 = 255 & $688;
    $a29 = $689;
    $690 = $a29;
    $691 = $690&255;
    $692 = $79;
    $693 = $d28;
    $694 = (($93) + ($693<<2)|0);
    $29 = $691;
    $30 = $692;
    $31 = $694;
    $695 = $30;
    $696 = $31;
    $697 = $29;
    $28 = $697;
    $698 = $28;
    $699 = $698&255;
    $700 = ($699|0)>(4);
    $701 = $28;
    $702 = $701&255;
    $703 = $700 ? 1 : $702;
    $704 = $703&65535;
    $705 = $704&65535;
    $706 = $705<<2;
    _memcpy(($695|0),($696|0),($706|0))|0;
    $707 = $78;
    $35 = $707;
    $708 = $35;
    $34 = $708;
    $709 = $34;
    $710 = $709;
    $711 = 6 & $710;
    $712 = ($711|0)!=(0);
    if ($712) {
     $713 = $35;
     $714 = $713;
     $715 = -8 & $714;
     $716 = $715;
     $ref$i45 = $716;
     $717 = $ref$i45;
     $718 = HEAP16[$717>>1]|0;
     $count$i46 = $718;
     $719 = $count$i46;
     $720 = $719&65535;
     $721 = ($720|0)!=(0);
     if ($721) {
      $722 = $count$i46;
      $723 = (($722) + -1)<<16>>16;
      $count$i46 = $723;
      $724 = $count$i46;
      $725 = $ref$i45;
      HEAP16[$725>>1] = $724;
      $726 = $count$i46;
      $727 = $726&65535;
      $728 = ($727|0)==(0);
      if ($728) {
       $729 = $35;
       _mu_destroy($729);
      }
     }
    }
    $730 = $77;
    $42 = $730;
    $731 = $42;
    $41 = $731;
    $732 = $41;
    $733 = $732;
    $734 = 6 & $733;
    $735 = ($734|0)!=(0);
    if ($735) {
     $736 = $42;
     $737 = $736;
     $738 = -8 & $737;
     $739 = $738;
     $ref$i42 = $739;
     $740 = $ref$i42;
     $741 = HEAP16[$740>>1]|0;
     $count$i43 = $741;
     $742 = $count$i43;
     $743 = $742&65535;
     $744 = ($743|0)!=(0);
     if ($744) {
      $745 = $count$i43;
      $746 = (($745) + -1)<<16>>16;
      $count$i43 = $746;
      $747 = $count$i43;
      $748 = $ref$i42;
      HEAP16[$748>>1] = $747;
      $749 = $count$i43;
      $750 = $749&65535;
      $751 = ($750|0)==(0);
      if ($751) {
       $752 = $42;
       _mu_destroy($752);
      }
     }
    }
    $753 = $a29;
    $754 = $753&255;
    $76 = $754;
    $81 = 1;
   }
   else if ((label|0) == 79) {
    label = 0;
    $755 = $ins;
    $756 = $755&65535;
    $757 = $756 >> 8;
    $758 = 15 & $757;
    $d30 = $758;
    $759 = $ins;
    $760 = $759&65535;
    $761 = 255 & $760;
    $a31 = $761;
    $762 = $d30;
    $763 = (($93) + ($762<<2)|0);
    $764 = HEAP32[$763>>2]|0;
    $scratch32 = $764;
    $765 = $a31;
    $766 = $765&255;
    $767 = $79;
    $768 = $d30;
    $769 = (($768) + 1)|0;
    $770 = (($93) + ($769<<2)|0);
    $44 = $766;
    $45 = $767;
    $46 = $770;
    $771 = $45;
    $772 = $46;
    $773 = $44;
    $43 = $773;
    $774 = $43;
    $775 = $774&255;
    $776 = ($775|0)>(4);
    $777 = $43;
    $778 = $777&255;
    $779 = $776 ? 1 : $778;
    $780 = $779&65535;
    $781 = $780&65535;
    $782 = $781<<2;
    _memcpy(($771|0),($772|0),($782|0))|0;
    $783 = $78;
    $50 = $783;
    $784 = $50;
    $49 = $784;
    $785 = $49;
    $786 = $785;
    $787 = 6 & $786;
    $788 = ($787|0)!=(0);
    if ($788) {
     $789 = $50;
     $790 = $789;
     $791 = -8 & $790;
     $792 = $791;
     $ref$i38 = $792;
     $793 = $ref$i38;
     $794 = HEAP16[$793>>1]|0;
     $count$i39 = $794;
     $795 = $count$i39;
     $796 = $795&65535;
     $797 = ($796|0)!=(0);
     if ($797) {
      $798 = $count$i39;
      $799 = (($798) + -1)<<16>>16;
      $count$i39 = $799;
      $800 = $count$i39;
      $801 = $ref$i38;
      HEAP16[$801>>1] = $800;
      $802 = $count$i39;
      $803 = $802&65535;
      $804 = ($803|0)==(0);
      if ($804) {
       $805 = $50;
       _mu_destroy($805);
      }
     }
    }
    $806 = $77;
    $56 = $806;
    $807 = $56;
    $55 = $807;
    $808 = $55;
    $809 = $808;
    $810 = 6 & $809;
    $811 = ($810|0)!=(0);
    if ($811) {
     $812 = $56;
     $813 = $812;
     $814 = -8 & $813;
     $815 = $814;
     $ref$i35 = $815;
     $816 = $ref$i35;
     $817 = HEAP16[$816>>1]|0;
     $count$i36 = $817;
     $818 = $count$i36;
     $819 = $818&65535;
     $820 = ($819|0)!=(0);
     if ($820) {
      $821 = $count$i36;
      $822 = (($821) + -1)<<16>>16;
      $count$i36 = $822;
      $823 = $count$i36;
      $824 = $ref$i35;
      HEAP16[$824>>1] = $823;
      $825 = $count$i36;
      $826 = $825&65535;
      $827 = ($826|0)==(0);
      if ($827) {
       $828 = $56;
       _mu_destroy($828);
      }
     }
    }
    $829 = $scratch32;
    $58 = $829;
    $830 = $58;
    $57 = $830;
    $831 = $57;
    $832 = $831;
    $833 = 7 & $832;
    $834 = ($833|0)==(7);
    $835 = $scratch32;
    if (!($834)) {
     label = 88;
     break L1;
    }
    $62 = $835;
    $836 = $62;
    $837 = $836;
    $838 = (($837) - 7)|0;
    $839 = $838;
    $840 = ((($839)) + 3|0);
    $841 = HEAP8[$840>>0]|0;
    $842 = $841&255;
    $843 = $842 & 1;
    $844 = ($843|0)!=(0);
    if ($844) {
     $61 = 0;
    } else {
     $845 = $62;
     $846 = $845;
     $847 = (($846) - 7)|0;
     $848 = $847;
     $849 = ((($848)) + 8|0);
     $850 = HEAP32[$849>>2]|0;
     $60 = $850;
     $851 = $60;
     $59 = $851;
     $852 = $59;
     $853 = $852;
     $854 = 6 & $853;
     $855 = ($854|0)!=(0);
     if ($855) {
      $856 = $60;
      $857 = $856;
      $858 = -8 & $857;
      $859 = $858;
      $ref$i$i33 = $859;
      $860 = $ref$i$i33;
      $861 = HEAP16[$860>>1]|0;
      $count$i$i34 = $861;
      $862 = $count$i$i34;
      $863 = $862&65535;
      $864 = ($863|0)!=(0);
      if ($864) {
       $865 = $count$i$i34;
       $866 = (($865) + 1)<<16>>16;
       $count$i$i34 = $866;
       $867 = $count$i$i34;
       $868 = $ref$i$i33;
       HEAP16[$868>>1] = $867;
      }
     }
     $869 = $60;
     $61 = $869;
    }
    $870 = $61;
    $77 = $870;
    $871 = $77;
    $872 = ($871|0)!=(0|0);
    if (!($872)) {
     $945 = $scratch32;
     $946 = $a31;
     $947 = $946&255;
     $948 = $79;
     $949 = (_mu_fn_tcall($945,$947,$948)|0);
     $76 = $949;
     $81 = 1;
     break;
    }
    $873 = $a31;
    $874 = $873&255;
    $875 = $77;
    $64 = $875;
    $876 = $64;
    $63 = $876;
    $877 = $63;
    $878 = $877;
    $879 = -8 & $878;
    $880 = $879;
    $881 = ((($880)) + 4|0);
    $882 = HEAP8[$881>>0]|0;
    $883 = $79;
    _mu_frameconvert($874,$882,$883);
    $884 = $77;
    $66 = $884;
    $885 = $66;
    $65 = $885;
    $886 = $65;
    $887 = $886;
    $888 = -8 & $887;
    $889 = $888;
    $890 = ((($889)) + 4|0);
    $891 = ((($890)) + 3|0);
    $892 = HEAP8[$891>>0]|0;
    $893 = $892&255;
    $894 = (_mu_tbl_create($893)|0);
    $78 = $894;
    $895 = $78;
    $896 = $scratch32;
    $69 = $896;
    $897 = $69;
    $898 = $897;
    $899 = (($898) - 7)|0;
    $900 = $899;
    $901 = ((($900)) + 4|0);
    $902 = HEAP32[$901>>2]|0;
    $68 = $902;
    $903 = $68;
    $67 = $903;
    $904 = $67;
    $905 = $904;
    $906 = 6 & $905;
    $907 = ($906|0)!=(0);
    if ($907) {
     $908 = $68;
     $909 = $908;
     $910 = -8 & $909;
     $911 = $910;
     $ref$i$i = $911;
     $912 = $ref$i$i;
     $913 = HEAP16[$912>>1]|0;
     $count$i$i = $913;
     $914 = $count$i$i;
     $915 = $914&65535;
     $916 = ($915|0)!=(0);
     if ($916) {
      $917 = $count$i$i;
      $918 = (($917) + 1)<<16>>16;
      $count$i$i = $918;
      $919 = $count$i$i;
      $920 = $ref$i$i;
      HEAP16[$920>>1] = $919;
     }
    }
    $921 = $68;
    _mu_tbl_settail($895,$921);
    $922 = $scratch32;
    $73 = $922;
    $923 = $73;
    $72 = $923;
    $924 = $72;
    $925 = $924;
    $926 = 6 & $925;
    $927 = ($926|0)!=(0);
    if ($927) {
     $928 = $73;
     $929 = $928;
     $930 = -8 & $929;
     $931 = $930;
     $ref$i = $931;
     $932 = $ref$i;
     $933 = HEAP16[$932>>1]|0;
     $count$i = $933;
     $934 = $count$i;
     $935 = $934&65535;
     $936 = ($935|0)!=(0);
     if ($936) {
      $937 = $count$i;
      $938 = (($937) + -1)<<16>>16;
      $count$i = $938;
      $939 = $count$i;
      $940 = $ref$i;
      HEAP16[$940>>1] = $939;
      $941 = $count$i;
      $942 = $941&65535;
      $943 = ($942|0)==(0);
      if ($943) {
       $944 = $73;
       _mu_destroy($944);
      }
     }
    }
    $81 = 2;
   }
  } while(0);
  $950 = $80;
  _llvm_stackrestore(($950|0));
  $cleanup$dest = $81;
  $cleanup$dest$off = (($cleanup$dest) + -1)|0;
  $switch = ($cleanup$dest$off>>>0)<(1);
  if ($switch) {
   label = 107;
   break;
  }
 }
 if ((label|0) == 35) {
  $381 = $b;
  $382 = (($93) + ($381<<2)|0);
  $383 = HEAP32[$382>>2]|0;
  $384 = $a11;
  $385 = (($93) + ($384<<2)|0);
  $386 = HEAP32[$385>>2]|0;
  HEAP32[$vararg_buffer>>2] = $383;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $386;
  _mu_errorf(4904,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 40) {
  $424 = $b14;
  $425 = (($93) + ($424<<2)|0);
  $426 = HEAP32[$425>>2]|0;
  $427 = $a13;
  $428 = (($93) + ($427<<2)|0);
  $429 = HEAP32[$428>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $426;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $429;
  _mu_errorf(4904,$vararg_buffer2);
  // unreachable;
 }
 else if ((label|0) == 47) {
  $477 = $d15;
  $478 = (($93) + ($477<<2)|0);
  $479 = HEAP32[$478>>2]|0;
  $480 = $b17;
  $481 = (($93) + ($480<<2)|0);
  $482 = HEAP32[$481>>2]|0;
  $483 = $a16;
  $484 = (($93) + ($483<<2)|0);
  $485 = HEAP32[$484>>2]|0;
  HEAP32[$vararg_buffer6>>2] = $479;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $482;
  $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
  HEAP32[$vararg_ptr10>>2] = $485;
  _mu_errorf(4930,$vararg_buffer6);
  // unreachable;
 }
 else if ((label|0) == 50) {
  $514 = $d18;
  $515 = (($93) + ($514<<2)|0);
  $516 = HEAP32[$515>>2]|0;
  $517 = $b20;
  $518 = (($93) + ($517<<2)|0);
  $519 = HEAP32[$518>>2]|0;
  $520 = $a19;
  $521 = (($93) + ($520<<2)|0);
  $522 = HEAP32[$521>>2]|0;
  HEAP32[$vararg_buffer11>>2] = $516;
  $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
  HEAP32[$vararg_ptr14>>2] = $519;
  $vararg_ptr15 = ((($vararg_buffer11)) + 8|0);
  HEAP32[$vararg_ptr15>>2] = $522;
  _mu_errorf(4962,$vararg_buffer11);
  // unreachable;
 }
 else if ((label|0) == 64) {
  $612 = $d26;
  $613 = (($93) + ($612<<2)|0);
  $614 = HEAP32[$613>>2]|0;
  HEAP32[$vararg_buffer16>>2] = $614;
  _mu_errorf(4994,$vararg_buffer16);
  // unreachable;
 }
 else if ((label|0) == 88) {
  HEAP32[$vararg_buffer19>>2] = $835;
  _mu_errorf(4994,$vararg_buffer19);
  // unreachable;
 }
 else if ((label|0) == 105) {
  // unreachable;
 }
 else if ((label|0) == 107) {
  $951 = $76;
  STACKTOP = sp;return ($951|0);
 }
 return (0)|0;
}
function _mu_inf_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1374]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1768)|0);
  HEAP32[1374] = $2;
 }
 $3 = HEAP32[1374]|0;
 return ($3|0);
}
function _mu_e_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1375]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1776)|0);
  HEAP32[1375] = $2;
 }
 $3 = HEAP32[1375]|0;
 return ($3|0);
}
function _mu_pi_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1376]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1784)|0);
  HEAP32[1376] = $2;
 }
 $3 = HEAP32[1376]|0;
 return ($3|0);
}
function _mu_inf_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAPF32[$0>>2] = inf;
 $1 = HEAP32[$0>>2]|0;
 $2 = -8 & $1;
 $3 = (1 + ($2))|0;
 $4 = $3;
 STACKTOP = sp;return ($4|0);
}
function _mu_ninf_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAPF32[$0>>2] = -inf;
 $1 = HEAP32[$0>>2]|0;
 $2 = -8 & $1;
 $3 = (1 + ($2))|0;
 $4 = $3;
 STACKTOP = sp;return ($4|0);
}
function _mu_e_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAPF32[$0>>2] = 2.7182817459106445;
 $1 = HEAP32[$0>>2]|0;
 $2 = -8 & $1;
 $3 = (1 + ($2))|0;
 $4 = $3;
 STACKTOP = sp;return ($4|0);
}
function _mu_pi_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAPF32[$0>>2] = 3.1415927410125732;
 $1 = HEAP32[$0>>2]|0;
 $2 = -8 & $1;
 $3 = (1 + ($2))|0;
 $4 = $3;
 STACKTOP = sp;return ($4|0);
}
function _mu_num_fromfloat($n) {
 $n = +$n;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = sp + 8|0;
 $2 = $n;
 $3 = $2;
 $4 = $2;
 $5 = $3 != $4;
 if ($5) {
  _mu_errorf(5012,$vararg_buffer);
  // unreachable;
 }
 $6 = $2;
 $7 = $6 == 0.0;
 if ($7) {
  $2 = 0.0;
 }
 $8 = $2;
 $0 = $8;
 $9 = $0;
 HEAPF32[$1>>2] = $9;
 $10 = HEAP32[$1>>2]|0;
 $11 = -8 & $10;
 $12 = (1 + ($11))|0;
 $13 = $12;
 STACKTOP = sp;return ($13|0);
}
function _mu_num_frommu($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $count$i = 0, $count$i2 = 0, $n = 0, $ref$i = 0, $ref$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 40|0;
 $10 = $m;
 $11 = $10;
 $8 = $11;
 $12 = $8;
 $13 = $12;
 $14 = 7 & $13;
 switch ($14|0) {
 case 0:  {
  $4 = 0;
  $15 = $4;
  $16 = (+($15>>>0));
  HEAPF32[$5>>2] = $16;
  $17 = HEAP32[$5>>2]|0;
  $18 = -8 & $17;
  $19 = (1 + ($18))|0;
  $20 = $19;
  $9 = $20;
  $84 = $9;
  STACKTOP = sp;return ($84|0);
  break;
 }
 case 1:  {
  $21 = $10;
  $9 = $21;
  $84 = $9;
  STACKTOP = sp;return ($84|0);
  break;
 }
 case 3:  {
  $22 = $10;
  $1 = $22;
  $23 = $1;
  $24 = $23;
  $25 = (($24) - 3)|0;
  $26 = $25;
  $27 = ((($26)) + 4|0);
  $28 = $10;
  $0 = $28;
  $29 = $0;
  $30 = $29;
  $31 = (($30) - 3)|0;
  $32 = $31;
  $33 = ((($32)) + 2|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $34&65535;
  $36 = (_mu_num_parse($27,$35)|0);
  $n = $36;
  $37 = $10;
  $3 = $37;
  $38 = $3;
  $2 = $38;
  $39 = $2;
  $40 = $39;
  $41 = 6 & $40;
  $42 = ($41|0)!=(0);
  if ($42) {
   $43 = $3;
   $44 = $43;
   $45 = -8 & $44;
   $46 = $45;
   $ref$i1 = $46;
   $47 = $ref$i1;
   $48 = HEAP16[$47>>1]|0;
   $count$i2 = $48;
   $49 = $count$i2;
   $50 = $49&65535;
   $51 = ($50|0)!=(0);
   if ($51) {
    $52 = $count$i2;
    $53 = (($52) + -1)<<16>>16;
    $count$i2 = $53;
    $54 = $count$i2;
    $55 = $ref$i1;
    HEAP16[$55>>1] = $54;
    $56 = $count$i2;
    $57 = $56&65535;
    $58 = ($57|0)==(0);
    if ($58) {
     $59 = $3;
     _mu_destroy($59);
    }
   }
  }
  $60 = $n;
  $9 = $60;
  $84 = $9;
  STACKTOP = sp;return ($84|0);
  break;
 }
 default: {
  $61 = $10;
  $7 = $61;
  $62 = $7;
  $6 = $62;
  $63 = $6;
  $64 = $63;
  $65 = 6 & $64;
  $66 = ($65|0)!=(0);
  if ($66) {
   $67 = $7;
   $68 = $67;
   $69 = -8 & $68;
   $70 = $69;
   $ref$i = $70;
   $71 = $ref$i;
   $72 = HEAP16[$71>>1]|0;
   $count$i = $72;
   $73 = $count$i;
   $74 = $73&65535;
   $75 = ($74|0)!=(0);
   if ($75) {
    $76 = $count$i;
    $77 = (($76) + -1)<<16>>16;
    $count$i = $77;
    $78 = $count$i;
    $79 = $ref$i;
    HEAP16[$79>>1] = $78;
    $80 = $count$i;
    $81 = $80&65535;
    $82 = ($81|0)==(0);
    if ($82) {
     $83 = $7;
     _mu_destroy($83);
    }
   }
  }
  $9 = 0;
  $84 = $9;
  STACKTOP = sp;return ($84|0);
 }
 }
 return (0)|0;
}
function _mu_num_parse($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $end = 0, $m = 0, $pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pos = sp + 8|0;
 $1 = $s;
 $2 = $n;
 $3 = $1;
 HEAP32[$pos>>2] = $3;
 $4 = HEAP32[$pos>>2]|0;
 $5 = $2;
 $6 = (($4) + ($5)|0);
 $end = $6;
 $7 = $end;
 $8 = (_mu_num_parsen($pos,$7)|0);
 $m = $8;
 $9 = HEAP32[$pos>>2]|0;
 $10 = $end;
 $11 = ($9|0)!=($10|0);
 if ($11) {
  $0 = 0;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 } else {
  $12 = $m;
  $0 = $12;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _mu_num_parsen($ppos,$end) {
 $ppos = $ppos|0;
 $end = $end|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0.0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0.0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0.0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $base = 0, $exp = 0, $expbase = 0, $n = 0, $pos = 0, $scale = 0, $sign = 0, $sign1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 164|0;
 $3 = sp + 156|0;
 $5 = sp + 148|0;
 $7 = sp + 140|0;
 $9 = sp + 132|0;
 $11 = sp + 124|0;
 $13 = sp + 116|0;
 $15 = sp + 108|0;
 $17 = sp + 100|0;
 $19 = sp + 92|0;
 $21 = sp + 84|0;
 $23 = sp + 76|0;
 $25 = sp + 68|0;
 $27 = sp + 60|0;
 $29 = sp + 52|0;
 $31 = sp + 44|0;
 $33 = $ppos;
 $34 = $end;
 $35 = $33;
 $36 = HEAP32[$35>>2]|0;
 $pos = $36;
 $30 = 0;
 $37 = $30;
 $38 = (+($37>>>0));
 HEAPF32[$31>>2] = $38;
 $39 = HEAP32[$31>>2]|0;
 $40 = -8 & $39;
 $41 = (1 + ($40))|0;
 $42 = $41;
 $n = $42;
 $28 = 1;
 $43 = $28;
 $44 = (+($43|0));
 HEAPF32[$29>>2] = $44;
 $45 = HEAP32[$29>>2]|0;
 $46 = -8 & $45;
 $47 = (1 + ($46))|0;
 $48 = $47;
 $sign = $48;
 $base = 10;
 $49 = $pos;
 $50 = $34;
 $51 = ($49|0)==($50|0);
 if ($51) {
  $32 = 0;
  $344 = $32;
  STACKTOP = sp;return ($344|0);
 }
 $52 = $pos;
 $53 = $34;
 $54 = ($52>>>0)<($53>>>0);
 if ($54) {
  $55 = $pos;
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $58 = ($57|0)==(43);
  if ($58) {
   $26 = 1;
   $59 = $26;
   $60 = (+($59|0));
   HEAPF32[$27>>2] = $60;
   $61 = HEAP32[$27>>2]|0;
   $62 = -8 & $61;
   $63 = (1 + ($62))|0;
   $64 = $63;
   $sign = $64;
   $65 = $pos;
   $66 = ((($65)) + 1|0);
   $pos = $66;
  } else {
   label = 6;
  }
 } else {
  label = 6;
 }
 if ((label|0) == 6) {
  $67 = $pos;
  $68 = $34;
  $69 = ($67>>>0)<($68>>>0);
  if ($69) {
   $70 = $pos;
   $71 = HEAP8[$70>>0]|0;
   $72 = $71&255;
   $73 = ($72|0)==(45);
   if ($73) {
    $24 = -1;
    $74 = $24;
    $75 = (+($74|0));
    HEAPF32[$25>>2] = $75;
    $76 = HEAP32[$25>>2]|0;
    $77 = -8 & $76;
    $78 = (1 + ($77))|0;
    $79 = $78;
    $sign = $79;
    $80 = $pos;
    $81 = ((($80)) + 1|0);
    $pos = $81;
   }
  }
 }
 $82 = $pos;
 $83 = ((($82)) + 2|0);
 $84 = $34;
 $85 = ($83>>>0)<($84>>>0);
 if ($85) {
  $86 = $pos;
  $87 = (_memcmp($86,5038,3)|0);
  $88 = ($87|0)==(0);
  if ($88) {
   $89 = $pos;
   $90 = ((($89)) + 3|0);
   $91 = $33;
   HEAP32[$91>>2] = $90;
   $92 = $sign;
   $93 = (_mu_inf_def()|0);
   $94 = (_mu_num_mul($92,$93)|0);
   $32 = $94;
   $344 = $32;
   STACKTOP = sp;return ($344|0);
  }
 }
 $95 = $pos;
 $96 = ((($95)) + 2|0);
 $97 = $34;
 $98 = ($96>>>0)<($97>>>0);
 do {
  if ($98) {
   $99 = $pos;
   $100 = HEAP8[$99>>0]|0;
   $101 = $100&255;
   $102 = ($101|0)==(48);
   if ($102) {
    $103 = $pos;
    $104 = ((($103)) + 1|0);
    $105 = HEAP8[$104>>0]|0;
    $106 = $105&255;
    $107 = ($106|0)==(98);
    if (!($107)) {
     $108 = $pos;
     $109 = ((($108)) + 1|0);
     $110 = HEAP8[$109>>0]|0;
     $111 = $110&255;
     $112 = ($111|0)==(66);
     if (!($112)) {
      $115 = $pos;
      $116 = ((($115)) + 1|0);
      $117 = HEAP8[$116>>0]|0;
      $118 = $117&255;
      $119 = ($118|0)==(111);
      if (!($119)) {
       $120 = $pos;
       $121 = ((($120)) + 1|0);
       $122 = HEAP8[$121>>0]|0;
       $123 = $122&255;
       $124 = ($123|0)==(79);
       if (!($124)) {
        $127 = $pos;
        $128 = ((($127)) + 1|0);
        $129 = HEAP8[$128>>0]|0;
        $130 = $129&255;
        $131 = ($130|0)==(100);
        if (!($131)) {
         $132 = $pos;
         $133 = ((($132)) + 1|0);
         $134 = HEAP8[$133>>0]|0;
         $135 = $134&255;
         $136 = ($135|0)==(68);
         if (!($136)) {
          $139 = $pos;
          $140 = ((($139)) + 1|0);
          $141 = HEAP8[$140>>0]|0;
          $142 = $141&255;
          $143 = ($142|0)==(120);
          if (!($143)) {
           $144 = $pos;
           $145 = ((($144)) + 1|0);
           $146 = HEAP8[$145>>0]|0;
           $147 = $146&255;
           $148 = ($147|0)==(88);
           if (!($148)) {
            break;
           }
          }
          $base = 16;
          $149 = $pos;
          $150 = ((($149)) + 2|0);
          $pos = $150;
          break;
         }
        }
        $base = 10;
        $137 = $pos;
        $138 = ((($137)) + 2|0);
        $pos = $138;
        break;
       }
      }
      $base = 8;
      $125 = $pos;
      $126 = ((($125)) + 2|0);
      $pos = $126;
      break;
     }
    }
    $base = 2;
    $113 = $pos;
    $114 = ((($113)) + 2|0);
    $pos = $114;
   }
  }
 } while(0);
 while(1) {
  $151 = $pos;
  $152 = $34;
  $153 = ($151>>>0)<($152>>>0);
  if (!($153)) {
   break;
  }
  $154 = $pos;
  $155 = HEAP8[$154>>0]|0;
  $156 = (_mu_num_fromascii($155)|0);
  $157 = $base;
  $158 = ($156>>>0)<($157>>>0);
  if (!($158)) {
   break;
  }
  $159 = $n;
  $160 = $base;
  $22 = $160;
  $161 = $22;
  $162 = (+($161>>>0));
  HEAPF32[$23>>2] = $162;
  $163 = HEAP32[$23>>2]|0;
  $164 = -8 & $163;
  $165 = (1 + ($164))|0;
  $166 = $165;
  $167 = (_mu_num_mul($159,$166)|0);
  $n = $167;
  $168 = $n;
  $169 = $pos;
  $170 = ((($169)) + 1|0);
  $pos = $170;
  $171 = HEAP8[$169>>0]|0;
  $172 = (_mu_num_fromascii($171)|0);
  $20 = $172;
  $173 = $20;
  $174 = (+($173>>>0));
  HEAPF32[$21>>2] = $174;
  $175 = HEAP32[$21>>2]|0;
  $176 = -8 & $175;
  $177 = (1 + ($176))|0;
  $178 = $177;
  $179 = (_mu_num_add($168,$178)|0);
  $n = $179;
 }
 $180 = $pos;
 $181 = $34;
 $182 = ($180>>>0)<($181>>>0);
 L41: do {
  if ($182) {
   $183 = $pos;
   $184 = HEAP8[$183>>0]|0;
   $185 = $184&255;
   $186 = ($185|0)==(46);
   if ($186) {
    $16 = 1;
    $187 = $16;
    $188 = (+($187>>>0));
    HEAPF32[$17>>2] = $188;
    $189 = HEAP32[$17>>2]|0;
    $190 = -8 & $189;
    $191 = (1 + ($190))|0;
    $192 = $191;
    $scale = $192;
    $193 = $pos;
    $194 = ((($193)) + 1|0);
    $pos = $194;
    while(1) {
     $195 = $pos;
     $196 = $34;
     $197 = ($195>>>0)<($196>>>0);
     if (!($197)) {
      break L41;
     }
     $198 = $pos;
     $199 = HEAP8[$198>>0]|0;
     $200 = (_mu_num_fromascii($199)|0);
     $201 = $base;
     $202 = ($200>>>0)<($201>>>0);
     if (!($202)) {
      break L41;
     }
     $203 = $scale;
     $204 = $base;
     $14 = $204;
     $205 = $14;
     $206 = (+($205>>>0));
     HEAPF32[$15>>2] = $206;
     $207 = HEAP32[$15>>2]|0;
     $208 = -8 & $207;
     $209 = (1 + ($208))|0;
     $210 = $209;
     $211 = (_mu_num_mul($203,$210)|0);
     $scale = $211;
     $212 = $n;
     $213 = $pos;
     $214 = ((($213)) + 1|0);
     $pos = $214;
     $215 = HEAP8[$213>>0]|0;
     $216 = (_mu_num_fromascii($215)|0);
     $10 = $216;
     $217 = $10;
     $218 = (+($217>>>0));
     HEAPF32[$11>>2] = $218;
     $219 = HEAP32[$11>>2]|0;
     $220 = -8 & $219;
     $221 = (1 + ($220))|0;
     $222 = $221;
     $223 = $scale;
     $224 = (_mu_num_div($222,$223)|0);
     $225 = (_mu_num_add($212,$224)|0);
     $n = $225;
    }
   }
  }
 } while(0);
 $226 = $pos;
 $227 = $34;
 $228 = ($226>>>0)<($227>>>0);
 do {
  if ($228) {
   $229 = $pos;
   $230 = HEAP8[$229>>0]|0;
   $231 = $230&255;
   $232 = ($231|0)==(101);
   if (!($232)) {
    $233 = $pos;
    $234 = HEAP8[$233>>0]|0;
    $235 = $234&255;
    $236 = ($235|0)==(69);
    if (!($236)) {
     $237 = $pos;
     $238 = HEAP8[$237>>0]|0;
     $239 = $238&255;
     $240 = ($239|0)==(112);
     if (!($240)) {
      $241 = $pos;
      $242 = HEAP8[$241>>0]|0;
      $243 = $242&255;
      $244 = ($243|0)==(112);
      if (!($244)) {
       break;
      }
     }
    }
   }
   $245 = $pos;
   $246 = HEAP8[$245>>0]|0;
   $247 = $246&255;
   $248 = ($247|0)==(101);
   if ($248) {
    $253 = 1;
   } else {
    $249 = $pos;
    $250 = HEAP8[$249>>0]|0;
    $251 = $250&255;
    $252 = ($251|0)==(69);
    $253 = $252;
   }
   $254 = $253 ? 10 : 2;
   $0 = $254;
   $255 = $0;
   $256 = (+($255>>>0));
   HEAPF32[$1>>2] = $256;
   $257 = HEAP32[$1>>2]|0;
   $258 = -8 & $257;
   $259 = (1 + ($258))|0;
   $260 = $259;
   $expbase = $260;
   $2 = 0;
   $261 = $2;
   $262 = (+($261>>>0));
   HEAPF32[$3>>2] = $262;
   $263 = HEAP32[$3>>2]|0;
   $264 = -8 & $263;
   $265 = (1 + ($264))|0;
   $266 = $265;
   $exp = $266;
   $4 = 1;
   $267 = $4;
   $268 = (+($267|0));
   HEAPF32[$5>>2] = $268;
   $269 = HEAP32[$5>>2]|0;
   $270 = -8 & $269;
   $271 = (1 + ($270))|0;
   $272 = $271;
   $sign1 = $272;
   $273 = $pos;
   $274 = ((($273)) + 1|0);
   $pos = $274;
   $275 = $pos;
   $276 = $34;
   $277 = ($275>>>0)<($276>>>0);
   if ($277) {
    $278 = $pos;
    $279 = HEAP8[$278>>0]|0;
    $280 = $279&255;
    $281 = ($280|0)==(43);
    if ($281) {
     $6 = 1;
     $282 = $6;
     $283 = (+($282|0));
     HEAPF32[$7>>2] = $283;
     $284 = HEAP32[$7>>2]|0;
     $285 = -8 & $284;
     $286 = (1 + ($285))|0;
     $287 = $286;
     $sign1 = $287;
     $288 = $pos;
     $289 = ((($288)) + 1|0);
     $pos = $289;
    } else {
     label = 45;
    }
   } else {
    label = 45;
   }
   if ((label|0) == 45) {
    $290 = $pos;
    $291 = $34;
    $292 = ($290>>>0)<($291>>>0);
    if ($292) {
     $293 = $pos;
     $294 = HEAP8[$293>>0]|0;
     $295 = $294&255;
     $296 = ($295|0)==(45);
     if ($296) {
      $8 = -1;
      $297 = $8;
      $298 = (+($297|0));
      HEAPF32[$9>>2] = $298;
      $299 = HEAP32[$9>>2]|0;
      $300 = -8 & $299;
      $301 = (1 + ($300))|0;
      $302 = $301;
      $sign1 = $302;
      $303 = $pos;
      $304 = ((($303)) + 1|0);
      $pos = $304;
     }
    }
   }
   while(1) {
    $305 = $pos;
    $306 = $34;
    $307 = ($305>>>0)<($306>>>0);
    if (!($307)) {
     break;
    }
    $308 = $pos;
    $309 = HEAP8[$308>>0]|0;
    $310 = (_mu_num_fromascii($309)|0);
    $311 = ($310>>>0)<(10);
    if (!($311)) {
     break;
    }
    $312 = $exp;
    $12 = 10;
    $313 = $12;
    $314 = (+($313>>>0));
    HEAPF32[$13>>2] = $314;
    $315 = HEAP32[$13>>2]|0;
    $316 = -8 & $315;
    $317 = (1 + ($316))|0;
    $318 = $317;
    $319 = (_mu_num_mul($312,$318)|0);
    $exp = $319;
    $320 = $exp;
    $321 = $pos;
    $322 = ((($321)) + 1|0);
    $pos = $322;
    $323 = HEAP8[$321>>0]|0;
    $324 = (_mu_num_fromascii($323)|0);
    $18 = $324;
    $325 = $18;
    $326 = (+($325>>>0));
    HEAPF32[$19>>2] = $326;
    $327 = HEAP32[$19>>2]|0;
    $328 = -8 & $327;
    $329 = (1 + ($328))|0;
    $330 = $329;
    $331 = (_mu_num_add($320,$330)|0);
    $exp = $331;
   }
   $332 = $n;
   $333 = $expbase;
   $334 = $sign1;
   $335 = $exp;
   $336 = (_mu_num_mul($334,$335)|0);
   $337 = (_mu_num_pow($333,$336)|0);
   $338 = (_mu_num_mul($332,$337)|0);
   $n = $338;
  }
 } while(0);
 $339 = $pos;
 $340 = $33;
 HEAP32[$340>>2] = $339;
 $341 = $sign;
 $342 = $n;
 $343 = (_mu_num_mul($341,$342)|0);
 $32 = $343;
 $344 = $32;
 STACKTOP = sp;return ($344|0);
}
function _mu_num_mul($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = $a;
 $5 = $b;
 $6 = $4;
 $2 = $6;
 $7 = $2;
 $8 = $7;
 $9 = (($8) - 1)|0;
 HEAP32[$3>>2] = $9;
 $10 = +HEAPF32[$3>>2];
 $11 = $5;
 $0 = $11;
 $12 = $0;
 $13 = $12;
 $14 = (($13) - 1)|0;
 HEAP32[$1>>2] = $14;
 $15 = +HEAPF32[$1>>2];
 $16 = $10 * $15;
 $17 = (_mu_num_fromfloat($16)|0);
 STACKTOP = sp;return ($17|0);
}
function _mu_num_fromascii($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $0;
 $2 = $1&255;
 $3 = $2 | 32;
 $4 = $3&255;
 $0 = $4;
 $5 = $0;
 $6 = $5&255;
 $7 = ($6|0)>=(48);
 if ($7) {
  $8 = $0;
  $9 = $8&255;
  $10 = ($9|0)<=(57);
  if ($10) {
   $11 = $0;
   $12 = $11&255;
   $13 = (($12) - 48)|0;
   $24 = $13;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $14 = $0;
  $15 = $14&255;
  $16 = ($15|0)>=(97);
  if ($16) {
   $17 = $0;
   $18 = $17&255;
   $19 = ($18|0)<=(70);
   if ($19) {
    $20 = $0;
    $21 = $20&255;
    $22 = (($21) - 65)|0;
    $23 = (($22) + 10)|0;
    $24 = $23;
   } else {
    $24 = -1;
   }
  } else {
   $24 = -1;
  }
 }
 STACKTOP = sp;return ($24|0);
}
function _mu_num_add($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = $a;
 $5 = $b;
 $6 = $4;
 $2 = $6;
 $7 = $2;
 $8 = $7;
 $9 = (($8) - 1)|0;
 HEAP32[$3>>2] = $9;
 $10 = +HEAPF32[$3>>2];
 $11 = $5;
 $0 = $11;
 $12 = $0;
 $13 = $12;
 $14 = (($13) - 1)|0;
 HEAP32[$1>>2] = $14;
 $15 = +HEAPF32[$1>>2];
 $16 = $10 + $15;
 $17 = (_mu_num_fromfloat($16)|0);
 STACKTOP = sp;return ($17|0);
}
function _mu_num_div($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = $a;
 $5 = $b;
 $6 = $4;
 $2 = $6;
 $7 = $2;
 $8 = $7;
 $9 = (($8) - 1)|0;
 HEAP32[$3>>2] = $9;
 $10 = +HEAPF32[$3>>2];
 $11 = $5;
 $0 = $11;
 $12 = $0;
 $13 = $12;
 $14 = (($13) - 1)|0;
 HEAP32[$1>>2] = $14;
 $15 = +HEAPF32[$1>>2];
 $16 = $10 / $15;
 $17 = (_mu_num_fromfloat($16)|0);
 STACKTOP = sp;return ($17|0);
}
function _mu_num_pow($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = $a;
 $5 = $b;
 $6 = $4;
 $2 = $6;
 $7 = $2;
 $8 = $7;
 $9 = (($8) - 1)|0;
 HEAP32[$3>>2] = $9;
 $10 = +HEAPF32[$3>>2];
 $11 = $10;
 $12 = $5;
 $0 = $12;
 $13 = $0;
 $14 = $13;
 $15 = (($14) - 1)|0;
 HEAP32[$1>>2] = $15;
 $16 = +HEAPF32[$1>>2];
 $17 = $16;
 $18 = (+Math_pow((+$11),(+$17)));
 $19 = $18;
 $20 = (_mu_num_fromfloat($19)|0);
 STACKTOP = sp;return ($20|0);
}
function _mu_num_cmp($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $afloat = 0.0, $bfloat = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 24|0;
 $3 = sp + 16|0;
 $4 = $a;
 $5 = $b;
 $6 = $4;
 $2 = $6;
 $7 = $2;
 $8 = $7;
 $9 = (($8) - 1)|0;
 HEAP32[$3>>2] = $9;
 $10 = +HEAPF32[$3>>2];
 $afloat = $10;
 $11 = $5;
 $0 = $11;
 $12 = $0;
 $13 = $12;
 $14 = (($13) - 1)|0;
 HEAP32[$1>>2] = $14;
 $15 = +HEAPF32[$1>>2];
 $bfloat = $15;
 $16 = $afloat;
 $17 = $bfloat;
 $18 = $16 > $17;
 if ($18) {
  $23 = 1;
  STACKTOP = sp;return ($23|0);
 }
 $19 = $afloat;
 $20 = $bfloat;
 $21 = $19 < $20;
 $22 = $21 ? -1 : 0;
 $23 = $22;
 STACKTOP = sp;return ($23|0);
}
function _mu_num_clampint($n,$lower,$upper) {
 $n = $n|0;
 $lower = $lower|0;
 $upper = $upper|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 36|0;
 $3 = sp + 28|0;
 $6 = sp + 16|0;
 $8 = $n;
 $9 = $lower;
 $10 = $upper;
 $11 = $8;
 $12 = $9;
 $5 = $12;
 $13 = $5;
 $14 = (+($13|0));
 HEAPF32[$6>>2] = $14;
 $15 = HEAP32[$6>>2]|0;
 $16 = -8 & $15;
 $17 = (1 + ($16))|0;
 $18 = $17;
 $19 = (_mu_num_cmp($11,$18)|0);
 $20 = ($19|0)<(0);
 if ($20) {
  $21 = $9;
  $7 = $21;
  $40 = $7;
  STACKTOP = sp;return ($40|0);
 }
 $22 = $8;
 $23 = $10;
 $0 = $23;
 $24 = $0;
 $25 = (+($24|0));
 HEAPF32[$1>>2] = $25;
 $26 = HEAP32[$1>>2]|0;
 $27 = -8 & $26;
 $28 = (1 + ($27))|0;
 $29 = $28;
 $30 = (_mu_num_cmp($22,$29)|0);
 $31 = ($30|0)>(0);
 if ($31) {
  $32 = $10;
  $7 = $32;
  $40 = $7;
  STACKTOP = sp;return ($40|0);
 } else {
  $33 = $8;
  $4 = $33;
  $34 = $4;
  $2 = $34;
  $35 = $2;
  $36 = $35;
  $37 = (($36) - 1)|0;
  HEAP32[$3>>2] = $37;
  $38 = +HEAPF32[$3>>2];
  $39 = (~~(($38)));
  $7 = $39;
  $40 = $7;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function _mu_num_neg($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 24|0;
 $3 = sp + 16|0;
 $5 = sp + 8|0;
 $7 = $a;
 $8 = $7;
 $4 = 0;
 $9 = $4;
 $10 = (+($9>>>0));
 HEAPF32[$5>>2] = $10;
 $11 = HEAP32[$5>>2]|0;
 $12 = -8 & $11;
 $13 = (1 + ($12))|0;
 $14 = $13;
 $15 = ($8|0)==($14|0);
 $16 = $7;
 if ($15) {
  $6 = $16;
  $27 = $6;
  STACKTOP = sp;return ($27|0);
 } else {
  $0 = $16;
  $17 = $0;
  $18 = $17;
  $19 = (($18) - 1)|0;
  HEAP32[$1>>2] = $19;
  $20 = +HEAPF32[$1>>2];
  $21 = -$20;
  $2 = $21;
  $22 = $2;
  HEAPF32[$3>>2] = $22;
  $23 = HEAP32[$3>>2]|0;
  $24 = -8 & $23;
  $25 = (1 + ($24))|0;
  $26 = $25;
  $6 = $26;
  $27 = $6;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _mu_num_sub($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = $a;
 $5 = $b;
 $6 = $4;
 $2 = $6;
 $7 = $2;
 $8 = $7;
 $9 = (($8) - 1)|0;
 HEAP32[$3>>2] = $9;
 $10 = +HEAPF32[$3>>2];
 $11 = $5;
 $0 = $11;
 $12 = $0;
 $13 = $12;
 $14 = (($13) - 1)|0;
 HEAP32[$1>>2] = $14;
 $15 = +HEAPF32[$1>>2];
 $16 = $10 - $15;
 $17 = (_mu_num_fromfloat($16)|0);
 STACKTOP = sp;return ($17|0);
}
function _mu_num_idiv($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = $a;
 $5 = $b;
 $6 = $4;
 $2 = $6;
 $7 = $2;
 $8 = $7;
 $9 = (($8) - 1)|0;
 HEAP32[$3>>2] = $9;
 $10 = +HEAPF32[$3>>2];
 $11 = $5;
 $0 = $11;
 $12 = $0;
 $13 = $12;
 $14 = (($13) - 1)|0;
 HEAP32[$1>>2] = $14;
 $15 = +HEAPF32[$1>>2];
 $16 = $10 / $15;
 $17 = $16;
 $18 = (+Math_floor((+$17)));
 $19 = $18;
 $20 = (_mu_num_fromfloat($19)|0);
 STACKTOP = sp;return ($20|0);
}
function _mu_num_mod($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $base = 0.0, $mod = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 24|0;
 $3 = sp + 16|0;
 $4 = $a;
 $5 = $b;
 $6 = $5;
 $2 = $6;
 $7 = $2;
 $8 = $7;
 $9 = (($8) - 1)|0;
 HEAP32[$3>>2] = $9;
 $10 = +HEAPF32[$3>>2];
 $base = $10;
 $11 = $4;
 $0 = $11;
 $12 = $0;
 $13 = $12;
 $14 = (($13) - 1)|0;
 HEAP32[$1>>2] = $14;
 $15 = +HEAPF32[$1>>2];
 $16 = $15;
 $17 = $base;
 $18 = $17;
 $19 = (+_fmod($16,$18));
 $20 = $19;
 $mod = $20;
 $21 = $mod;
 $22 = $base;
 $23 = $21 * $22;
 $24 = $23 < 0.0;
 if (!($24)) {
  $28 = $mod;
  $29 = (_mu_num_fromfloat($28)|0);
  STACKTOP = sp;return ($29|0);
 }
 $25 = $base;
 $26 = $mod;
 $27 = $26 + $25;
 $mod = $27;
 $28 = $mod;
 $29 = (_mu_num_fromfloat($28)|0);
 STACKTOP = sp;return ($29|0);
}
function _mu_num_log($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = $a;
 $5 = $b;
 $6 = $4;
 $2 = $6;
 $7 = $2;
 $8 = $7;
 $9 = (($8) - 1)|0;
 HEAP32[$3>>2] = $9;
 $10 = +HEAPF32[$3>>2];
 $11 = $10;
 $12 = (+Math_log((+$11)));
 $13 = $5;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $5;
  $17 = $15;
 } else {
  $16 = (_mu_e_def()|0);
  $17 = $16;
 }
 $0 = $17;
 $18 = $0;
 $19 = $18;
 $20 = (($19) - 1)|0;
 HEAP32[$1>>2] = $20;
 $21 = +HEAPF32[$1>>2];
 $22 = $21;
 $23 = (+Math_log((+$22)));
 $24 = $12 / $23;
 $25 = $24;
 $26 = (_mu_num_fromfloat($25)|0);
 STACKTOP = sp;return ($26|0);
}
function _mu_num_abs($a) {
 $a = $a|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 12|0;
 $3 = sp + 4|0;
 $4 = $a;
 $5 = $4;
 $2 = $5;
 $6 = $2;
 $7 = $6;
 $8 = (($7) - 1)|0;
 HEAP32[$3>>2] = $8;
 $9 = +HEAPF32[$3>>2];
 $10 = $9;
 $11 = (+Math_abs((+$10)));
 $12 = $11;
 $0 = $12;
 $13 = $0;
 HEAPF32[$1>>2] = $13;
 $14 = HEAP32[$1>>2]|0;
 $15 = -8 & $14;
 $16 = (1 + ($15))|0;
 $17 = $16;
 STACKTOP = sp;return ($17|0);
}
function _mu_num_floor($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 4|0;
 $2 = $a;
 $3 = $2;
 $0 = $3;
 $4 = $0;
 $5 = $4;
 $6 = (($5) - 1)|0;
 HEAP32[$1>>2] = $6;
 $7 = +HEAPF32[$1>>2];
 $8 = $7;
 $9 = (+Math_floor((+$8)));
 $10 = $9;
 $11 = (_mu_num_fromfloat($10)|0);
 STACKTOP = sp;return ($11|0);
}
function _mu_num_ceil($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 4|0;
 $2 = $a;
 $3 = $2;
 $0 = $3;
 $4 = $0;
 $5 = $4;
 $6 = (($5) - 1)|0;
 HEAP32[$1>>2] = $6;
 $7 = +HEAPF32[$1>>2];
 $8 = $7;
 $9 = (+Math_ceil((+$8)));
 $10 = $9;
 $11 = (_mu_num_fromfloat($10)|0);
 STACKTOP = sp;return ($11|0);
}
function _mu_num_cos($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 4|0;
 $2 = $a;
 $3 = $2;
 $0 = $3;
 $4 = $0;
 $5 = $4;
 $6 = (($5) - 1)|0;
 HEAP32[$1>>2] = $6;
 $7 = +HEAPF32[$1>>2];
 $8 = $7;
 $9 = (+Math_cos((+$8)));
 $10 = $9;
 $11 = (_mu_num_fromfloat($10)|0);
 STACKTOP = sp;return ($11|0);
}
function _mu_num_acos($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 4|0;
 $2 = $a;
 $3 = $2;
 $0 = $3;
 $4 = $0;
 $5 = $4;
 $6 = (($5) - 1)|0;
 HEAP32[$1>>2] = $6;
 $7 = +HEAPF32[$1>>2];
 $8 = $7;
 $9 = (+Math_acos((+$8)));
 $10 = $9;
 $11 = (_mu_num_fromfloat($10)|0);
 STACKTOP = sp;return ($11|0);
}
function _mu_num_sin($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 4|0;
 $2 = $a;
 $3 = $2;
 $0 = $3;
 $4 = $0;
 $5 = $4;
 $6 = (($5) - 1)|0;
 HEAP32[$1>>2] = $6;
 $7 = +HEAPF32[$1>>2];
 $8 = $7;
 $9 = (+Math_sin((+$8)));
 $10 = $9;
 $11 = (_mu_num_fromfloat($10)|0);
 STACKTOP = sp;return ($11|0);
}
function _mu_num_asin($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 4|0;
 $2 = $a;
 $3 = $2;
 $0 = $3;
 $4 = $0;
 $5 = $4;
 $6 = (($5) - 1)|0;
 HEAP32[$1>>2] = $6;
 $7 = +HEAPF32[$1>>2];
 $8 = $7;
 $9 = (+Math_asin((+$8)));
 $10 = $9;
 $11 = (_mu_num_fromfloat($10)|0);
 STACKTOP = sp;return ($11|0);
}
function _mu_num_tan($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 4|0;
 $2 = $a;
 $3 = $2;
 $0 = $3;
 $4 = $0;
 $5 = $4;
 $6 = (($5) - 1)|0;
 HEAP32[$1>>2] = $6;
 $7 = +HEAPF32[$1>>2];
 $8 = $7;
 $9 = (+Math_tan((+$8)));
 $10 = $9;
 $11 = (_mu_num_fromfloat($10)|0);
 STACKTOP = sp;return ($11|0);
}
function _mu_num_atan($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 28|0;
 $3 = sp + 20|0;
 $5 = sp + 12|0;
 $7 = $a;
 $8 = $b;
 $9 = $8;
 $10 = ($9|0)!=(0|0);
 $11 = $7;
 if ($10) {
  $2 = $11;
  $20 = $2;
  $21 = $20;
  $22 = (($21) - 1)|0;
  HEAP32[$3>>2] = $22;
  $23 = +HEAPF32[$3>>2];
  $24 = $23;
  $25 = $8;
  $0 = $25;
  $26 = $0;
  $27 = $26;
  $28 = (($27) - 1)|0;
  HEAP32[$1>>2] = $28;
  $29 = +HEAPF32[$1>>2];
  $30 = $29;
  $31 = (+Math_atan2((+$24),(+$30)));
  $32 = $31;
  $33 = (_mu_num_fromfloat($32)|0);
  $6 = $33;
  $34 = $6;
  STACKTOP = sp;return ($34|0);
 } else {
  $4 = $11;
  $12 = $4;
  $13 = $12;
  $14 = (($13) - 1)|0;
  HEAP32[$5>>2] = $14;
  $15 = +HEAPF32[$5>>2];
  $16 = $15;
  $17 = (+Math_atan((+$16)));
  $18 = $17;
  $19 = (_mu_num_fromfloat($18)|0);
  $6 = $19;
  $34 = $6;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _mu_num_not($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 16|0;
 $3 = sp + 8|0;
 $5 = $a;
 $6 = $5;
 $4 = $6;
 $7 = $4;
 $2 = $7;
 $8 = $2;
 $9 = $8;
 $10 = (($9) - 1)|0;
 HEAP32[$3>>2] = $10;
 $11 = +HEAPF32[$3>>2];
 $12 = (~~(($11))>>>0);
 $13 = $12 ^ -1;
 $14 = $13&65535;
 $15 = $14&65535;
 $0 = $15;
 $16 = $0;
 $17 = (+($16>>>0));
 HEAPF32[$1>>2] = $17;
 $18 = HEAP32[$1>>2]|0;
 $19 = -8 & $18;
 $20 = (1 + ($19))|0;
 $21 = $20;
 STACKTOP = sp;return ($21|0);
}
function _mu_num_and($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 32|0;
 $4 = sp + 20|0;
 $6 = sp + 12|0;
 $8 = $a;
 $9 = $b;
 $10 = $8;
 $7 = $10;
 $11 = $7;
 $5 = $11;
 $12 = $5;
 $13 = $12;
 $14 = (($13) - 1)|0;
 HEAP32[$6>>2] = $14;
 $15 = +HEAPF32[$6>>2];
 $16 = (~~(($15))>>>0);
 $17 = $9;
 $2 = $17;
 $18 = $2;
 $0 = $18;
 $19 = $0;
 $20 = $19;
 $21 = (($20) - 1)|0;
 HEAP32[$1>>2] = $21;
 $22 = +HEAPF32[$1>>2];
 $23 = (~~(($22))>>>0);
 $24 = $16 & $23;
 $25 = $24&65535;
 $26 = $25&65535;
 $3 = $26;
 $27 = $3;
 $28 = (+($27>>>0));
 HEAPF32[$4>>2] = $28;
 $29 = HEAP32[$4>>2]|0;
 $30 = -8 & $29;
 $31 = (1 + ($30))|0;
 $32 = $31;
 STACKTOP = sp;return ($32|0);
}
function _mu_num_or($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 32|0;
 $4 = sp + 20|0;
 $6 = sp + 12|0;
 $8 = $a;
 $9 = $b;
 $10 = $8;
 $7 = $10;
 $11 = $7;
 $5 = $11;
 $12 = $5;
 $13 = $12;
 $14 = (($13) - 1)|0;
 HEAP32[$6>>2] = $14;
 $15 = +HEAPF32[$6>>2];
 $16 = (~~(($15))>>>0);
 $17 = $9;
 $2 = $17;
 $18 = $2;
 $0 = $18;
 $19 = $0;
 $20 = $19;
 $21 = (($20) - 1)|0;
 HEAP32[$1>>2] = $21;
 $22 = +HEAPF32[$1>>2];
 $23 = (~~(($22))>>>0);
 $24 = $16 | $23;
 $25 = $24&65535;
 $26 = $25&65535;
 $3 = $26;
 $27 = $3;
 $28 = (+($27>>>0));
 HEAPF32[$4>>2] = $28;
 $29 = HEAP32[$4>>2]|0;
 $30 = -8 & $29;
 $31 = (1 + ($30))|0;
 $32 = $31;
 STACKTOP = sp;return ($32|0);
}
function _mu_num_xor($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 32|0;
 $4 = sp + 20|0;
 $6 = sp + 12|0;
 $8 = $a;
 $9 = $b;
 $10 = $8;
 $7 = $10;
 $11 = $7;
 $5 = $11;
 $12 = $5;
 $13 = $12;
 $14 = (($13) - 1)|0;
 HEAP32[$6>>2] = $14;
 $15 = +HEAPF32[$6>>2];
 $16 = (~~(($15))>>>0);
 $17 = $9;
 $2 = $17;
 $18 = $2;
 $0 = $18;
 $19 = $0;
 $20 = $19;
 $21 = (($20) - 1)|0;
 HEAP32[$1>>2] = $21;
 $22 = +HEAPF32[$1>>2];
 $23 = (~~(($22))>>>0);
 $24 = $16 ^ $23;
 $25 = $24&65535;
 $26 = $25&65535;
 $3 = $26;
 $27 = $3;
 $28 = (+($27>>>0));
 HEAPF32[$4>>2] = $28;
 $29 = HEAP32[$4>>2]|0;
 $30 = -8 & $29;
 $31 = (1 + ($30))|0;
 $32 = $31;
 STACKTOP = sp;return ($32|0);
}
function _mu_num_shl($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 32|0;
 $4 = sp + 20|0;
 $6 = sp + 12|0;
 $8 = $a;
 $9 = $b;
 $10 = $8;
 $7 = $10;
 $11 = $7;
 $5 = $11;
 $12 = $5;
 $13 = $12;
 $14 = (($13) - 1)|0;
 HEAP32[$6>>2] = $14;
 $15 = +HEAPF32[$6>>2];
 $16 = (~~(($15))>>>0);
 $17 = $9;
 $2 = $17;
 $18 = $2;
 $0 = $18;
 $19 = $0;
 $20 = $19;
 $21 = (($20) - 1)|0;
 HEAP32[$1>>2] = $21;
 $22 = +HEAPF32[$1>>2];
 $23 = (~~(($22))>>>0);
 $24 = $16 << $23;
 $3 = $24;
 $25 = $3;
 $26 = (+($25>>>0));
 HEAPF32[$4>>2] = $26;
 $27 = HEAP32[$4>>2]|0;
 $28 = -8 & $27;
 $29 = (1 + ($28))|0;
 $30 = $29;
 STACKTOP = sp;return ($30|0);
}
function _mu_num_shr($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 32|0;
 $4 = sp + 20|0;
 $6 = sp + 12|0;
 $8 = $a;
 $9 = $b;
 $10 = $8;
 $7 = $10;
 $11 = $7;
 $5 = $11;
 $12 = $5;
 $13 = $12;
 $14 = (($13) - 1)|0;
 HEAP32[$6>>2] = $14;
 $15 = +HEAPF32[$6>>2];
 $16 = (~~(($15))>>>0);
 $17 = $9;
 $2 = $17;
 $18 = $2;
 $0 = $18;
 $19 = $0;
 $20 = $19;
 $21 = (($20) - 1)|0;
 HEAP32[$1>>2] = $21;
 $22 = +HEAPF32[$1>>2];
 $23 = (~~(($22))>>>0);
 $24 = $16 >>> $23;
 $3 = $24;
 $25 = $3;
 $26 = (+($25>>>0));
 HEAPF32[$4>>2] = $26;
 $27 = HEAP32[$4>>2]|0;
 $28 = -8 & $27;
 $29 = (1 + ($28))|0;
 $30 = $29;
 STACKTOP = sp;return ($30|0);
}
function _mu_num_repr($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 12|0;
 $3 = sp + 4|0;
 $4 = $n;
 $5 = $4;
 $2 = 10;
 $6 = $2;
 $7 = (+($6>>>0));
 HEAPF32[$3>>2] = $7;
 $8 = HEAP32[$3>>2]|0;
 $9 = -8 & $8;
 $10 = (1 + ($9))|0;
 $11 = $10;
 $0 = 10;
 $12 = $0;
 $13 = (+($12>>>0));
 HEAPF32[$1>>2] = $13;
 $14 = HEAP32[$1>>2]|0;
 $15 = -8 & $14;
 $16 = (1 + ($15))|0;
 $17 = $16;
 $18 = (_mu_num_base($5,0,$11,101,$17)|0);
 STACKTOP = sp;return ($18|0);
}
function _mu_num_base($n,$c,$base,$expc,$expbase) {
 $n = $n|0;
 $c = $c|0;
 $base = $base|0;
 $expc = $expc|0;
 $expbase = $expbase|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $digits = 0, $exp = 0, $i = 0, $j = 0, $s = 0, $scientific = 0, $sig = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 152|0;
 $5 = sp + 168|0;
 $7 = sp + 132|0;
 $9 = sp + 124|0;
 $11 = sp + 116|0;
 $13 = sp + 108|0;
 $16 = sp + 167|0;
 $19 = sp + 166|0;
 $21 = sp + 84|0;
 $23 = sp + 76|0;
 $25 = sp + 68|0;
 $s = sp + 48|0;
 $i = sp + 44|0;
 $32 = sp + 162|0;
 $27 = $n;
 $28 = $c;
 $29 = $base;
 $30 = $expc;
 $31 = $expbase;
 $33 = $27;
 $24 = 0;
 $34 = $24;
 $35 = (+($34>>>0));
 HEAPF32[$25>>2] = $35;
 $36 = HEAP32[$25>>2]|0;
 $37 = -8 & $36;
 $38 = (1 + ($37))|0;
 $39 = $38;
 $40 = ($33|0)==($39|0);
 if ($40) {
  $41 = $28;
  $42 = ($41<<24>>24)!=(0);
  if ($42) {
   $43 = $28;
   $44 = $43 << 24 >> 24;
   HEAP32[$vararg_buffer>>2] = $44;
   $45 = (_mu_str_format(5042,$vararg_buffer)|0);
   $26 = $45;
   $163 = $26;
   STACKTOP = sp;return ($163|0);
  } else {
   $46 = (_mu_str_format(5047,$vararg_buffer1)|0);
   $26 = $46;
   $163 = $26;
   STACKTOP = sp;return ($163|0);
  }
 }
 $47 = $27;
 $48 = (_mu_inf_def()|0);
 $49 = ($47|0)==($48|0);
 if ($49) {
  $50 = (_mu_str_format(5049,$vararg_buffer3)|0);
  $26 = $50;
  $163 = $26;
  STACKTOP = sp;return ($163|0);
 }
 $51 = $27;
 $52 = (_mu_ninf_def()|0);
 $53 = ($51|0)==($52|0);
 if ($53) {
  $54 = (_mu_str_format(5054,$vararg_buffer5)|0);
  $26 = $54;
  $163 = $26;
  STACKTOP = sp;return ($163|0);
 }
 $55 = (_mu_buf_create(0)|0);
 HEAP32[$s>>2] = $55;
 HEAP32[$i>>2] = 0;
 $56 = $27;
 $22 = 0;
 $57 = $22;
 $58 = (+($57>>>0));
 HEAPF32[$23>>2] = $58;
 $59 = HEAP32[$23>>2]|0;
 $60 = -8 & $59;
 $61 = (1 + ($60))|0;
 $62 = $61;
 $63 = (_mu_num_cmp($56,$62)|0);
 $64 = ($63|0)<(0);
 if ($64) {
  $65 = $27;
  $66 = (_mu_num_neg($65)|0);
  $27 = $66;
  $14 = $s;
  $15 = $i;
  HEAP8[$16>>0] = 45;
  $67 = $14;
  $68 = $15;
  _mu_buf_pushdata($67,$68,$16,1);
 }
 $69 = $28;
 $70 = ($69<<24>>24)!=(0);
 if ($70) {
  HEAP8[$32>>0] = 48;
  $71 = ((($32)) + 1|0);
  $72 = $28;
  HEAP8[$71>>0] = $72;
  _mu_buf_pushdata($s,$i,$32,2);
 }
 $73 = $27;
 $74 = $31;
 $75 = (_mu_num_log($73,$74)|0);
 $76 = (_mu_num_floor($75)|0);
 $exp = $76;
 $77 = $27;
 $78 = $29;
 $79 = (_mu_num_log($77,$78)|0);
 $80 = (_mu_num_floor($79)|0);
 $sig = $80;
 $12 = 20;
 $81 = $12;
 $82 = (+($81>>>0));
 HEAPF32[$13>>2] = $82;
 $83 = HEAP32[$13>>2]|0;
 $84 = -8 & $83;
 $85 = (1 + ($84))|0;
 $86 = $85;
 $87 = $29;
 $10 = 2;
 $88 = $10;
 $89 = (+($88>>>0));
 HEAPF32[$11>>2] = $89;
 $90 = HEAP32[$11>>2]|0;
 $91 = -8 & $90;
 $92 = (1 + ($91))|0;
 $93 = $92;
 $94 = (_mu_num_log($87,$93)|0);
 $95 = (_mu_num_div($86,$94)|0);
 $96 = (_mu_num_ceil($95)|0);
 $digits = $96;
 $97 = $sig;
 $98 = $digits;
 $99 = (_mu_num_cmp($97,$98)|0);
 $100 = ($99|0)>=(0);
 if ($100) {
  $111 = 1;
 } else {
  $101 = $sig;
  $8 = -1;
  $102 = $8;
  $103 = (+($102|0));
  HEAPF32[$9>>2] = $103;
  $104 = HEAP32[$9>>2]|0;
  $105 = -8 & $104;
  $106 = (1 + ($105))|0;
  $107 = $106;
  $108 = (_mu_num_cmp($101,$107)|0);
  $109 = ($108|0)<(0);
  $111 = $109;
 }
 $110 = $111&1;
 $scientific = $110;
 $112 = $scientific;
 $113 = $112&1;
 if ($113) {
  $114 = $27;
  $115 = $31;
  $116 = $exp;
  $117 = (_mu_num_pow($115,$116)|0);
  $118 = (_mu_num_div($114,$117)|0);
  $27 = $118;
 }
 $119 = HEAP32[$i>>2]|0;
 $j = $119;
 $120 = $27;
 $121 = $29;
 _mu_num_base_ipart($s,$i,$120,$121);
 $122 = $27;
 $123 = $29;
 $124 = $digits;
 $2 = $124;
 $125 = $2;
 $0 = $125;
 $126 = $0;
 $127 = $126;
 $128 = (($127) - 1)|0;
 HEAP32[$1>>2] = $128;
 $129 = +HEAPF32[$1>>2];
 $130 = (~~(($129))>>>0);
 $131 = HEAP32[$i>>2]|0;
 $132 = $j;
 $133 = (($131) - ($132))|0;
 $134 = (($130) - ($133))|0;
 _mu_num_base_fpart($s,$i,$122,$123,$134);
 $135 = $scientific;
 $136 = $135&1;
 if ($136) {
  $137 = $30;
  $3 = $s;
  $4 = $i;
  HEAP8[$5>>0] = $137;
  $138 = $3;
  $139 = $4;
  _mu_buf_pushdata($138,$139,$5,1);
  $140 = $exp;
  $6 = 0;
  $141 = $6;
  $142 = (+($141>>>0));
  HEAPF32[$7>>2] = $142;
  $143 = HEAP32[$7>>2]|0;
  $144 = -8 & $143;
  $145 = (1 + ($144))|0;
  $146 = $145;
  $147 = (_mu_num_cmp($140,$146)|0);
  $148 = ($147|0)<(0);
  if ($148) {
   $149 = $exp;
   $150 = (_mu_num_neg($149)|0);
   $exp = $150;
   $17 = $s;
   $18 = $i;
   HEAP8[$19>>0] = 45;
   $151 = $17;
   $152 = $18;
   _mu_buf_pushdata($151,$152,$19,1);
  }
  $153 = $exp;
  $20 = 10;
  $154 = $20;
  $155 = (+($154>>>0));
  HEAPF32[$21>>2] = $155;
  $156 = HEAP32[$21>>2]|0;
  $157 = -8 & $156;
  $158 = (1 + ($157))|0;
  $159 = $158;
  _mu_num_base_ipart($s,$i,$153,$159);
 }
 $160 = HEAP32[$s>>2]|0;
 $161 = HEAP32[$i>>2]|0;
 $162 = (_mu_str_intern($160,$161)|0);
 $26 = $162;
 $163 = $26;
 STACKTOP = sp;return ($163|0);
}
function _mu_num_base_ipart($s,$i,$n,$base) {
 $s = $s|0;
 $i = $i|0;
 $n = $n|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $d = 0;
 var $j = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 69|0;
 $4 = sp + 52|0;
 $9 = sp + 32|0;
 $10 = $s;
 $11 = $i;
 $12 = $n;
 $13 = $base;
 $14 = $11;
 $15 = HEAP32[$14>>2]|0;
 $j = $15;
 while(1) {
  $16 = $12;
  $8 = 0;
  $17 = $8;
  $18 = (+($17>>>0));
  HEAPF32[$9>>2] = $18;
  $19 = HEAP32[$9>>2]|0;
  $20 = -8 & $19;
  $21 = (1 + ($20))|0;
  $22 = $21;
  $23 = (_mu_num_cmp($16,$22)|0);
  $24 = ($23|0)>(0);
  if (!($24)) {
   break;
  }
  $25 = $12;
  $26 = $13;
  $27 = (_mu_num_mod($25,$26)|0);
  $d = $27;
  $28 = $10;
  $29 = $11;
  $30 = $d;
  $5 = $30;
  $31 = $5;
  $3 = $31;
  $32 = $3;
  $33 = $32;
  $34 = (($33) - 1)|0;
  HEAP32[$4>>2] = $34;
  $35 = +HEAPF32[$4>>2];
  $36 = (~~(($35))>>>0);
  $37 = (_mu_num_toascii($36)|0);
  $0 = $28;
  $1 = $29;
  HEAP8[$2>>0] = $37;
  $38 = $0;
  $39 = $1;
  _mu_buf_pushdata($38,$39,$2,1);
  $40 = $12;
  $41 = $13;
  $42 = (_mu_num_idiv($40,$41)|0);
  $12 = $42;
 }
 $43 = $10;
 $44 = HEAP32[$43>>2]|0;
 $6 = $44;
 $45 = $6;
 $46 = $45;
 $47 = -8 & $46;
 $48 = $47;
 $49 = ((($48)) + 4|0);
 $50 = $j;
 $51 = (($49) + ($50)|0);
 $a = $51;
 $52 = $10;
 $53 = HEAP32[$52>>2]|0;
 $7 = $53;
 $54 = $7;
 $55 = $54;
 $56 = -8 & $55;
 $57 = $56;
 $58 = ((($57)) + 4|0);
 $59 = $11;
 $60 = HEAP32[$59>>2]|0;
 $61 = (($58) + ($60)|0);
 $62 = ((($61)) + -1|0);
 $b = $62;
 while(1) {
  $63 = $a;
  $64 = $b;
  $65 = ($63>>>0)<($64>>>0);
  if (!($65)) {
   break;
  }
  $66 = $a;
  $67 = HEAP8[$66>>0]|0;
  $t = $67;
  $68 = $b;
  $69 = HEAP8[$68>>0]|0;
  $70 = $a;
  HEAP8[$70>>0] = $69;
  $71 = $t;
  $72 = $b;
  HEAP8[$72>>0] = $71;
  $73 = $a;
  $74 = ((($73)) + 1|0);
  $a = $74;
  $75 = $b;
  $76 = ((($75)) + -1|0);
  $b = $76;
 }
 STACKTOP = sp;return;
}
function _mu_num_toascii($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $0;
 $2 = ($1>>>0)<(10);
 $3 = $0;
 $4 = (48 + ($3))|0;
 $5 = (($3) - 10)|0;
 $6 = (97 + ($5))|0;
 $7 = $2 ? $4 : $6;
 $8 = $7&255;
 STACKTOP = sp;return ($8|0);
}
function _mu_num_base_fpart($s,$i,$n,$base,$digits) {
 $s = $s|0;
 $i = $i|0;
 $n = $n|0;
 $base = $base|0;
 $digits = $digits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $d = 0, $digit = 0;
 var $error = 0, $j = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 100|0;
 $5 = sp + 109|0;
 $7 = sp + 80|0;
 $10 = sp + 108|0;
 $12 = sp + 64|0;
 $14 = sp + 56|0;
 $16 = sp + 48|0;
 $18 = sp + 40|0;
 $19 = $s;
 $20 = $i;
 $21 = $n;
 $22 = $base;
 $23 = $digits;
 $24 = $22;
 $25 = $23;
 $26 = (0 - ($25))|0;
 $17 = $26;
 $27 = $17;
 $28 = (+($27|0));
 HEAPF32[$18>>2] = $28;
 $29 = HEAP32[$18>>2]|0;
 $30 = -8 & $29;
 $31 = (1 + ($30))|0;
 $32 = $31;
 $33 = (_mu_num_pow($24,$32)|0);
 $error = $33;
 $15 = -1;
 $34 = $15;
 $35 = (+($34|0));
 HEAPF32[$16>>2] = $35;
 $36 = HEAP32[$16>>2]|0;
 $37 = -8 & $36;
 $38 = (1 + ($37))|0;
 $39 = $38;
 $digit = $39;
 $40 = $21;
 $11 = 1;
 $41 = $11;
 $42 = (+($41>>>0));
 HEAPF32[$12>>2] = $42;
 $43 = HEAP32[$12>>2]|0;
 $44 = -8 & $43;
 $45 = (1 + ($44))|0;
 $46 = $45;
 $47 = (_mu_num_mod($40,$46)|0);
 $21 = $47;
 $j = 0;
 while(1) {
  $48 = $j;
  $49 = $23;
  $50 = ($48>>>0)<($49>>>0);
  if (!($50)) {
   label = 7;
   break;
  }
  $51 = $21;
  $52 = $error;
  $53 = (_mu_num_cmp($51,$52)|0);
  $54 = ($53|0)<=(0);
  if ($54) {
   label = 7;
   break;
  }
  $55 = $digit;
  $6 = -1;
  $56 = $6;
  $57 = (+($56|0));
  HEAPF32[$7>>2] = $57;
  $58 = HEAP32[$7>>2]|0;
  $59 = -8 & $58;
  $60 = (1 + ($59))|0;
  $61 = $60;
  $62 = ($55|0)==($61|0);
  if ($62) {
   $63 = $19;
   $64 = $20;
   $3 = $63;
   $4 = $64;
   HEAP8[$5>>0] = 46;
   $65 = $3;
   $66 = $4;
   _mu_buf_pushdata($65,$66,$5,1);
  }
  $67 = $22;
  $68 = $digit;
  $69 = (_mu_num_pow($67,$68)|0);
  $p = $69;
  $70 = $21;
  $71 = $p;
  $72 = (_mu_num_idiv($70,$71)|0);
  $d = $72;
  $73 = $19;
  $74 = $20;
  $75 = $d;
  $2 = $75;
  $76 = $2;
  $0 = $76;
  $77 = $0;
  $78 = $77;
  $79 = (($78) - 1)|0;
  HEAP32[$1>>2] = $79;
  $80 = +HEAPF32[$1>>2];
  $81 = (~~(($80))>>>0);
  $82 = (_mu_num_toascii($81)|0);
  $8 = $73;
  $9 = $74;
  HEAP8[$10>>0] = $82;
  $83 = $8;
  $84 = $9;
  _mu_buf_pushdata($83,$84,$10,1);
  $85 = $21;
  $86 = $p;
  $87 = (_mu_num_mod($85,$86)|0);
  $21 = $87;
  $88 = $digit;
  $13 = 1;
  $89 = $13;
  $90 = (+($89>>>0));
  HEAPF32[$14>>2] = $90;
  $91 = HEAP32[$14>>2]|0;
  $92 = -8 & $91;
  $93 = (1 + ($92))|0;
  $94 = $93;
  $95 = (_mu_num_sub($88,$94)|0);
  $digit = $95;
  $96 = $j;
  $97 = (($96) + 1)|0;
  $j = $97;
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
}
function _mu_num_bin($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 12|0;
 $3 = sp + 4|0;
 $4 = $n;
 $5 = $4;
 $2 = 2;
 $6 = $2;
 $7 = (+($6>>>0));
 HEAPF32[$3>>2] = $7;
 $8 = HEAP32[$3>>2]|0;
 $9 = -8 & $8;
 $10 = (1 + ($9))|0;
 $11 = $10;
 $0 = 2;
 $12 = $0;
 $13 = (+($12>>>0));
 HEAPF32[$1>>2] = $13;
 $14 = HEAP32[$1>>2]|0;
 $15 = -8 & $14;
 $16 = (1 + ($15))|0;
 $17 = $16;
 $18 = (_mu_num_base($5,98,$11,112,$17)|0);
 STACKTOP = sp;return ($18|0);
}
function _mu_num_oct($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 12|0;
 $3 = sp + 4|0;
 $4 = $n;
 $5 = $4;
 $2 = 8;
 $6 = $2;
 $7 = (+($6>>>0));
 HEAPF32[$3>>2] = $7;
 $8 = HEAP32[$3>>2]|0;
 $9 = -8 & $8;
 $10 = (1 + ($9))|0;
 $11 = $10;
 $0 = 2;
 $12 = $0;
 $13 = (+($12>>>0));
 HEAPF32[$1>>2] = $13;
 $14 = HEAP32[$1>>2]|0;
 $15 = -8 & $14;
 $16 = (1 + ($15))|0;
 $17 = $16;
 $18 = (_mu_num_base($5,111,$11,112,$17)|0);
 STACKTOP = sp;return ($18|0);
}
function _mu_num_hex($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 12|0;
 $3 = sp + 4|0;
 $4 = $n;
 $5 = $4;
 $2 = 16;
 $6 = $2;
 $7 = (+($6>>>0));
 HEAPF32[$3>>2] = $7;
 $8 = HEAP32[$3>>2]|0;
 $9 = -8 & $8;
 $10 = (1 + ($9))|0;
 $11 = $10;
 $0 = 2;
 $12 = $0;
 $13 = (+($12>>>0));
 HEAPF32[$1>>2] = $13;
 $14 = HEAP32[$1>>2]|0;
 $15 = -8 & $14;
 $16 = (1 + ($15))|0;
 $17 = $16;
 $18 = (_mu_num_base($5,120,$11,112,$17)|0);
 STACKTOP = sp;return ($18|0);
}
function _mu_num_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1377]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1792)|0);
  HEAP32[1377] = $2;
 }
 $3 = HEAP32[1377]|0;
 return ($3|0);
}
function _mu_num_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1800) + 7)|0))|0);
}
function _mu_num_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$i = 0, $count$i2 = 0, $m = 0;
 var $ref$i = 0, $ref$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $frame;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $3 = $6;
 $7 = $3;
 $2 = $7;
 $8 = $2;
 $9 = $8;
 $10 = 6 & $9;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $3;
  $13 = $12;
  $14 = -8 & $13;
  $15 = $14;
  $ref$i = $15;
  $16 = $ref$i;
  $17 = HEAP16[$16>>1]|0;
  $count$i = $17;
  $18 = $count$i;
  $19 = $18&65535;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $count$i;
   $22 = (($21) + 1)<<16>>16;
   $count$i = $22;
   $23 = $count$i;
   $24 = $ref$i;
   HEAP16[$24>>1] = $23;
  }
 }
 $25 = $3;
 $26 = (_mu_num_frommu($25)|0);
 $m = $26;
 $27 = $m;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  $29 = (_mu_num_key_def()|0);
  $30 = $4;
  _mu_errorargs($29,1,$30);
  // unreachable;
 }
 $31 = $4;
 $32 = HEAP32[$31>>2]|0;
 $1 = $32;
 $33 = $1;
 $0 = $33;
 $34 = $0;
 $35 = $34;
 $36 = 6 & $35;
 $37 = ($36|0)!=(0);
 if (!($37)) {
  $55 = $m;
  $56 = $4;
  HEAP32[$56>>2] = $55;
  STACKTOP = sp;return 1;
 }
 $38 = $1;
 $39 = $38;
 $40 = -8 & $39;
 $41 = $40;
 $ref$i1 = $41;
 $42 = $ref$i1;
 $43 = HEAP16[$42>>1]|0;
 $count$i2 = $43;
 $44 = $count$i2;
 $45 = $44&65535;
 $46 = ($45|0)!=(0);
 if (!($46)) {
  $55 = $m;
  $56 = $4;
  HEAP32[$56>>2] = $55;
  STACKTOP = sp;return 1;
 }
 $47 = $count$i2;
 $48 = (($47) + -1)<<16>>16;
 $count$i2 = $48;
 $49 = $count$i2;
 $50 = $ref$i1;
 HEAP16[$50>>1] = $49;
 $51 = $count$i2;
 $52 = $51&65535;
 $53 = ($52|0)==(0);
 if (!($53)) {
  $55 = $m;
  $56 = $4;
  HEAP32[$56>>2] = $55;
  STACKTOP = sp;return 1;
 }
 $54 = $1;
 _mu_destroy($54);
 $55 = $m;
 $56 = $4;
 HEAP32[$56>>2] = $55;
 STACKTOP = sp;return 1;
}
function _mu_add_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1378]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1816)|0);
  HEAP32[1378] = $2;
 }
 $3 = HEAP32[1378]|0;
 return ($3|0);
}
function _mu_add_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1824) + 7)|0))|0);
}
function _mu_add_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $frame;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $a = $6;
 $7 = $4;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $b = $9;
 $10 = $a;
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $13 = $12;
 $14 = 7 & $13;
 $15 = ($14|0)==(1);
 if (!($15)) {
  $24 = (_mu_add_key_def()|0);
  $25 = $4;
  _mu_errorargs($24,2,$25);
  // unreachable;
 }
 $16 = $b;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $b;
  $1 = $18;
  $19 = $1;
  $0 = $19;
  $20 = $0;
  $21 = $20;
  $22 = 7 & $21;
  $23 = ($22|0)==(1);
  if (!($23)) {
   $24 = (_mu_add_key_def()|0);
   $25 = $4;
   _mu_errorargs($24,2,$25);
   // unreachable;
  }
 }
 $26 = $b;
 $27 = ($26|0)!=(0|0);
 $28 = $a;
 if ($27) {
  $30 = $b;
  $31 = (_mu_num_add($28,$30)|0);
  $32 = $4;
  HEAP32[$32>>2] = $31;
  STACKTOP = sp;return 1;
 } else {
  $29 = $4;
  HEAP32[$29>>2] = $28;
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function _mu_sub_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1379]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1840)|0);
  HEAP32[1379] = $2;
 }
 $3 = HEAP32[1379]|0;
 return ($3|0);
}
function _mu_sub_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1848) + 7)|0))|0);
}
function _mu_sub_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $frame;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $a = $6;
 $7 = $4;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $b = $9;
 $10 = $a;
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $13 = $12;
 $14 = 7 & $13;
 $15 = ($14|0)==(1);
 if (!($15)) {
  $24 = (_mu_sub_key_def()|0);
  $25 = $4;
  _mu_errorargs($24,2,$25);
  // unreachable;
 }
 $16 = $b;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $b;
  $1 = $18;
  $19 = $1;
  $0 = $19;
  $20 = $0;
  $21 = $20;
  $22 = 7 & $21;
  $23 = ($22|0)==(1);
  if (!($23)) {
   $24 = (_mu_sub_key_def()|0);
   $25 = $4;
   _mu_errorargs($24,2,$25);
   // unreachable;
  }
 }
 $26 = $b;
 $27 = ($26|0)!=(0|0);
 $28 = $a;
 if ($27) {
  $31 = $b;
  $32 = (_mu_num_sub($28,$31)|0);
  $33 = $4;
  HEAP32[$33>>2] = $32;
  STACKTOP = sp;return 1;
 } else {
  $29 = (_mu_num_neg($28)|0);
  $30 = $4;
  HEAP32[$30>>2] = $29;
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function _mu_mul_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1380]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1864)|0);
  HEAP32[1380] = $2;
 }
 $3 = HEAP32[1380]|0;
 return ($3|0);
}
function _mu_mul_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1872) + 7)|0))|0);
}
function _mu_mul_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $frame;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $a = $6;
 $7 = $4;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $b = $9;
 $10 = $a;
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $13 = $12;
 $14 = 7 & $13;
 $15 = ($14|0)==(1);
 if (!($15)) {
  $22 = (_mu_sub_key_def()|0);
  $23 = $4;
  _mu_errorargs($22,2,$23);
  // unreachable;
 }
 $16 = $b;
 $1 = $16;
 $17 = $1;
 $0 = $17;
 $18 = $0;
 $19 = $18;
 $20 = 7 & $19;
 $21 = ($20|0)==(1);
 if ($21) {
  $24 = $a;
  $25 = $b;
  $26 = (_mu_num_mul($24,$25)|0);
  $27 = $4;
  HEAP32[$27>>2] = $26;
  STACKTOP = sp;return 1;
 } else {
  $22 = (_mu_sub_key_def()|0);
  $23 = $4;
  _mu_errorargs($22,2,$23);
  // unreachable;
 }
 return (0)|0;
}
function _mu_div_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1381]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1888)|0);
  HEAP32[1381] = $2;
 }
 $3 = HEAP32[1381]|0;
 return ($3|0);
}
function _mu_div_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1896) + 7)|0))|0);
}
function _mu_div_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $frame;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $a = $6;
 $7 = $4;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $b = $9;
 $10 = $a;
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $13 = $12;
 $14 = 7 & $13;
 $15 = ($14|0)==(1);
 if (!($15)) {
  $22 = (_mu_mul_key_def()|0);
  $23 = $4;
  _mu_errorargs($22,2,$23);
  // unreachable;
 }
 $16 = $b;
 $1 = $16;
 $17 = $1;
 $0 = $17;
 $18 = $0;
 $19 = $18;
 $20 = 7 & $19;
 $21 = ($20|0)==(1);
 if ($21) {
  $24 = $a;
  $25 = $b;
  $26 = (_mu_num_div($24,$25)|0);
  $27 = $4;
  HEAP32[$27>>2] = $26;
  STACKTOP = sp;return 1;
 } else {
  $22 = (_mu_mul_key_def()|0);
  $23 = $4;
  _mu_errorargs($22,2,$23);
  // unreachable;
 }
 return (0)|0;
}
function _mu_abs_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1382]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1912)|0);
  HEAP32[1382] = $2;
 }
 $3 = HEAP32[1382]|0;
 return ($3|0);
}
function _mu_abs_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1920) + 7)|0))|0);
}
function _mu_abs_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $frame;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $a = $4;
 $5 = $a;
 $1 = $5;
 $6 = $1;
 $0 = $6;
 $7 = $0;
 $8 = $7;
 $9 = 7 & $8;
 $10 = ($9|0)==(1);
 if ($10) {
  $13 = $a;
  $14 = (_mu_num_abs($13)|0);
  $15 = $2;
  HEAP32[$15>>2] = $14;
  STACKTOP = sp;return 1;
 } else {
  $11 = (_mu_abs_key_def()|0);
  $12 = $2;
  _mu_errorargs($11,1,$12);
  // unreachable;
 }
 return (0)|0;
}
function _mu_floor_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1383]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1936)|0);
  HEAP32[1383] = $2;
 }
 $3 = HEAP32[1383]|0;
 return ($3|0);
}
function _mu_floor_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1952) + 7)|0))|0);
}
function _mu_floor_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $frame;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $a = $4;
 $5 = $a;
 $1 = $5;
 $6 = $1;
 $0 = $6;
 $7 = $0;
 $8 = $7;
 $9 = 7 & $8;
 $10 = ($9|0)==(1);
 if ($10) {
  $13 = $a;
  $14 = (_mu_num_floor($13)|0);
  $15 = $2;
  HEAP32[$15>>2] = $14;
  STACKTOP = sp;return 1;
 } else {
  $11 = (_mu_floor_key_def()|0);
  $12 = $2;
  _mu_errorargs($11,1,$12);
  // unreachable;
 }
 return (0)|0;
}
function _mu_ceil_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1384]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1968)|0);
  HEAP32[1384] = $2;
 }
 $3 = HEAP32[1384]|0;
 return ($3|0);
}
function _mu_ceil_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((1976) + 7)|0))|0);
}
function _mu_ceil_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $frame;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $a = $4;
 $5 = $a;
 $1 = $5;
 $6 = $1;
 $0 = $6;
 $7 = $0;
 $8 = $7;
 $9 = 7 & $8;
 $10 = ($9|0)==(1);
 if ($10) {
  $13 = $a;
  $14 = (_mu_num_ceil($13)|0);
  $15 = $2;
  HEAP32[$15>>2] = $14;
  STACKTOP = sp;return 1;
 } else {
  $11 = (_mu_ceil_key_def()|0);
  $12 = $2;
  _mu_errorargs($11,1,$12);
  // unreachable;
 }
 return (0)|0;
}
function _mu_idiv_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1385]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(1992)|0);
  HEAP32[1385] = $2;
 }
 $3 = HEAP32[1385]|0;
 return ($3|0);
}
function _mu_idiv_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((2000) + 7)|0))|0);
}
function _mu_idiv_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $frame;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $a = $6;
 $7 = $4;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $b = $9;
 $10 = $a;
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $13 = $12;
 $14 = 7 & $13;
 $15 = ($14|0)==(1);
 if (!($15)) {
  $22 = (_mu_idiv_key_def()|0);
  $23 = $4;
  _mu_errorargs($22,2,$23);
  // unreachable;
 }
 $16 = $b;
 $1 = $16;
 $17 = $1;
 $0 = $17;
 $18 = $0;
 $19 = $18;
 $20 = 7 & $19;
 $21 = ($20|0)==(1);
 if ($21) {
  $24 = $a;
  $25 = $b;
  $26 = (_mu_num_idiv($24,$25)|0);
  $27 = $4;
  HEAP32[$27>>2] = $26;
  STACKTOP = sp;return 1;
 } else {
  $22 = (_mu_idiv_key_def()|0);
  $23 = $4;
  _mu_errorargs($22,2,$23);
  // unreachable;
 }
 return (0)|0;
}
function _mu_mod_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1386]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(2016)|0);
  HEAP32[1386] = $2;
 }
 $3 = HEAP32[1386]|0;
 return ($3|0);
}
function _mu_mod_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((2024) + 7)|0))|0);
}
function _mu_mod_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $frame;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $a = $6;
 $7 = $4;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $b = $9;
 $10 = $a;
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $13 = $12;
 $14 = 7 & $13;
 $15 = ($14|0)==(1);
 if (!($15)) {
  $22 = (_mu_idiv_key_def()|0);
  $23 = $4;
  _mu_errorargs($22,2,$23);
  // unreachable;
 }
 $16 = $b;
 $1 = $16;
 $17 = $1;
 $0 = $17;
 $18 = $0;
 $19 = $18;
 $20 = 7 & $19;
 $21 = ($20|0)==(1);
 if ($21) {
  $24 = $a;
  $25 = $b;
  $26 = (_mu_num_mod($24,$25)|0);
  $27 = $4;
  HEAP32[$27>>2] = $26;
  STACKTOP = sp;return 1;
 } else {
  $22 = (_mu_idiv_key_def()|0);
  $23 = $4;
  _mu_errorargs($22,2,$23);
  // unreachable;
 }
 return (0)|0;
}
function _mu_pow_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1387]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(2040)|0);
  HEAP32[1387] = $2;
 }
 $3 = HEAP32[1387]|0;
 return ($3|0);
}
function _mu_pow_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((2048) + 7)|0))|0);
}
function _mu_pow_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $frame;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $a = $6;
 $7 = $4;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $b = $9;
 $10 = $a;
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $13 = $12;
 $14 = 7 & $13;
 $15 = ($14|0)==(1);
 if (!($15)) {
  $22 = (_mu_pow_key_def()|0);
  $23 = $4;
  _mu_errorargs($22,2,$23);
  // unreachable;
 }
 $16 = $b;
 $1 = $16;
 $17 = $1;
 $0 = $17;
 $18 = $0;
 $19 = $18;
 $20 = 7 & $19;
 $21 = ($20|0)==(1);
 if ($21) {
  $24 = $a;
  $25 = $b;
  $26 = (_mu_num_pow($24,$25)|0);
  $27 = $4;
  HEAP32[$27>>2] = $26;
  STACKTOP = sp;return 1;
 } else {
  $22 = (_mu_pow_key_def()|0);
  $23 = $4;
  _mu_errorargs($22,2,$23);
  // unreachable;
 }
 return (0)|0;
}
function _mu_log_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1388]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(2064)|0);
  HEAP32[1388] = $2;
 }
 $3 = HEAP32[1388]|0;
 return ($3|0);
}
function _mu_log_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((2072) + 7)|0))|0);
}
function _mu_log_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $frame;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $a = $6;
 $7 = $4;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $b = $9;
 $10 = $a;
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $13 = $12;
 $14 = 7 & $13;
 $15 = ($14|0)==(1);
 if (!($15)) {
  $24 = (_mu_log_key_def()|0);
  $25 = $4;
  _mu_errorargs($24,2,$25);
  // unreachable;
 }
 $16 = $b;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $b;
  $1 = $18;
  $19 = $1;
  $0 = $19;
  $20 = $0;
  $21 = $20;
  $22 = 7 & $21;
  $23 = ($22|0)==(1);
  if (!($23)) {
   $24 = (_mu_log_key_def()|0);
   $25 = $4;
   _mu_errorargs($24,2,$25);
   // unreachable;
  }
 }
 $26 = $a;
 $27 = $b;
 $28 = (_mu_num_log($26,$27)|0);
 $29 = $4;
 HEAP32[$29>>2] = $28;
 STACKTOP = sp;return 1;
}
function _mu_cos_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1389]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(2088)|0);
  HEAP32[1389] = $2;
 }
 $3 = HEAP32[1389]|0;
 return ($3|0);
}
function _mu_cos_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((2096) + 7)|0))|0);
}
function _mu_cos_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $frame;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $a = $4;
 $5 = $a;
 $1 = $5;
 $6 = $1;
 $0 = $6;
 $7 = $0;
 $8 = $7;
 $9 = 7 & $8;
 $10 = ($9|0)==(1);
 if ($10) {
  $13 = $a;
  $14 = (_mu_num_cos($13)|0);
  $15 = $2;
  HEAP32[$15>>2] = $14;
  STACKTOP = sp;return 1;
 } else {
  $11 = (_mu_cos_key_def()|0);
  $12 = $2;
  _mu_errorargs($11,1,$12);
  // unreachable;
 }
 return (0)|0;
}
function _mu_acos_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1390]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(2112)|0);
  HEAP32[1390] = $2;
 }
 $3 = HEAP32[1390]|0;
 return ($3|0);
}
function _mu_acos_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((2120) + 7)|0))|0);
}
function _mu_acos_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $frame;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $a = $4;
 $5 = $a;
 $1 = $5;
 $6 = $1;
 $0 = $6;
 $7 = $0;
 $8 = $7;
 $9 = 7 & $8;
 $10 = ($9|0)==(1);
 if ($10) {
  $13 = $a;
  $14 = (_mu_num_acos($13)|0);
  $15 = $2;
  HEAP32[$15>>2] = $14;
  STACKTOP = sp;return 1;
 } else {
  $11 = (_mu_cos_key_def()|0);
  $12 = $2;
  _mu_errorargs($11,1,$12);
  // unreachable;
 }
 return (0)|0;
}
function _mu_sin_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1391]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(2136)|0);
  HEAP32[1391] = $2;
 }
 $3 = HEAP32[1391]|0;
 return ($3|0);
}
function _mu_sin_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((2144) + 7)|0))|0);
}
function _mu_sin_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $frame;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $a = $4;
 $5 = $a;
 $1 = $5;
 $6 = $1;
 $0 = $6;
 $7 = $0;
 $8 = $7;
 $9 = 7 & $8;
 $10 = ($9|0)==(1);
 if ($10) {
  $13 = $a;
  $14 = (_mu_num_sin($13)|0);
  $15 = $2;
  HEAP32[$15>>2] = $14;
  STACKTOP = sp;return 1;
 } else {
  $11 = (_mu_sin_key_def()|0);
  $12 = $2;
  _mu_errorargs($11,1,$12);
  // unreachable;
 }
 return (0)|0;
}
function _mu_asin_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1392]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(2160)|0);
  HEAP32[1392] = $2;
 }
 $3 = HEAP32[1392]|0;
 return ($3|0);
}
function _mu_asin_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((2168) + 7)|0))|0);
}
function _mu_asin_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $frame;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $a = $4;
 $5 = $a;
 $1 = $5;
 $6 = $1;
 $0 = $6;
 $7 = $0;
 $8 = $7;
 $9 = 7 & $8;
 $10 = ($9|0)==(1);
 if ($10) {
  $13 = $a;
  $14 = (_mu_num_asin($13)|0);
  $15 = $2;
  HEAP32[$15>>2] = $14;
  STACKTOP = sp;return 1;
 } else {
  $11 = (_mu_asin_key_def()|0);
  $12 = $2;
  _mu_errorargs($11,1,$12);
  // unreachable;
 }
 return (0)|0;
}
function _mu_tan_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1393]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(2184)|0);
  HEAP32[1393] = $2;
 }
 $3 = HEAP32[1393]|0;
 return ($3|0);
}
function _mu_tan_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((2192) + 7)|0))|0);
}
function _mu_tan_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $frame;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $a = $4;
 $5 = $a;
 $1 = $5;
 $6 = $1;
 $0 = $6;
 $7 = $0;
 $8 = $7;
 $9 = 7 & $8;
 $10 = ($9|0)==(1);
 if ($10) {
  $13 = $a;
  $14 = (_mu_num_tan($13)|0);
  $15 = $2;
  HEAP32[$15>>2] = $14;
  STACKTOP = sp;return 1;
 } else {
  $11 = (_mu_tan_key_def()|0);
  $12 = $2;
  _mu_errorargs($11,1,$12);
  // unreachable;
 }
 return (0)|0;
}
function _mu_atan_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1394]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(2208)|0);
  HEAP32[1394] = $2;
 }
 $3 = HEAP32[1394]|0;
 return ($3|0);
}
function _mu_atan_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((2216) + 7)|0))|0);
}
function _mu_atan_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $frame;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $a = $6;
 $7 = $4;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $b = $9;
 $10 = $a;
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $13 = $12;
 $14 = 7 & $13;
 $15 = ($14|0)==(1);
 if (!($15)) {
  $24 = (_mu_atan_key_def()|0);
  $25 = $4;
  _mu_errorargs($24,2,$25);
  // unreachable;
 }
 $16 = $b;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $b;
  $1 = $18;
  $19 = $1;
  $0 = $19;
  $20 = $0;
  $21 = $20;
  $22 = 7 & $21;
  $23 = ($22|0)==(1);
  if (!($23)) {
   $24 = (_mu_atan_key_def()|0);
   $25 = $4;
   _mu_errorargs($24,2,$25);
   // unreachable;
  }
 }
 $26 = $a;
 $27 = $b;
 $28 = (_mu_num_atan($26,$27)|0);
 $29 = $4;
 HEAP32[$29>>2] = $28;
 STACKTOP = sp;return 1;
}
function _mu_shl_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1395]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(2232)|0);
  HEAP32[1395] = $2;
 }
 $3 = HEAP32[1395]|0;
 return ($3|0);
}
function _mu_shl_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((2240) + 7)|0))|0);
}
function _mu_shl_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $frame;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $a = $6;
 $7 = $4;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $b = $9;
 $10 = $a;
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $13 = $12;
 $14 = 7 & $13;
 $15 = ($14|0)==(1);
 if (!($15)) {
  $22 = (_mu_shl_key_def()|0);
  $23 = $4;
  _mu_errorargs($22,2,$23);
  // unreachable;
 }
 $16 = $b;
 $1 = $16;
 $17 = $1;
 $0 = $17;
 $18 = $0;
 $19 = $18;
 $20 = 7 & $19;
 $21 = ($20|0)==(1);
 if ($21) {
  $24 = $a;
  $25 = $b;
  $26 = (_mu_num_shl($24,$25)|0);
  $27 = $4;
  HEAP32[$27>>2] = $26;
  STACKTOP = sp;return 1;
 } else {
  $22 = (_mu_shl_key_def()|0);
  $23 = $4;
  _mu_errorargs($22,2,$23);
  // unreachable;
 }
 return (0)|0;
}
function _mu_shr_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1396]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(2256)|0);
  HEAP32[1396] = $2;
 }
 $3 = HEAP32[1396]|0;
 return ($3|0);
}
function _mu_shr_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((2264) + 7)|0))|0);
}
function _mu_shr_bfn($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $frame;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $a = $6;
 $7 = $4;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $b = $9;
 $10 = $a;
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $13 = $12;
 $14 = 7 & $13;
 $15 = ($14|0)==(1);
 if (!($15)) {
  $22 = (_mu_shr_key_def()|0);
  $23 = $4;
  _mu_errorargs($22,2,$23);
  // unreachable;
 }
 $16 = $b;
 $1 = $16;
 $17 = $1;
 $0 = $17;
 $18 = $0;
 $19 = $18;
 $20 = 7 & $19;
 $21 = ($20|0)==(1);
 if ($21) {
  $24 = $a;
  $25 = $b;
  $26 = (_mu_num_shr($24,$25)|0);
  $27 = $4;
  HEAP32[$27>>2] = $26;
  STACKTOP = sp;return 1;
 } else {
  $22 = (_mu_shr_key_def()|0);
  $23 = $4;
  _mu_errorargs($22,2,$23);
  // unreachable;
 }
 return (0)|0;
}
function _mu_random_key_def() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1397]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $2 = (_mu_str_init(2280)|0);
  HEAP32[1397] = $2;
 }
 $3 = HEAP32[1397]|0;
 return ($3|0);
}
function _mu_random_def() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (((((2296) + 7)|0))|0);
}
function _mu_num_random($frame) {
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $b$i = 0, $seed = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 16|0;
 $7 = sp;
 $6 = $frame;
 $8 = $6;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $6;
  $12 = HEAP32[$11>>2]|0;
  $19 = $12;
 } else {
  $4 = 0;
  $13 = $4;
  $14 = (+($13>>>0));
  HEAPF32[$5>>2] = $14;
  $15 = HEAP32[$5>>2]|0;
  $16 = -8 & $15;
  $17 = (1 + ($16))|0;
  $18 = $17;
  $19 = $18;
 }
 $seed = $19;
 $20 = $seed;
 $1 = $20;
 $21 = $1;
 $0 = $21;
 $22 = $0;
 $23 = $22;
 $24 = 7 & $23;
 $25 = ($24|0)==(1);
 if ($25) {
  $28 = $seed;
  HEAP32[$7>>2] = $28;
  $29 = ((($7)) + 4|0);
  $30 = $seed;
  HEAP32[$29>>2] = $30;
  $2 = $7;
  $3 = 8;
  $31 = $3;
  $32 = (_mu_buf_create($31)|0);
  $b$i = $32;
  $33 = $b$i;
  $34 = $33;
  $35 = -8 & $34;
  $36 = $35;
  $37 = ((($36)) + 4|0);
  $38 = $2;
  $39 = $3;
  _memcpy(($37|0),($38|0),($39|0))|0;
  $40 = $b$i;
  $41 = (_mu_fn_fromsbfn(0,314,$40)|0);
  $42 = $6;
  HEAP32[$42>>2] = $41;
  STACKTOP = sp;return 1;
 } else {
  $26 = (_mu_random_key_def()|0);
  $27 = $6;
  _mu_errorargs($26,1,$27);
  // unreachable;
 }
 return (0)|0;
}
function _mu_num_randomstep($scope,$frame) {
 $scope = $scope|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $a = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 40|0;
 $3 = sp + 32|0;
 $5 = sp + 24|0;
 $7 = $scope;
 $8 = $frame;
 $9 = $7;
 $6 = $9;
 $10 = $6;
 $11 = $10;
 $12 = -8 & $11;
 $13 = $12;
 $14 = ((($13)) + 4|0);
 $a = $14;
 $15 = $a;
 $16 = HEAP32[$15>>2]|0;
 $x = $16;
 $17 = $a;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $y = $19;
 $20 = $x;
 $21 = $20 << 15;
 $22 = $x;
 $23 = $22 ^ $21;
 $x = $23;
 $24 = $x;
 $25 = $24 >>> 18;
 $26 = $x;
 $27 = $26 ^ $25;
 $x = $27;
 $28 = $y;
 $29 = $y;
 $30 = $29 >>> 11;
 $31 = $28 ^ $30;
 $32 = $x;
 $33 = $32 ^ $31;
 $x = $33;
 $34 = $y;
 $35 = $a;
 HEAP32[$35>>2] = $34;
 $36 = $x;
 $37 = $a;
 $38 = ((($37)) + 4|0);
 HEAP32[$38>>2] = $36;
 $39 = $x;
 $40 = $y;
 $41 = (($39) + ($40))|0;
 $4 = $41;
 $42 = $4;
 $43 = (+($42>>>0));
 HEAPF32[$5>>2] = $43;
 $44 = HEAP32[$5>>2]|0;
 $45 = -8 & $44;
 $46 = (1 + ($45))|0;
 $47 = $46;
 $2 = -1;
 $48 = $2;
 $49 = (+($48>>>0));
 HEAPF32[$3>>2] = $49;
 $50 = HEAP32[$3>>2]|0;
 $51 = -8 & $50;
 $52 = (1 + ($51))|0;
 $53 = $52;
 $0 = 1;
 $54 = $0;
 $55 = (+($54>>>0));
 HEAPF32[$1>>2] = $55;
 $56 = HEAP32[$1>>2]|0;
 $57 = -8 & $56;
 $58 = (1 + ($57))|0;
 $59 = $58;
 $60 = (_mu_num_add($53,$59)|0);
 $61 = (_mu_num_div($47,$60)|0);
 $62 = $8;
 HEAP32[$62>>2] = $61;
 STACKTOP = sp;return 1;
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1398]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 5636;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 64|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0, $iovcnt$0$lcssa12 = 0;
 var $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) - ($1))|0;
 HEAP32[$2>>2] = $5;
 $6 = ((($iovs)) + 8|0);
 HEAP32[$6>>2] = $buf;
 $7 = ((($iovs)) + 12|0);
 HEAP32[$7>>2] = $len;
 $8 = (($5) + ($len))|0;
 $9 = ((($f)) + 60|0);
 $10 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $8;
 while(1) {
  $11 = HEAP32[1398]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $16 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $16;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $17 = (___syscall146(146,($vararg_buffer3|0))|0);
   $18 = (___syscall_ret($17)|0);
   $cnt$0 = $18;
  } else {
   _pthread_cleanup_push((315|0),($f|0));
   $13 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer>>2] = $13;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $14 = (___syscall146(146,($vararg_buffer|0))|0);
   $15 = (___syscall_ret($14)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $15;
  }
  $19 = ($rem$0|0)==($cnt$0|0);
  if ($19) {
   label = 6;
   break;
  }
  $26 = ($cnt$0|0)<(0);
  if ($26) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $34 = (($rem$0) - ($cnt$0))|0;
  $35 = ((($iov$0)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($cnt$0>>>0)>($36>>>0);
  if ($37) {
   $38 = HEAP32[$10>>2]|0;
   HEAP32[$0>>2] = $38;
   HEAP32[$3>>2] = $38;
   $39 = (($cnt$0) - ($36))|0;
   $40 = ((($iov$0)) + 8|0);
   $41 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $49 = $$pre;$cnt$1 = $39;$iov$1 = $40;$iovcnt$1 = $41;
  } else {
   $42 = ($iovcnt$0|0)==(2);
   if ($42) {
    $43 = HEAP32[$0>>2]|0;
    $44 = (($43) + ($cnt$0)|0);
    HEAP32[$0>>2] = $44;
    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $45 = HEAP32[$iov$1>>2]|0;
  $46 = (($45) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $46;
  $47 = ((($iov$1)) + 4|0);
  $48 = (($49) - ($cnt$1))|0;
  HEAP32[$47>>2] = $48;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $34;
 }
 if ((label|0) == 6) {
  $20 = HEAP32[$10>>2]|0;
  $21 = ((($f)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($f)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$0>>2] = $25;
  HEAP32[$3>>2] = $25;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $27 = ((($f)) + 16|0);
  HEAP32[$27>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 | 32;
  HEAP32[$f>>2] = $29;
  $30 = ($iovcnt$0$lcssa12|0)==(2);
  if ($30) {
   $$0 = 0;
  } else {
   $31 = ((($iov$0$lcssa11)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($len) - ($32))|0;
   $$0 = $33;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _cleanup($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 316;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[852]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[852]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((5620)|0));
   $$012 = HEAP32[(5616)>>2]|0;
   $11 = ($$012|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $23 = $15;
     } else {
      $23 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $24 = ($23|0)==(0);
     if (!($24)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((5620)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 511]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 511]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $fabs = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 L1: do {
  if ($15) {
   label = 3;
  } else {
   $fabs = (+Math_abs((+$y)));
   HEAPF64[tempDoublePtr>>3] = $fabs;$16 = HEAP32[tempDoublePtr>>2]|0;
   $17 = HEAP32[tempDoublePtr+4>>2]|0;
   $18 = ($17>>>0)>(2146435072);
   $19 = ($16>>>0)>(0);
   $20 = ($17|0)==(2146435072);
   $21 = $20 & $19;
   $22 = $18 | $21;
   $23 = ($6|0)==(2047);
   $or$cond = $22 | $23;
   if ($or$cond) {
    label = 3;
   } else {
    $26 = (_bitshift64Shl(($0|0),($1|0),1)|0);
    $27 = tempRet0;
    $28 = ($27>>>0)>($12>>>0);
    $29 = ($26>>>0)>($11>>>0);
    $30 = ($27|0)==($12|0);
    $31 = $30 & $29;
    $32 = $28 | $31;
    if (!($32)) {
     $33 = ($26|0)==($11|0);
     $34 = ($27|0)==($12|0);
     $35 = $33 & $34;
     $36 = $x * 0.0;
     $$x = $35 ? $36 : $x;
     return (+$$x);
    }
    $37 = ($6|0)==(0);
    if ($37) {
     $38 = (_bitshift64Shl(($0|0),($1|0),12)|0);
     $39 = tempRet0;
     $40 = ($39|0)>(-1);
     $41 = ($38>>>0)>(4294967295);
     $42 = ($39|0)==(-1);
     $43 = $42 & $41;
     $44 = $40 | $43;
     if ($44) {
      $46 = $38;$47 = $39;$ex$026 = 0;
      while(1) {
       $45 = (($ex$026) + -1)|0;
       $48 = (_bitshift64Shl(($46|0),($47|0),1)|0);
       $49 = tempRet0;
       $50 = ($49|0)>(-1);
       $51 = ($48>>>0)>(4294967295);
       $52 = ($49|0)==(-1);
       $53 = $52 & $51;
       $54 = $50 | $53;
       if ($54) {
        $46 = $48;$47 = $49;$ex$026 = $45;
       } else {
        $ex$0$lcssa = $45;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $55 = (1 - ($ex$0$lcssa))|0;
     $56 = (_bitshift64Shl(($0|0),($1|0),($55|0))|0);
     $57 = tempRet0;
     $84 = $56;$85 = $57;$ex$1 = $ex$0$lcssa;
    } else {
     $58 = $1 & 1048575;
     $59 = $58 | 1048576;
     $84 = $0;$85 = $59;$ex$1 = $6;
    }
    $60 = ($9|0)==(0);
    if ($60) {
     $61 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $62 = tempRet0;
     $63 = ($62|0)>(-1);
     $64 = ($61>>>0)>(4294967295);
     $65 = ($62|0)==(-1);
     $66 = $65 & $64;
     $67 = $63 | $66;
     if ($67) {
      $69 = $61;$70 = $62;$ey$020 = 0;
      while(1) {
       $68 = (($ey$020) + -1)|0;
       $71 = (_bitshift64Shl(($69|0),($70|0),1)|0);
       $72 = tempRet0;
       $73 = ($72|0)>(-1);
       $74 = ($71>>>0)>(4294967295);
       $75 = ($72|0)==(-1);
       $76 = $75 & $74;
       $77 = $73 | $76;
       if ($77) {
        $69 = $71;$70 = $72;$ey$020 = $68;
       } else {
        $ey$0$lcssa = $68;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $78 = (1 - ($ey$0$lcssa))|0;
     $79 = (_bitshift64Shl(($2|0),($3|0),($78|0))|0);
     $80 = tempRet0;
     $86 = $79;$87 = $80;$ey$1$ph = $ey$0$lcssa;
    } else {
     $81 = $3 & 1048575;
     $82 = $81 | 1048576;
     $86 = $2;$87 = $82;$ey$1$ph = $9;
    }
    $83 = ($ex$1|0)>($ey$1$ph|0);
    $88 = (_i64Subtract(($84|0),($85|0),($86|0),($87|0))|0);
    $89 = tempRet0;
    $90 = ($89|0)>(-1);
    $91 = ($88>>>0)>(4294967295);
    $92 = ($89|0)==(-1);
    $93 = $92 & $91;
    $94 = $90 | $93;
    L23: do {
     if ($83) {
      $153 = $94;$154 = $88;$155 = $89;$95 = $84;$97 = $85;$ex$212 = $ex$1;
      while(1) {
       if ($153) {
        $96 = ($95|0)==($86|0);
        $98 = ($97|0)==($87|0);
        $99 = $96 & $98;
        if ($99) {
         break;
        } else {
         $101 = $154;$102 = $155;
        }
       } else {
        $101 = $95;$102 = $97;
       }
       $103 = (_bitshift64Shl(($101|0),($102|0),1)|0);
       $104 = tempRet0;
       $105 = (($ex$212) + -1)|0;
       $106 = ($105|0)>($ey$1$ph|0);
       $107 = (_i64Subtract(($103|0),($104|0),($86|0),($87|0))|0);
       $108 = tempRet0;
       $109 = ($108|0)>(-1);
       $110 = ($107>>>0)>(4294967295);
       $111 = ($108|0)==(-1);
       $112 = $111 & $110;
       $113 = $109 | $112;
       if ($106) {
        $153 = $113;$154 = $107;$155 = $108;$95 = $103;$97 = $104;$ex$212 = $105;
       } else {
        $$lcssa7 = $113;$114 = $103;$116 = $104;$156 = $107;$157 = $108;$ex$2$lcssa = $105;
        break L23;
       }
      }
      $100 = $x * 0.0;
      $$0 = $100;
      break L1;
     } else {
      $$lcssa7 = $94;$114 = $84;$116 = $85;$156 = $88;$157 = $89;$ex$2$lcssa = $ex$1;
     }
    } while(0);
    if ($$lcssa7) {
     $115 = ($114|0)==($86|0);
     $117 = ($116|0)==($87|0);
     $118 = $115 & $117;
     if ($118) {
      $126 = $x * 0.0;
      $$0 = $126;
      break;
     } else {
      $119 = $157;$121 = $156;
     }
    } else {
     $119 = $116;$121 = $114;
    }
    $120 = ($119>>>0)<(1048576);
    $122 = ($121>>>0)<(0);
    $123 = ($119|0)==(1048576);
    $124 = $123 & $122;
    $125 = $120 | $124;
    if ($125) {
     $127 = $121;$128 = $119;$ex$39 = $ex$2$lcssa;
     while(1) {
      $129 = (_bitshift64Shl(($127|0),($128|0),1)|0);
      $130 = tempRet0;
      $131 = (($ex$39) + -1)|0;
      $132 = ($130>>>0)<(1048576);
      $133 = ($129>>>0)<(0);
      $134 = ($130|0)==(1048576);
      $135 = $134 & $133;
      $136 = $132 | $135;
      if ($136) {
       $127 = $129;$128 = $130;$ex$39 = $131;
      } else {
       $138 = $129;$139 = $130;$ex$3$lcssa = $131;
       break;
      }
     }
    } else {
     $138 = $121;$139 = $119;$ex$3$lcssa = $ex$2$lcssa;
    }
    $137 = ($ex$3$lcssa|0)>(0);
    if ($137) {
     $140 = (_i64Add(($138|0),($139|0),0,-1048576)|0);
     $141 = tempRet0;
     $142 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
     $143 = tempRet0;
     $144 = $140 | $142;
     $145 = $141 | $143;
     $150 = $145;$152 = $144;
    } else {
     $146 = (1 - ($ex$3$lcssa))|0;
     $147 = (_bitshift64Lshr(($138|0),($139|0),($146|0))|0);
     $148 = tempRet0;
     $150 = $148;$152 = $147;
    }
    $149 = $150 | $10;
    HEAP32[tempDoublePtr>>2] = $152;HEAP32[tempDoublePtr+4>>2] = $149;$151 = +HEAPF64[tempDoublePtr>>3];
    $$0 = $151;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $24 = $x * $y;
  $25 = $24 / $24;
  $$0 = $25;
 }
 return (+$$0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     $$lcssa = $1;$$lcssa19 = $2;
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = ((($l$04)) + 1|0);
    $6 = ((($r$05)) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $$lcssa&255;
   $9 = $$lcssa19&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 return ($11|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa141 = 0, $$lcssa142 = 0, $$lcssa144 = 0, $$lcssa147 = 0, $$lcssa149 = 0, $$lcssa151 = 0, $$lcssa153 = 0, $$lcssa155 = 0, $$lcssa157 = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i13 = 0, $$pre$i16$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i14Z2D = 0, $$pre$phi$i17$iZ2D = 0;
 var $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre71 = 0, $$pre9$i$i = 0, $$rsize$0$i = 0, $$rsize$4$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0;
 var $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0;
 var $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0;
 var $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0;
 var $1062 = 0, $1063 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
 var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
 var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
 var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0;
 var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0;
 var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0;
 var $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0;
 var $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0;
 var $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0;
 var $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0;
 var $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0;
 var $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0;
 var $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0;
 var $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0;
 var $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0;
 var $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0;
 var $K12$0$i = 0, $K2$0$i$i = 0, $K8$0$i$i = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i$i$lcssa = 0, $R$1$i$lcssa = 0, $R$1$i9 = 0, $R$1$i9$lcssa = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i11 = 0, $RP$1$i = 0, $RP$1$i$i = 0, $RP$1$i$i$lcssa = 0, $RP$1$i$lcssa = 0, $RP$1$i8 = 0, $RP$1$i8$lcssa = 0, $T$0$i = 0, $T$0$i$i = 0;
 var $T$0$i$i$lcssa = 0, $T$0$i$i$lcssa140 = 0, $T$0$i$lcssa = 0, $T$0$i$lcssa156 = 0, $T$0$i18$i = 0, $T$0$i18$i$lcssa = 0, $T$0$i18$i$lcssa139 = 0, $br$2$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i12 = 0, $exitcond$i$i = 0, $i$01$i$i = 0, $idx$0$i = 0, $nb$0 = 0, $not$$i$i = 0, $not$$i20$i = 0, $not$7$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0;
 var $or$cond$i17 = 0, $or$cond1$i = 0, $or$cond1$i16 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond2$i = 0, $or$cond48$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $p$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i5 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$412$i = 0, $rst$0$i = 0;
 var $rst$1$i = 0, $sizebits$0$$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$068$i = 0, $sp$068$i$lcssa = 0, $sp$167$i = 0, $sp$167$i$lcssa = 0, $ssize$0$i = 0, $ssize$2$ph$i = 0, $ssize$5$i = 0, $t$0$i = 0, $t$0$i4 = 0, $t$2$i = 0, $t$4$ph$i = 0, $t$4$v$4$i = 0, $t$411$i = 0, $tbase$746$i = 0, $tsize$745$i = 0;
 var $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i6 = 0, $v$1$i = 0, $v$3$i = 0, $v$4$lcssa$i = 0, $v$413$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[1410]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (5680 + ($13<<2)|0);
    $15 = ((($14)) + 8|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[1410] = $22;
     } else {
      $23 = HEAP32[(5656)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $31 = (($16) + ($28)|0);
    $32 = ((($31)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $33 | 1;
    HEAP32[$32>>2] = $34;
    $$0 = $17;
    return ($$0|0);
   }
   $35 = HEAP32[(5648)>>2]|0;
   $36 = ($4>>>0)>($35>>>0);
   if ($36) {
    $37 = ($7|0)==(0);
    if (!($37)) {
     $38 = $7 << $5;
     $39 = 2 << $5;
     $40 = (0 - ($39))|0;
     $41 = $39 | $40;
     $42 = $38 & $41;
     $43 = (0 - ($42))|0;
     $44 = $42 & $43;
     $45 = (($44) + -1)|0;
     $46 = $45 >>> 12;
     $47 = $46 & 16;
     $48 = $45 >>> $47;
     $49 = $48 >>> 5;
     $50 = $49 & 8;
     $51 = $50 | $47;
     $52 = $48 >>> $50;
     $53 = $52 >>> 2;
     $54 = $53 & 4;
     $55 = $51 | $54;
     $56 = $52 >>> $54;
     $57 = $56 >>> 1;
     $58 = $57 & 2;
     $59 = $55 | $58;
     $60 = $56 >>> $58;
     $61 = $60 >>> 1;
     $62 = $61 & 1;
     $63 = $59 | $62;
     $64 = $60 >>> $62;
     $65 = (($63) + ($64))|0;
     $66 = $65 << 1;
     $67 = (5680 + ($66<<2)|0);
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($67|0)==($71|0);
     do {
      if ($72) {
       $73 = 1 << $65;
       $74 = $73 ^ -1;
       $75 = $6 & $74;
       HEAP32[1410] = $75;
       $89 = $35;
      } else {
       $76 = HEAP32[(5656)>>2]|0;
       $77 = ($71>>>0)<($76>>>0);
       if ($77) {
        _abort();
        // unreachable;
       }
       $78 = ((($71)) + 12|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = ($79|0)==($69|0);
       if ($80) {
        HEAP32[$78>>2] = $67;
        HEAP32[$68>>2] = $71;
        $$pre = HEAP32[(5648)>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $81 = $65 << 3;
     $82 = (($81) - ($4))|0;
     $83 = $4 | 3;
     $84 = ((($69)) + 4|0);
     HEAP32[$84>>2] = $83;
     $85 = (($69) + ($4)|0);
     $86 = $82 | 1;
     $87 = ((($85)) + 4|0);
     HEAP32[$87>>2] = $86;
     $88 = (($85) + ($82)|0);
     HEAP32[$88>>2] = $82;
     $90 = ($89|0)==(0);
     if (!($90)) {
      $91 = HEAP32[(5660)>>2]|0;
      $92 = $89 >>> 3;
      $93 = $92 << 1;
      $94 = (5680 + ($93<<2)|0);
      $95 = HEAP32[1410]|0;
      $96 = 1 << $92;
      $97 = $95 & $96;
      $98 = ($97|0)==(0);
      if ($98) {
       $99 = $95 | $96;
       HEAP32[1410] = $99;
       $$pre71 = ((($94)) + 8|0);
       $$pre$phiZ2D = $$pre71;$F4$0 = $94;
      } else {
       $100 = ((($94)) + 8|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = HEAP32[(5656)>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $100;$F4$0 = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $91;
      $104 = ((($F4$0)) + 12|0);
      HEAP32[$104>>2] = $91;
      $105 = ((($91)) + 8|0);
      HEAP32[$105>>2] = $F4$0;
      $106 = ((($91)) + 12|0);
      HEAP32[$106>>2] = $94;
     }
     HEAP32[(5648)>>2] = $82;
     HEAP32[(5660)>>2] = $85;
     $$0 = $70;
     return ($$0|0);
    }
    $107 = HEAP32[(5644)>>2]|0;
    $108 = ($107|0)==(0);
    if ($108) {
     $nb$0 = $4;
    } else {
     $109 = (0 - ($107))|0;
     $110 = $107 & $109;
     $111 = (($110) + -1)|0;
     $112 = $111 >>> 12;
     $113 = $112 & 16;
     $114 = $111 >>> $113;
     $115 = $114 >>> 5;
     $116 = $115 & 8;
     $117 = $116 | $113;
     $118 = $114 >>> $116;
     $119 = $118 >>> 2;
     $120 = $119 & 4;
     $121 = $117 | $120;
     $122 = $118 >>> $120;
     $123 = $122 >>> 1;
     $124 = $123 & 2;
     $125 = $121 | $124;
     $126 = $122 >>> $124;
     $127 = $126 >>> 1;
     $128 = $127 & 1;
     $129 = $125 | $128;
     $130 = $126 >>> $128;
     $131 = (($129) + ($130))|0;
     $132 = (5944 + ($131<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ((($133)) + 4|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = $135 & -8;
     $137 = (($136) - ($4))|0;
     $rsize$0$i = $137;$t$0$i = $133;$v$0$i = $133;
     while(1) {
      $138 = ((($t$0$i)) + 16|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0|0);
      if ($140) {
       $141 = ((($t$0$i)) + 20|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       if ($143) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $145 = $142;
       }
      } else {
       $145 = $139;
      }
      $144 = ((($145)) + 4|0);
      $146 = HEAP32[$144>>2]|0;
      $147 = $146 & -8;
      $148 = (($147) - ($4))|0;
      $149 = ($148>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $149 ? $148 : $rsize$0$i;
      $$v$0$i = $149 ? $145 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $145;$v$0$i = $$v$0$i;
     }
     $150 = HEAP32[(5656)>>2]|0;
     $151 = ($v$0$i$lcssa>>>0)<($150>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = (($v$0$i$lcssa) + ($4)|0);
     $153 = ($v$0$i$lcssa>>>0)<($152>>>0);
     if (!($153)) {
      _abort();
      // unreachable;
     }
     $154 = ((($v$0$i$lcssa)) + 24|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = ((($v$0$i$lcssa)) + 12|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($v$0$i$lcssa|0);
     do {
      if ($158) {
       $168 = ((($v$0$i$lcssa)) + 20|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = ($169|0)==(0|0);
       if ($170) {
        $171 = ((($v$0$i$lcssa)) + 16|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($172|0)==(0|0);
        if ($173) {
         $R$3$i = 0;
         break;
        } else {
         $R$1$i = $172;$RP$1$i = $171;
        }
       } else {
        $R$1$i = $169;$RP$1$i = $168;
       }
       while(1) {
        $174 = ((($R$1$i)) + 20|0);
        $175 = HEAP32[$174>>2]|0;
        $176 = ($175|0)==(0|0);
        if (!($176)) {
         $R$1$i = $175;$RP$1$i = $174;
         continue;
        }
        $177 = ((($R$1$i)) + 16|0);
        $178 = HEAP32[$177>>2]|0;
        $179 = ($178|0)==(0|0);
        if ($179) {
         $R$1$i$lcssa = $R$1$i;$RP$1$i$lcssa = $RP$1$i;
         break;
        } else {
         $R$1$i = $178;$RP$1$i = $177;
        }
       }
       $180 = ($RP$1$i$lcssa>>>0)<($150>>>0);
       if ($180) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$1$i$lcssa>>2] = 0;
        $R$3$i = $R$1$i$lcssa;
        break;
       }
      } else {
       $159 = ((($v$0$i$lcssa)) + 8|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = ($160>>>0)<($150>>>0);
       if ($161) {
        _abort();
        // unreachable;
       }
       $162 = ((($160)) + 12|0);
       $163 = HEAP32[$162>>2]|0;
       $164 = ($163|0)==($v$0$i$lcssa|0);
       if (!($164)) {
        _abort();
        // unreachable;
       }
       $165 = ((($157)) + 8|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ($166|0)==($v$0$i$lcssa|0);
       if ($167) {
        HEAP32[$162>>2] = $157;
        HEAP32[$165>>2] = $160;
        $R$3$i = $157;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $181 = ($155|0)==(0|0);
     do {
      if (!($181)) {
       $182 = ((($v$0$i$lcssa)) + 28|0);
       $183 = HEAP32[$182>>2]|0;
       $184 = (5944 + ($183<<2)|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($v$0$i$lcssa|0)==($185|0);
       if ($186) {
        HEAP32[$184>>2] = $R$3$i;
        $cond$i = ($R$3$i|0)==(0|0);
        if ($cond$i) {
         $187 = 1 << $183;
         $188 = $187 ^ -1;
         $189 = HEAP32[(5644)>>2]|0;
         $190 = $189 & $188;
         HEAP32[(5644)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(5656)>>2]|0;
        $192 = ($155>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($155)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($v$0$i$lcssa|0);
        if ($195) {
         HEAP32[$193>>2] = $R$3$i;
        } else {
         $196 = ((($155)) + 20|0);
         HEAP32[$196>>2] = $R$3$i;
        }
        $197 = ($R$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(5656)>>2]|0;
       $199 = ($R$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($R$3$i)) + 24|0);
       HEAP32[$200>>2] = $155;
       $201 = ((($v$0$i$lcssa)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($R$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $R$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($v$0$i$lcssa)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(5656)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($R$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $R$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i$lcssa) + ($4))|0;
      $216 = $215 | 3;
      $217 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($v$0$i$lcssa) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $4 | 3;
      $223 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $rsize$0$i$lcssa | 1;
      $225 = ((($152)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($152) + ($rsize$0$i$lcssa)|0);
      HEAP32[$226>>2] = $rsize$0$i$lcssa;
      $227 = HEAP32[(5648)>>2]|0;
      $228 = ($227|0)==(0);
      if (!($228)) {
       $229 = HEAP32[(5660)>>2]|0;
       $230 = $227 >>> 3;
       $231 = $230 << 1;
       $232 = (5680 + ($231<<2)|0);
       $233 = HEAP32[1410]|0;
       $234 = 1 << $230;
       $235 = $233 & $234;
       $236 = ($235|0)==(0);
       if ($236) {
        $237 = $233 | $234;
        HEAP32[1410] = $237;
        $$pre$i = ((($232)) + 8|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $232;
       } else {
        $238 = ((($232)) + 8|0);
        $239 = HEAP32[$238>>2]|0;
        $240 = HEAP32[(5656)>>2]|0;
        $241 = ($239>>>0)<($240>>>0);
        if ($241) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $238;$F1$0$i = $239;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $229;
       $242 = ((($F1$0$i)) + 12|0);
       HEAP32[$242>>2] = $229;
       $243 = ((($229)) + 8|0);
       HEAP32[$243>>2] = $F1$0$i;
       $244 = ((($229)) + 12|0);
       HEAP32[$244>>2] = $232;
      }
      HEAP32[(5648)>>2] = $rsize$0$i$lcssa;
      HEAP32[(5660)>>2] = $152;
     }
     $245 = ((($v$0$i$lcssa)) + 8|0);
     $$0 = $245;
     return ($$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $246 = ($bytes>>>0)>(4294967231);
   if ($246) {
    $nb$0 = -1;
   } else {
    $247 = (($bytes) + 11)|0;
    $248 = $247 & -8;
    $249 = HEAP32[(5644)>>2]|0;
    $250 = ($249|0)==(0);
    if ($250) {
     $nb$0 = $248;
    } else {
     $251 = (0 - ($248))|0;
     $252 = $247 >>> 8;
     $253 = ($252|0)==(0);
     if ($253) {
      $idx$0$i = 0;
     } else {
      $254 = ($248>>>0)>(16777215);
      if ($254) {
       $idx$0$i = 31;
      } else {
       $255 = (($252) + 1048320)|0;
       $256 = $255 >>> 16;
       $257 = $256 & 8;
       $258 = $252 << $257;
       $259 = (($258) + 520192)|0;
       $260 = $259 >>> 16;
       $261 = $260 & 4;
       $262 = $261 | $257;
       $263 = $258 << $261;
       $264 = (($263) + 245760)|0;
       $265 = $264 >>> 16;
       $266 = $265 & 2;
       $267 = $262 | $266;
       $268 = (14 - ($267))|0;
       $269 = $263 << $266;
       $270 = $269 >>> 15;
       $271 = (($268) + ($270))|0;
       $272 = $271 << 1;
       $273 = (($271) + 7)|0;
       $274 = $248 >>> $273;
       $275 = $274 & 1;
       $276 = $275 | $272;
       $idx$0$i = $276;
      }
     }
     $277 = (5944 + ($idx$0$i<<2)|0);
     $278 = HEAP32[$277>>2]|0;
     $279 = ($278|0)==(0|0);
     L123: do {
      if ($279) {
       $rsize$3$i = $251;$t$2$i = 0;$v$3$i = 0;
       label = 86;
      } else {
       $280 = ($idx$0$i|0)==(31);
       $281 = $idx$0$i >>> 1;
       $282 = (25 - ($281))|0;
       $283 = $280 ? 0 : $282;
       $284 = $248 << $283;
       $rsize$0$i5 = $251;$rst$0$i = 0;$sizebits$0$i = $284;$t$0$i4 = $278;$v$0$i6 = 0;
       while(1) {
        $285 = ((($t$0$i4)) + 4|0);
        $286 = HEAP32[$285>>2]|0;
        $287 = $286 & -8;
        $288 = (($287) - ($248))|0;
        $289 = ($288>>>0)<($rsize$0$i5>>>0);
        if ($289) {
         $290 = ($287|0)==($248|0);
         if ($290) {
          $rsize$412$i = $288;$t$411$i = $t$0$i4;$v$413$i = $t$0$i4;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $288;$v$1$i = $t$0$i4;
         }
        } else {
         $rsize$1$i = $rsize$0$i5;$v$1$i = $v$0$i6;
        }
        $291 = ((($t$0$i4)) + 20|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = $sizebits$0$i >>> 31;
        $294 = (((($t$0$i4)) + 16|0) + ($293<<2)|0);
        $295 = HEAP32[$294>>2]|0;
        $296 = ($292|0)==(0|0);
        $297 = ($292|0)==($295|0);
        $or$cond1$i = $296 | $297;
        $rst$1$i = $or$cond1$i ? $rst$0$i : $292;
        $298 = ($295|0)==(0|0);
        $299 = $298&1;
        $300 = $299 ^ 1;
        $sizebits$0$$i = $sizebits$0$i << $300;
        if ($298) {
         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i5 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $sizebits$0$$i;$t$0$i4 = $295;$v$0$i6 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $301 = ($t$2$i|0)==(0|0);
      $302 = ($v$3$i|0)==(0|0);
      $or$cond$i = $301 & $302;
      if ($or$cond$i) {
       $303 = 2 << $idx$0$i;
       $304 = (0 - ($303))|0;
       $305 = $303 | $304;
       $306 = $249 & $305;
       $307 = ($306|0)==(0);
       if ($307) {
        $nb$0 = $248;
        break;
       }
       $308 = (0 - ($306))|0;
       $309 = $306 & $308;
       $310 = (($309) + -1)|0;
       $311 = $310 >>> 12;
       $312 = $311 & 16;
       $313 = $310 >>> $312;
       $314 = $313 >>> 5;
       $315 = $314 & 8;
       $316 = $315 | $312;
       $317 = $313 >>> $315;
       $318 = $317 >>> 2;
       $319 = $318 & 4;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 2;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = $325 >>> 1;
       $327 = $326 & 1;
       $328 = $324 | $327;
       $329 = $325 >>> $327;
       $330 = (($328) + ($329))|0;
       $331 = (5944 + ($330<<2)|0);
       $332 = HEAP32[$331>>2]|0;
       $t$4$ph$i = $332;
      } else {
       $t$4$ph$i = $t$2$i;
      }
      $333 = ($t$4$ph$i|0)==(0|0);
      if ($333) {
       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$3$i;
      } else {
       $rsize$412$i = $rsize$3$i;$t$411$i = $t$4$ph$i;$v$413$i = $v$3$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $334 = ((($t$411$i)) + 4|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335 & -8;
       $337 = (($336) - ($248))|0;
       $338 = ($337>>>0)<($rsize$412$i>>>0);
       $$rsize$4$i = $338 ? $337 : $rsize$412$i;
       $t$4$v$4$i = $338 ? $t$411$i : $v$413$i;
       $339 = ((($t$411$i)) + 16|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if (!($341)) {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $340;$v$413$i = $t$4$v$4$i;
        label = 90;
        continue;
       }
       $342 = ((($t$411$i)) + 20|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = ($343|0)==(0|0);
       if ($344) {
        $rsize$4$lcssa$i = $$rsize$4$i;$v$4$lcssa$i = $t$4$v$4$i;
        break;
       } else {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $343;$v$413$i = $t$4$v$4$i;
        label = 90;
       }
      }
     }
     $345 = ($v$4$lcssa$i|0)==(0|0);
     if ($345) {
      $nb$0 = $248;
     } else {
      $346 = HEAP32[(5648)>>2]|0;
      $347 = (($346) - ($248))|0;
      $348 = ($rsize$4$lcssa$i>>>0)<($347>>>0);
      if ($348) {
       $349 = HEAP32[(5656)>>2]|0;
       $350 = ($v$4$lcssa$i>>>0)<($349>>>0);
       if ($350) {
        _abort();
        // unreachable;
       }
       $351 = (($v$4$lcssa$i) + ($248)|0);
       $352 = ($v$4$lcssa$i>>>0)<($351>>>0);
       if (!($352)) {
        _abort();
        // unreachable;
       }
       $353 = ((($v$4$lcssa$i)) + 24|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ((($v$4$lcssa$i)) + 12|0);
       $356 = HEAP32[$355>>2]|0;
       $357 = ($356|0)==($v$4$lcssa$i|0);
       do {
        if ($357) {
         $367 = ((($v$4$lcssa$i)) + 20|0);
         $368 = HEAP32[$367>>2]|0;
         $369 = ($368|0)==(0|0);
         if ($369) {
          $370 = ((($v$4$lcssa$i)) + 16|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $R$3$i11 = 0;
           break;
          } else {
           $R$1$i9 = $371;$RP$1$i8 = $370;
          }
         } else {
          $R$1$i9 = $368;$RP$1$i8 = $367;
         }
         while(1) {
          $373 = ((($R$1$i9)) + 20|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if (!($375)) {
           $R$1$i9 = $374;$RP$1$i8 = $373;
           continue;
          }
          $376 = ((($R$1$i9)) + 16|0);
          $377 = HEAP32[$376>>2]|0;
          $378 = ($377|0)==(0|0);
          if ($378) {
           $R$1$i9$lcssa = $R$1$i9;$RP$1$i8$lcssa = $RP$1$i8;
           break;
          } else {
           $R$1$i9 = $377;$RP$1$i8 = $376;
          }
         }
         $379 = ($RP$1$i8$lcssa>>>0)<($349>>>0);
         if ($379) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$1$i8$lcssa>>2] = 0;
          $R$3$i11 = $R$1$i9$lcssa;
          break;
         }
        } else {
         $358 = ((($v$4$lcssa$i)) + 8|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359>>>0)<($349>>>0);
         if ($360) {
          _abort();
          // unreachable;
         }
         $361 = ((($359)) + 12|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$4$lcssa$i|0);
         if (!($363)) {
          _abort();
          // unreachable;
         }
         $364 = ((($356)) + 8|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==($v$4$lcssa$i|0);
         if ($366) {
          HEAP32[$361>>2] = $356;
          HEAP32[$364>>2] = $359;
          $R$3$i11 = $356;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $380 = ($354|0)==(0|0);
       do {
        if (!($380)) {
         $381 = ((($v$4$lcssa$i)) + 28|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = (5944 + ($382<<2)|0);
         $384 = HEAP32[$383>>2]|0;
         $385 = ($v$4$lcssa$i|0)==($384|0);
         if ($385) {
          HEAP32[$383>>2] = $R$3$i11;
          $cond$i12 = ($R$3$i11|0)==(0|0);
          if ($cond$i12) {
           $386 = 1 << $382;
           $387 = $386 ^ -1;
           $388 = HEAP32[(5644)>>2]|0;
           $389 = $388 & $387;
           HEAP32[(5644)>>2] = $389;
           break;
          }
         } else {
          $390 = HEAP32[(5656)>>2]|0;
          $391 = ($354>>>0)<($390>>>0);
          if ($391) {
           _abort();
           // unreachable;
          }
          $392 = ((($354)) + 16|0);
          $393 = HEAP32[$392>>2]|0;
          $394 = ($393|0)==($v$4$lcssa$i|0);
          if ($394) {
           HEAP32[$392>>2] = $R$3$i11;
          } else {
           $395 = ((($354)) + 20|0);
           HEAP32[$395>>2] = $R$3$i11;
          }
          $396 = ($R$3$i11|0)==(0|0);
          if ($396) {
           break;
          }
         }
         $397 = HEAP32[(5656)>>2]|0;
         $398 = ($R$3$i11>>>0)<($397>>>0);
         if ($398) {
          _abort();
          // unreachable;
         }
         $399 = ((($R$3$i11)) + 24|0);
         HEAP32[$399>>2] = $354;
         $400 = ((($v$4$lcssa$i)) + 16|0);
         $401 = HEAP32[$400>>2]|0;
         $402 = ($401|0)==(0|0);
         do {
          if (!($402)) {
           $403 = ($401>>>0)<($397>>>0);
           if ($403) {
            _abort();
            // unreachable;
           } else {
            $404 = ((($R$3$i11)) + 16|0);
            HEAP32[$404>>2] = $401;
            $405 = ((($401)) + 24|0);
            HEAP32[$405>>2] = $R$3$i11;
            break;
           }
          }
         } while(0);
         $406 = ((($v$4$lcssa$i)) + 20|0);
         $407 = HEAP32[$406>>2]|0;
         $408 = ($407|0)==(0|0);
         if (!($408)) {
          $409 = HEAP32[(5656)>>2]|0;
          $410 = ($407>>>0)<($409>>>0);
          if ($410) {
           _abort();
           // unreachable;
          } else {
           $411 = ((($R$3$i11)) + 20|0);
           HEAP32[$411>>2] = $407;
           $412 = ((($407)) + 24|0);
           HEAP32[$412>>2] = $R$3$i11;
           break;
          }
         }
        }
       } while(0);
       $413 = ($rsize$4$lcssa$i>>>0)<(16);
       do {
        if ($413) {
         $414 = (($rsize$4$lcssa$i) + ($248))|0;
         $415 = $414 | 3;
         $416 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$416>>2] = $415;
         $417 = (($v$4$lcssa$i) + ($414)|0);
         $418 = ((($417)) + 4|0);
         $419 = HEAP32[$418>>2]|0;
         $420 = $419 | 1;
         HEAP32[$418>>2] = $420;
        } else {
         $421 = $248 | 3;
         $422 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$422>>2] = $421;
         $423 = $rsize$4$lcssa$i | 1;
         $424 = ((($351)) + 4|0);
         HEAP32[$424>>2] = $423;
         $425 = (($351) + ($rsize$4$lcssa$i)|0);
         HEAP32[$425>>2] = $rsize$4$lcssa$i;
         $426 = $rsize$4$lcssa$i >>> 3;
         $427 = ($rsize$4$lcssa$i>>>0)<(256);
         if ($427) {
          $428 = $426 << 1;
          $429 = (5680 + ($428<<2)|0);
          $430 = HEAP32[1410]|0;
          $431 = 1 << $426;
          $432 = $430 & $431;
          $433 = ($432|0)==(0);
          if ($433) {
           $434 = $430 | $431;
           HEAP32[1410] = $434;
           $$pre$i13 = ((($429)) + 8|0);
           $$pre$phi$i14Z2D = $$pre$i13;$F5$0$i = $429;
          } else {
           $435 = ((($429)) + 8|0);
           $436 = HEAP32[$435>>2]|0;
           $437 = HEAP32[(5656)>>2]|0;
           $438 = ($436>>>0)<($437>>>0);
           if ($438) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i14Z2D = $435;$F5$0$i = $436;
           }
          }
          HEAP32[$$pre$phi$i14Z2D>>2] = $351;
          $439 = ((($F5$0$i)) + 12|0);
          HEAP32[$439>>2] = $351;
          $440 = ((($351)) + 8|0);
          HEAP32[$440>>2] = $F5$0$i;
          $441 = ((($351)) + 12|0);
          HEAP32[$441>>2] = $429;
          break;
         }
         $442 = $rsize$4$lcssa$i >>> 8;
         $443 = ($442|0)==(0);
         if ($443) {
          $I7$0$i = 0;
         } else {
          $444 = ($rsize$4$lcssa$i>>>0)>(16777215);
          if ($444) {
           $I7$0$i = 31;
          } else {
           $445 = (($442) + 1048320)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 8;
           $448 = $442 << $447;
           $449 = (($448) + 520192)|0;
           $450 = $449 >>> 16;
           $451 = $450 & 4;
           $452 = $451 | $447;
           $453 = $448 << $451;
           $454 = (($453) + 245760)|0;
           $455 = $454 >>> 16;
           $456 = $455 & 2;
           $457 = $452 | $456;
           $458 = (14 - ($457))|0;
           $459 = $453 << $456;
           $460 = $459 >>> 15;
           $461 = (($458) + ($460))|0;
           $462 = $461 << 1;
           $463 = (($461) + 7)|0;
           $464 = $rsize$4$lcssa$i >>> $463;
           $465 = $464 & 1;
           $466 = $465 | $462;
           $I7$0$i = $466;
          }
         }
         $467 = (5944 + ($I7$0$i<<2)|0);
         $468 = ((($351)) + 28|0);
         HEAP32[$468>>2] = $I7$0$i;
         $469 = ((($351)) + 16|0);
         $470 = ((($469)) + 4|0);
         HEAP32[$470>>2] = 0;
         HEAP32[$469>>2] = 0;
         $471 = HEAP32[(5644)>>2]|0;
         $472 = 1 << $I7$0$i;
         $473 = $471 & $472;
         $474 = ($473|0)==(0);
         if ($474) {
          $475 = $471 | $472;
          HEAP32[(5644)>>2] = $475;
          HEAP32[$467>>2] = $351;
          $476 = ((($351)) + 24|0);
          HEAP32[$476>>2] = $467;
          $477 = ((($351)) + 12|0);
          HEAP32[$477>>2] = $351;
          $478 = ((($351)) + 8|0);
          HEAP32[$478>>2] = $351;
          break;
         }
         $479 = HEAP32[$467>>2]|0;
         $480 = ($I7$0$i|0)==(31);
         $481 = $I7$0$i >>> 1;
         $482 = (25 - ($481))|0;
         $483 = $480 ? 0 : $482;
         $484 = $rsize$4$lcssa$i << $483;
         $K12$0$i = $484;$T$0$i = $479;
         while(1) {
          $485 = ((($T$0$i)) + 4|0);
          $486 = HEAP32[$485>>2]|0;
          $487 = $486 & -8;
          $488 = ($487|0)==($rsize$4$lcssa$i|0);
          if ($488) {
           $T$0$i$lcssa = $T$0$i;
           label = 148;
           break;
          }
          $489 = $K12$0$i >>> 31;
          $490 = (((($T$0$i)) + 16|0) + ($489<<2)|0);
          $491 = $K12$0$i << 1;
          $492 = HEAP32[$490>>2]|0;
          $493 = ($492|0)==(0|0);
          if ($493) {
           $$lcssa157 = $490;$T$0$i$lcssa156 = $T$0$i;
           label = 145;
           break;
          } else {
           $K12$0$i = $491;$T$0$i = $492;
          }
         }
         if ((label|0) == 145) {
          $494 = HEAP32[(5656)>>2]|0;
          $495 = ($$lcssa157>>>0)<($494>>>0);
          if ($495) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa157>>2] = $351;
           $496 = ((($351)) + 24|0);
           HEAP32[$496>>2] = $T$0$i$lcssa156;
           $497 = ((($351)) + 12|0);
           HEAP32[$497>>2] = $351;
           $498 = ((($351)) + 8|0);
           HEAP32[$498>>2] = $351;
           break;
          }
         }
         else if ((label|0) == 148) {
          $499 = ((($T$0$i$lcssa)) + 8|0);
          $500 = HEAP32[$499>>2]|0;
          $501 = HEAP32[(5656)>>2]|0;
          $502 = ($500>>>0)>=($501>>>0);
          $not$7$i = ($T$0$i$lcssa>>>0)>=($501>>>0);
          $503 = $502 & $not$7$i;
          if ($503) {
           $504 = ((($500)) + 12|0);
           HEAP32[$504>>2] = $351;
           HEAP32[$499>>2] = $351;
           $505 = ((($351)) + 8|0);
           HEAP32[$505>>2] = $500;
           $506 = ((($351)) + 12|0);
           HEAP32[$506>>2] = $T$0$i$lcssa;
           $507 = ((($351)) + 24|0);
           HEAP32[$507>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $508 = ((($v$4$lcssa$i)) + 8|0);
       $$0 = $508;
       return ($$0|0);
      } else {
       $nb$0 = $248;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(5648)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(5660)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(5660)>>2] = $514;
   HEAP32[(5648)>>2] = $511;
   $515 = $511 | 1;
   $516 = ((($514)) + 4|0);
   HEAP32[$516>>2] = $515;
   $517 = (($514) + ($511)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(5648)>>2] = 0;
   HEAP32[(5660)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $522 = (($512) + ($509)|0);
   $523 = ((($522)) + 4|0);
   $524 = HEAP32[$523>>2]|0;
   $525 = $524 | 1;
   HEAP32[$523>>2] = $525;
  }
  $526 = ((($512)) + 8|0);
  $$0 = $526;
  return ($$0|0);
 }
 $527 = HEAP32[(5652)>>2]|0;
 $528 = ($527>>>0)>($nb$0>>>0);
 if ($528) {
  $529 = (($527) - ($nb$0))|0;
  HEAP32[(5652)>>2] = $529;
  $530 = HEAP32[(5664)>>2]|0;
  $531 = (($530) + ($nb$0)|0);
  HEAP32[(5664)>>2] = $531;
  $532 = $529 | 1;
  $533 = ((($531)) + 4|0);
  HEAP32[$533>>2] = $532;
  $534 = $nb$0 | 3;
  $535 = ((($530)) + 4|0);
  HEAP32[$535>>2] = $534;
  $536 = ((($530)) + 8|0);
  $$0 = $536;
  return ($$0|0);
 }
 $537 = HEAP32[1528]|0;
 $538 = ($537|0)==(0);
 do {
  if ($538) {
   $539 = (_sysconf(30)|0);
   $540 = (($539) + -1)|0;
   $541 = $540 & $539;
   $542 = ($541|0)==(0);
   if ($542) {
    HEAP32[(6120)>>2] = $539;
    HEAP32[(6116)>>2] = $539;
    HEAP32[(6124)>>2] = -1;
    HEAP32[(6128)>>2] = -1;
    HEAP32[(6132)>>2] = 0;
    HEAP32[(6084)>>2] = 0;
    $543 = (_time((0|0))|0);
    $544 = $543 & -16;
    $545 = $544 ^ 1431655768;
    HEAP32[1528] = $545;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $546 = (($nb$0) + 48)|0;
 $547 = HEAP32[(6120)>>2]|0;
 $548 = (($nb$0) + 47)|0;
 $549 = (($547) + ($548))|0;
 $550 = (0 - ($547))|0;
 $551 = $549 & $550;
 $552 = ($551>>>0)>($nb$0>>>0);
 if (!($552)) {
  $$0 = 0;
  return ($$0|0);
 }
 $553 = HEAP32[(6080)>>2]|0;
 $554 = ($553|0)==(0);
 if (!($554)) {
  $555 = HEAP32[(6072)>>2]|0;
  $556 = (($555) + ($551))|0;
  $557 = ($556>>>0)<=($555>>>0);
  $558 = ($556>>>0)>($553>>>0);
  $or$cond1$i16 = $557 | $558;
  if ($or$cond1$i16) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $559 = HEAP32[(6084)>>2]|0;
 $560 = $559 & 4;
 $561 = ($560|0)==(0);
 L257: do {
  if ($561) {
   $562 = HEAP32[(5664)>>2]|0;
   $563 = ($562|0)==(0|0);
   L259: do {
    if ($563) {
     label = 173;
    } else {
     $sp$0$i$i = (6088);
     while(1) {
      $564 = HEAP32[$sp$0$i$i>>2]|0;
      $565 = ($564>>>0)>($562>>>0);
      if (!($565)) {
       $566 = ((($sp$0$i$i)) + 4|0);
       $567 = HEAP32[$566>>2]|0;
       $568 = (($564) + ($567)|0);
       $569 = ($568>>>0)>($562>>>0);
       if ($569) {
        $$lcssa153 = $sp$0$i$i;$$lcssa155 = $566;
        break;
       }
      }
      $570 = ((($sp$0$i$i)) + 8|0);
      $571 = HEAP32[$570>>2]|0;
      $572 = ($571|0)==(0|0);
      if ($572) {
       label = 173;
       break L259;
      } else {
       $sp$0$i$i = $571;
      }
     }
     $595 = HEAP32[(5652)>>2]|0;
     $596 = (($549) - ($595))|0;
     $597 = $596 & $550;
     $598 = ($597>>>0)<(2147483647);
     if ($598) {
      $599 = (_sbrk(($597|0))|0);
      $600 = HEAP32[$$lcssa153>>2]|0;
      $601 = HEAP32[$$lcssa155>>2]|0;
      $602 = (($600) + ($601)|0);
      $603 = ($599|0)==($602|0);
      if ($603) {
       $604 = ($599|0)==((-1)|0);
       if (!($604)) {
        $tbase$746$i = $599;$tsize$745$i = $597;
        label = 193;
        break L257;
       }
      } else {
       $br$2$ph$i = $599;$ssize$2$ph$i = $597;
       label = 183;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 173) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if (!($574)) {
      $575 = $573;
      $576 = HEAP32[(6116)>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $551;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($551) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[(6072)>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i17 = $587 & $588;
      if ($or$cond$i17) {
       $589 = HEAP32[(6080)>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $tbase$746$i = $573;$tsize$745$i = $ssize$0$i;
        label = 193;
        break L257;
       } else {
        $br$2$ph$i = $593;$ssize$2$ph$i = $ssize$0$i;
        label = 183;
       }
      }
     }
    }
   } while(0);
   L279: do {
    if ((label|0) == 183) {
     $605 = (0 - ($ssize$2$ph$i))|0;
     $606 = ($br$2$ph$i|0)!=((-1)|0);
     $607 = ($ssize$2$ph$i>>>0)<(2147483647);
     $or$cond7$i = $607 & $606;
     $608 = ($546>>>0)>($ssize$2$ph$i>>>0);
     $or$cond8$i = $608 & $or$cond7$i;
     do {
      if ($or$cond8$i) {
       $609 = HEAP32[(6120)>>2]|0;
       $610 = (($548) - ($ssize$2$ph$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         break L279;
        } else {
         $617 = (($613) + ($ssize$2$ph$i))|0;
         $ssize$5$i = $617;
         break;
        }
       } else {
        $ssize$5$i = $ssize$2$ph$i;
       }
      } else {
       $ssize$5$i = $ssize$2$ph$i;
      }
     } while(0);
     $618 = ($br$2$ph$i|0)==((-1)|0);
     if (!($618)) {
      $tbase$746$i = $br$2$ph$i;$tsize$745$i = $ssize$5$i;
      label = 193;
      break L257;
     }
    }
   } while(0);
   $619 = HEAP32[(6084)>>2]|0;
   $620 = $619 | 4;
   HEAP32[(6084)>>2] = $620;
   label = 190;
  } else {
   label = 190;
  }
 } while(0);
 if ((label|0) == 190) {
  $621 = ($551>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($551|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond5$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond10$i = $626 & $or$cond5$i;
   if ($or$cond10$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $$not$i = ($629>>>0)>($630>>>0);
    if ($$not$i) {
     $tbase$746$i = $622;$tsize$745$i = $629;
     label = 193;
    }
   }
  }
 }
 if ((label|0) == 193) {
  $631 = HEAP32[(6072)>>2]|0;
  $632 = (($631) + ($tsize$745$i))|0;
  HEAP32[(6072)>>2] = $632;
  $633 = HEAP32[(6076)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(6076)>>2] = $632;
  }
  $635 = HEAP32[(5664)>>2]|0;
  $636 = ($635|0)==(0|0);
  do {
   if ($636) {
    $637 = HEAP32[(5656)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$746$i>>>0)<($637>>>0);
    $or$cond11$i = $638 | $639;
    if ($or$cond11$i) {
     HEAP32[(5656)>>2] = $tbase$746$i;
    }
    HEAP32[(6088)>>2] = $tbase$746$i;
    HEAP32[(6092)>>2] = $tsize$745$i;
    HEAP32[(6100)>>2] = 0;
    $640 = HEAP32[1528]|0;
    HEAP32[(5676)>>2] = $640;
    HEAP32[(5672)>>2] = -1;
    $i$01$i$i = 0;
    while(1) {
     $641 = $i$01$i$i << 1;
     $642 = (5680 + ($641<<2)|0);
     $643 = ((($642)) + 12|0);
     HEAP32[$643>>2] = $642;
     $644 = ((($642)) + 8|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$01$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$01$i$i = $645;
     }
    }
    $646 = (($tsize$745$i) + -40)|0;
    $647 = ((($tbase$746$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$746$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(5664)>>2] = $654;
    HEAP32[(5652)>>2] = $655;
    $656 = $655 | 1;
    $657 = ((($654)) + 4|0);
    HEAP32[$657>>2] = $656;
    $658 = (($654) + ($655)|0);
    $659 = ((($658)) + 4|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[(6128)>>2]|0;
    HEAP32[(5668)>>2] = $660;
   } else {
    $sp$068$i = (6088);
    while(1) {
     $661 = HEAP32[$sp$068$i>>2]|0;
     $662 = ((($sp$068$i)) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$746$i|0)==($664|0);
     if ($665) {
      $$lcssa147 = $661;$$lcssa149 = $662;$$lcssa151 = $663;$sp$068$i$lcssa = $sp$068$i;
      label = 203;
      break;
     }
     $666 = ((($sp$068$i)) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$068$i = $667;
     }
    }
    if ((label|0) == 203) {
     $669 = ((($sp$068$i$lcssa)) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($635>>>0)>=($$lcssa147>>>0);
      $674 = ($635>>>0)<($tbase$746$i>>>0);
      $or$cond48$i = $674 & $673;
      if ($or$cond48$i) {
       $675 = (($$lcssa151) + ($tsize$745$i))|0;
       HEAP32[$$lcssa149>>2] = $675;
       $676 = HEAP32[(5652)>>2]|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($tsize$745$i) - ($683))|0;
       $686 = (($685) + ($676))|0;
       HEAP32[(5664)>>2] = $684;
       HEAP32[(5652)>>2] = $686;
       $687 = $686 | 1;
       $688 = ((($684)) + 4|0);
       HEAP32[$688>>2] = $687;
       $689 = (($684) + ($686)|0);
       $690 = ((($689)) + 4|0);
       HEAP32[$690>>2] = 40;
       $691 = HEAP32[(6128)>>2]|0;
       HEAP32[(5668)>>2] = $691;
       break;
      }
     }
    }
    $692 = HEAP32[(5656)>>2]|0;
    $693 = ($tbase$746$i>>>0)<($692>>>0);
    if ($693) {
     HEAP32[(5656)>>2] = $tbase$746$i;
     $757 = $tbase$746$i;
    } else {
     $757 = $692;
    }
    $694 = (($tbase$746$i) + ($tsize$745$i)|0);
    $sp$167$i = (6088);
    while(1) {
     $695 = HEAP32[$sp$167$i>>2]|0;
     $696 = ($695|0)==($694|0);
     if ($696) {
      $$lcssa144 = $sp$167$i;$sp$167$i$lcssa = $sp$167$i;
      label = 211;
      break;
     }
     $697 = ((($sp$167$i)) + 8|0);
     $698 = HEAP32[$697>>2]|0;
     $699 = ($698|0)==(0|0);
     if ($699) {
      $sp$0$i$i$i = (6088);
      break;
     } else {
      $sp$167$i = $698;
     }
    }
    if ((label|0) == 211) {
     $700 = ((($sp$167$i$lcssa)) + 12|0);
     $701 = HEAP32[$700>>2]|0;
     $702 = $701 & 8;
     $703 = ($702|0)==(0);
     if ($703) {
      HEAP32[$$lcssa144>>2] = $tbase$746$i;
      $704 = ((($sp$167$i$lcssa)) + 4|0);
      $705 = HEAP32[$704>>2]|0;
      $706 = (($705) + ($tsize$745$i))|0;
      HEAP32[$704>>2] = $706;
      $707 = ((($tbase$746$i)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($tbase$746$i) + ($713)|0);
      $715 = ((($694)) + 8|0);
      $716 = $715;
      $717 = $716 & 7;
      $718 = ($717|0)==(0);
      $719 = (0 - ($716))|0;
      $720 = $719 & 7;
      $721 = $718 ? 0 : $720;
      $722 = (($694) + ($721)|0);
      $723 = $722;
      $724 = $714;
      $725 = (($723) - ($724))|0;
      $726 = (($714) + ($nb$0)|0);
      $727 = (($725) - ($nb$0))|0;
      $728 = $nb$0 | 3;
      $729 = ((($714)) + 4|0);
      HEAP32[$729>>2] = $728;
      $730 = ($722|0)==($635|0);
      do {
       if ($730) {
        $731 = HEAP32[(5652)>>2]|0;
        $732 = (($731) + ($727))|0;
        HEAP32[(5652)>>2] = $732;
        HEAP32[(5664)>>2] = $726;
        $733 = $732 | 1;
        $734 = ((($726)) + 4|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[(5660)>>2]|0;
        $736 = ($722|0)==($735|0);
        if ($736) {
         $737 = HEAP32[(5648)>>2]|0;
         $738 = (($737) + ($727))|0;
         HEAP32[(5648)>>2] = $738;
         HEAP32[(5660)>>2] = $726;
         $739 = $738 | 1;
         $740 = ((($726)) + 4|0);
         HEAP32[$740>>2] = $739;
         $741 = (($726) + ($738)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $742 = ((($722)) + 4|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L331: do {
          if ($748) {
           $749 = ((($722)) + 8|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = ((($722)) + 12|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = (5680 + ($753<<2)|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = ($750>>>0)<($757>>>0);
             if ($756) {
              _abort();
              // unreachable;
             }
             $758 = ((($750)) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($722|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[1410]|0;
            $765 = $764 & $763;
            HEAP32[1410] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre9$i$i = ((($752)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $767 = ($752>>>0)<($757>>>0);
             if ($767) {
              _abort();
              // unreachable;
             }
             $768 = ((($752)) + 8|0);
             $769 = HEAP32[$768>>2]|0;
             $770 = ($769|0)==($722|0);
             if ($770) {
              $$pre$phi10$i$iZ2D = $768;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $771 = ((($750)) + 12|0);
           HEAP32[$771>>2] = $752;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $750;
          } else {
           $772 = ((($722)) + 24|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ((($722)) + 12|0);
           $775 = HEAP32[$774>>2]|0;
           $776 = ($775|0)==($722|0);
           do {
            if ($776) {
             $786 = ((($722)) + 16|0);
             $787 = ((($786)) + 4|0);
             $788 = HEAP32[$787>>2]|0;
             $789 = ($788|0)==(0|0);
             if ($789) {
              $790 = HEAP32[$786>>2]|0;
              $791 = ($790|0)==(0|0);
              if ($791) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i = $790;$RP$1$i$i = $786;
              }
             } else {
              $R$1$i$i = $788;$RP$1$i$i = $787;
             }
             while(1) {
              $792 = ((($R$1$i$i)) + 20|0);
              $793 = HEAP32[$792>>2]|0;
              $794 = ($793|0)==(0|0);
              if (!($794)) {
               $R$1$i$i = $793;$RP$1$i$i = $792;
               continue;
              }
              $795 = ((($R$1$i$i)) + 16|0);
              $796 = HEAP32[$795>>2]|0;
              $797 = ($796|0)==(0|0);
              if ($797) {
               $R$1$i$i$lcssa = $R$1$i$i;$RP$1$i$i$lcssa = $RP$1$i$i;
               break;
              } else {
               $R$1$i$i = $796;$RP$1$i$i = $795;
              }
             }
             $798 = ($RP$1$i$i$lcssa>>>0)<($757>>>0);
             if ($798) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$1$i$i$lcssa>>2] = 0;
              $R$3$i$i = $R$1$i$i$lcssa;
              break;
             }
            } else {
             $777 = ((($722)) + 8|0);
             $778 = HEAP32[$777>>2]|0;
             $779 = ($778>>>0)<($757>>>0);
             if ($779) {
              _abort();
              // unreachable;
             }
             $780 = ((($778)) + 12|0);
             $781 = HEAP32[$780>>2]|0;
             $782 = ($781|0)==($722|0);
             if (!($782)) {
              _abort();
              // unreachable;
             }
             $783 = ((($775)) + 8|0);
             $784 = HEAP32[$783>>2]|0;
             $785 = ($784|0)==($722|0);
             if ($785) {
              HEAP32[$780>>2] = $775;
              HEAP32[$783>>2] = $778;
              $R$3$i$i = $775;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $799 = ($773|0)==(0|0);
           if ($799) {
            break;
           }
           $800 = ((($722)) + 28|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = (5944 + ($801<<2)|0);
           $803 = HEAP32[$802>>2]|0;
           $804 = ($722|0)==($803|0);
           do {
            if ($804) {
             HEAP32[$802>>2] = $R$3$i$i;
             $cond$i$i = ($R$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $805 = 1 << $801;
             $806 = $805 ^ -1;
             $807 = HEAP32[(5644)>>2]|0;
             $808 = $807 & $806;
             HEAP32[(5644)>>2] = $808;
             break L331;
            } else {
             $809 = HEAP32[(5656)>>2]|0;
             $810 = ($773>>>0)<($809>>>0);
             if ($810) {
              _abort();
              // unreachable;
             }
             $811 = ((($773)) + 16|0);
             $812 = HEAP32[$811>>2]|0;
             $813 = ($812|0)==($722|0);
             if ($813) {
              HEAP32[$811>>2] = $R$3$i$i;
             } else {
              $814 = ((($773)) + 20|0);
              HEAP32[$814>>2] = $R$3$i$i;
             }
             $815 = ($R$3$i$i|0)==(0|0);
             if ($815) {
              break L331;
             }
            }
           } while(0);
           $816 = HEAP32[(5656)>>2]|0;
           $817 = ($R$3$i$i>>>0)<($816>>>0);
           if ($817) {
            _abort();
            // unreachable;
           }
           $818 = ((($R$3$i$i)) + 24|0);
           HEAP32[$818>>2] = $773;
           $819 = ((($722)) + 16|0);
           $820 = HEAP32[$819>>2]|0;
           $821 = ($820|0)==(0|0);
           do {
            if (!($821)) {
             $822 = ($820>>>0)<($816>>>0);
             if ($822) {
              _abort();
              // unreachable;
             } else {
              $823 = ((($R$3$i$i)) + 16|0);
              HEAP32[$823>>2] = $820;
              $824 = ((($820)) + 24|0);
              HEAP32[$824>>2] = $R$3$i$i;
              break;
             }
            }
           } while(0);
           $825 = ((($819)) + 4|0);
           $826 = HEAP32[$825>>2]|0;
           $827 = ($826|0)==(0|0);
           if ($827) {
            break;
           }
           $828 = HEAP32[(5656)>>2]|0;
           $829 = ($826>>>0)<($828>>>0);
           if ($829) {
            _abort();
            // unreachable;
           } else {
            $830 = ((($R$3$i$i)) + 20|0);
            HEAP32[$830>>2] = $826;
            $831 = ((($826)) + 24|0);
            HEAP32[$831>>2] = $R$3$i$i;
            break;
           }
          }
         } while(0);
         $832 = (($722) + ($746)|0);
         $833 = (($746) + ($727))|0;
         $oldfirst$0$i$i = $832;$qsize$0$i$i = $833;
        } else {
         $oldfirst$0$i$i = $722;$qsize$0$i$i = $727;
        }
        $834 = ((($oldfirst$0$i$i)) + 4|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = $835 & -2;
        HEAP32[$834>>2] = $836;
        $837 = $qsize$0$i$i | 1;
        $838 = ((($726)) + 4|0);
        HEAP32[$838>>2] = $837;
        $839 = (($726) + ($qsize$0$i$i)|0);
        HEAP32[$839>>2] = $qsize$0$i$i;
        $840 = $qsize$0$i$i >>> 3;
        $841 = ($qsize$0$i$i>>>0)<(256);
        if ($841) {
         $842 = $840 << 1;
         $843 = (5680 + ($842<<2)|0);
         $844 = HEAP32[1410]|0;
         $845 = 1 << $840;
         $846 = $844 & $845;
         $847 = ($846|0)==(0);
         do {
          if ($847) {
           $848 = $844 | $845;
           HEAP32[1410] = $848;
           $$pre$i16$i = ((($843)) + 8|0);
           $$pre$phi$i17$iZ2D = $$pre$i16$i;$F4$0$i$i = $843;
          } else {
           $849 = ((($843)) + 8|0);
           $850 = HEAP32[$849>>2]|0;
           $851 = HEAP32[(5656)>>2]|0;
           $852 = ($850>>>0)<($851>>>0);
           if (!($852)) {
            $$pre$phi$i17$iZ2D = $849;$F4$0$i$i = $850;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i17$iZ2D>>2] = $726;
         $853 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$853>>2] = $726;
         $854 = ((($726)) + 8|0);
         HEAP32[$854>>2] = $F4$0$i$i;
         $855 = ((($726)) + 12|0);
         HEAP32[$855>>2] = $843;
         break;
        }
        $856 = $qsize$0$i$i >>> 8;
        $857 = ($856|0)==(0);
        do {
         if ($857) {
          $I7$0$i$i = 0;
         } else {
          $858 = ($qsize$0$i$i>>>0)>(16777215);
          if ($858) {
           $I7$0$i$i = 31;
           break;
          }
          $859 = (($856) + 1048320)|0;
          $860 = $859 >>> 16;
          $861 = $860 & 8;
          $862 = $856 << $861;
          $863 = (($862) + 520192)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 4;
          $866 = $865 | $861;
          $867 = $862 << $865;
          $868 = (($867) + 245760)|0;
          $869 = $868 >>> 16;
          $870 = $869 & 2;
          $871 = $866 | $870;
          $872 = (14 - ($871))|0;
          $873 = $867 << $870;
          $874 = $873 >>> 15;
          $875 = (($872) + ($874))|0;
          $876 = $875 << 1;
          $877 = (($875) + 7)|0;
          $878 = $qsize$0$i$i >>> $877;
          $879 = $878 & 1;
          $880 = $879 | $876;
          $I7$0$i$i = $880;
         }
        } while(0);
        $881 = (5944 + ($I7$0$i$i<<2)|0);
        $882 = ((($726)) + 28|0);
        HEAP32[$882>>2] = $I7$0$i$i;
        $883 = ((($726)) + 16|0);
        $884 = ((($883)) + 4|0);
        HEAP32[$884>>2] = 0;
        HEAP32[$883>>2] = 0;
        $885 = HEAP32[(5644)>>2]|0;
        $886 = 1 << $I7$0$i$i;
        $887 = $885 & $886;
        $888 = ($887|0)==(0);
        if ($888) {
         $889 = $885 | $886;
         HEAP32[(5644)>>2] = $889;
         HEAP32[$881>>2] = $726;
         $890 = ((($726)) + 24|0);
         HEAP32[$890>>2] = $881;
         $891 = ((($726)) + 12|0);
         HEAP32[$891>>2] = $726;
         $892 = ((($726)) + 8|0);
         HEAP32[$892>>2] = $726;
         break;
        }
        $893 = HEAP32[$881>>2]|0;
        $894 = ($I7$0$i$i|0)==(31);
        $895 = $I7$0$i$i >>> 1;
        $896 = (25 - ($895))|0;
        $897 = $894 ? 0 : $896;
        $898 = $qsize$0$i$i << $897;
        $K8$0$i$i = $898;$T$0$i18$i = $893;
        while(1) {
         $899 = ((($T$0$i18$i)) + 4|0);
         $900 = HEAP32[$899>>2]|0;
         $901 = $900 & -8;
         $902 = ($901|0)==($qsize$0$i$i|0);
         if ($902) {
          $T$0$i18$i$lcssa = $T$0$i18$i;
          label = 281;
          break;
         }
         $903 = $K8$0$i$i >>> 31;
         $904 = (((($T$0$i18$i)) + 16|0) + ($903<<2)|0);
         $905 = $K8$0$i$i << 1;
         $906 = HEAP32[$904>>2]|0;
         $907 = ($906|0)==(0|0);
         if ($907) {
          $$lcssa = $904;$T$0$i18$i$lcssa139 = $T$0$i18$i;
          label = 278;
          break;
         } else {
          $K8$0$i$i = $905;$T$0$i18$i = $906;
         }
        }
        if ((label|0) == 278) {
         $908 = HEAP32[(5656)>>2]|0;
         $909 = ($$lcssa>>>0)<($908>>>0);
         if ($909) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$lcssa>>2] = $726;
          $910 = ((($726)) + 24|0);
          HEAP32[$910>>2] = $T$0$i18$i$lcssa139;
          $911 = ((($726)) + 12|0);
          HEAP32[$911>>2] = $726;
          $912 = ((($726)) + 8|0);
          HEAP32[$912>>2] = $726;
          break;
         }
        }
        else if ((label|0) == 281) {
         $913 = ((($T$0$i18$i$lcssa)) + 8|0);
         $914 = HEAP32[$913>>2]|0;
         $915 = HEAP32[(5656)>>2]|0;
         $916 = ($914>>>0)>=($915>>>0);
         $not$$i20$i = ($T$0$i18$i$lcssa>>>0)>=($915>>>0);
         $917 = $916 & $not$$i20$i;
         if ($917) {
          $918 = ((($914)) + 12|0);
          HEAP32[$918>>2] = $726;
          HEAP32[$913>>2] = $726;
          $919 = ((($726)) + 8|0);
          HEAP32[$919>>2] = $914;
          $920 = ((($726)) + 12|0);
          HEAP32[$920>>2] = $T$0$i18$i$lcssa;
          $921 = ((($726)) + 24|0);
          HEAP32[$921>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1052 = ((($714)) + 8|0);
      $$0 = $1052;
      return ($$0|0);
     } else {
      $sp$0$i$i$i = (6088);
     }
    }
    while(1) {
     $922 = HEAP32[$sp$0$i$i$i>>2]|0;
     $923 = ($922>>>0)>($635>>>0);
     if (!($923)) {
      $924 = ((($sp$0$i$i$i)) + 4|0);
      $925 = HEAP32[$924>>2]|0;
      $926 = (($922) + ($925)|0);
      $927 = ($926>>>0)>($635>>>0);
      if ($927) {
       $$lcssa142 = $926;
       break;
      }
     }
     $928 = ((($sp$0$i$i$i)) + 8|0);
     $929 = HEAP32[$928>>2]|0;
     $sp$0$i$i$i = $929;
    }
    $930 = ((($$lcssa142)) + -47|0);
    $931 = ((($930)) + 8|0);
    $932 = $931;
    $933 = $932 & 7;
    $934 = ($933|0)==(0);
    $935 = (0 - ($932))|0;
    $936 = $935 & 7;
    $937 = $934 ? 0 : $936;
    $938 = (($930) + ($937)|0);
    $939 = ((($635)) + 16|0);
    $940 = ($938>>>0)<($939>>>0);
    $941 = $940 ? $635 : $938;
    $942 = ((($941)) + 8|0);
    $943 = ((($941)) + 24|0);
    $944 = (($tsize$745$i) + -40)|0;
    $945 = ((($tbase$746$i)) + 8|0);
    $946 = $945;
    $947 = $946 & 7;
    $948 = ($947|0)==(0);
    $949 = (0 - ($946))|0;
    $950 = $949 & 7;
    $951 = $948 ? 0 : $950;
    $952 = (($tbase$746$i) + ($951)|0);
    $953 = (($944) - ($951))|0;
    HEAP32[(5664)>>2] = $952;
    HEAP32[(5652)>>2] = $953;
    $954 = $953 | 1;
    $955 = ((($952)) + 4|0);
    HEAP32[$955>>2] = $954;
    $956 = (($952) + ($953)|0);
    $957 = ((($956)) + 4|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(6128)>>2]|0;
    HEAP32[(5668)>>2] = $958;
    $959 = ((($941)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$942>>2]=HEAP32[(6088)>>2]|0;HEAP32[$942+4>>2]=HEAP32[(6088)+4>>2]|0;HEAP32[$942+8>>2]=HEAP32[(6088)+8>>2]|0;HEAP32[$942+12>>2]=HEAP32[(6088)+12>>2]|0;
    HEAP32[(6088)>>2] = $tbase$746$i;
    HEAP32[(6092)>>2] = $tsize$745$i;
    HEAP32[(6100)>>2] = 0;
    HEAP32[(6096)>>2] = $942;
    $p$0$i$i = $943;
    while(1) {
     $960 = ((($p$0$i$i)) + 4|0);
     HEAP32[$960>>2] = 7;
     $961 = ((($960)) + 4|0);
     $962 = ($961>>>0)<($$lcssa142>>>0);
     if ($962) {
      $p$0$i$i = $960;
     } else {
      break;
     }
    }
    $963 = ($941|0)==($635|0);
    if (!($963)) {
     $964 = $941;
     $965 = $635;
     $966 = (($964) - ($965))|0;
     $967 = HEAP32[$959>>2]|0;
     $968 = $967 & -2;
     HEAP32[$959>>2] = $968;
     $969 = $966 | 1;
     $970 = ((($635)) + 4|0);
     HEAP32[$970>>2] = $969;
     HEAP32[$941>>2] = $966;
     $971 = $966 >>> 3;
     $972 = ($966>>>0)<(256);
     if ($972) {
      $973 = $971 << 1;
      $974 = (5680 + ($973<<2)|0);
      $975 = HEAP32[1410]|0;
      $976 = 1 << $971;
      $977 = $975 & $976;
      $978 = ($977|0)==(0);
      if ($978) {
       $979 = $975 | $976;
       HEAP32[1410] = $979;
       $$pre$i$i = ((($974)) + 8|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $974;
      } else {
       $980 = ((($974)) + 8|0);
       $981 = HEAP32[$980>>2]|0;
       $982 = HEAP32[(5656)>>2]|0;
       $983 = ($981>>>0)<($982>>>0);
       if ($983) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $980;$F$0$i$i = $981;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $984 = ((($F$0$i$i)) + 12|0);
      HEAP32[$984>>2] = $635;
      $985 = ((($635)) + 8|0);
      HEAP32[$985>>2] = $F$0$i$i;
      $986 = ((($635)) + 12|0);
      HEAP32[$986>>2] = $974;
      break;
     }
     $987 = $966 >>> 8;
     $988 = ($987|0)==(0);
     if ($988) {
      $I1$0$i$i = 0;
     } else {
      $989 = ($966>>>0)>(16777215);
      if ($989) {
       $I1$0$i$i = 31;
      } else {
       $990 = (($987) + 1048320)|0;
       $991 = $990 >>> 16;
       $992 = $991 & 8;
       $993 = $987 << $992;
       $994 = (($993) + 520192)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 4;
       $997 = $996 | $992;
       $998 = $993 << $996;
       $999 = (($998) + 245760)|0;
       $1000 = $999 >>> 16;
       $1001 = $1000 & 2;
       $1002 = $997 | $1001;
       $1003 = (14 - ($1002))|0;
       $1004 = $998 << $1001;
       $1005 = $1004 >>> 15;
       $1006 = (($1003) + ($1005))|0;
       $1007 = $1006 << 1;
       $1008 = (($1006) + 7)|0;
       $1009 = $966 >>> $1008;
       $1010 = $1009 & 1;
       $1011 = $1010 | $1007;
       $I1$0$i$i = $1011;
      }
     }
     $1012 = (5944 + ($I1$0$i$i<<2)|0);
     $1013 = ((($635)) + 28|0);
     HEAP32[$1013>>2] = $I1$0$i$i;
     $1014 = ((($635)) + 20|0);
     HEAP32[$1014>>2] = 0;
     HEAP32[$939>>2] = 0;
     $1015 = HEAP32[(5644)>>2]|0;
     $1016 = 1 << $I1$0$i$i;
     $1017 = $1015 & $1016;
     $1018 = ($1017|0)==(0);
     if ($1018) {
      $1019 = $1015 | $1016;
      HEAP32[(5644)>>2] = $1019;
      HEAP32[$1012>>2] = $635;
      $1020 = ((($635)) + 24|0);
      HEAP32[$1020>>2] = $1012;
      $1021 = ((($635)) + 12|0);
      HEAP32[$1021>>2] = $635;
      $1022 = ((($635)) + 8|0);
      HEAP32[$1022>>2] = $635;
      break;
     }
     $1023 = HEAP32[$1012>>2]|0;
     $1024 = ($I1$0$i$i|0)==(31);
     $1025 = $I1$0$i$i >>> 1;
     $1026 = (25 - ($1025))|0;
     $1027 = $1024 ? 0 : $1026;
     $1028 = $966 << $1027;
     $K2$0$i$i = $1028;$T$0$i$i = $1023;
     while(1) {
      $1029 = ((($T$0$i$i)) + 4|0);
      $1030 = HEAP32[$1029>>2]|0;
      $1031 = $1030 & -8;
      $1032 = ($1031|0)==($966|0);
      if ($1032) {
       $T$0$i$i$lcssa = $T$0$i$i;
       label = 307;
       break;
      }
      $1033 = $K2$0$i$i >>> 31;
      $1034 = (((($T$0$i$i)) + 16|0) + ($1033<<2)|0);
      $1035 = $K2$0$i$i << 1;
      $1036 = HEAP32[$1034>>2]|0;
      $1037 = ($1036|0)==(0|0);
      if ($1037) {
       $$lcssa141 = $1034;$T$0$i$i$lcssa140 = $T$0$i$i;
       label = 304;
       break;
      } else {
       $K2$0$i$i = $1035;$T$0$i$i = $1036;
      }
     }
     if ((label|0) == 304) {
      $1038 = HEAP32[(5656)>>2]|0;
      $1039 = ($$lcssa141>>>0)<($1038>>>0);
      if ($1039) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$lcssa141>>2] = $635;
       $1040 = ((($635)) + 24|0);
       HEAP32[$1040>>2] = $T$0$i$i$lcssa140;
       $1041 = ((($635)) + 12|0);
       HEAP32[$1041>>2] = $635;
       $1042 = ((($635)) + 8|0);
       HEAP32[$1042>>2] = $635;
       break;
      }
     }
     else if ((label|0) == 307) {
      $1043 = ((($T$0$i$i$lcssa)) + 8|0);
      $1044 = HEAP32[$1043>>2]|0;
      $1045 = HEAP32[(5656)>>2]|0;
      $1046 = ($1044>>>0)>=($1045>>>0);
      $not$$i$i = ($T$0$i$i$lcssa>>>0)>=($1045>>>0);
      $1047 = $1046 & $not$$i$i;
      if ($1047) {
       $1048 = ((($1044)) + 12|0);
       HEAP32[$1048>>2] = $635;
       HEAP32[$1043>>2] = $635;
       $1049 = ((($635)) + 8|0);
       HEAP32[$1049>>2] = $1044;
       $1050 = ((($635)) + 12|0);
       HEAP32[$1050>>2] = $T$0$i$i$lcssa;
       $1051 = ((($635)) + 24|0);
       HEAP32[$1051>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1053 = HEAP32[(5652)>>2]|0;
  $1054 = ($1053>>>0)>($nb$0>>>0);
  if ($1054) {
   $1055 = (($1053) - ($nb$0))|0;
   HEAP32[(5652)>>2] = $1055;
   $1056 = HEAP32[(5664)>>2]|0;
   $1057 = (($1056) + ($nb$0)|0);
   HEAP32[(5664)>>2] = $1057;
   $1058 = $1055 | 1;
   $1059 = ((($1057)) + 4|0);
   HEAP32[$1059>>2] = $1058;
   $1060 = $nb$0 | 3;
   $1061 = ((($1056)) + 4|0);
   HEAP32[$1061>>2] = $1060;
   $1062 = ((($1056)) + 8|0);
   $$0 = $1062;
   return ($$0|0);
  }
 }
 $1063 = (___errno_location()|0);
 HEAP32[$1063>>2] = 12;
 $$0 = 0;
 return ($$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre$phiZ2D = 0, $$pre40 = 0, $$pre42 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F18$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $R8$1 = 0, $R8$1$lcssa = 0, $R8$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP10$1 = 0, $RP10$1$lcssa = 0;
 var $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa48 = 0, $cond20 = 0, $cond21 = 0, $not$ = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(5656)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $9 = (($1) + ($8)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $14 = (0 - ($12))|0;
   $15 = (($1) + ($14)|0);
   $16 = (($12) + ($8))|0;
   $17 = ($15>>>0)<($2>>>0);
   if ($17) {
    _abort();
    // unreachable;
   }
   $18 = HEAP32[(5660)>>2]|0;
   $19 = ($15|0)==($18|0);
   if ($19) {
    $104 = ((($9)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    HEAP32[(5648)>>2] = $16;
    $108 = $105 & -2;
    HEAP32[$104>>2] = $108;
    $109 = $16 | 1;
    $110 = ((($15)) + 4|0);
    HEAP32[$110>>2] = $109;
    $111 = (($15) + ($16)|0);
    HEAP32[$111>>2] = $16;
    return;
   }
   $20 = $12 >>> 3;
   $21 = ($12>>>0)<(256);
   if ($21) {
    $22 = ((($15)) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($15)) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $20 << 1;
    $27 = (5680 + ($26<<2)|0);
    $28 = ($23|0)==($27|0);
    if (!($28)) {
     $29 = ($23>>>0)<($2>>>0);
     if ($29) {
      _abort();
      // unreachable;
     }
     $30 = ((($23)) + 12|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)==($15|0);
     if (!($32)) {
      _abort();
      // unreachable;
     }
    }
    $33 = ($25|0)==($23|0);
    if ($33) {
     $34 = 1 << $20;
     $35 = $34 ^ -1;
     $36 = HEAP32[1410]|0;
     $37 = $36 & $35;
     HEAP32[1410] = $37;
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    $38 = ($25|0)==($27|0);
    if ($38) {
     $$pre42 = ((($25)) + 8|0);
     $$pre$phi43Z2D = $$pre42;
    } else {
     $39 = ($25>>>0)<($2>>>0);
     if ($39) {
      _abort();
      // unreachable;
     }
     $40 = ((($25)) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==($15|0);
     if ($42) {
      $$pre$phi43Z2D = $40;
     } else {
      _abort();
      // unreachable;
     }
    }
    $43 = ((($23)) + 12|0);
    HEAP32[$43>>2] = $25;
    HEAP32[$$pre$phi43Z2D>>2] = $23;
    $p$1 = $15;$psize$1 = $16;
    break;
   }
   $44 = ((($15)) + 24|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($15)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==($15|0);
   do {
    if ($48) {
     $58 = ((($15)) + 16|0);
     $59 = ((($58)) + 4|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==(0|0);
     if ($61) {
      $62 = HEAP32[$58>>2]|0;
      $63 = ($62|0)==(0|0);
      if ($63) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $62;$RP$1 = $58;
      }
     } else {
      $R$1 = $60;$RP$1 = $59;
     }
     while(1) {
      $64 = ((($R$1)) + 20|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if (!($66)) {
       $R$1 = $65;$RP$1 = $64;
       continue;
      }
      $67 = ((($R$1)) + 16|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)==(0|0);
      if ($69) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $68;$RP$1 = $67;
      }
     }
     $70 = ($RP$1$lcssa>>>0)<($2>>>0);
     if ($70) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $49 = ((($15)) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50>>>0)<($2>>>0);
     if ($51) {
      _abort();
      // unreachable;
     }
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($15|0);
     if (!($54)) {
      _abort();
      // unreachable;
     }
     $55 = ((($47)) + 8|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==($15|0);
     if ($57) {
      HEAP32[$52>>2] = $47;
      HEAP32[$55>>2] = $50;
      $R$3 = $47;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $71 = ($45|0)==(0|0);
   if ($71) {
    $p$1 = $15;$psize$1 = $16;
   } else {
    $72 = ((($15)) + 28|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (5944 + ($73<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($15|0)==($75|0);
    if ($76) {
     HEAP32[$74>>2] = $R$3;
     $cond20 = ($R$3|0)==(0|0);
     if ($cond20) {
      $77 = 1 << $73;
      $78 = $77 ^ -1;
      $79 = HEAP32[(5644)>>2]|0;
      $80 = $79 & $78;
      HEAP32[(5644)>>2] = $80;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    } else {
     $81 = HEAP32[(5656)>>2]|0;
     $82 = ($45>>>0)<($81>>>0);
     if ($82) {
      _abort();
      // unreachable;
     }
     $83 = ((($45)) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)==($15|0);
     if ($85) {
      HEAP32[$83>>2] = $R$3;
     } else {
      $86 = ((($45)) + 20|0);
      HEAP32[$86>>2] = $R$3;
     }
     $87 = ($R$3|0)==(0|0);
     if ($87) {
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
    $88 = HEAP32[(5656)>>2]|0;
    $89 = ($R$3>>>0)<($88>>>0);
    if ($89) {
     _abort();
     // unreachable;
    }
    $90 = ((($R$3)) + 24|0);
    HEAP32[$90>>2] = $45;
    $91 = ((($15)) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(0|0);
    do {
     if (!($93)) {
      $94 = ($92>>>0)<($88>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = ((($R$3)) + 16|0);
       HEAP32[$95>>2] = $92;
       $96 = ((($92)) + 24|0);
       HEAP32[$96>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $97 = ((($91)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$1 = $15;$psize$1 = $16;
    } else {
     $100 = HEAP32[(5656)>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = ((($R$3)) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = ((($98)) + 24|0);
      HEAP32[$103>>2] = $R$3;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
   }
  } else {
   $p$1 = $1;$psize$1 = $8;
  }
 } while(0);
 $112 = ($p$1>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $113 = ((($9)) + 4|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[(5664)>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[(5652)>>2]|0;
   $122 = (($121) + ($psize$1))|0;
   HEAP32[(5652)>>2] = $122;
   HEAP32[(5664)>>2] = $p$1;
   $123 = $122 | 1;
   $124 = ((($p$1)) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[(5660)>>2]|0;
   $126 = ($p$1|0)==($125|0);
   if (!($126)) {
    return;
   }
   HEAP32[(5660)>>2] = 0;
   HEAP32[(5648)>>2] = 0;
   return;
  }
  $127 = HEAP32[(5660)>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[(5648)>>2]|0;
   $130 = (($129) + ($psize$1))|0;
   HEAP32[(5648)>>2] = $130;
   HEAP32[(5660)>>2] = $p$1;
   $131 = $130 | 1;
   $132 = ((($p$1)) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$1) + ($130)|0);
   HEAP32[$133>>2] = $130;
   return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$1))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = ((($9)) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($9)) + 12|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = (5680 + ($142<<2)|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[(5656)>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = ((($139)) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[1410]|0;
     $154 = $153 & $152;
     HEAP32[1410] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre40 = ((($141)) + 8|0);
     $$pre$phi41Z2D = $$pre40;
    } else {
     $156 = HEAP32[(5656)>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = ((($141)) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi41Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = ((($139)) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi41Z2D>>2] = $139;
   } else {
    $162 = ((($9)) + 24|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ((($9)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $177 = ((($9)) + 16|0);
      $178 = ((($177)) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)==(0|0);
      if ($180) {
       $181 = HEAP32[$177>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R8$3 = 0;
        break;
       } else {
        $R8$1 = $181;$RP10$1 = $177;
       }
      } else {
       $R8$1 = $179;$RP10$1 = $178;
      }
      while(1) {
       $183 = ((($R8$1)) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R8$1 = $184;$RP10$1 = $183;
        continue;
       }
       $186 = ((($R8$1)) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        $R8$1$lcssa = $R8$1;$RP10$1$lcssa = $RP10$1;
        break;
       } else {
        $R8$1 = $187;$RP10$1 = $186;
       }
      }
      $189 = HEAP32[(5656)>>2]|0;
      $190 = ($RP10$1$lcssa>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP10$1$lcssa>>2] = 0;
       $R8$3 = $R8$1$lcssa;
       break;
      }
     } else {
      $167 = ((($9)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[(5656)>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = ((($168)) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = ((($165)) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R8$3 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $192 = ((($9)) + 28|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (5944 + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R8$3;
      $cond21 = ($R8$3|0)==(0|0);
      if ($cond21) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[(5644)>>2]|0;
       $200 = $199 & $198;
       HEAP32[(5644)>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[(5656)>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = ((($163)) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R8$3;
      } else {
       $206 = ((($163)) + 20|0);
       HEAP32[$206>>2] = $R8$3;
      }
      $207 = ($R8$3|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[(5656)>>2]|0;
     $209 = ($R8$3>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = ((($R8$3)) + 24|0);
     HEAP32[$210>>2] = $163;
     $211 = ((($9)) + 16|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = ($212>>>0)<($208>>>0);
       if ($214) {
        _abort();
        // unreachable;
       } else {
        $215 = ((($R8$3)) + 16|0);
        HEAP32[$215>>2] = $212;
        $216 = ((($212)) + 24|0);
        HEAP32[$216>>2] = $R8$3;
        break;
       }
      }
     } while(0);
     $217 = ((($211)) + 4|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = ($218|0)==(0|0);
     if (!($219)) {
      $220 = HEAP32[(5656)>>2]|0;
      $221 = ($218>>>0)<($220>>>0);
      if ($221) {
       _abort();
       // unreachable;
      } else {
       $222 = ((($R8$3)) + 20|0);
       HEAP32[$222>>2] = $218;
       $223 = ((($218)) + 24|0);
       HEAP32[$223>>2] = $R8$3;
       break;
      }
     }
    }
   }
  } while(0);
  $224 = $135 | 1;
  $225 = ((($p$1)) + 4|0);
  HEAP32[$225>>2] = $224;
  $226 = (($p$1) + ($135)|0);
  HEAP32[$226>>2] = $135;
  $227 = HEAP32[(5660)>>2]|0;
  $228 = ($p$1|0)==($227|0);
  if ($228) {
   HEAP32[(5648)>>2] = $135;
   return;
  } else {
   $psize$2 = $135;
  }
 } else {
  $229 = $114 & -2;
  HEAP32[$113>>2] = $229;
  $230 = $psize$1 | 1;
  $231 = ((($p$1)) + 4|0);
  HEAP32[$231>>2] = $230;
  $232 = (($p$1) + ($psize$1)|0);
  HEAP32[$232>>2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $233 = $psize$2 >>> 3;
 $234 = ($psize$2>>>0)<(256);
 if ($234) {
  $235 = $233 << 1;
  $236 = (5680 + ($235<<2)|0);
  $237 = HEAP32[1410]|0;
  $238 = 1 << $233;
  $239 = $237 & $238;
  $240 = ($239|0)==(0);
  if ($240) {
   $241 = $237 | $238;
   HEAP32[1410] = $241;
   $$pre = ((($236)) + 8|0);
   $$pre$phiZ2D = $$pre;$F18$0 = $236;
  } else {
   $242 = ((($236)) + 8|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = HEAP32[(5656)>>2]|0;
   $245 = ($243>>>0)<($244>>>0);
   if ($245) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $242;$F18$0 = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$1;
  $246 = ((($F18$0)) + 12|0);
  HEAP32[$246>>2] = $p$1;
  $247 = ((($p$1)) + 8|0);
  HEAP32[$247>>2] = $F18$0;
  $248 = ((($p$1)) + 12|0);
  HEAP32[$248>>2] = $236;
  return;
 }
 $249 = $psize$2 >>> 8;
 $250 = ($249|0)==(0);
 if ($250) {
  $I20$0 = 0;
 } else {
  $251 = ($psize$2>>>0)>(16777215);
  if ($251) {
   $I20$0 = 31;
  } else {
   $252 = (($249) + 1048320)|0;
   $253 = $252 >>> 16;
   $254 = $253 & 8;
   $255 = $249 << $254;
   $256 = (($255) + 520192)|0;
   $257 = $256 >>> 16;
   $258 = $257 & 4;
   $259 = $258 | $254;
   $260 = $255 << $258;
   $261 = (($260) + 245760)|0;
   $262 = $261 >>> 16;
   $263 = $262 & 2;
   $264 = $259 | $263;
   $265 = (14 - ($264))|0;
   $266 = $260 << $263;
   $267 = $266 >>> 15;
   $268 = (($265) + ($267))|0;
   $269 = $268 << 1;
   $270 = (($268) + 7)|0;
   $271 = $psize$2 >>> $270;
   $272 = $271 & 1;
   $273 = $272 | $269;
   $I20$0 = $273;
  }
 }
 $274 = (5944 + ($I20$0<<2)|0);
 $275 = ((($p$1)) + 28|0);
 HEAP32[$275>>2] = $I20$0;
 $276 = ((($p$1)) + 16|0);
 $277 = ((($p$1)) + 20|0);
 HEAP32[$277>>2] = 0;
 HEAP32[$276>>2] = 0;
 $278 = HEAP32[(5644)>>2]|0;
 $279 = 1 << $I20$0;
 $280 = $278 & $279;
 $281 = ($280|0)==(0);
 do {
  if ($281) {
   $282 = $278 | $279;
   HEAP32[(5644)>>2] = $282;
   HEAP32[$274>>2] = $p$1;
   $283 = ((($p$1)) + 24|0);
   HEAP32[$283>>2] = $274;
   $284 = ((($p$1)) + 12|0);
   HEAP32[$284>>2] = $p$1;
   $285 = ((($p$1)) + 8|0);
   HEAP32[$285>>2] = $p$1;
  } else {
   $286 = HEAP32[$274>>2]|0;
   $287 = ($I20$0|0)==(31);
   $288 = $I20$0 >>> 1;
   $289 = (25 - ($288))|0;
   $290 = $287 ? 0 : $289;
   $291 = $psize$2 << $290;
   $K21$0 = $291;$T$0 = $286;
   while(1) {
    $292 = ((($T$0)) + 4|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = $293 & -8;
    $295 = ($294|0)==($psize$2|0);
    if ($295) {
     $T$0$lcssa = $T$0;
     label = 130;
     break;
    }
    $296 = $K21$0 >>> 31;
    $297 = (((($T$0)) + 16|0) + ($296<<2)|0);
    $298 = $K21$0 << 1;
    $299 = HEAP32[$297>>2]|0;
    $300 = ($299|0)==(0|0);
    if ($300) {
     $$lcssa = $297;$T$0$lcssa48 = $T$0;
     label = 127;
     break;
    } else {
     $K21$0 = $298;$T$0 = $299;
    }
   }
   if ((label|0) == 127) {
    $301 = HEAP32[(5656)>>2]|0;
    $302 = ($$lcssa>>>0)<($301>>>0);
    if ($302) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$$lcssa>>2] = $p$1;
     $303 = ((($p$1)) + 24|0);
     HEAP32[$303>>2] = $T$0$lcssa48;
     $304 = ((($p$1)) + 12|0);
     HEAP32[$304>>2] = $p$1;
     $305 = ((($p$1)) + 8|0);
     HEAP32[$305>>2] = $p$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $306 = ((($T$0$lcssa)) + 8|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = HEAP32[(5656)>>2]|0;
    $309 = ($307>>>0)>=($308>>>0);
    $not$ = ($T$0$lcssa>>>0)>=($308>>>0);
    $310 = $309 & $not$;
    if ($310) {
     $311 = ((($307)) + 12|0);
     HEAP32[$311>>2] = $p$1;
     HEAP32[$306>>2] = $p$1;
     $312 = ((($p$1)) + 8|0);
     HEAP32[$312>>2] = $307;
     $313 = ((($p$1)) + 12|0);
     HEAP32[$313>>2] = $T$0$lcssa;
     $314 = ((($p$1)) + 24|0);
     HEAP32[$314>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $315 = HEAP32[(5672)>>2]|0;
 $316 = (($315) + -1)|0;
 HEAP32[(5672)>>2] = $316;
 $317 = ($316|0)==(0);
 if ($317) {
  $sp$0$in$i = (6096);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $318 = ($sp$0$i|0)==(0|0);
  $319 = ((($sp$0$i)) + 8|0);
  if ($318) {
   break;
  } else {
   $sp$0$in$i = $319;
  }
 }
 HEAP32[(5672)>>2] = -1;
 return;
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0 | 0, tempRet0 ^ $7$1 | 0, $7$0 | 0, $7$1 | 0) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0 | 0, HEAP32[$rem + 4 >> 2] ^ $1$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&511](a1|0,a2|0,a3|0)|0;
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&511]()|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&511](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&511](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&511](a1|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&511](a1|0,a2|0)|0;
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1() {
 ; nullFunc_i(1);return 0;
}
function b2(p0) {
 p0 = p0|0; nullFunc_vi(2);
}
function b3(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(3);
}
function b4(p0) {
 p0 = p0|0; nullFunc_ii(4);return 0;
}
function b5(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(5);return 0;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,___stdout_write,___stdio_seek,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,___stdio_write,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_i = [b1,b1,_mu_sys_key_dis,_mu_sys_bfn_dis,_mu_sys_tbl_dis,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_mu_true_key_def,_mu_true_def,_mu_inf_key_def
,_mu_inf_def,_mu_e_key_def,_mu_e_def,_mu_pi_key_def,_mu_pi_def,_mu_num_key_def,_mu_num_def,_mu_str_key_def,_mu_str_def,_mu_tbl_key_def,_mu_tbl_def,_mu_fn_key_def,_mu_fn_def,_mu_not_key_def,_mu_not_def,_mu_eq_key_def,_mu_eq_def,_mu_neq_key_def,_mu_neq_def,_mu_is_key_def,_mu_is_def,_mu_lt_key_def,_mu_lt_def,_mu_lte_key_def,_mu_lte_def,_mu_gt_key_def,_mu_gt_def,_mu_gte_key_def,_mu_gte_def,_mu_add_key_def
,_mu_add_def,_mu_sub_key_def,_mu_sub_def,_mu_mul_key_def,_mu_mul_def,_mu_div_key_def,_mu_div_def,_mu_abs_key_def,_mu_abs_def,_mu_floor_key_def,_mu_floor_def,_mu_ceil_key_def,_mu_ceil_def,_mu_idiv_key_def,_mu_idiv_def,_mu_mod_key_def,_mu_mod_def,_mu_pow_key_def,_mu_pow_def,_mu_log_key_def,_mu_log_def,_mu_cos_key_def,_mu_cos_def,_mu_acos_key_def,_mu_acos_def,_mu_sin_key_def,_mu_sin_def,_mu_asin_key_def,_mu_asin_def,_mu_tan_key_def
,_mu_tan_def,_mu_atan_key_def,_mu_atan_def,_mu_and_key_def,_mu_and_def,_mu_or_key_def,_mu_or_def,_mu_xor_key_def,_mu_xor_def,_mu_diff_key_def,_mu_diff_def,_mu_shl_key_def,_mu_shl_def,_mu_shr_key_def,_mu_shr_def,_mu_parse_key_def,_mu_parse_def,_mu_repr_key_def,_mu_repr_def,_mu_ord_key_def,_mu_ord_def,_mu_chr_key_def,_mu_chr_def,_mu_bin_key_def,_mu_bin_def,_mu_oct_key_def,_mu_oct_def,_mu_hex_key_def,_mu_hex_def,_mu_len_key_def
,_mu_len_def,_mu_tail_key_def,_mu_tail_def,_mu_const_key_def,_mu_const_def,_mu_push_key_def,_mu_push_def,_mu_pop_key_def,_mu_pop_def,_mu_concat_key_def,_mu_concat_def,_mu_subset_key_def,_mu_subset_def,_mu_find_key_def,_mu_find_def,_mu_replace_key_def,_mu_replace_def,_mu_split_key_def,_mu_split_def,_mu_join_key_def,_mu_join_def,_mu_pad_key_def,_mu_pad_def,_mu_strip_key_def,_mu_strip_def,_mu_bind_key_def,_mu_bind_def,_mu_comp_key_def,_mu_comp_def,_mu_map_key_def
,_mu_map_def,_mu_filter_key_def,_mu_filter_def,_mu_reduce_key_def,_mu_reduce_def,_mu_any_key_def,_mu_any_def,_mu_all_key_def,_mu_all_def,_mu_iter_key_def,_mu_iter_def,_mu_pairs_key_def,_mu_pairs_def,_mu_range_key_def,_mu_range_def,_mu_repeat_key_def,_mu_repeat_def,_mu_random_key_def,_mu_random_def,_mu_zip_key_def,_mu_zip_def,_mu_chain_key_def,_mu_chain_def,_mu_take_key_def,_mu_take_def,_mu_drop_key_def,_mu_drop_def,_mu_min_key_def,_mu_min_def,_mu_max_key_def
,_mu_max_def,_mu_reverse_key_def,_mu_reverse_def,_mu_sort_key_def,_mu_sort_def,_mu_error_key_def,_mu_error_def,_mu_print_key_def,_mu_print_def,_mu_import_key_def,_mu_import_def,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_mu_kw_let_def,_mu_tok_let_def,_mu_kw_else_def,_mu_tok_else_def,_mu_kw_and_def,_mu_tok_and_def,_mu_kw_or_def
,_mu_tok_or_def,_mu_kw_continue_def,_mu_tok_cont_def,_mu_kw_break_def,_mu_tok_break_def,_mu_kw_return_def,_mu_tok_return_def,_mu_kw_fn_def,_mu_tok_fn_def,_mu_kw_type_def,_mu_tok_type_def,_mu_kw_if_def,_mu_tok_if_def,_mu_kw_while_def,_mu_tok_while_def,_mu_kw_for_def,_mu_tok_for_def,_mu_kw_nil_def,_mu_tok_nil_def,_mu_kw_nil2_def,_mu_kw_assign_def,_mu_tok_assign_def,_mu_kw_pair_def,_mu_tok_pair_def,_mu_kw_dot_def,_mu_tok_dot_def,_mu_kw_arrow_def,_mu_tok_arrow_def,_mu_kw_expand_def,_mu_tok_expand_def
,_mu_cdata_key_def,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_vi = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_mu_code_destroy,b2,_cleanup,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_vii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_emit,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_ii = [b4,_mu_bfn_dis,b4,b4,b4,_mu_error_bfn,_mu_print_bfn,_mu_import_bfn,_mu_not_bfn,_mu_eq_bfn,_mu_neq_bfn,_mu_lt_bfn,b4,b4,_mu_lte_bfn,_mu_gt_bfn,_mu_gte_bfn,_mu_is_bfn,_mu_parse_bfn,_mu_repr_bfn,_mu_ord_bfn,_mu_chr_bfn,_mu_bin_bfn,_mu_oct_bfn,_mu_hex_bfn,_mu_len_bfn,_mu_tail_bfn,_mu_const_bfn,_mu_concat_bfn
,_mu_subset_bfn,_mu_push_bfn,_mu_pop_bfn,_mu_and_bfn,_mu_or_bfn,_mu_xor_bfn,_mu_diff_bfn,_mu_iter_bfn,_mu_str_iter,_mu_tbl_iter,_mu_fn_iter,_mu_pairs_bfn,_mu_range_bfn,_mu_zip_bfn,_mu_map_bfn,_mu_filter_bfn,_mu_reduce_bfn,_mu_any_bfn,_mu_all_bfn,_mu_repeat_bfn,_mu_chain_bfn,_mu_take_bfn,_mu_drop_bfn,_mu_min_bfn,_mu_max_bfn,_mu_reverse_bfn,_mu_sort_bfn,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_mu_str_bfn,_mu_find_bfn,_mu_replace_bfn,_mu_split_bfn,_mu_join_bfn,_mu_pad_bfn,_mu_strip_bfn,_mu_id_bfn,_mu_fn_bfn,_mu_bind_bfn,_mu_comp_bfn,_mu_tbl_bfn,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,_mu_num_bfn,_mu_add_bfn,_mu_sub_bfn,_mu_mul_bfn,_mu_div_bfn,_mu_abs_bfn,_mu_floor_bfn,_mu_ceil_bfn,_mu_idiv_bfn,_mu_mod_bfn,_mu_pow_bfn,_mu_log_bfn,_mu_cos_bfn,_mu_acos_bfn,_mu_sin_bfn,_mu_asin_bfn,_mu_tan_bfn,_mu_atan_bfn,_mu_shl_bfn,_mu_shr_bfn,_mu_num_random,___stdio_close,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4];
var FUNCTION_TABLE_iii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_mu_num_cmp,_mu_str_cmp,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_mu_range_step_bfn,_mu_zip_step_bfn,_mu_map_step_bfn,_mu_filter_step_bfn,_mu_repeat_step_bfn
,_mu_chain_step_bfn,_mu_take_count_step_bfn,_mu_take_while_step_bfn,_mu_drop_count_step_bfn,_mu_drop_while_step_bfn,_mu_reverse_step_bfn,_mu_sort_step_bfn,_mu_str_step,_mu_str_split_step,_mu_fn_bound,_mu_fn_composed,_mu_tbl_iter_step,_mu_tbl_pairs_step,b5,b5,_mu_num_randomstep,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];

  return { _i64Subtract: _i64Subtract, _free: _free, _i64Add: _i64Add, _memmove: _memmove, _memset: _memset, _mu_repl: _mu_repl, _malloc: _malloc, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _fflush: _fflush, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__mu_repl = asm["_mu_repl"]; asm["_mu_repl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__mu_repl.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _mu_repl = Module["_mu_repl"] = asm["_mu_repl"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===




function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



